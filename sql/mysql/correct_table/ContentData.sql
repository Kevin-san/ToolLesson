delete from Content;
insert into Content values(1,1,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 简介',' <span class="color_h1">  Linux </span> 简介',0,'alvin',curdate());
insert into Content values(2,1,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(3,1,'p',3,'{}','Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。','Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。',0,'alvin',curdate());
insert into Content values(4,1,'p',4,'{}','Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。','Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。',0,'alvin',curdate());
insert into Content values(5,1,'p',5,'{}','Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。','Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。',0,'alvin',curdate());
insert into Content values(6,1,'line',6,'{}','','',0,'alvin',curdate());
insert into Content values(7,1,'h2',7,'{}','Linux 的发行版','Linux 的发行版',0,'alvin',curdate());
insert into Content values(8,1,'p',8,'{}','Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。','Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。',0,'alvin',curdate());
insert into Content values(9,1,'image',9,'{"src": "/static/img/linux/linux_intro.jpg"}','/static/img/linux/linux_intro.jpg','/static/img/linux/linux_intro.jpg',0,'alvin',curdate());
insert into Content values(10,1,'p',10,'{}','目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。','目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。',0,'alvin',curdate());
insert into Content values(11,1,'image',11,'{"src": "/static/img/linux/linux_systems.jpg"}','/static/img/linux/linux_systems.jpg','/static/img/linux/linux_systems.jpg',0,'alvin',curdate());
insert into Content values(12,1,'line',12,'{}','','',0,'alvin',curdate());
insert into Content values(13,1,'h2',13,'{}','Linux 应用领域','Linux 应用领域',0,'alvin',curdate());
insert into Content values(14,1,'p',14,'{}','今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。','今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。',0,'alvin',curdate());
insert into Content values(15,1,'p',15,'{}','目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。','目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。',0,'alvin',curdate());
insert into Content values(16,1,'ul',16,'{}','巴西联邦政府由于支持 Linux 而世界闻名。
有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。
印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。
中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。
 在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。
葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。
法国和德国同样开始逐步采用 Linux。','巴西联邦政府由于支持 Linux 而世界闻名。
有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。
印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。
中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。
 在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。
葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。
法国和德国同样开始逐步采用 Linux。',0,'alvin',curdate());
insert into Content values(17,1,'line',17,'{}','','',0,'alvin',curdate());
insert into Content values(18,1,'h2',18,'{}','Linux vs Windows','Linux vs Windows',0,'alvin',curdate());
insert into Content values(19,1,'p',19,'{}','目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下','目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下',0,'alvin',curdate());
insert into Content values(20,1,'table',20,'{"class": ["table", "table-bordered", "table-striped"]}','比较	Windows	Linux
界面	界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同	图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。
驱动程序	驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。	由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。
使用	使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。	图形界面使用简单，容易入门。文字界面，需要学习才能掌握。
学习	系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。	系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。
软件	每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。	大部分软件都可以自由获取，同样功能的软件选择较少。','比较	Windows	Linux
界面	界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同	图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。
驱动程序	驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。	由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。
使用	使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。	图形界面使用简单，容易入门。文字界面，需要学习才能掌握。
学习	系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。	系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。
软件	每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。	大部分软件都可以自由获取，同样功能的软件选择较少。',0,'alvin',curdate());
insert into Content values(21,1,'line',21,'{}','','',0,'alvin',curdate());
insert into Content values(22,1,'h2',22,'{}','Linux的开源共享精神','Linux的开源共享精神',0,'alvin',curdate());
insert into Content values(23,1,'p',23,'{}','开源软件最重要的特性如下：','开源软件最重要的特性如下：',0,'alvin',curdate());
insert into Content values(24,1,'table',24,'{"class": ["table", "table-bordered", "table-striped"]}','特性	内容
低风险	使用闭源软件无疑把命运交付给他人，一旦封闭的源代码没有人来维护，你将进退维谷；而且相较于商业软件公司，开源社区很少存在倒闭的问题。
高品质	相较于闭源软件公司，开源项目通常是由开源社区来研发及维护，参与编写、维护、测试的用户量众多，一般的bug还没有等爆发就已经被修补。
低成本	开源工作者都是在幕后默默且无偿地付出劳动成果，为美好的世界贡献一份力量，因此使用开源社区推动的软件项目可以节省大量的人力、物力和财力。
更透明	没有哪个笨蛋会把木马、后门等放到开放的源代码中，这样无疑是把自己的罪行暴露在阳光下。','特性	内容
低风险	使用闭源软件无疑把命运交付给他人，一旦封闭的源代码没有人来维护，你将进退维谷；而且相较于商业软件公司，开源社区很少存在倒闭的问题。
高品质	相较于闭源软件公司，开源项目通常是由开源社区来研发及维护，参与编写、维护、测试的用户量众多，一般的bug还没有等爆发就已经被修补。
低成本	开源工作者都是在幕后默默且无偿地付出劳动成果，为美好的世界贡献一份力量，因此使用开源社区推动的软件项目可以节省大量的人力、物力和财力。
更透明	没有哪个笨蛋会把木马、后门等放到开放的源代码中，这样无疑是把自己的罪行暴露在阳光下。',0,'alvin',curdate());
insert into Content values(25,1,'h2',25,'{}','常用开源软件协议','常用开源软件协议',0,'alvin',curdate());
insert into Content values(26,1,'ul',26,'{}','GNU GPL( GNU General Public License, GNU通用许可证)
BSD (Berkeley Software Distribution, 伯克利软件发布版) 许可协议
Apache 许可证版本(Apache License Version)许可协议
MPL (Mozilla Public License, Mozilla公共许可)许可协议
MIT (Massachusetts Institute of Technology)许可协议','GNU GPL( GNU General Public License, GNU通用许可证)
BSD (Berkeley Software Distribution, 伯克利软件发布版) 许可协议
Apache 许可证版本(Apache License Version)许可协议
MPL (Mozilla Public License, Mozilla公共许可)许可协议
MIT (Massachusetts Institute of Technology)许可协议',0,'alvin',curdate());
insert into Content values(27,2,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 部署安装',' <span class="color_h1">  Linux </span> 部署安装',0,'alvin',curdate());
insert into Content values(28,2,'p',2,'{}','本章节我们将为大家介绍 Linux 的安装。','本章节我们将为大家介绍 Linux 的安装。',0,'alvin',curdate());
insert into Content values(29,2,'p',3,'{}','本章节以 Centos6.4 与Centos7 为例。','本章节以 Centos6.4 与Centos7 为例。',0,'alvin',curdate());
insert into Content values(30,2,'p',4,'{}','接下来你需要将下载的Linux系统刻录成光盘或U盘或使用VMware虚拟机安装ISO文件。','接下来你需要将下载的Linux系统刻录成光盘或U盘或使用VMware虚拟机安装ISO文件。',0,'alvin',curdate());
insert into Content values(31,2,'p',5,'{}','Centos 下载地址：','Centos 下载地址：',0,'alvin',curdate());
insert into Content values(32,2,'p',6,'{}',' 可以去官网下载最新版本： <a href="https://www.centos.org/download/" rel="noopener noreferrer" target="_blank">  https://www.centos.org/download/ </a>',' 可以去官网下载最新版本： <a href="https://www.centos.org/download/" rel="noopener noreferrer" target="_blank">  https://www.centos.org/download/ </a>',0,'alvin',curdate());
insert into Content values(33,2,'image',7,'{"src": "/static/img/linux/linux_install.jpg"}','/static/img/linux/linux_install.jpg','/static/img/linux/linux_install.jpg',0,'alvin',curdate());
insert into Content values(34,2,'blockquote',8,'{}',' <p>  BOLD[   注：  ]BOLD  建议安装64位Linux系统。 </p> <p>  旧版本下载地址：  <a href="https://wiki.centos.org/Download" rel="noopener noreferrer" target="_blank">   https://wiki.centos.org/Download  </a> </p>',' <p>  BOLD[   注：  ]BOLD  建议安装64位Linux系统。 </p> <p>  旧版本下载地址：  <a href="https://wiki.centos.org/Download" rel="noopener noreferrer" target="_blank">   https://wiki.centos.org/Download  </a> </p>',0,'alvin',curdate());
insert into Content values(35,2,'line',9,'{}','','',0,'alvin',curdate());
insert into Content values(36,2,'h2',10,'{}','常用查看系统命令','常用查看系统命令',0,'alvin',curdate());
insert into Content values(37,2,'h3',11,'{}','1、查看系统版本','1、查看系统版本',0,'alvin',curdate());
insert into Content values(38,2,'pre',12,'{"class": ["prettyprint", "lang-bash"]}','cat /etc/centos.release','cat /etc/centos.release',0,'alvin',curdate());
insert into Content values(39,2,'pre',13,'{"class": ["prettyprint", "lang-bash"]}','cat /etc/redhat.release','cat /etc/redhat.release',0,'alvin',curdate());
insert into Content values(40,2,'line',14,'{}','','',0,'alvin',curdate());
insert into Content values(41,2,'h2',15,'{}','Window上安装VMware虚拟机','Window上安装VMware虚拟机',0,'alvin',curdate());
insert into Content values(42,2,'p',16,'{}','1、首先，运行下载完成的 Vmware Workstation 虚拟机软件包，    将会看到如图所示的虚拟机程序安装向导初始界面。','1、首先，运行下载完成的 Vmware Workstation 虚拟机软件包，    将会看到如图所示的虚拟机程序安装向导初始界面。',0,'alvin',curdate());
insert into Content values(43,2,'image',17,'{"alt": "image001", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_001.png", "width": "576"}','/static/img/linux/linux_vm_install_img_001.png','/static/img/linux/linux_vm_install_img_001.png',0,'alvin',curdate());
insert into Content values(44,2,'p',18,'{}','2、在虚拟机软件的安装向导界面单击"下一步"按钮','2、在虚拟机软件的安装向导界面单击"下一步"按钮',0,'alvin',curdate());
insert into Content values(45,2,'image',19,'{"alt": "image002", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_002.png", "width": "576"}','/static/img/linux/linux_vm_install_img_002.png','/static/img/linux/linux_vm_install_img_002.png',0,'alvin',curdate());
insert into Content values(46,2,'p',20,'{}','3、在最终用户许可协议界面选中"我接受的条款"复框，然后单击下一步按钮','3、在最终用户许可协议界面选中"我接受的条款"复框，然后单击下一步按钮',0,'alvin',curdate());
insert into Content values(47,2,'image',21,'{"alt": "image003", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_003.png", "width": "576"}','/static/img/linux/linux_vm_install_img_003.png','/static/img/linux/linux_vm_install_img_003.png',0,'alvin',curdate());
insert into Content values(48,2,'p',22,'{}','4、选择虚拟机软件的安装位置（可默认），中"增强型键盘驱动程序"复框后单击"下一步"按钮','4、选择虚拟机软件的安装位置（可默认），中"增强型键盘驱动程序"复框后单击"下一步"按钮',0,'alvin',curdate());
insert into Content values(49,2,'image',23,'{"alt": "image004", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_004.png", "width": "576"}','/static/img/linux/linux_vm_install_img_004.png','/static/img/linux/linux_vm_install_img_004.png',0,'alvin',curdate());
insert into Content values(50,2,'p',24,'{}','5、根据自身情况适当选择"启动时检查产品更新"与帮助完善 根据自身情况适当选择“启动时检查产品更新”与帮助完善VMware Workstation Pro”复选框，然后单击“下一步”按钮','5、根据自身情况适当选择"启动时检查产品更新"与帮助完善 根据自身情况适当选择“启动时检查产品更新”与帮助完善VMware Workstation Pro”复选框，然后单击“下一步”按钮',0,'alvin',curdate());
insert into Content values(51,2,'image',25,'{"alt": "image005", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_005.png", "width": "576"}','/static/img/linux/linux_vm_install_img_005.png','/static/img/linux/linux_vm_install_img_005.png',0,'alvin',curdate());
insert into Content values(52,2,'p',26,'{}','6、选中"桌面"和"开始菜单程序文件夹"复框，然后击下一步按钮','6、选中"桌面"和"开始菜单程序文件夹"复框，然后击下一步按钮',0,'alvin',curdate());
insert into Content values(53,2,'image',27,'{"alt": "image006", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_006.png", "width": "576"}','/static/img/linux/linux_vm_install_img_006.png','/static/img/linux/linux_vm_install_img_006.png',0,'alvin',curdate());
insert into Content values(54,2,'p',28,'{}','7、一切准备就绪后，单击"安装"按钮','7、一切准备就绪后，单击"安装"按钮',0,'alvin',curdate());
insert into Content values(55,2,'image',29,'{"alt": "image007", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_007.png", "width": "576"}','/static/img/linux/linux_vm_install_img_007.png','/static/img/linux/linux_vm_install_img_007.png',0,'alvin',curdate());
insert into Content values(56,2,'p',30,'{}','8、进入安装过程，此时要做的就是耐心等待虚拟机软件结束','8、进入安装过程，此时要做的就是耐心等待虚拟机软件结束',0,'alvin',curdate());
insert into Content values(57,2,'image',31,'{"alt": "image008", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_008.png", "width": "576"}','/static/img/linux/linux_vm_install_img_008.png','/static/img/linux/linux_vm_install_img_008.png',0,'alvin',curdate());
insert into Content values(58,2,'p',32,'{}','9、大约 5～10分钟后，虚拟机软件便会安装完成，然后再次单击"完成"按钮','9、大约 5～10分钟后，虚拟机软件便会安装完成，然后再次单击"完成"按钮',0,'alvin',curdate());
insert into Content values(59,2,'image',33,'{"alt": "image009", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_009.png", "width": "576"}','/static/img/linux/linux_vm_install_img_009.png','/static/img/linux/linux_vm_install_img_009.png',0,'alvin',curdate());
insert into Content values(60,2,'p',34,'{}','10、双击桌面上生成的虚拟机快捷图标，在弹出的界面，输入许可证密钥，或者选择试用之后，单击"继续"按钮（这里选择的是"我希望VMware Workstation 12 30天"复选框）。','10、双击桌面上生成的虚拟机快捷图标，在弹出的界面，输入许可证密钥，或者选择试用之后，单击"继续"按钮（这里选择的是"我希望VMware Workstation 12 30天"复选框）。',0,'alvin',curdate());
insert into Content values(61,2,'image',35,'{"alt": "image010", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_010.png", "width": "576"}','/static/img/linux/linux_vm_install_img_010.png','/static/img/linux/linux_vm_install_img_010.png',0,'alvin',curdate());
insert into Content values(62,2,'p',36,'{}','11、在出现"欢迎使用 VMware Workstation 12"界面后，单击"完成按钮"。','11、在出现"欢迎使用 VMware Workstation 12"界面后，单击"完成按钮"。',0,'alvin',curdate());
insert into Content values(63,2,'image',37,'{"alt": "image011", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_011.png", "width": "576"}','/static/img/linux/linux_vm_install_img_011.png','/static/img/linux/linux_vm_install_img_011.png',0,'alvin',curdate());
insert into Content values(64,2,'p',38,'{}','12、在桌面上再次双击快捷方式，此时便看到了虚拟机软件的管理界面。','12、在桌面上再次双击快捷方式，此时便看到了虚拟机软件的管理界面。',0,'alvin',curdate());
insert into Content values(65,2,'em',39,'{}','注意，在安装完虚拟机之后，不能立即安装Linux系统，因为还要在虚拟机内设置操作系统的硬件标准。只有把虚拟机内资源模出来后才可以正式步入Linux系统安装之旅。VM虚拟机的强大之处在于不仅可以调取真实的物理设备资源，还可以模拟出多网卡或硬盘等资源，因此完全可以满足大家对学习环境的需求，再次强调，真的不用特意购买电脑。','注意，在安装完虚拟机之后，不能立即安装Linux系统，因为还要在虚拟机内设置操作系统的硬件标准。只有把虚拟机内资源模出来后才可以正式步入Linux系统安装之旅。VM虚拟机的强大之处在于不仅可以调取真实的物理设备资源，还可以模拟出多网卡或硬盘等资源，因此完全可以满足大家对学习环境的需求，再次强调，真的不用特意购买电脑。',0,'alvin',curdate());
insert into Content values(66,2,'image',40,'{"alt": "image012", "class": ["attachment-full"], "height": "382", "src": "/static/img/linux/linux_vm_install_img_012.png", "width": "576"}','/static/img/linux/linux_vm_install_img_012.png','/static/img/linux/linux_vm_install_img_012.png',0,'alvin',curdate());
insert into Content values(67,2,'p',41,'{}','13、单击"创建新的虚拟机"选项，并在弹出的"新建虚拟机向导"界面中选择"典型"单选按钮，然后单击"下一步"按钮。','13、单击"创建新的虚拟机"选项，并在弹出的"新建虚拟机向导"界面中选择"典型"单选按钮，然后单击"下一步"按钮。',0,'alvin',curdate());
insert into Content values(68,2,'image',42,'{"alt": "image013", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_013.png", "width": "576"}','/static/img/linux/linux_vm_install_img_013.png','/static/img/linux/linux_vm_install_img_013.png',0,'alvin',curdate());
insert into Content values(69,2,'p',43,'{}','14、选中"稍后安装操作系统"单选按钮，然单击"下一步"。','14、选中"稍后安装操作系统"单选按钮，然单击"下一步"。',0,'alvin',curdate());
insert into Content values(70,2,'image',44,'{"alt": "image014", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_014.png", "width": "576"}','/static/img/linux/linux_vm_install_img_014.png','/static/img/linux/linux_vm_install_img_014.png',0,'alvin',curdate());
insert into Content values(71,2,'p',45,'{}','15、将客户机操作系统的类型选择为"Linux",版本为"Red Hat Enterprise Linux 7 64位"，然后单击“下一步”按钮。','15、将客户机操作系统的类型选择为"Linux",版本为"Red Hat Enterprise Linux 7 64位"，然后单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(72,2,'image',46,'{"alt": "image015", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_015.png", "width": "576"}','/static/img/linux/linux_vm_install_img_015.png','/static/img/linux/linux_vm_install_img_015.png',0,'alvin',curdate());
insert into Content values(73,2,'p',47,'{}','16、填写“虚拟机名称”字段，并在选择安装位置之后单击“下一步”按钮。','16、填写“虚拟机名称”字段，并在选择安装位置之后单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(74,2,'image',48,'{"alt": "image016", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_016.png", "width": "576"}','/static/img/linux/linux_vm_install_img_016.png','/static/img/linux/linux_vm_install_img_016.png',0,'alvin',curdate());
insert into Content values(75,2,'p',49,'{}','17、将虚拟机系统的“最大磁盘大小”设置为 20.0GB（默认即可），然后单击“下一步”按钮。','17、将虚拟机系统的“最大磁盘大小”设置为 20.0GB（默认即可），然后单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(76,2,'image',50,'{"alt": "image017", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_017.png", "width": "576"}','/static/img/linux/linux_vm_install_img_017.png','/static/img/linux/linux_vm_install_img_017.png',0,'alvin',curdate());
insert into Content values(77,2,'p',51,'{}','18、单击“自定义硬件”按钮。','18、单击“自定义硬件”按钮。',0,'alvin',curdate());
insert into Content values(78,2,'image',52,'{"alt": "image018", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_018.png", "width": "576"}','/static/img/linux/linux_vm_install_img_018.png','/static/img/linux/linux_vm_install_img_018.png',0,'alvin',curdate());
insert into Content values(79,2,'p',53,'{}','19、在出现的图所示的界面中，建议将虚拟机系统内存的可用量设置为 2GB，最低不应低于 1GB。如果自己的真机设备具有很强的性能，那么也建议将内存量设置为 2GB，因为将虚拟机系统的内存设置得太大没有必要。','19、在出现的图所示的界面中，建议将虚拟机系统内存的可用量设置为 2GB，最低不应低于 1GB。如果自己的真机设备具有很强的性能，那么也建议将内存量设置为 2GB，因为将虚拟机系统的内存设置得太大没有必要。',0,'alvin',curdate());
insert into Content values(80,2,'image',54,'{"alt": "image019", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_019.png", "width": "576"}','/static/img/linux/linux_vm_install_img_019.png','/static/img/linux/linux_vm_install_img_019.png',0,'alvin',curdate());
insert into Content values(81,2,'p',55,'{}','20、根据您真机的性能设置 CPU 处理器的数量以及每个处理器的核心数量，并开启虚拟化功能。','20、根据您真机的性能设置 CPU 处理器的数量以及每个处理器的核心数量，并开启虚拟化功能。',0,'alvin',curdate());
insert into Content values(82,2,'image',56,'{"alt": "image020", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_020.png", "width": "576"}','/static/img/linux/linux_vm_install_img_020.png','/static/img/linux/linux_vm_install_img_020.png',0,'alvin',curdate());
insert into Content values(83,2,'p',57,'{}','21、光驱设备此时应在“使用 ISO 镜像文件”中选中了下载好的 RHEL 系统镜像文件。','21、光驱设备此时应在“使用 ISO 镜像文件”中选中了下载好的 RHEL 系统镜像文件。',0,'alvin',curdate());
insert into Content values(84,2,'image',58,'{"alt": "image021", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_021.png", "width": "576"}','/static/img/linux/linux_vm_install_img_021.png','/static/img/linux/linux_vm_install_img_021.png',0,'alvin',curdate());
insert into Content values(85,2,'p',59,'{}','22、VM 虚拟机软件为用户提供了 3 种可选的网络模式，分别为桥接模式、NAT 模式与仅主机模式。这里选择“仅主机模式”。','22、VM 虚拟机软件为用户提供了 3 种可选的网络模式，分别为桥接模式、NAT 模式与仅主机模式。这里选择“仅主机模式”。',0,'alvin',curdate());
insert into Content values(86,2,'p',60,'{}',' ➢桥接模式： 相当于在物理主机与虚拟机网卡之间架设了一座桥梁，从而可以通过物理主机的网卡访问外网。',' ➢桥接模式： 相当于在物理主机与虚拟机网卡之间架设了一座桥梁，从而可以通过物理主机的网卡访问外网。',0,'alvin',curdate());
insert into Content values(87,2,'p',61,'{}',' ➢NAT模式： 让 VM 虚拟机的网络服务发挥路由器的作用，使得通过虚拟机软件模拟的主机可以通过物理主机访问外网，在真机中 NAT 虚拟机网卡对应的物理网卡是VMnet8。 ',' ➢NAT模式： 让 VM 虚拟机的网络服务发挥路由器的作用，使得通过虚拟机软件模拟的主机可以通过物理主机访问外网，在真机中 NAT 虚拟机网卡对应的物理网卡是VMnet8。 ',0,'alvin',curdate());
insert into Content values(88,2,'p',62,'{}',' ➢仅主机模式： 仅让虚拟机内的主机与物理主机通信，不能访问外网，在真机中仅主机模式模拟网卡对应的物理网卡是 VMnet1。',' ➢仅主机模式： 仅让虚拟机内的主机与物理主机通信，不能访问外网，在真机中仅主机模式模拟网卡对应的物理网卡是 VMnet1。',0,'alvin',curdate());
insert into Content values(89,2,'image',63,'{"alt": "image022", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_022.png", "width": "576"}','/static/img/linux/linux_vm_install_img_022.png','/static/img/linux/linux_vm_install_img_022.png',0,'alvin',curdate());
insert into Content values(90,2,'p',64,'{}','23、把 USB 控制器、声卡、打印机设备等不需要的设备统统移除掉。移掉声卡后可以避免在输入错误后发出提示声音，确保自己在今后实验中思绪不被打扰。然后单击“关闭”按钮。','23、把 USB 控制器、声卡、打印机设备等不需要的设备统统移除掉。移掉声卡后可以避免在输入错误后发出提示声音，确保自己在今后实验中思绪不被打扰。然后单击“关闭”按钮。',0,'alvin',curdate());
insert into Content values(91,2,'image',65,'{"alt": "image023", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_023.png", "width": "576"}','/static/img/linux/linux_vm_install_img_023.png','/static/img/linux/linux_vm_install_img_023.png',0,'alvin',curdate());
insert into Content values(92,2,'p',66,'{}','24、返回到虚拟机配置向导界面后单击“完成”按钮，如图所示。虚拟机的安装和配置顺利完成。','24、返回到虚拟机配置向导界面后单击“完成”按钮，如图所示。虚拟机的安装和配置顺利完成。',0,'alvin',curdate());
insert into Content values(93,2,'image',67,'{"alt": "image024", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_024.png", "width": "576"}','/static/img/linux/linux_vm_install_img_024.png','/static/img/linux/linux_vm_install_img_024.png',0,'alvin',curdate());
insert into Content values(94,2,'p',68,'{}','25、当看到如图所示的界面时，就说明您的虚拟机已经被配置成功了。接下来准备步入属于您的 Linux 系统之旅吧。','25、当看到如图所示的界面时，就说明您的虚拟机已经被配置成功了。接下来准备步入属于您的 Linux 系统之旅吧。',0,'alvin',curdate());
insert into Content values(95,2,'image',69,'{"alt": "image025", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_vm_install_img_025.png", "width": "576"}','/static/img/linux/linux_vm_install_img_025.png','/static/img/linux/linux_vm_install_img_025.png',0,'alvin',curdate());
insert into Content values(96,2,'line',70,'{}','','',0,'alvin',curdate());
insert into Content values(97,2,'h2',71,'{}','Linux 6.4 安装步骤','Linux 6.4 安装步骤',0,'alvin',curdate());
insert into Content values(98,2,'p',72,'{}','1、首先，使用光驱或U盘或你下载的Linux ISO文件进行安装。 ','1、首先，使用光驱或U盘或你下载的Linux ISO文件进行安装。 ',0,'alvin',curdate());
insert into Content values(99,2,'p',73,'{}','界面说明：','界面说明：',0,'alvin',curdate());
insert into Content values(100,2,'image',74,'{"alt": "image601", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_install_img_001.png", "width": "576"}','/static/img/linux/linux_install_img_001.png','/static/img/linux/linux_install_img_001.png',0,'alvin',curdate());
insert into Content values(101,2,'p',75,'{}','Install or upgrade an existing system 安装或升级现有的系统','Install or upgrade an existing system 安装或升级现有的系统',0,'alvin',curdate());
insert into Content values(102,2,'p',76,'{}','install system with basic video driver 安装过程中采用基本的显卡驱动','install system with basic video driver 安装过程中采用基本的显卡驱动',0,'alvin',curdate());
insert into Content values(103,2,'p',77,'{}','Rescue installed system 进入系统修复模式','Rescue installed system 进入系统修复模式',0,'alvin',curdate());
insert into Content values(104,2,'p',78,'{}','Boot from local drive   退出安装从硬盘启动','Boot from local drive   退出安装从硬盘启动',0,'alvin',curdate());
insert into Content values(105,2,'p',79,'{}','Memory test  内存检测','Memory test  内存检测',0,'alvin',curdate());
insert into Content values(106,2,'p',80,'{}','注：用联想E49安装时选择第一项安装时会出现屏幕显示异常的问题，后改用第二项安装时就没有出现问题','注：用联想E49安装时选择第一项安装时会出现屏幕显示异常的问题，后改用第二项安装时就没有出现问题',0,'alvin',curdate());
insert into Content values(107,2,'p',81,'{}','2、这时直接"skip"就可以了','2、这时直接"skip"就可以了',0,'alvin',curdate());
insert into Content values(108,2,'image',82,'{"alt": "image602", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install_img_002.png", "width": "576"}','/static/img/linux/linux_install_img_002.png','/static/img/linux/linux_install_img_002.png',0,'alvin',curdate());
insert into Content values(109,2,'p',83,'{}','3、出现引导界面，点击"next"','3、出现引导界面，点击"next"',0,'alvin',curdate());
insert into Content values(110,2,'image',84,'{"alt": "image603", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_003.png", "width": "576"}','/static/img/linux/linux_install_img_003.png','/static/img/linux/linux_install_img_003.png',0,'alvin',curdate());
insert into Content values(111,2,'p',85,'{}','4、选中"English（English）"否则会有部分乱码问题','4、选中"English（English）"否则会有部分乱码问题',0,'alvin',curdate());
insert into Content values(112,2,'image',86,'{"alt": "image604", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_004.png", "width": "576"}','/static/img/linux/linux_install_img_004.png','/static/img/linux/linux_install_img_004.png',0,'alvin',curdate());
insert into Content values(113,2,'p',87,'{}','5、键盘布局选择"U.S.English"','5、键盘布局选择"U.S.English"',0,'alvin',curdate());
insert into Content values(114,2,'image',88,'{"alt": "image605", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_005.png", "width": "576"}','/static/img/linux/linux_install_img_005.png','/static/img/linux/linux_install_img_005.png',0,'alvin',curdate());
insert into Content values(115,2,'p',89,'{}','6、选择"Basic Storage Devices"点击"Next"','6、选择"Basic Storage Devices"点击"Next"',0,'alvin',curdate());
insert into Content values(116,2,'image',90,'{"alt": "image606", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_006.png", "width": "576"}','/static/img/linux/linux_install_img_006.png','/static/img/linux/linux_install_img_006.png',0,'alvin',curdate());
insert into Content values(117,2,'p',91,'{}','7、询问是否忽略所有数据，新电脑安装系统选择"Yes,discard any data"','7、询问是否忽略所有数据，新电脑安装系统选择"Yes,discard any data"',0,'alvin',curdate());
insert into Content values(118,2,'image',92,'{"alt": "image607", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_007.png", "width": "576"}','/static/img/linux/linux_install_img_007.png','/static/img/linux/linux_install_img_007.png',0,'alvin',curdate());
insert into Content values(119,2,'p',93,'{}','8、Hostname填写格式"英文名.姓"','8、Hostname填写格式"英文名.姓"',0,'alvin',curdate());
insert into Content values(120,2,'image',94,'{"alt": "image608", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_008.png", "width": "576"}','/static/img/linux/linux_install_img_008.png','/static/img/linux/linux_install_img_008.png',0,'alvin',curdate());
insert into Content values(121,2,'p',95,'{}','9、网络设置安装图示顺序点击就可以了','9、网络设置安装图示顺序点击就可以了',0,'alvin',curdate());
insert into Content values(122,2,'image',96,'{"alt": "image609", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_009.png", "width": "576"}','/static/img/linux/linux_install_img_009.png','/static/img/linux/linux_install_img_009.png',0,'alvin',curdate());
insert into Content values(123,2,'p',97,'{}','10、时区可以在地图上点击，选择"shanghai"并取消System clock uses UTC前面的对勾','10、时区可以在地图上点击，选择"shanghai"并取消System clock uses UTC前面的对勾',0,'alvin',curdate());
insert into Content values(124,2,'image',98,'{"alt": "image610", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_010.png", "width": "576"}','/static/img/linux/linux_install_img_010.png','/static/img/linux/linux_install_img_010.png',0,'alvin',curdate());
insert into Content values(125,2,'p',99,'{}','11、设置root的密码','11、设置root的密码',0,'alvin',curdate());
insert into Content values(126,2,'image',100,'{"alt": "image611", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_011.png", "width": "576"}','/static/img/linux/linux_install_img_011.png','/static/img/linux/linux_install_img_011.png',0,'alvin',curdate());
insert into Content values(127,2,'p',101,'{}','12、硬盘分区，一定要按照图示点选','12、硬盘分区，一定要按照图示点选',0,'alvin',curdate());
insert into Content values(128,2,'image',102,'{"alt": "image612", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_012.png", "width": "576"}','/static/img/linux/linux_install_img_012.png','/static/img/linux/linux_install_img_012.png',0,'alvin',curdate());
insert into Content values(129,2,'p',103,'{}','13、调整分区，必须要有/home这个分区，如果没有这个分区，安装部分软件会出现不能安装的问题','13、调整分区，必须要有/home这个分区，如果没有这个分区，安装部分软件会出现不能安装的问题',0,'alvin',curdate());
insert into Content values(130,2,'image',104,'{"alt": "image613", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_013.png", "width": "576"}','/static/img/linux/linux_install_img_013.png','/static/img/linux/linux_install_img_013.png',0,'alvin',curdate());
insert into Content values(131,2,'p',105,'{}','14、询问是否格式化分区','14、询问是否格式化分区',0,'alvin',curdate());
insert into Content values(132,2,'image',106,'{"alt": "image614", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_014.png", "width": "576"}','/static/img/linux/linux_install_img_014.png','/static/img/linux/linux_install_img_014.png',0,'alvin',curdate());
insert into Content values(133,2,'p',107,'{}','15、将更改写入到硬盘','15、将更改写入到硬盘',0,'alvin',curdate());
insert into Content values(134,2,'image',108,'{"alt": "image615", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_015.png", "width": "576"}','/static/img/linux/linux_install_img_015.png','/static/img/linux/linux_install_img_015.png',0,'alvin',curdate());
insert into Content values(135,2,'p',109,'{}','16、引导程序安装位置','16、引导程序安装位置',0,'alvin',curdate());
insert into Content values(136,2,'image',110,'{"alt": "image616", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_016.png", "width": "576"}','/static/img/linux/linux_install_img_016.png','/static/img/linux/linux_install_img_016.png',0,'alvin',curdate());
insert into Content values(137,2,'p',111,'{}','17、最重要的一步，也是本教程最关键的一步，也是其他教程没有提及的一步，按图示顺序点击','17、最重要的一步，也是本教程最关键的一步，也是其他教程没有提及的一步，按图示顺序点击',0,'alvin',curdate());
insert into Content values(138,2,'image',112,'{"alt": "image017", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_017.png", "width": "576"}','/static/img/linux/linux_install_img_017.png','/static/img/linux/linux_install_img_017.png',0,'alvin',curdate());
insert into Content values(139,2,'p',113,'{}','18、取消以下内容的所有选项','18、取消以下内容的所有选项',0,'alvin',curdate());
insert into Content values(140,2,'p',114,'{}','Applications','Applications',0,'alvin',curdate());
insert into Content values(141,2,'p',115,'{}','Base System','Base System',0,'alvin',curdate());
insert into Content values(142,2,'p',116,'{}','Servers','Servers',0,'alvin',curdate());
insert into Content values(143,2,'p',117,'{}','并对Desktops进行如下设置','并对Desktops进行如下设置',0,'alvin',curdate());
insert into Content values(144,2,'p',118,'{}','即取消如下选项：','即取消如下选项：',0,'alvin',curdate());
insert into Content values(145,2,'p',119,'{}','Desktop Debugging and Performance Tools','Desktop Debugging and Performance Tools',0,'alvin',curdate());
insert into Content values(146,2,'p',120,'{}','Desktop Platform','Desktop Platform',0,'alvin',curdate());
insert into Content values(147,2,'p',121,'{}','Remote Desktop Clients','Remote Desktop Clients',0,'alvin',curdate());
insert into Content values(148,2,'p',122,'{}',' BOLD[  Input Methods ]BOLD BOLD[  中仅保留ibus-pinyin-1.3.8-1.el6.x86_64,其他的全部取消 ]BOLD',' BOLD[  Input Methods ]BOLD BOLD[  中仅保留ibus-pinyin-1.3.8-1.el6.x86_64,其他的全部取消 ]BOLD',0,'alvin',curdate());
insert into Content values(149,2,'image',123,'{"alt": "image618", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_018.png", "width": "576"}','/static/img/linux/linux_install_img_018.png','/static/img/linux/linux_install_img_018.png',0,'alvin',curdate());
insert into Content values(150,2,'image',124,'{"alt": "image619", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_019.png", "width": "576"}','/static/img/linux/linux_install_img_019.png','/static/img/linux/linux_install_img_019.png',0,'alvin',curdate());
insert into Content values(151,2,'p',125,'{}','19、选中Languages，并选中右侧的Chinese Support然后点击红色区域','19、选中Languages，并选中右侧的Chinese Support然后点击红色区域',0,'alvin',curdate());
insert into Content values(152,2,'image',126,'{"alt": "image620", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_020.png", "width": "576"}','/static/img/linux/linux_install_img_020.png','/static/img/linux/linux_install_img_020.png',0,'alvin',curdate());
insert into Content values(153,2,'p',127,'{}','20、调整完成后如下图所示','20、调整完成后如下图所示',0,'alvin',curdate());
insert into Content values(154,2,'image',128,'{"alt": "image621", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_021.png", "width": "576"}','/static/img/linux/linux_install_img_021.png','/static/img/linux/linux_install_img_021.png',0,'alvin',curdate());
insert into Content values(155,2,'p',129,'{}','21、至此，一个最精简的桌面环境就设置完成了，','21、至此，一个最精简的桌面环境就设置完成了，',0,'alvin',curdate());
insert into Content values(156,2,'image',130,'{"alt": "image622", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_022.png", "width": "576"}','/static/img/linux/linux_install_img_022.png','/static/img/linux/linux_install_img_022.png',0,'alvin',curdate());
insert into Content values(157,2,'p',131,'{}','22、安装完成，重启','22、安装完成，重启',0,'alvin',curdate());
insert into Content values(158,2,'image',132,'{"alt": "image623", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_install_img_023.png", "width": "576"}','/static/img/linux/linux_install_img_023.png','/static/img/linux/linux_install_img_023.png',0,'alvin',curdate());
insert into Content values(159,2,'p',133,'{}','23、重启之后，的License Information','23、重启之后，的License Information',0,'alvin',curdate());
insert into Content values(160,2,'image',134,'{"alt": "image624", "class": ["attachment-full"], "height": "370", "src": "/static/img/linux/linux_install_img_024.png", "width": "576"}','/static/img/linux/linux_install_img_024.png','/static/img/linux/linux_install_img_024.png',0,'alvin',curdate());
insert into Content values(161,2,'p',135,'{}','24、Create User','24、Create User',0,'alvin',curdate());
insert into Content values(162,2,'p',136,'{}','Username：填写您的英文名（不带.姓）','Username：填写您的英文名（不带.姓）',0,'alvin',curdate());
insert into Content values(163,2,'p',137,'{}','Full Name：填写您的英文名.姓（首字母大写）','Full Name：填写您的英文名.姓（首字母大写）',0,'alvin',curdate());
insert into Content values(164,2,'image',138,'{"alt": "image625", "class": ["attachment-full"], "height": "370", "src": "/static/img/linux/linux_install_img_025.png", "width": "576"}','/static/img/linux/linux_install_img_025.png','/static/img/linux/linux_install_img_025.png',0,'alvin',curdate());
insert into Content values(165,2,'p',139,'{}','25、"Date and Time" 选中 "Synchronize data and time over the network"','25、"Date and Time" 选中 "Synchronize data and time over the network"',0,'alvin',curdate());
insert into Content values(166,2,'p',140,'{}','Finsh之后系统将重启','Finsh之后系统将重启',0,'alvin',curdate());
insert into Content values(167,2,'image',141,'{"alt": "image626", "class": ["attachment-full"], "height": "370", "src": "/static/img/linux/linux_install_img_026.png", "width": "576"}','/static/img/linux/linux_install_img_026.png','/static/img/linux/linux_install_img_026.png',0,'alvin',curdate());
insert into Content values(168,2,'p',142,'{}','26、第一次登录，登录前不要做任何更改，这个很重要！！！登录之后紧接着退出','26、第一次登录，登录前不要做任何更改，这个很重要！！！登录之后紧接着退出',0,'alvin',curdate());
insert into Content values(169,2,'p',143,'{}','第二次登录，选择语言，在红色区域选择下拉小三角，选other，选中"汉语（中国）"','第二次登录，选择语言，在红色区域选择下拉小三角，选other，选中"汉语（中国）"',0,'alvin',curdate());
insert into Content values(170,2,'image',144,'{"alt": "image627", "class": ["attachment-full"], "height": "370", "src": "/static/img/linux/linux_install_img_027.png", "width": "576"}','/static/img/linux/linux_install_img_027.png','/static/img/linux/linux_install_img_027.png',0,'alvin',curdate());
insert into Content values(171,2,'image',145,'{"alt": "image628", "class": ["attachment-full"], "height": "370", "src": "/static/img/linux/linux_install_img_028.png", "width": "576"}','/static/img/linux/linux_install_img_028.png','/static/img/linux/linux_install_img_028.png',0,'alvin',curdate());
insert into Content values(172,2,'p',146,'{}','27、登录之后，请一定按照如下顺序点击！','27、登录之后，请一定按照如下顺序点击！',0,'alvin',curdate());
insert into Content values(173,2,'p',147,'{}','至此，CentOS安装完成，如有其他问题，请随时与我联系！！','至此，CentOS安装完成，如有其他问题，请随时与我联系！！',0,'alvin',curdate());
insert into Content values(174,2,'image',148,'{"alt": "image029", "class": ["attachment-full"], "height": "370", "src": "/static/img/linux/linux_install_img_029.png", "width": "576"}','/static/img/linux/linux_install_img_029.png','/static/img/linux/linux_install_img_029.png',0,'alvin',curdate());
insert into Content values(175,2,'line',149,'{}','','',0,'alvin',curdate());
insert into Content values(176,2,'h2',150,'{}','Linux 7 安装步骤','Linux 7 安装步骤',0,'alvin',curdate());
insert into Content values(177,2,'p',151,'{}','1、选择好ISO文件，按回车键后开始加载安装镜像，所需时间大约在 30～60 秒，请耐心等待。','1、选择好ISO文件，按回车键后开始加载安装镜像，所需时间大约在 30～60 秒，请耐心等待。',0,'alvin',curdate());
insert into Content values(178,2,'image',152,'{"alt": "image701", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_001.png", "width": "576"}','/static/img/linux/linux_install7_img_001.png','/static/img/linux/linux_install7_img_001.png',0,'alvin',curdate());
insert into Content values(179,2,'image',153,'{"alt": "image702", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_002.png", "width": "576"}','/static/img/linux/linux_install7_img_002.png','/static/img/linux/linux_install7_img_002.png',0,'alvin',curdate());
insert into Content values(180,2,'p',154,'{}','2、选择系统的安装语言后单击 Continue 按钮。','2、选择系统的安装语言后单击 Continue 按钮。',0,'alvin',curdate());
insert into Content values(181,2,'image',155,'{"alt": "image703", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_003.png", "width": "576"}','/static/img/linux/linux_install7_img_003.png','/static/img/linux/linux_install7_img_003.png',0,'alvin',curdate());
insert into Content values(182,2,'p',156,'{}','3、在安装界面中单击 SOFTWARE SELECTION 选项。','3、在安装界面中单击 SOFTWARE SELECTION 选项。',0,'alvin',curdate());
insert into Content values(183,2,'image',157,'{"alt": "image704", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_004.png", "width": "576"}','/static/img/linux/linux_install7_img_004.png','/static/img/linux/linux_install7_img_004.png',0,'alvin',curdate());
insert into Content values(184,2,'p',158,'{}','4、CentOS 7 系统的软件定制界面可以根据用户的需求来调整系统的基本环境，例如把 Linux 系统用作基础服务器、文件服务器、Web 服务器或工作站等。此时您只需在界面中单击选中 Server with GUI 单选按钮，然后单击左上角的 Done 按钮即可。','4、CentOS 7 系统的软件定制界面可以根据用户的需求来调整系统的基本环境，例如把 Linux 系统用作基础服务器、文件服务器、Web 服务器或工作站等。此时您只需在界面中单击选中 Server with GUI 单选按钮，然后单击左上角的 Done 按钮即可。',0,'alvin',curdate());
insert into Content values(185,2,'image',159,'{"alt": "image705", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_005.png", "width": "576"}','/static/img/linux/linux_install7_img_005.png','/static/img/linux/linux_install7_img_005.png',0,'alvin',curdate());
insert into Content values(186,2,'p',160,'{}','5、返回到 CentOS 7 系统安装主界面，单击 NETWORK & HOSTNAME 选项后，将 Hostname字段设置为 linuxprobe.com，然后单击左上角的 Done 按钮。','5、返回到 CentOS 7 系统安装主界面，单击 NETWORK & HOSTNAME 选项后，将 Hostname字段设置为 linuxprobe.com，然后单击左上角的 Done 按钮。',0,'alvin',curdate());
insert into Content values(187,2,'image',161,'{"alt": "image706", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_006.png", "width": "576"}','/static/img/linux/linux_install7_img_006.png','/static/img/linux/linux_install7_img_006.png',0,'alvin',curdate());
insert into Content values(188,2,'p',162,'{}','6、返回到安装主界面，单击 INSTALLATION DESTINATION 选项来选择安装媒介并设置分区。此时不需要进行任何修改，单击左上角的 Done 按钮即可。','6、返回到安装主界面，单击 INSTALLATION DESTINATION 选项来选择安装媒介并设置分区。此时不需要进行任何修改，单击左上角的 Done 按钮即可。',0,'alvin',curdate());
insert into Content values(189,2,'image',163,'{"alt": "image707", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_007.png", "width": "576"}','/static/img/linux/linux_install7_img_007.png','/static/img/linux/linux_install7_img_007.png',0,'alvin',curdate());
insert into Content values(190,2,'p',164,'{}','7、返回到安装主界面，单击 Begin Installation 按钮后即可看到安装进度，在此处选择 ROOT PASSWORD。','7、返回到安装主界面，单击 Begin Installation 按钮后即可看到安装进度，在此处选择 ROOT PASSWORD。',0,'alvin',curdate());
insert into Content values(191,2,'image',165,'{"alt": "image708", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_008.png", "width": "576"}','/static/img/linux/linux_install7_img_008.png','/static/img/linux/linux_install7_img_008.png',0,'alvin',curdate());
insert into Content values(192,2,'p',166,'{}','8、然后设置root管理员的密码。若坚持用弱口令的密码则需要单击2次左上角的Done按钮才可以确认，如图所示。','8、然后设置root管理员的密码。若坚持用弱口令的密码则需要单击2次左上角的Done按钮才可以确认，如图所示。',0,'alvin',curdate());
insert into Content values(193,2,'p',167,'{}','这里需要多说一句，当您在虚拟机中做实验的时候，密码无所谓强弱，但在生产环境中一定要让root管理员的密码足够复杂，否则系统将面临严重的安全问题。','这里需要多说一句，当您在虚拟机中做实验的时候，密码无所谓强弱，但在生产环境中一定要让root管理员的密码足够复杂，否则系统将面临严重的安全问题。',0,'alvin',curdate());
insert into Content values(194,2,'image',168,'{"alt": "image709", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_009.png", "width": "576"}','/static/img/linux/linux_install7_img_009.png','/static/img/linux/linux_install7_img_009.png',0,'alvin',curdate());
insert into Content values(195,2,'p',169,'{}','9、Linux系统安装过程一般在30～60分钟，在安装过程期间耐心等待即可。安装完成后单 击Reboot按钮','9、Linux系统安装过程一般在30～60分钟，在安装过程期间耐心等待即可。安装完成后单 击Reboot按钮',0,'alvin',curdate());
insert into Content values(196,2,'image',170,'{"alt": "image710", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_010.png", "width": "576"}','/static/img/linux/linux_install7_img_010.png','/static/img/linux/linux_install7_img_010.png',0,'alvin',curdate());
insert into Content values(197,2,'p',171,'{}','10、重启系统后将看到系统的初始化界面，单击LICENSEINFORMATION选项。','10、重启系统后将看到系统的初始化界面，单击LICENSEINFORMATION选项。',0,'alvin',curdate());
insert into Content values(198,2,'image',172,'{"alt": "image711", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_011.png", "width": "576"}','/static/img/linux/linux_install7_img_011.png','/static/img/linux/linux_install7_img_011.png',0,'alvin',curdate());
insert into Content values(199,2,'p',173,'{}','11、选中Iacceptthelicenseagreement复选框，然后单击左上角的Done按钮。','11、选中Iacceptthelicenseagreement复选框，然后单击左上角的Done按钮。',0,'alvin',curdate());
insert into Content values(200,2,'image',174,'{"alt": "image712", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_012.png", "width": "576"}','/static/img/linux/linux_install7_img_012.png','/static/img/linux/linux_install7_img_012.png',0,'alvin',curdate());
insert into Content values(201,2,'p',175,'{}','12、返回到初始化界面后单击FINISHCONFIGURATION选项，即可看到Kdump服务的设置界面。如果暂时不打算调试系统内核，也可以取消选中Enablekdump复选框，然后单击Forward按钮。','12、返回到初始化界面后单击FINISHCONFIGURATION选项，即可看到Kdump服务的设置界面。如果暂时不打算调试系统内核，也可以取消选中Enablekdump复选框，然后单击Forward按钮。',0,'alvin',curdate());
insert into Content values(202,2,'image',176,'{"alt": "image713", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_013.png", "width": "576"}','/static/img/linux/linux_install7_img_013.png','/static/img/linux/linux_install7_img_013.png',0,'alvin',curdate());
insert into Content values(203,2,'p',177,'{}','13、在如图所示的系统订阅界面中，选中No,I prefer to register at a later time单选按钮，然后单击Finish按钮。此处设置为不注册系统对后续的实验操作和生产工作均无影响。','13、在如图所示的系统订阅界面中，选中No,I prefer to register at a later time单选按钮，然后单击Finish按钮。此处设置为不注册系统对后续的实验操作和生产工作均无影响。',0,'alvin',curdate());
insert into Content values(204,2,'image',178,'{"alt": "image714", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_014.png", "width": "576"}','/static/img/linux/linux_install7_img_014.png','/static/img/linux/linux_install7_img_014.png',0,'alvin',curdate());
insert into Content values(205,2,'p',179,'{}','14、虚拟机软件中的RHEL7系统经过又一次的重启后，我们终于可以看到系统的欢迎 界面，如图所示。在界面中选择默认的语言English(UnitedStates)，然后单击Next 按钮。','14、虚拟机软件中的RHEL7系统经过又一次的重启后，我们终于可以看到系统的欢迎 界面，如图所示。在界面中选择默认的语言English(UnitedStates)，然后单击Next 按钮。',0,'alvin',curdate());
insert into Content values(206,2,'image',180,'{"alt": "image715", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_015.png", "width": "576"}','/static/img/linux/linux_install7_img_015.png','/static/img/linux/linux_install7_img_015.png',0,'alvin',curdate());
insert into Content values(207,2,'p',181,'{}','15、将系统的输入来源类型选择为English(US)，然后单击Next按钮','15、将系统的输入来源类型选择为English(US)，然后单击Next按钮',0,'alvin',curdate());
insert into Content values(208,2,'image',182,'{"alt": "image716", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_016.png", "width": "576"}','/static/img/linux/linux_install7_img_016.png','/static/img/linux/linux_install7_img_016.png',0,'alvin',curdate());
insert into Content values(209,2,'p',183,'{}','16、为RHEL7系统创建一个本地的普通用户，该账户的用户名为linuxprobe，密码为redhat，然后单击Next按钮，如图所示。','16、为RHEL7系统创建一个本地的普通用户，该账户的用户名为linuxprobe，密码为redhat，然后单击Next按钮，如图所示。',0,'alvin',curdate());
insert into Content values(210,2,'image',184,'{"alt": "image717", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_017.png", "width": "576"}','/static/img/linux/linux_install7_img_017.png','/static/img/linux/linux_install7_img_017.png',0,'alvin',curdate());
insert into Content values(211,2,'p',185,'{}','17、按照图所示的设置来设置系统的时区，然后单击Next按钮。','17、按照图所示的设置来设置系统的时区，然后单击Next按钮。',0,'alvin',curdate());
insert into Content values(212,2,'image',186,'{"alt": "image718", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_018.png", "width": "576"}','/static/img/linux/linux_install7_img_018.png','/static/img/linux/linux_install7_img_018.png',0,'alvin',curdate());
insert into Content values(213,2,'p',187,'{}','18、在图所示的界面中单击Start using RedHat Enterprise Linux Server按钮，出现如图所示的界面。至此，RHEL7系统完成了全部的安装和部署工作。准备开始学习Linux系统吧。','18、在图所示的界面中单击Start using RedHat Enterprise Linux Server按钮，出现如图所示的界面。至此，RHEL7系统完成了全部的安装和部署工作。准备开始学习Linux系统吧。',0,'alvin',curdate());
insert into Content values(214,2,'image',188,'{"alt": "image719", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_019.png", "width": "576"}','/static/img/linux/linux_install7_img_019.png','/static/img/linux/linux_install7_img_019.png',0,'alvin',curdate());
insert into Content values(215,2,'image',189,'{"alt": "image720", "class": ["attachment-full"], "height": "364", "src": "/static/img/linux/linux_install7_img_020.png", "width": "576"}','/static/img/linux/linux_install7_img_020.png','/static/img/linux/linux_install7_img_020.png',0,'alvin',curdate());
insert into Content values(216,3,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 计划任务服务程序',' <span class="color_h1">  Linux </span> 计划任务服务程序',0,'alvin',curdate());
insert into Content values(217,3,'p',2,'{}','经验丰富的系统运维工程师可以使得Linux在无需人为介入的情况下，在指定的时间段自动启用或停止某些服务或命令，从而实现运维的自动化。尽管我们现在已经有了功能彪悍的脚本程序来执行一些批处理工作，但是，如果仍然需要在每天凌晨两点敲击键盘回车键来执行这个脚本程序，这简直太痛苦了（当然，也可以训练您的小猫在半夜按下回车键）。接下来，刘遄老师将向大家讲解如何设置服务器的计划任务服务，把周期性、规律性的工作交给系统自动完成。','经验丰富的系统运维工程师可以使得Linux在无需人为介入的情况下，在指定的时间段自动启用或停止某些服务或命令，从而实现运维的自动化。尽管我们现在已经有了功能彪悍的脚本程序来执行一些批处理工作，但是，如果仍然需要在每天凌晨两点敲击键盘回车键来执行这个脚本程序，这简直太痛苦了（当然，也可以训练您的小猫在半夜按下回车键）。接下来，刘遄老师将向大家讲解如何设置服务器的计划任务服务，把周期性、规律性的工作交给系统自动完成。',0,'alvin',curdate());
insert into Content values(218,3,'p',3,'{}','计划任务分为一次性计划任务与长期性计划任务，大家可以按照如下方式理解。','计划任务分为一次性计划任务与长期性计划任务，大家可以按照如下方式理解。',0,'alvin',curdate());
insert into Content values(219,3,'ul',4,'{}','一次性计划任务：今晚11点30分开启网站服务。
长期性计划任务：每周一的凌晨3点25分把/home/wwwroot目录打包备份为backup.tar.gz。','一次性计划任务：今晚11点30分开启网站服务。
长期性计划任务：每周一的凌晨3点25分把/home/wwwroot目录打包备份为backup.tar.gz。',0,'alvin',curdate());
insert into Content values(220,3,'p',5,'{}','顾名思义，一次性计划任务只执行一次，一般用于满足临时的工作需求。我们可以用at 命令实现这种功能，只需要写成“at时间”的形式就可以。如果想要查看已设置好但还未执 行的一次性计划任务，可以使用“at-l”命令；要想将其删除，可以用“atrm任务序号”。在使用at命令来设置一次性计划任务时，默认采用的是交互式方法。例如，使用下述命令将系统设置为在今晚23:30分自动重启网站服务。','顾名思义，一次性计划任务只执行一次，一般用于满足临时的工作需求。我们可以用at 命令实现这种功能，只需要写成“at时间”的形式就可以。如果想要查看已设置好但还未执 行的一次性计划任务，可以使用“at-l”命令；要想将其删除，可以用“atrm任务序号”。在使用at命令来设置一次性计划任务时，默认采用的是交互式方法。例如，使用下述命令将系统设置为在今晚23:30分自动重启网站服务。',0,'alvin',curdate());
insert into Content values(221,3,'pre',6,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# at 23:30 
at > systemctl restart httpd 
at > 此处请同时按下Ctrl+D组合键来结束编写计划任务
job 3 at Mon Apr 27 23:30:00 2017 
[root@linuxprobe ~]# at -l
3 Mon Apr 27 23:30:00 2017 a root
','[root@linuxprobe ~]# at 23:30 
at > systemctl restart httpd 
at > 此处请同时按下Ctrl+D组合键来结束编写计划任务
job 3 at Mon Apr 27 23:30:00 2017 
[root@linuxprobe ~]# at -l
3 Mon Apr 27 23:30:00 2017 a root
',0,'alvin',curdate());
insert into Content values(222,3,'line',7,'{}','','',0,'alvin',curdate());
insert into Content values(223,3,'p',8,'{}','如果想挑战一下难度更大但简捷性更高的方式，可以把前面学习的管道符（任意门）放到两条命令之间，让at命令接收前面echo命令的输出信息，以达到通过非交互式的方式创建计划一次性任务的目的。','如果想挑战一下难度更大但简捷性更高的方式，可以把前面学习的管道符（任意门）放到两条命令之间，让at命令接收前面echo命令的输出信息，以达到通过非交互式的方式创建计划一次性任务的目的。',0,'alvin',curdate());
insert into Content values(224,3,'pre',9,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# echo "systemctl restart httpd" | at 23:30 
job 4 at Mon Apr 27 23:30:00 2017 
[root@linuxprobe ~]# at -l 
3 Mon Apr 27 23:30:00 2017 a root 
4 Mon Apr 27 23:30:00 2017 a root
','[root@linuxprobe ~]# echo "systemctl restart httpd" | at 23:30 
job 4 at Mon Apr 27 23:30:00 2017 
[root@linuxprobe ~]# at -l 
3 Mon Apr 27 23:30:00 2017 a root 
4 Mon Apr 27 23:30:00 2017 a root
',0,'alvin',curdate());
insert into Content values(225,3,'p',10,'{}','如果我们不小心设置了两个一次性计划任务，可以使用下面的命令轻松删除其中一个：','如果我们不小心设置了两个一次性计划任务，可以使用下面的命令轻松删除其中一个：',0,'alvin',curdate());
insert into Content values(226,3,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe~ ]# atrm 3 
[root@linuxprobe~ ]# at -l 
4 Mon Apr 27 23:30:00 2017 a root
','[root@linuxprobe~ ]# atrm 3 
[root@linuxprobe~ ]# at -l 
4 Mon Apr 27 23:30:00 2017 a root
',0,'alvin',curdate());
insert into Content values(227,3,'p',12,'{}','如果希望Linux系统能够周期性地、有规律地执行某些具体的任务，那么Linux系统中默认启用的crond服务简直再适合不过了。创建、编辑计划任务的命令为“crontab -e”，查看当前计划任务的命令为“crontab -l”，删除某条计划任务的命令为“crontab -r”。另外，如果您是以管理员的身份登录的系统，还可以在crontab命令中加上-u参数来编辑他人的计划任务。','如果希望Linux系统能够周期性地、有规律地执行某些具体的任务，那么Linux系统中默认启用的crond服务简直再适合不过了。创建、编辑计划任务的命令为“crontab -e”，查看当前计划任务的命令为“crontab -l”，删除某条计划任务的命令为“crontab -r”。另外，如果您是以管理员的身份登录的系统，还可以在crontab命令中加上-u参数来编辑他人的计划任务。',0,'alvin',curdate());
insert into Content values(228,3,'p',13,'{}','在正式部署计划任务前，请先跟记住“分、时、日、月、星期命令”。这是使用crond服务设置任务的参数格式。需要注意的是，如果有些字段没有设置，则需要使用星号（*）占位,格式如下：','在正式部署计划任务前，请先跟记住“分、时、日、月、星期命令”。这是使用crond服务设置任务的参数格式。需要注意的是，如果有些字段没有设置，则需要使用星号（*）占位,格式如下：',0,'alvin',curdate());
insert into Content values(229,3,'pre',14,'{"class": ["prettyprint", "lang-bash"]}',' 50 3 2 1 * run_command
   分    时 日 月  星期
',' 50 3 2 1 * run_command
   分    时 日 月  星期
',0,'alvin',curdate());
insert into Content values(230,3,'table',15,'{"class": ["table", "table-bordered", "table-striped"]}','                字段	                说明
                分	取值为0～59的整数
                时	取值为0～23的任意整数
                日	取值为1～31的任意整数
                月	取值为1～12的任意整数
                星期	取值为0～7的任意整数，其中0与7均为星期日
                命令	要执行的命令或程序脚本','                字段	                说明
                分	取值为0～59的整数
                时	取值为0～23的任意整数
                日	取值为1～31的任意整数
                月	取值为1～12的任意整数
                星期	取值为0～7的任意整数，其中0与7均为星期日
                命令	要执行的命令或程序脚本',0,'alvin',curdate());
insert into Content values(231,3,'p',16,'{}','假设在每周一、三、五的凌晨3点25分，都需要使用tar命令把某个网站的数据目录进 行打包处理，使其作为一个备份文件。我们可以使用crontab -e命令来创建计划任务。为自己创建计划任务无需使用-u参数，具体的实现效果的参数如crontab -l命令结果所示：','假设在每周一、三、五的凌晨3点25分，都需要使用tar命令把某个网站的数据目录进 行打包处理，使其作为一个备份文件。我们可以使用crontab -e命令来创建计划任务。为自己创建计划任务无需使用-u参数，具体的实现效果的参数如crontab -l命令结果所示：',0,'alvin',curdate());
insert into Content values(232,3,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# crontab -e 
no crontab for root - using an empty one 
crontab:installing new crontab 
[root@linuxprobe ~]# crontab -l
25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot
','[root@linuxprobe ~]# crontab -e 
no crontab for root - using an empty one 
crontab:installing new crontab 
[root@linuxprobe ~]# crontab -l
25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot
',0,'alvin',curdate());
insert into Content values(233,3,'p',18,'{}','需要说明的是，除了用逗号（,）来分别表示多个时间段，例如“8,9,12”表示8月、9月和12月。还可以用减号（-）来表示一段连续的时间周期（例如字段“日”的取值为“12-15”，则表示每月的12～15日）。以及用除号（/）表示执行任务的间隔时间（例如“*/2”表示每隔 2分钟执行一次任务）。','需要说明的是，除了用逗号（,）来分别表示多个时间段，例如“8,9,12”表示8月、9月和12月。还可以用减号（-）来表示一段连续的时间周期（例如字段“日”的取值为“12-15”，则表示每月的12～15日）。以及用除号（/）表示执行任务的间隔时间（例如“*/2”表示每隔 2分钟执行一次任务）。',0,'alvin',curdate());
insert into Content values(234,3,'p',19,'{}','如果在crond服务中需要同时包含多条计划任务的命令语句，应每行仅写一条。例如我们再添加一条计划任务，它的功能是每周一至周五的凌晨1点钟自动清空/tmp目录内的所有文件。尤其需要注意的是，在crond服务的计划任务参数中，所有命令一定要用绝对路径的方式来写，如果不知道绝对路径，请用whereis命令进行查询，rm命令路径为下面输出信息中加粗部分。','如果在crond服务中需要同时包含多条计划任务的命令语句，应每行仅写一条。例如我们再添加一条计划任务，它的功能是每周一至周五的凌晨1点钟自动清空/tmp目录内的所有文件。尤其需要注意的是，在crond服务的计划任务参数中，所有命令一定要用绝对路径的方式来写，如果不知道绝对路径，请用whereis命令进行查询，rm命令路径为下面输出信息中加粗部分。',0,'alvin',curdate());
insert into Content values(235,3,'pre',20,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# whereis rm
rm:/usr/bin/rm /usr/share/man/man1/rm.1.gz /usr/share/man/man1p/rm.1p.gz
[root@linuxprobe ~]# crontab -e 
crontab: installing new crontab 
[root@linuxprobe ~]# crontab -l 
25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot 
0 1 * * 1-5 /usr/bin/rm -rf /tmp/*
','[root@linuxprobe ~]# whereis rm
rm:/usr/bin/rm /usr/share/man/man1/rm.1.gz /usr/share/man/man1p/rm.1p.gz
[root@linuxprobe ~]# crontab -e 
crontab: installing new crontab 
[root@linuxprobe ~]# crontab -l 
25 3 * * 1,3,5 /usr/bin/tar -czvf backup.tar.gz /home/wwwroot 
0 1 * * 1-5 /usr/bin/rm -rf /tmp/*
',0,'alvin',curdate());
insert into Content values(236,3,'p',21,'{}','最终有部分注意事项如下：','最终有部分注意事项如下：',0,'alvin',curdate());
insert into Content values(237,3,'ul',22,'{}','在crond服务的配置参数中，可以像Shell脚本那样以#号开头写上注释信息，这样在日后回顾这段命令代码时可以快速了解其功能、需求以及编写人员等重要信息。
计划任务中的“分”字段必须有数值，绝对不能为空或是*号，而“日”和“星期”字段不能同时使用，否则就会发生冲突。','在crond服务的配置参数中，可以像Shell脚本那样以#号开头写上注释信息，这样在日后回顾这段命令代码时可以快速了解其功能、需求以及编写人员等重要信息。
计划任务中的“分”字段必须有数值，绝对不能为空或是*号，而“日”和“星期”字段不能同时使用，否则就会发生冲突。',0,'alvin',curdate());
insert into Content values(238,4,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> RAID与LVM磁盘阵列技术',' <span class="color_h1">  Linux </span> RAID与LVM磁盘阵列技术',0,'alvin',curdate());
insert into Content values(239,4,'p',2,'{}','    本章节我们将为大家介绍 Linux 的RAID与LVM磁盘阵列技术。','    本章节我们将为大家介绍 Linux 的RAID与LVM磁盘阵列技术。',0,'alvin',curdate());
insert into Content values(240,4,'p',3,'{}','        深入讲解各个常用 RAID（Redundant Array of Independent Disks，独立冗余磁盘阵列）技术方案的特性，并通过实际部署 RAID 10、RAID 5+备份盘等方案来更直观地查看 RAID 的强大效果，以便进一步满足生产环境对硬盘设备的 IO 读写速度和数据冗余备份机制的需求。同时，考虑到用户可能会动态调整存储资源，本章还将介绍 LVM（Logical Volume Manager，逻辑卷管理器）的部署、扩容、缩小、快照以及卸载删除的相关知识。相信读者在学完本章内容后，便可以在企业级生产环境中灵活运用 RAID 和 LVM 来满足对存储资源的高级管理需求了。','        深入讲解各个常用 RAID（Redundant Array of Independent Disks，独立冗余磁盘阵列）技术方案的特性，并通过实际部署 RAID 10、RAID 5+备份盘等方案来更直观地查看 RAID 的强大效果，以便进一步满足生产环境对硬盘设备的 IO 读写速度和数据冗余备份机制的需求。同时，考虑到用户可能会动态调整存储资源，本章还将介绍 LVM（Logical Volume Manager，逻辑卷管理器）的部署、扩容、缩小、快照以及卸载删除的相关知识。相信读者在学完本章内容后，便可以在企业级生产环境中灵活运用 RAID 和 LVM 来满足对存储资源的高级管理需求了。',0,'alvin',curdate());
insert into Content values(241,4,'line',4,'{}','','',0,'alvin',curdate());
insert into Content values(242,4,'h2',5,'{}','RAID(独立冗余磁盘阵列)','RAID(独立冗余磁盘阵列)',0,'alvin',curdate());
insert into Content values(243,4,'p',6,'{}','        近年来，CPU的处理性能保持着高速增长，Intel公司在2017年最新发布的i9-7980XE 处理器芯片更是达到了18核心36线程。但与此同时，硬盘设备的性能提升却不是很大，因此逐渐成为当代计算机整体性能的瓶颈。而且，由于硬盘设备需要进行持续、频繁、大量的IO操作，相较于其他设备，其损坏几率也大幅增加，导致重要数据丢失的几率也随之增加。','        近年来，CPU的处理性能保持着高速增长，Intel公司在2017年最新发布的i9-7980XE 处理器芯片更是达到了18核心36线程。但与此同时，硬盘设备的性能提升却不是很大，因此逐渐成为当代计算机整体性能的瓶颈。而且，由于硬盘设备需要进行持续、频繁、大量的IO操作，相较于其他设备，其损坏几率也大幅增加，导致重要数据丢失的几率也随之增加。',0,'alvin',curdate());
insert into Content values(244,4,'p',7,'{}','        1988年，加利福尼亚大学伯克利分校首次提出并定义了RAID技术的概念。RAID技术通过把多个硬盘设备组合成一个容量更大、安全性更好的磁盘阵列，并把数据切割成多个区段后分别存放在各个不同的物理硬盘设备上，然后利用分散读写技术来提升磁盘阵列整体的性能，同时把多个重要数据的副本同步到不同的物理硬盘设备上，从而起到了非常好的数据 冗余备份效果。','        1988年，加利福尼亚大学伯克利分校首次提出并定义了RAID技术的概念。RAID技术通过把多个硬盘设备组合成一个容量更大、安全性更好的磁盘阵列，并把数据切割成多个区段后分别存放在各个不同的物理硬盘设备上，然后利用分散读写技术来提升磁盘阵列整体的性能，同时把多个重要数据的副本同步到不同的物理硬盘设备上，从而起到了非常好的数据 冗余备份效果。',0,'alvin',curdate());
insert into Content values(245,4,'p',8,'{}','        任何事物都有它的两面性。RAID技术确实具有非常好的数据冗余备份功能，但是它也相应地提高了成本支出。就像原本我们只有一个电话本，但是为了避免遗失，我们将联系人号码信息写成了两份，自然要为此多买一个电话本，这也就相应地提升了成本支出。RAID技术的设计初衷是减少因为采购硬盘设备带来的费用支出，但是与数据本身的价值相比较，现代企业更看重的则是RAID技术所具备的冗余备份机制以及带来的硬盘吞吐量的提升。也就是说，RAID不仅降低了硬盘设备损坏后丢失数据的几率，还提升了硬盘设备的读写速度，所以它在绝大多数运营商或大中型企业中得以广泛部署和应用。','        任何事物都有它的两面性。RAID技术确实具有非常好的数据冗余备份功能，但是它也相应地提高了成本支出。就像原本我们只有一个电话本，但是为了避免遗失，我们将联系人号码信息写成了两份，自然要为此多买一个电话本，这也就相应地提升了成本支出。RAID技术的设计初衷是减少因为采购硬盘设备带来的费用支出，但是与数据本身的价值相比较，现代企业更看重的则是RAID技术所具备的冗余备份机制以及带来的硬盘吞吐量的提升。也就是说，RAID不仅降低了硬盘设备损坏后丢失数据的几率，还提升了硬盘设备的读写速度，所以它在绝大多数运营商或大中型企业中得以广泛部署和应用。',0,'alvin',curdate());
insert into Content values(246,4,'p',9,'{}','        出于成本和技术方面的考虑，需要针对不同的需求在数据可靠性及读写性能上作出权衡，制定出满足各自需求的不同方案。目前已有的RAID磁盘阵列的方案至少有十几种，而接下来会详细讲解RAID0、RAID1、RAID5与RAID10这4种最常见的方案。','        出于成本和技术方面的考虑，需要针对不同的需求在数据可靠性及读写性能上作出权衡，制定出满足各自需求的不同方案。目前已有的RAID磁盘阵列的方案至少有十几种，而接下来会详细讲解RAID0、RAID1、RAID5与RAID10这4种最常见的方案。',0,'alvin',curdate());
insert into Content values(247,4,'h3',10,'{}','RAID0','RAID0',0,'alvin',curdate());
insert into Content values(248,4,'p',11,'{}','        RAID0技术把多块物理硬盘设备（至少两块）通过硬件或软件的方式串联在一起，组成一个大的卷组，并将数据依次写入到各个物理硬盘中。这样一来，在最理想的状态下，硬盘设 备的读写性能会提升数倍，但是若任意一块硬盘发生故障将导致整个系统的数据都受到破坏。通俗来说，RAID0技术能够有效地提升硬盘数据的吞吐速度，但是不具备数据备份和错误修复能力。如图7-1所示，数据被分别写入到不同的硬盘设备中，即disk1和disk2硬盘设备会分别保存数据资料，最终实现提升读取、写入速度的效果。','        RAID0技术把多块物理硬盘设备（至少两块）通过硬件或软件的方式串联在一起，组成一个大的卷组，并将数据依次写入到各个物理硬盘中。这样一来，在最理想的状态下，硬盘设 备的读写性能会提升数倍，但是若任意一块硬盘发生故障将导致整个系统的数据都受到破坏。通俗来说，RAID0技术能够有效地提升硬盘数据的吞吐速度，但是不具备数据备份和错误修复能力。如图7-1所示，数据被分别写入到不同的硬盘设备中，即disk1和disk2硬盘设备会分别保存数据资料，最终实现提升读取、写入速度的效果。',0,'alvin',curdate());
insert into Content values(249,4,'image',12,'{"alt": "raid0", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_raid0.png", "width": "576"}','/static/img/linux/linux_raid0.png','/static/img/linux/linux_raid0.png',0,'alvin',curdate());
insert into Content values(250,4,'h3',13,'{}','RAID1','RAID1',0,'alvin',curdate());
insert into Content values(251,4,'p',14,'{}','        尽管RAID0技术提升了硬盘设备的读写速度，但是它是将数据依次写入到各个物理硬 盘中，也就是说，它的数据是分开存放的，其中任何一块硬盘发生故障都会损坏整个系统的数据。因此，如果生产环境对硬盘设备的读写速度没有要求，而是希望增加数据的安全性时，就需要用到RAID1技术了。','        尽管RAID0技术提升了硬盘设备的读写速度，但是它是将数据依次写入到各个物理硬 盘中，也就是说，它的数据是分开存放的，其中任何一块硬盘发生故障都会损坏整个系统的数据。因此，如果生产环境对硬盘设备的读写速度没有要求，而是希望增加数据的安全性时，就需要用到RAID1技术了。',0,'alvin',curdate());
insert into Content values(252,4,'p',15,'{}','        所示的RAID1技术示意图中可以看到，它是把两块以上的硬盘设备进行绑定，在写入数据时，是将数据同时写入到多块硬盘设备上（可以将其视为数据的镜像或备份）。当其中某一块硬盘发生故障后，一般会立即自动以热交换的方式来恢复数据的正常 使用。','        所示的RAID1技术示意图中可以看到，它是把两块以上的硬盘设备进行绑定，在写入数据时，是将数据同时写入到多块硬盘设备上（可以将其视为数据的镜像或备份）。当其中某一块硬盘发生故障后，一般会立即自动以热交换的方式来恢复数据的正常 使用。',0,'alvin',curdate());
insert into Content values(253,4,'image',16,'{"alt": "raid1", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_raid1.png", "width": "576"}','/static/img/linux/linux_raid1.png','/static/img/linux/linux_raid1.png',0,'alvin',curdate());
insert into Content values(254,4,'p',17,'{}','        RAID1技术虽然十分注重数据的安全性，但是因为是在多块硬盘设备中写入了相同的数据，因此硬盘设备的利用率得以下降，从理论上来说，图所示的硬盘空间的真实可用率只有50%，由三块硬盘设备组成的RAID1磁盘阵列的可用率只有33%左右，以此类推。而且，由于需要把数据同时写入到两块以上的硬盘设备，这无疑也在一定程度上增大了系统计算功能的负载。','        RAID1技术虽然十分注重数据的安全性，但是因为是在多块硬盘设备中写入了相同的数据，因此硬盘设备的利用率得以下降，从理论上来说，图所示的硬盘空间的真实可用率只有50%，由三块硬盘设备组成的RAID1磁盘阵列的可用率只有33%左右，以此类推。而且，由于需要把数据同时写入到两块以上的硬盘设备，这无疑也在一定程度上增大了系统计算功能的负载。',0,'alvin',curdate());
insert into Content values(255,4,'p',18,'{}','        那么，有没有一种RAID方案既考虑到了硬盘设备的读写速度和数据安全性，还兼顾了成本问题呢？实际上，单从数据安全和成本问题上来讲，就不可能在保持原有硬盘设备的利用率且还不增加新设备的情况下，能大幅提升数据的安全性。刘遄老师也没有必要忽悠各位 读者，下面将要讲解的RAID5技术虽然在理论上兼顾了三者（读写速度、数据安全性、成本），但实际上更像是对这三者的“相互妥协”。','        那么，有没有一种RAID方案既考虑到了硬盘设备的读写速度和数据安全性，还兼顾了成本问题呢？实际上，单从数据安全和成本问题上来讲，就不可能在保持原有硬盘设备的利用率且还不增加新设备的情况下，能大幅提升数据的安全性。刘遄老师也没有必要忽悠各位 读者，下面将要讲解的RAID5技术虽然在理论上兼顾了三者（读写速度、数据安全性、成本），但实际上更像是对这三者的“相互妥协”。',0,'alvin',curdate());
insert into Content values(256,4,'h3',19,'{}','RAID5','RAID5',0,'alvin',curdate());
insert into Content values(257,4,'p',20,'{}','        RAID5技术是把硬盘设备的数据奇偶校验信息保存到其他硬盘设备中。RAID5磁盘阵列组中数据的奇偶校验信息并不是单独保存到某一块硬盘设备中，而是存储到 除自身以外的其他每一块硬盘设备上，这样的好处是其中任何一设备损坏后不至于出现致命缺陷；图7-3中parity部分存放的就是数据的奇偶校验信息，换句话说，就是RAID5技术实际上没有备份硬盘中的真实数据信息，而是当硬盘设备出现问题后通过奇偶校验信息来尝试 重建损坏的数据。RAID这样的技术特性“妥协”地兼顾了硬盘设备的读写速度、数据安全性与存储成本问题。','        RAID5技术是把硬盘设备的数据奇偶校验信息保存到其他硬盘设备中。RAID5磁盘阵列组中数据的奇偶校验信息并不是单独保存到某一块硬盘设备中，而是存储到 除自身以外的其他每一块硬盘设备上，这样的好处是其中任何一设备损坏后不至于出现致命缺陷；图7-3中parity部分存放的就是数据的奇偶校验信息，换句话说，就是RAID5技术实际上没有备份硬盘中的真实数据信息，而是当硬盘设备出现问题后通过奇偶校验信息来尝试 重建损坏的数据。RAID这样的技术特性“妥协”地兼顾了硬盘设备的读写速度、数据安全性与存储成本问题。',0,'alvin',curdate());
insert into Content values(258,4,'image',21,'{"alt": "raid5", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_raid5.png", "width": "576"}','/static/img/linux/linux_raid5.png','/static/img/linux/linux_raid5.png',0,'alvin',curdate());
insert into Content values(259,4,'h3',22,'{}','RAID10','RAID10',0,'alvin',curdate());
insert into Content values(260,4,'p',23,'{}','        鉴于RAID5技术是因为硬盘设备的成本问题对读写速度和数据的安全性能而有了一定的妥协，但是大部分企业更在乎的是数据本身的价值而非硬盘价格，因此生产环境中主要使用RAID10技术。','        鉴于RAID5技术是因为硬盘设备的成本问题对读写速度和数据的安全性能而有了一定的妥协，但是大部分企业更在乎的是数据本身的价值而非硬盘价格，因此生产环境中主要使用RAID10技术。',0,'alvin',curdate());
insert into Content values(261,4,'p',24,'{}','        顾名思义，RAID10技术是RAID1+RAID0技术的一个“组合体”。如图所示，RAID10技术需要至少4块硬盘来组建，其中先分别两两制作成RAID1磁盘阵列，以保证数据的安全性；然后再对两个RAID1磁盘阵列实施RAID0技术，进一步提高硬盘设 备的读写速度。这样从理论上来讲，只要坏的不是同一组中的所有硬盘，那么最多可以损坏50%的硬盘设备而不丢失数据。由于RAID10技术继承了RAID0的高读写速度和RAID 1的数据安全性，在不考虑成本的情况下RAID10的性能都超过了RAID5，因此当前成为广泛使用的一种存储技术。','        顾名思义，RAID10技术是RAID1+RAID0技术的一个“组合体”。如图所示，RAID10技术需要至少4块硬盘来组建，其中先分别两两制作成RAID1磁盘阵列，以保证数据的安全性；然后再对两个RAID1磁盘阵列实施RAID0技术，进一步提高硬盘设 备的读写速度。这样从理论上来讲，只要坏的不是同一组中的所有硬盘，那么最多可以损坏50%的硬盘设备而不丢失数据。由于RAID10技术继承了RAID0的高读写速度和RAID 1的数据安全性，在不考虑成本的情况下RAID10的性能都超过了RAID5，因此当前成为广泛使用的一种存储技术。',0,'alvin',curdate());
insert into Content values(262,4,'image',25,'{"alt": "raid10", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_raid10.png", "width": "576"}','/static/img/linux/linux_raid10.png','/static/img/linux/linux_raid10.png',0,'alvin',curdate());
insert into Content values(263,4,'h3',26,'{}','部署磁盘阵列','部署磁盘阵列',0,'alvin',curdate());
insert into Content values(264,4,'p',27,'{}','        在具备了上一章的硬盘设备管理基础之后，再来部署RAID和LVM就变得十分轻松了。首 先，需要在虚拟机中添加4块硬盘设备来制作一个RAID10磁盘阵列，如图所示。','        在具备了上一章的硬盘设备管理基础之后，再来部署RAID和LVM就变得十分轻松了。首 先，需要在虚拟机中添加4块硬盘设备来制作一个RAID10磁盘阵列，如图所示。',0,'alvin',curdate());
insert into Content values(265,4,'image',28,'{"alt": "raidset1", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_raidset1.png", "width": "576"}','/static/img/linux/linux_raidset1.png','/static/img/linux/linux_raidset1.png',0,'alvin',curdate());
insert into Content values(266,4,'p',29,'{}','        这几块硬盘设备是模拟出来的，不需要特意去买几块真实的物理硬盘插到电脑上。需要 注意的是，一定要记得在关闭系统之后，再在虚拟机中添加硬盘设备，否则可能会因为计算机架构的不同而导致虚拟机系统无法识别添加的硬盘设备。','        这几块硬盘设备是模拟出来的，不需要特意去买几块真实的物理硬盘插到电脑上。需要 注意的是，一定要记得在关闭系统之后，再在虚拟机中添加硬盘设备，否则可能会因为计算机架构的不同而导致虚拟机系统无法识别添加的硬盘设备。',0,'alvin',curdate());
insert into Content values(267,4,'p',30,'{}','        mdadm命令用于管理Linux系统中的软件RAID硬盘阵列，格式为“mdadm[模式] RAID 设备名称 [选项][成员设备名称]”。','        mdadm命令用于管理Linux系统中的软件RAID硬盘阵列，格式为“mdadm[模式] RAID 设备名称 [选项][成员设备名称]”。',0,'alvin',curdate());
insert into Content values(268,4,'p',31,'{}','        当前，生产环境中用到的服务器一般都配备RAID阵列卡，尽管服务器的价格越来越便宜，但是我们没有必要为了做一个实验而去单独购买一台服务器，而是可以学会用mdadm命令在Linux系统中创建和管理软件RAID磁盘阵列，而且它涉及的理论知识的操作过程与生产环境中的完全一致。mdadm命令的常用参数以及作用如表所示。','        当前，生产环境中用到的服务器一般都配备RAID阵列卡，尽管服务器的价格越来越便宜，但是我们没有必要为了做一个实验而去单独购买一台服务器，而是可以学会用mdadm命令在Linux系统中创建和管理软件RAID磁盘阵列，而且它涉及的理论知识的操作过程与生产环境中的完全一致。mdadm命令的常用参数以及作用如表所示。',0,'alvin',curdate());
insert into Content values(269,4,'table',32,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-a	检测设备名称
-n	指定设备数量
-l	指定RAID级别
-C	创建
-v	显示过程
-f	模拟设备损坏
-r	移除设备
-Q	查看摘要信息
-D	查看详细信息
-S	停止RAID磁盘阵列','参数	作用
-a	检测设备名称
-n	指定设备数量
-l	指定RAID级别
-C	创建
-v	显示过程
-f	模拟设备损坏
-r	移除设备
-Q	查看摘要信息
-D	查看详细信息
-S	停止RAID磁盘阵列',0,'alvin',curdate());
insert into Content values(270,4,'p',33,'{}','        接下来，使用mdadm命令创建RAID10，名称为“/dev/md0”。udev是Linux系统内核中用来给硬件命名的服务，其命名规则也非 常简单。我们可以通过命名规则猜测到第二个SCSI存储设备的名称会是/dev/sdb，然后依此类推。使用硬盘设备来部署RAID磁盘阵列很像是将几位同学组成一个班级，但总不能将班级命名为/dev/sdbcde吧。尽管这样可以一眼看出它是由哪些元素组成的，但是并不利于我们的记忆和阅读。更何况如果我们是使用10、50、100个硬盘来部署RAID 磁盘阵列呢？','        接下来，使用mdadm命令创建RAID10，名称为“/dev/md0”。udev是Linux系统内核中用来给硬件命名的服务，其命名规则也非 常简单。我们可以通过命名规则猜测到第二个SCSI存储设备的名称会是/dev/sdb，然后依此类推。使用硬盘设备来部署RAID磁盘阵列很像是将几位同学组成一个班级，但总不能将班级命名为/dev/sdbcde吧。尽管这样可以一眼看出它是由哪些元素组成的，但是并不利于我们的记忆和阅读。更何况如果我们是使用10、50、100个硬盘来部署RAID 磁盘阵列呢？',0,'alvin',curdate());
insert into Content values(271,4,'p',34,'{}','        此时，就需要使用mdadm中的参数了。其中，-C参数代表创建一个RAID阵列卡；-v参数显示创建的过程，同时在后面追加一个设备名称/dev/md0，这样/dev/md0就是创建后的RAID 磁盘阵列的名称；-a yes参数代表自动创建设备文件；-n 4参数代表使用4块硬盘来部署这个RAID磁盘阵列；而-l 10参数则代表RAID10方案；最后再加上4块硬盘设备的名称就搞定了。','        此时，就需要使用mdadm中的参数了。其中，-C参数代表创建一个RAID阵列卡；-v参数显示创建的过程，同时在后面追加一个设备名称/dev/md0，这样/dev/md0就是创建后的RAID 磁盘阵列的名称；-a yes参数代表自动创建设备文件；-n 4参数代表使用4块硬盘来部署这个RAID磁盘阵列；而-l 10参数则代表RAID10方案；最后再加上4块硬盘设备的名称就搞定了。',0,'alvin',curdate());
insert into Content values(272,4,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde 
mdadm: layout defaults to n2 
mdadm: layout defaults to n2 
mdadm: chunk size defaults to 512K 
mdadm: size set to 20954624K 
mdadm: Defaulting to version1.2 metadata 
mdadm: array /dev/md0 started.
','[root@linuxprobe ~]# mdadm -Cv /dev/md0 -a yes -n 4 -l 10 /dev/sdb /dev/sdc /dev/sdd /dev/sde 
mdadm: layout defaults to n2 
mdadm: layout defaults to n2 
mdadm: chunk size defaults to 512K 
mdadm: size set to 20954624K 
mdadm: Defaulting to version1.2 metadata 
mdadm: array /dev/md0 started.
',0,'alvin',curdate());
insert into Content values(273,4,'p',36,'{}','        其次，把制作好的 RAID 磁盘阵列格式化为 ext4 格式。','        其次，把制作好的 RAID 磁盘阵列格式化为 ext4 格式。',0,'alvin',curdate());
insert into Content values(274,4,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkfs.ext4 /dev/md0 
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type:Linux 
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=128 blocks,Stripe width=256 blocks
2621440 inodes,10477312 blocks 
523865 blocks (5.00%) reserved for the super user 
First data block=0 
Maximum file system blocks=2157969408 
320 block groups 
32768 blocks per group,32768 fragments per group 
8192 inodes per group 
Super block backups stored on blocks:
32768,98304,163840,229376,294912,819200,884736,1605632,2654208,4096000,7962624 
Allocating group tables: done 
Writing inode tables: done 
Creating journal (32768 blocks): done 
Writing super blocks and filesystem accounting information: done
','[root@linuxprobe ~]# mkfs.ext4 /dev/md0 
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type:Linux 
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=128 blocks,Stripe width=256 blocks
2621440 inodes,10477312 blocks 
523865 blocks (5.00%) reserved for the super user 
First data block=0 
Maximum file system blocks=2157969408 
320 block groups 
32768 blocks per group,32768 fragments per group 
8192 inodes per group 
Super block backups stored on blocks:
32768,98304,163840,229376,294912,819200,884736,1605632,2654208,4096000,7962624 
Allocating group tables: done 
Writing inode tables: done 
Creating journal (32768 blocks): done 
Writing super blocks and filesystem accounting information: done
',0,'alvin',curdate());
insert into Content values(275,4,'p',38,'{}','        再次，创建挂载点然后把硬盘设备进行挂载操作。挂载成功后可看到可用空间为40GB。','        再次，创建挂载点然后把硬盘设备进行挂载操作。挂载成功后可看到可用空间为40GB。',0,'alvin',curdate());
insert into Content values(276,4,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mkdir /RAID 
[root@linuxprobe ~]#mount /dev/md0 /RAID 
[root@linuxprobe ~]#df -h
Filesystem                     Size          Used Avail Use% Mounted on
/dev/mapper/rhel-root          18G           3.0G 15G   17%  /
devtmpfs                       905M          0    905M  0%   /dev 
tmpfs                          914M          84K  914M  1%   /dev/shm 
tmpfs                          914M          8.9M 905M  1%   /run 
tmpfs                          914M          0    914M  0%   /sys/fs/cgroup 
/dev/sr0                       3.5G          3.5G 0     100% /media/cdrom
/dev/sda1                      497M          119M 379M  24%  /boot
/dev/md0                       40G           49M  38G   1%   /RAID
','[root@linuxprobe ~]#mkdir /RAID 
[root@linuxprobe ~]#mount /dev/md0 /RAID 
[root@linuxprobe ~]#df -h
Filesystem                     Size          Used Avail Use% Mounted on
/dev/mapper/rhel-root          18G           3.0G 15G   17%  /
devtmpfs                       905M          0    905M  0%   /dev 
tmpfs                          914M          84K  914M  1%   /dev/shm 
tmpfs                          914M          8.9M 905M  1%   /run 
tmpfs                          914M          0    914M  0%   /sys/fs/cgroup 
/dev/sr0                       3.5G          3.5G 0     100% /media/cdrom
/dev/sda1                      497M          119M 379M  24%  /boot
/dev/md0                       40G           49M  38G   1%   /RAID
',0,'alvin',curdate());
insert into Content values(277,4,'p',40,'{}','        最后，查看/dev/md0磁盘阵列的详细信息，并把挂载信息写入到配置文件中，使其永久生效。','        最后，查看/dev/md0磁盘阵列的详细信息，并把挂载信息写入到配置文件中，使其永久生效。',0,'alvin',curdate());
insert into Content values(278,4,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mdadm -D /dev/md0 
/dev/md0:
Version : 1.2 
Creation Time: Tue May 5 07:43:26 2017 
Raid Level:raid10 
Array Size:41909248 (39.97 GiB 42.92 GB)
Used Dev Size:20954624(19.98 GiB 21.46 GB)
Raid Devices:4 
Total Devices:4 
Persistence: Superblock is persistent 
Update Time: Tue May 5 07:46:59 2017 
State: clean 
Active Devices:4 
Working Devices:4 
Failed Devices:0 
Spare Devices:0 
Layout:near=2 
Chunk Size: 512K 
Name: localhost.localdomain:0(local to host localhost.localdomain)
UUID: cc9a87d4:1e89e175:5383e1e8:a78ec62c 
Events: 17
Number Major Minor Raid Device State 
0 8 16 0 active sync /dev/sdb 
1 8 32 1 active sync /dev/sdc 
2 8 48 2 active sync /dev/sdd 
3 8 64 3 active sync /dev/sde 
[root@linuxprobe ~]# echo "/dev/md0 /RAID ext4 defaults 0 0" >> /etc/fstab
','[root@linuxprobe ~]# mdadm -D /dev/md0 
/dev/md0:
Version : 1.2 
Creation Time: Tue May 5 07:43:26 2017 
Raid Level:raid10 
Array Size:41909248 (39.97 GiB 42.92 GB)
Used Dev Size:20954624(19.98 GiB 21.46 GB)
Raid Devices:4 
Total Devices:4 
Persistence: Superblock is persistent 
Update Time: Tue May 5 07:46:59 2017 
State: clean 
Active Devices:4 
Working Devices:4 
Failed Devices:0 
Spare Devices:0 
Layout:near=2 
Chunk Size: 512K 
Name: localhost.localdomain:0(local to host localhost.localdomain)
UUID: cc9a87d4:1e89e175:5383e1e8:a78ec62c 
Events: 17
Number Major Minor Raid Device State 
0 8 16 0 active sync /dev/sdb 
1 8 32 1 active sync /dev/sdc 
2 8 48 2 active sync /dev/sdd 
3 8 64 3 active sync /dev/sde 
[root@linuxprobe ~]# echo "/dev/md0 /RAID ext4 defaults 0 0" >> /etc/fstab
',0,'alvin',curdate());
insert into Content values(279,4,'h3',42,'{}','损坏磁盘阵列及修复','损坏磁盘阵列及修复',0,'alvin',curdate());
insert into Content values(280,4,'p',43,'{}','        之所以在生产环境中部署RAID10磁盘阵列，是为了提高硬盘存储设备的读写速度及数 据的安全性，但由于我们的硬盘设备是在虚拟机中模拟出来的，因此对读写速度的改善可能并不直观，因此刘遄老师决定给各位读者讲解一下RAID磁盘阵列损坏后的处理方法，这样 大家在步入运维岗位后遇到类似问题时，也可以轻松解决。','        之所以在生产环境中部署RAID10磁盘阵列，是为了提高硬盘存储设备的读写速度及数 据的安全性，但由于我们的硬盘设备是在虚拟机中模拟出来的，因此对读写速度的改善可能并不直观，因此刘遄老师决定给各位读者讲解一下RAID磁盘阵列损坏后的处理方法，这样 大家在步入运维岗位后遇到类似问题时，也可以轻松解决。',0,'alvin',curdate());
insert into Content values(281,4,'p',44,'{}','        在确认有一块物理硬盘设备出现损坏而不能继续正常使用后，应该使用mdadm命令将其 移除，然后查看RAID磁盘阵列的状态，可以发现状态已经改变。','        在确认有一块物理硬盘设备出现损坏而不能继续正常使用后，应该使用mdadm命令将其 移除，然后查看RAID磁盘阵列的状态，可以发现状态已经改变。',0,'alvin',curdate());
insert into Content values(282,4,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mdadm dev/md0 -f /dev/sdb 
mdadm: set /dev/sdb faulty in /dev/md0 
[root@linuxprobe ~]#mdadm -D /dev/md0 
/dev/md0:
Version:1.2 
Creation Time:Fri May 8 08:11:00 2017 
Raid Level:raid10 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:4 
Total Devices:4 
Persistence:Super block is persistent 
Update Time:Fri May8 08:27:18 2017 
State:clean,degraded 
Active Devices:3 
Working Devices:3 
Failed Devices:1 
Spare Devices:0 
Layout:near=2 
ChunkSize:512K 
Name:linuxprobe.com:0(local to host linuxprobe.com)
UUID:f2993bbd:99c1eb63:bd61d4d4:3f06c3b0 
Events:21 
Number Major Minor Raid Device State 
0 0 00 removed 
1 8 32 1 active sync /dev/sdc 
2 8 48 2 active sync /dev/sdd 
3 8 64 3 active sync /dev/sde
0 8 16 – faulty      /dev/sdb
','[root@linuxprobe ~]# mdadm dev/md0 -f /dev/sdb 
mdadm: set /dev/sdb faulty in /dev/md0 
[root@linuxprobe ~]#mdadm -D /dev/md0 
/dev/md0:
Version:1.2 
Creation Time:Fri May 8 08:11:00 2017 
Raid Level:raid10 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:4 
Total Devices:4 
Persistence:Super block is persistent 
Update Time:Fri May8 08:27:18 2017 
State:clean,degraded 
Active Devices:3 
Working Devices:3 
Failed Devices:1 
Spare Devices:0 
Layout:near=2 
ChunkSize:512K 
Name:linuxprobe.com:0(local to host linuxprobe.com)
UUID:f2993bbd:99c1eb63:bd61d4d4:3f06c3b0 
Events:21 
Number Major Minor Raid Device State 
0 0 00 removed 
1 8 32 1 active sync /dev/sdc 
2 8 48 2 active sync /dev/sdd 
3 8 64 3 active sync /dev/sde
0 8 16 – faulty      /dev/sdb
',0,'alvin',curdate());
insert into Content values(283,4,'p',46,'{}','        在RAID10级别的磁盘阵列中，当RAID1磁盘阵列中存在一个故障盘时并不影响RAID 10磁盘阵列的使用。当购买了新的硬盘设备后再使用mdadm命令来予以替换即可，在此期间 我们可以在/RAID目录中正常地创建或删除文件。由于我们是在虚拟机中模拟硬盘，所以先 重启系统，然后再把新的硬盘添加到RAID磁盘阵列中。','        在RAID10级别的磁盘阵列中，当RAID1磁盘阵列中存在一个故障盘时并不影响RAID 10磁盘阵列的使用。当购买了新的硬盘设备后再使用mdadm命令来予以替换即可，在此期间 我们可以在/RAID目录中正常地创建或删除文件。由于我们是在虚拟机中模拟硬盘，所以先 重启系统，然后再把新的硬盘添加到RAID磁盘阵列中。',0,'alvin',curdate());
insert into Content values(284,4,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#umount /RAID
[root@linuxprobe ~]#mdadm /dev/md0 -a /dev/sdb 
[root@linuxprobe ~]#mdadm -D /dev/md0 
/dev/md0:
Version:1.2 
Creation Time:Mon Jan 30 00:08:56 2017 
Raid Level:raid10 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:4 
Total Devices:4 
Persistence:Superblockispersistent 
Update Time:Mon Jan 30 00:19:53 2017 
State:clean 
Active Devices:4 
Working Devices:4 
Failed Devices:0 
Spare Devices:0 
Layout:near=2 
Chunk Size:512K 
Name:localhost.localdomain:0(local to host localhost.localdomain)
UUID:d3491c05:cfc81ca0:32489f04:716a2cf0 
Events:56 
Number Major Minor Raid Device State 
4 8 16 0 active sync /dev/sdb 
1 8 32 1 active sync /dev/sdc 
2 8 48 2 active sync /dev/sdd 
3 8 64 3 active sync /dev/sde 
[root@linuxprobe ~]#mount –a
','[root@linuxprobe ~]#umount /RAID
[root@linuxprobe ~]#mdadm /dev/md0 -a /dev/sdb 
[root@linuxprobe ~]#mdadm -D /dev/md0 
/dev/md0:
Version:1.2 
Creation Time:Mon Jan 30 00:08:56 2017 
Raid Level:raid10 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:4 
Total Devices:4 
Persistence:Superblockispersistent 
Update Time:Mon Jan 30 00:19:53 2017 
State:clean 
Active Devices:4 
Working Devices:4 
Failed Devices:0 
Spare Devices:0 
Layout:near=2 
Chunk Size:512K 
Name:localhost.localdomain:0(local to host localhost.localdomain)
UUID:d3491c05:cfc81ca0:32489f04:716a2cf0 
Events:56 
Number Major Minor Raid Device State 
4 8 16 0 active sync /dev/sdb 
1 8 32 1 active sync /dev/sdc 
2 8 48 2 active sync /dev/sdd 
3 8 64 3 active sync /dev/sde 
[root@linuxprobe ~]#mount –a
',0,'alvin',curdate());
insert into Content values(285,4,'h3',48,'{}','磁盘阵列+备份盘','磁盘阵列+备份盘',0,'alvin',curdate());
insert into Content values(286,4,'p',49,'{}','        RAID10磁盘阵列中最多允许50%的硬盘设备发生故障，但是存在这样一种极端情况，即同一RAID1磁盘阵列中的硬盘设备若全部损坏，也会导致数据丢失。换句话说，在RAID 10磁盘阵列中，如果RAID1中的某一块硬盘出现了故障，而我们正在前往修复的路上，恰巧该RAID1磁盘阵列中的另一块硬盘设备也出现故障，那么数据就被彻底丢失了。刘遄老师可真不是乌鸦嘴，这种RAID1磁盘阵列中的硬盘设备同时损坏的情况还真被我的学生遇到过。','        RAID10磁盘阵列中最多允许50%的硬盘设备发生故障，但是存在这样一种极端情况，即同一RAID1磁盘阵列中的硬盘设备若全部损坏，也会导致数据丢失。换句话说，在RAID 10磁盘阵列中，如果RAID1中的某一块硬盘出现了故障，而我们正在前往修复的路上，恰巧该RAID1磁盘阵列中的另一块硬盘设备也出现故障，那么数据就被彻底丢失了。刘遄老师可真不是乌鸦嘴，这种RAID1磁盘阵列中的硬盘设备同时损坏的情况还真被我的学生遇到过。',0,'alvin',curdate());
insert into Content values(287,4,'p',50,'{}','        在这样的情况下，该怎么办呢？其实，我们完全可以使用RAID备份盘技术来预防这类事故。该技术的核心理念就是准备一块足够大的硬盘，这块硬盘平时处于闲置状态，一旦RAID 磁盘阵列中有硬盘出现故障后则会马上自动顶替上去。这样很棒吧！','        在这样的情况下，该怎么办呢？其实，我们完全可以使用RAID备份盘技术来预防这类事故。该技术的核心理念就是准备一块足够大的硬盘，这块硬盘平时处于闲置状态，一旦RAID 磁盘阵列中有硬盘出现故障后则会马上自动顶替上去。这样很棒吧！',0,'alvin',curdate());
insert into Content values(288,4,'p',51,'{}','        为了避免多个实验之间相互发生冲突，我们需要保证每个实验的相对独立性，为此需要大家自行将虚拟机还原到初始状态。另外，由于刚才已经演示了RAID10磁盘阵列的部 署方法，我们现在来看一下RAID5的部署效果。部署RAID5磁盘阵列时，至少需要用到3块硬盘，还需要再加一块备份硬盘，所以总计需要在虚拟机中模拟4块硬盘设备，如图所示。','        为了避免多个实验之间相互发生冲突，我们需要保证每个实验的相对独立性，为此需要大家自行将虚拟机还原到初始状态。另外，由于刚才已经演示了RAID10磁盘阵列的部 署方法，我们现在来看一下RAID5的部署效果。部署RAID5磁盘阵列时，至少需要用到3块硬盘，还需要再加一块备份硬盘，所以总计需要在虚拟机中模拟4块硬盘设备，如图所示。',0,'alvin',curdate());
insert into Content values(289,4,'p',52,'{}','','',0,'alvin',curdate());
insert into Content values(290,4,'image',53,'{"alt": "raidbackup1", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_raidbackup.png", "width": "576"}','/static/img/linux/linux_raidbackup.png','/static/img/linux/linux_raidbackup.png',0,'alvin',curdate());
insert into Content values(291,4,'p',54,'{}','        现在创建一个RAID5磁盘阵列+备份盘。在下面的命令中，参数-n3代表创建这个RAID5磁盘阵列所需的硬盘数，参数-l5代表RAID的级别，而参数-x1则代表有一块备份盘。当查看/dev/md0（即RAID5磁盘阵列的名称）磁盘阵列的时候就能看到有一块备份盘在等待中了。','        现在创建一个RAID5磁盘阵列+备份盘。在下面的命令中，参数-n3代表创建这个RAID5磁盘阵列所需的硬盘数，参数-l5代表RAID的级别，而参数-x1则代表有一块备份盘。当查看/dev/md0（即RAID5磁盘阵列的名称）磁盘阵列的时候就能看到有一块备份盘在等待中了。',0,'alvin',curdate());
insert into Content values(292,4,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde 
mdadm: layout defaults to left-symmetric 
mdadm: layout defaults to left-symmetric 
mdadm: chunk size defaults to 512K 
mdadm: size set to 20954624K 
mdadm: Defaulting to version 1.2 metadata 
mdadm: array /dev/md0 started.
[root@linuxprobe~]#mdadm -D /dev/md0 
/dev/md0:
Version: 1.2 
Creation Time:Fri May 8 09:20:35 2017 
Raid Level:raid5 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:3 
Total Devices:4 
Persistence:Super block is persistent 
Update Time:Fri May 8 09:22:22 2017 
State:clean 
Active Devices:3
Working Devices:4 
Failed Devices:0 
Spare Devices:1 
Layout:left-symmetric 
Chunk Size:512K 
Name:linuxprobe.com:0(local to host linuxprobe.com)
UUID:44b1a152:3f1809d3:1d234916:4ac70481 
Events:18 
Number Major Minor Raid Device State
0 8 16 0 active sync /dev/sdb 
1 8 32 1 active sync /dev/sdc 
4 8 48 2 active sync /dev/sdd
3 8 64 - spare       /dev/sde
','[root@linuxprobe ~]#mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde 
mdadm: layout defaults to left-symmetric 
mdadm: layout defaults to left-symmetric 
mdadm: chunk size defaults to 512K 
mdadm: size set to 20954624K 
mdadm: Defaulting to version 1.2 metadata 
mdadm: array /dev/md0 started.
[root@linuxprobe~]#mdadm -D /dev/md0 
/dev/md0:
Version: 1.2 
Creation Time:Fri May 8 09:20:35 2017 
Raid Level:raid5 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:3 
Total Devices:4 
Persistence:Super block is persistent 
Update Time:Fri May 8 09:22:22 2017 
State:clean 
Active Devices:3
Working Devices:4 
Failed Devices:0 
Spare Devices:1 
Layout:left-symmetric 
Chunk Size:512K 
Name:linuxprobe.com:0(local to host linuxprobe.com)
UUID:44b1a152:3f1809d3:1d234916:4ac70481 
Events:18 
Number Major Minor Raid Device State
0 8 16 0 active sync /dev/sdb 
1 8 32 1 active sync /dev/sdc 
4 8 48 2 active sync /dev/sdd
3 8 64 - spare       /dev/sde
',0,'alvin',curdate());
insert into Content values(293,4,'p',56,'{}','        现在将部署好的RAID5磁盘阵列格式化为ext4文件格式，然后挂载到目录上，之后就 可以使用了。','        现在将部署好的RAID5磁盘阵列格式化为ext4文件格式，然后挂载到目录上，之后就 可以使用了。',0,'alvin',curdate());
insert into Content values(294,4,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkfs.ext4 /dev/md0 
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type:Linux 
Block size=4096 (log=2)
Fragment size=4096(log=2)
Stride=128 blocks,Stripe width=256 blocks 
2621440 inodes,10477312 blocks 
523865 blocks(5.00%) reserved for the super user 
First data block=0 
Maximum filesystem blocks=2157969408 
320 block groups 
32768 blocks per group,32768 fragments per group 
8192 inodes per group 
Super block backups stored on blocks:
32768,98304,163840,229376,294912,819200,884736,1605632,2654208,
4096000,7962624 
Allocatin group tables:done 
Writing inode tables:done 
Creating journal (32768 blocks):done 
Writing super blocks and filesystem accounting information:done 
[root@linuxprobe ~]#echo "/dev/md0/RAID ext4 defaults 00" >> /etc/fstab 
[root@linuxprobe ~]#mkdir /RAID 
[root@linuxprobe ~]#mount -a
','[root@linuxprobe ~]# mkfs.ext4 /dev/md0 
mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type:Linux 
Block size=4096 (log=2)
Fragment size=4096(log=2)
Stride=128 blocks,Stripe width=256 blocks 
2621440 inodes,10477312 blocks 
523865 blocks(5.00%) reserved for the super user 
First data block=0 
Maximum filesystem blocks=2157969408 
320 block groups 
32768 blocks per group,32768 fragments per group 
8192 inodes per group 
Super block backups stored on blocks:
32768,98304,163840,229376,294912,819200,884736,1605632,2654208,
4096000,7962624 
Allocatin group tables:done 
Writing inode tables:done 
Creating journal (32768 blocks):done 
Writing super blocks and filesystem accounting information:done 
[root@linuxprobe ~]#echo "/dev/md0/RAID ext4 defaults 00" >> /etc/fstab 
[root@linuxprobe ~]#mkdir /RAID 
[root@linuxprobe ~]#mount -a
',0,'alvin',curdate());
insert into Content values(295,4,'p',58,'{}','        最后是见证奇迹的时刻！我们再次把硬盘设备/dev/sdb移出磁盘阵列，然后迅速查看/dev/md0磁盘阵列的状态，就会发现备份盘已经被自动顶替上去并开始了数据同步。RAID中的这种备份盘技术非常实用，可以在保证RAID磁盘阵列数据安全性的基础上进一步提高数 据可靠性，所以，如果公司不差钱的话还是再买上一块备份盘以防万一。','        最后是见证奇迹的时刻！我们再次把硬盘设备/dev/sdb移出磁盘阵列，然后迅速查看/dev/md0磁盘阵列的状态，就会发现备份盘已经被自动顶替上去并开始了数据同步。RAID中的这种备份盘技术非常实用，可以在保证RAID磁盘阵列数据安全性的基础上进一步提高数 据可靠性，所以，如果公司不差钱的话还是再买上一块备份盘以防万一。',0,'alvin',curdate());
insert into Content values(296,4,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mdadm /dev/md0 -f /dev/sdb 
mdadm:set /dev/sdb faulty in /dev/md0 
[root@linuxprobe ~]#mdadm -D /dev/md0 
/dev/md0:
Version: 1.2 
Creation Time: Fri May 8 09:20:35 2017 
Raid Level:raid5 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:3 
Total Devices:4 
Persistence:Super block is persistent 
Update Time:Fri May 8 09:23:51 2017 
State:active,degraded,recovering 
Active Devices:2 
Working Devices:3 
Failed Devices:1 
Spare Devices:1 
Layout:left-symmetric 
Chunk Size:512K 
Rebuild Status:0% complete 
Name:linuxprobe.com:0(local to host linuxprobe.com)
UUID:44b1a152:3f1809d3:1d234916:4ac70481 
Events:21 
Number Major Minor Raid Device State
3 8 64 - spare  rebuilding /dev/sde
1 8 32 1 active sync /dev/sdc 
4 8 48 2 active sync /dev/sdd
0 8 16 - faulty      /dev/sdb 
','[root@linuxprobe ~]#mdadm /dev/md0 -f /dev/sdb 
mdadm:set /dev/sdb faulty in /dev/md0 
[root@linuxprobe ~]#mdadm -D /dev/md0 
/dev/md0:
Version: 1.2 
Creation Time: Fri May 8 09:20:35 2017 
Raid Level:raid5 
Array Size:41909248(39.97 GiB 42.92GB)
Used Dev Size:20954624(19.98 GiB 21.46GB)
Raid Devices:3 
Total Devices:4 
Persistence:Super block is persistent 
Update Time:Fri May 8 09:23:51 2017 
State:active,degraded,recovering 
Active Devices:2 
Working Devices:3 
Failed Devices:1 
Spare Devices:1 
Layout:left-symmetric 
Chunk Size:512K 
Rebuild Status:0% complete 
Name:linuxprobe.com:0(local to host linuxprobe.com)
UUID:44b1a152:3f1809d3:1d234916:4ac70481 
Events:21 
Number Major Minor Raid Device State
3 8 64 - spare  rebuilding /dev/sde
1 8 32 1 active sync /dev/sdc 
4 8 48 2 active sync /dev/sdd
0 8 16 - faulty      /dev/sdb 
',0,'alvin',curdate());
insert into Content values(297,4,'line',60,'{}','','',0,'alvin',curdate());
insert into Content values(298,4,'h2',61,'{}','LVM（逻辑卷管理器）','LVM（逻辑卷管理器）',0,'alvin',curdate());
insert into Content values(299,4,'p',62,'{}','        前面学习的硬盘设备管理技术虽然能够有效地提高硬盘设备的读写速度以及数据的安全性，但是在硬盘分好区或者部署为RAID磁盘阵列之后，再想修改硬盘分区大小就不容易了。换句话说，当用户想要随着实际需求的变化调整硬盘分区的大小时，会受到硬盘“灵活性”的限制。这时就需要用到另外一项非常普及的硬盘设备资源管理技术了—LVM （逻辑卷管理器）。LVM可以允许用户对硬盘资源进行动态调整。','        前面学习的硬盘设备管理技术虽然能够有效地提高硬盘设备的读写速度以及数据的安全性，但是在硬盘分好区或者部署为RAID磁盘阵列之后，再想修改硬盘分区大小就不容易了。换句话说，当用户想要随着实际需求的变化调整硬盘分区的大小时，会受到硬盘“灵活性”的限制。这时就需要用到另外一项非常普及的硬盘设备资源管理技术了—LVM （逻辑卷管理器）。LVM可以允许用户对硬盘资源进行动态调整。',0,'alvin',curdate());
insert into Content values(300,4,'p',63,'{}','        逻辑卷管理器是Linux系统用于对硬盘分区进行管理的一种机制，理论性较强，其创建初衷是为了解决硬盘设备在创建分区后不易修改分区大小的缺陷。尽管对传统的硬盘分区进 行强制扩容或缩容从理论上来讲是可行的，但是却可能造成数据的丢失。而LVM技术是在硬 盘分区和文件系统之间添加了一个逻辑层，它提供了一个抽象的卷组，可以把多块硬盘进行 卷组合并。这样一来，用户不必关心物理硬盘设备的底层架构和布局，就可以实现对硬盘分区的动态调整。LVM的技术架构如图所示。','        逻辑卷管理器是Linux系统用于对硬盘分区进行管理的一种机制，理论性较强，其创建初衷是为了解决硬盘设备在创建分区后不易修改分区大小的缺陷。尽管对传统的硬盘分区进 行强制扩容或缩容从理论上来讲是可行的，但是却可能造成数据的丢失。而LVM技术是在硬 盘分区和文件系统之间添加了一个逻辑层，它提供了一个抽象的卷组，可以把多块硬盘进行 卷组合并。这样一来，用户不必关心物理硬盘设备的底层架构和布局，就可以实现对硬盘分区的动态调整。LVM的技术架构如图所示。',0,'alvin',curdate());
insert into Content values(301,4,'image',64,'{"alt": "lvm0", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_lvm.png", "width": "876"}','/static/img/linux/linux_lvm.png','/static/img/linux/linux_lvm.png',0,'alvin',curdate());
insert into Content values(302,4,'p',65,'{}','        为了帮助大家理解，来举一个吃货的例子。比如小明家里想吃馒头但是面粉不够了，于是妈妈从隔壁老王家、老李家、老张家分别借来一些面粉，准备蒸馒头吃。首先需要 把这些面粉（物理卷[PV，PhysicalVolume]）揉成一个大面团（卷组[VG，VolumeGroup]），然后再把这个大面团分割成一个个小馒头（逻辑卷[LV，LogicalVolume]），而且每个小馒头的重量必须是每勺面粉（基本单元[PE，PhysicalExtent]）的倍数。','        为了帮助大家理解，来举一个吃货的例子。比如小明家里想吃馒头但是面粉不够了，于是妈妈从隔壁老王家、老李家、老张家分别借来一些面粉，准备蒸馒头吃。首先需要 把这些面粉（物理卷[PV，PhysicalVolume]）揉成一个大面团（卷组[VG，VolumeGroup]），然后再把这个大面团分割成一个个小馒头（逻辑卷[LV，LogicalVolume]），而且每个小馒头的重量必须是每勺面粉（基本单元[PE，PhysicalExtent]）的倍数。',0,'alvin',curdate());
insert into Content values(303,4,'p',66,'{}','        物理卷处于LVM中的最底层，可以将其理解为物理硬盘、硬盘分区或者RAID磁盘阵列，这都可以。卷组建立在物理卷之上，一个卷组可以包含多个物理卷，而且在卷组创建之后也可以继续向其中添加新的物理卷。逻辑卷是用卷组中空闲的资源建立的，并且逻辑卷在建立后可以动态地扩展或缩小空间。这就是LVM的核心理念。','        物理卷处于LVM中的最底层，可以将其理解为物理硬盘、硬盘分区或者RAID磁盘阵列，这都可以。卷组建立在物理卷之上，一个卷组可以包含多个物理卷，而且在卷组创建之后也可以继续向其中添加新的物理卷。逻辑卷是用卷组中空闲的资源建立的，并且逻辑卷在建立后可以动态地扩展或缩小空间。这就是LVM的核心理念。',0,'alvin',curdate());
insert into Content values(304,4,'h3',67,'{}','部署逻辑卷','部署逻辑卷',0,'alvin',curdate());
insert into Content values(305,4,'p',68,'{}','        一般而言，在生产环境中无法精确地评估每个硬盘分区在日后的使用情况，因此会导致 原先分配的硬盘分区不够用。比如，伴随着业务量的增加，用于存放交易记录的数据库目录 的体积也随之增加；因为分析并记录用户的行为从而导致日志目录的体积不断变大，这些都 会导致原有的硬盘分区在使用上捉襟见肘。而且，还存在对较大的硬盘分区进行精简缩容的情况。','        一般而言，在生产环境中无法精确地评估每个硬盘分区在日后的使用情况，因此会导致 原先分配的硬盘分区不够用。比如，伴随着业务量的增加，用于存放交易记录的数据库目录 的体积也随之增加；因为分析并记录用户的行为从而导致日志目录的体积不断变大，这些都 会导致原有的硬盘分区在使用上捉襟见肘。而且，还存在对较大的硬盘分区进行精简缩容的情况。',0,'alvin',curdate());
insert into Content values(306,4,'p',69,'{}','        我们可以通过部署LVM来解决上述问题。部署LVM时，需要逐个配置物理卷、卷组和逻辑卷。常用的部署命令如表所示。','        我们可以通过部署LVM来解决上述问题。部署LVM时，需要逐个配置物理卷、卷组和逻辑卷。常用的部署命令如表所示。',0,'alvin',curdate());
insert into Content values(307,4,'table',70,'{"class": ["table", "table-bordered", "table-striped"]}','功能/命令	物理卷管理	卷组管理	逻辑卷管理
扫描	pvscan	vgscan	lvscan
建立	pvcreate	vgcreate	lvcreate
显示	pvdisplay	vgdisplay	lvdisplay
删除	pvremove	vgremove	lvremove
扩展		vgextend	lvextend
缩小		vgreduce	lvreduce','功能/命令	物理卷管理	卷组管理	逻辑卷管理
扫描	pvscan	vgscan	lvscan
建立	pvcreate	vgcreate	lvcreate
显示	pvdisplay	vgdisplay	lvdisplay
删除	pvremove	vgremove	lvremove
扩展		vgextend	lvextend
缩小		vgreduce	lvreduce',0,'alvin',curdate());
insert into Content values(308,4,'p',71,'{}','        为了避免多个实验之间相互发生冲突，请大家自行将虚拟机还原到初始状态，并在虚拟机中添加两块新硬盘设备，然后开机，如图所示。','        为了避免多个实验之间相互发生冲突，请大家自行将虚拟机还原到初始状态，并在虚拟机中添加两块新硬盘设备，然后开机，如图所示。',0,'alvin',curdate());
insert into Content values(309,4,'image',72,'{"alt": "lvmsetup", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_lvmsetup.png", "width": "576"}','/static/img/linux/linux_lvmsetup.png','/static/img/linux/linux_lvmsetup.png',0,'alvin',curdate());
insert into Content values(310,4,'p',73,'{}','        在虚拟机中添加两块新硬盘设备的目的，是为了更好地演示LVM理念中用户无需关 心底层物理硬盘设备的特性。我们先对这两块新硬盘进行创建物理卷的操作，可以将该操作简单理解成让硬盘设备支持LVM技术，或者理解成是把硬盘设备加入到LVM技术可用的硬件资源池中，然后对这两块硬盘进行卷组合并，卷组的名称可以由用户来自定义。接下来，根据需求把合并后的卷组切割出一个约为150MB的逻辑卷设备，最后把这个逻辑卷设备格式化成EXT4文件系统后挂载使用。在下文中，将对每一个步骤再作一些简单的描述。','        在虚拟机中添加两块新硬盘设备的目的，是为了更好地演示LVM理念中用户无需关 心底层物理硬盘设备的特性。我们先对这两块新硬盘进行创建物理卷的操作，可以将该操作简单理解成让硬盘设备支持LVM技术，或者理解成是把硬盘设备加入到LVM技术可用的硬件资源池中，然后对这两块硬盘进行卷组合并，卷组的名称可以由用户来自定义。接下来，根据需求把合并后的卷组切割出一个约为150MB的逻辑卷设备，最后把这个逻辑卷设备格式化成EXT4文件系统后挂载使用。在下文中，将对每一个步骤再作一些简单的描述。',0,'alvin',curdate());
insert into Content values(311,4,'p',74,'{}',' BOLD[  第一步： ]BOLD 让新添加的两块硬盘设备支持LVM技术。',' BOLD[  第一步： ]BOLD 让新添加的两块硬盘设备支持LVM技术。',0,'alvin',curdate());
insert into Content values(312,4,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#pvcreate /dev/sdb /dev/sdc
Physical volume "/dev/sdb" successfully created 
Physical volume "/dev/sdc" successfully created
','[root@linuxprobe ~]#pvcreate /dev/sdb /dev/sdc
Physical volume "/dev/sdb" successfully created 
Physical volume "/dev/sdc" successfully created
',0,'alvin',curdate());
insert into Content values(313,4,'p',76,'{}',' BOLD[  第二步： ]BOLD 把两块硬盘设备加入到storage卷组中，然后查看卷组的状态。',' BOLD[  第二步： ]BOLD 把两块硬盘设备加入到storage卷组中，然后查看卷组的状态。',0,'alvin',curdate());
insert into Content values(314,4,'pre',77,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vgcreate storage /dev/sdb /dev/sdc
Volume group "storage" successfully created 
[root@linuxprobe ~]#vgdisplay 
---Volume group---
VG Name storage 
System ID 
Format lvm2 
Metadata Areas 2 
Metadata Sequence No 1 
VG Access read/write 
VG Status resizable 
MAX LV 0 
Cur LV 0 
Open LV 0 
Max PV 0 
Cur PV 2 
Act PV 2 
VG Size 39.99 GiB 
PE Size 4.00 MiB 
Total PE 10238
Alloc PE / Size 0 / 0 Free PE / Size 10238 / 39.99GiB
VG UUID 
KUeAMF-qMLh-XjQy-ArUo-LCQI-YF0o-pScxm1 
………………省略部分输出信息………………
','[root@linuxprobe ~]#vgcreate storage /dev/sdb /dev/sdc
Volume group "storage" successfully created 
[root@linuxprobe ~]#vgdisplay 
---Volume group---
VG Name storage 
System ID 
Format lvm2 
Metadata Areas 2 
Metadata Sequence No 1 
VG Access read/write 
VG Status resizable 
MAX LV 0 
Cur LV 0 
Open LV 0 
Max PV 0 
Cur PV 2 
Act PV 2 
VG Size 39.99 GiB 
PE Size 4.00 MiB 
Total PE 10238
Alloc PE / Size 0 / 0 Free PE / Size 10238 / 39.99GiB
VG UUID 
KUeAMF-qMLh-XjQy-ArUo-LCQI-YF0o-pScxm1 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(315,4,'p',78,'{}',' BOLD[  第三步： ]BOLD 切割出一个约为150MB的逻辑卷设备。',' BOLD[  第三步： ]BOLD 切割出一个约为150MB的逻辑卷设备。',0,'alvin',curdate());
insert into Content values(316,4,'p',79,'{}','        这里需要注意切割单位的问题。在对逻辑卷进行切割时有两种计量单位。第一种是以容量为单位，所使用的参数为-L。例如，使用-L 150M生成一个大小为150MB的逻辑卷。另外一种是以基本单元的个数为单位，所使用的参数为-l。每个基本单元的大小默认为4MB。例如，使用-l 37可以生成一个大小为37×4MB=148MB的逻辑卷。','        这里需要注意切割单位的问题。在对逻辑卷进行切割时有两种计量单位。第一种是以容量为单位，所使用的参数为-L。例如，使用-L 150M生成一个大小为150MB的逻辑卷。另外一种是以基本单元的个数为单位，所使用的参数为-l。每个基本单元的大小默认为4MB。例如，使用-l 37可以生成一个大小为37×4MB=148MB的逻辑卷。',0,'alvin',curdate());
insert into Content values(317,4,'pre',80,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#lvcreate -n vo -l 37 storage
Logical volume "vo" created 
[root@linuxprobe ~]#lvdisplay
---Logical volume---
LV Path /dev/storage/vo 
LV Name vo 
VG Name storage 
LV UUID D09HYI-BHBl-iXGr-X2n4-HEzo-FAQH-HRcM2I 
LV Write Access read/write 
LV Creation host,time localhost.localdomain,2017-02-0101:22:54-0500 
LV Status available 
# open 0 
LV Size 148.00MiB 
Current LE 37 
Segments 1 
Allocation inherit 
Read ahead sectors auto 
-currently set to 8192 
Block device 253:2 
………………省略部分输出信息………………
','[root@linuxprobe ~]#lvcreate -n vo -l 37 storage
Logical volume "vo" created 
[root@linuxprobe ~]#lvdisplay
---Logical volume---
LV Path /dev/storage/vo 
LV Name vo 
VG Name storage 
LV UUID D09HYI-BHBl-iXGr-X2n4-HEzo-FAQH-HRcM2I 
LV Write Access read/write 
LV Creation host,time localhost.localdomain,2017-02-0101:22:54-0500 
LV Status available 
# open 0 
LV Size 148.00MiB 
Current LE 37 
Segments 1 
Allocation inherit 
Read ahead sectors auto 
-currently set to 8192 
Block device 253:2 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(318,4,'p',81,'{}',' BOLD[  第四步： ]BOLD 把生成好的逻辑卷进行格式化，然后挂载使用。',' BOLD[  第四步： ]BOLD 把生成好的逻辑卷进行格式化，然后挂载使用。',0,'alvin',curdate());
insert into Content values(319,4,'p',82,'{}','        Linux系统会把LVM中的逻辑卷设备存放在/dev设备目录中（实际上是做了一个符号链 接），同时会以卷组的名称来建立一个目录，其中保存了逻辑卷的设备映射文件（即/dev/卷组名称/逻辑卷名称）。','        Linux系统会把LVM中的逻辑卷设备存放在/dev设备目录中（实际上是做了一个符号链 接），同时会以卷组的名称来建立一个目录，其中保存了逻辑卷的设备映射文件（即/dev/卷组名称/逻辑卷名称）。',0,'alvin',curdate());
insert into Content values(320,4,'pre',83,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mkfs.ext4 /dev/storage/vo mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type:Linux 
Block size=1024 (log=0)
Fragment size=1024(log=0)
Stride=0 blocks,Stripe width=0 blocks 
38000 inodes,151552 blocks 
7577 blocks (5.00%) reserved for the super user First data block=1 
Maximum filesystem blocks=33816576 
19 block groups 
8192 blocks per group,8192 fragments per group 2000 inodes per group 
Super block backups stored on blocks:
8193,24577,40961,57345,73729 
Allocating group tables:done
Writing inode tables:done 
Creating journal (4096blocks):done 
Writing super blocks and filesystem accounting information:done 
[root@linuxprobe ~]#mkdir /linuxprobe 
[root@linuxprobe ~]#mount /dev/storage/vo /linuxprobe
','[root@linuxprobe ~]#mkfs.ext4 /dev/storage/vo mke2fs 1.42.9 (28-Dec-2013)
Filesystem label=
OS type:Linux 
Block size=1024 (log=0)
Fragment size=1024(log=0)
Stride=0 blocks,Stripe width=0 blocks 
38000 inodes,151552 blocks 
7577 blocks (5.00%) reserved for the super user First data block=1 
Maximum filesystem blocks=33816576 
19 block groups 
8192 blocks per group,8192 fragments per group 2000 inodes per group 
Super block backups stored on blocks:
8193,24577,40961,57345,73729 
Allocating group tables:done
Writing inode tables:done 
Creating journal (4096blocks):done 
Writing super blocks and filesystem accounting information:done 
[root@linuxprobe ~]#mkdir /linuxprobe 
[root@linuxprobe ~]#mount /dev/storage/vo /linuxprobe
',0,'alvin',curdate());
insert into Content values(321,4,'p',84,'{}',' BOLD[  第五步： ]BOLD 查看挂载状态，并写入到配置文件，使其永久生效。',' BOLD[  第五步： ]BOLD 查看挂载状态，并写入到配置文件，使其永久生效。',0,'alvin',curdate());
insert into Content values(322,4,'pre',85,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#df -h 
Filesystem Size Used Avail Use% Mounted on 
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 905M 0 905M 0% /dev 
tmpfs 914M 140K 914M 1% /dev/shm 
tmpfs 914M 8.8M 905M 1% /run 
tmpfs 914M 0    914M 0% /sys/fs/cgroup 
/dev/sr0 3.5G 3.5G 0 100% /media/cdrom 
/dev/sda1 497M 119M 379M 24% /boot 
/dev/mapper/storage-vo 145M 7.6M 138M 6% /linuxprobe 
[root@linuxprobe ~]#echo "/dev/storage/vo /linuxprobe ext4 defaults 0 0" >> /etc/fstab
','[root@linuxprobe ~]#df -h 
Filesystem Size Used Avail Use% Mounted on 
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 905M 0 905M 0% /dev 
tmpfs 914M 140K 914M 1% /dev/shm 
tmpfs 914M 8.8M 905M 1% /run 
tmpfs 914M 0    914M 0% /sys/fs/cgroup 
/dev/sr0 3.5G 3.5G 0 100% /media/cdrom 
/dev/sda1 497M 119M 379M 24% /boot 
/dev/mapper/storage-vo 145M 7.6M 138M 6% /linuxprobe 
[root@linuxprobe ~]#echo "/dev/storage/vo /linuxprobe ext4 defaults 0 0" >> /etc/fstab
',0,'alvin',curdate());
insert into Content values(323,4,'h3',86,'{}','扩容逻辑卷','扩容逻辑卷',0,'alvin',curdate());
insert into Content values(324,4,'p',87,'{}','        在前面的实验中，卷组是由两块硬盘设备共同组成的。用户在使用存储设备时感知不到设备底层的架构和布局，更不用关心底层是由多少块硬盘组成的，只要卷组中有足够的资源，就可以一直为逻辑卷扩容。扩展前请一定要记得卸载设备和挂载点的关联。','        在前面的实验中，卷组是由两块硬盘设备共同组成的。用户在使用存储设备时感知不到设备底层的架构和布局，更不用关心底层是由多少块硬盘组成的，只要卷组中有足够的资源，就可以一直为逻辑卷扩容。扩展前请一定要记得卸载设备和挂载点的关联。',0,'alvin',curdate());
insert into Content values(325,4,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#umount /linuxprobe
','[root@linuxprobe ~]#umount /linuxprobe
',0,'alvin',curdate());
insert into Content values(326,4,'p',89,'{}',' BOLD[  第一步： ]BOLD 把上一个实验中的逻辑卷vo扩展至290MB。',' BOLD[  第一步： ]BOLD 把上一个实验中的逻辑卷vo扩展至290MB。',0,'alvin',curdate());
insert into Content values(327,4,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#lvextend -L 290M /dev/storage/vo
Rounding size to boundary between physical extents:292.00MiB 
Extending logical volume vo to 292.00MiB 
Logical volume vo successfully resized
','[root@linuxprobe ~]#lvextend -L 290M /dev/storage/vo
Rounding size to boundary between physical extents:292.00MiB 
Extending logical volume vo to 292.00MiB 
Logical volume vo successfully resized
',0,'alvin',curdate());
insert into Content values(328,4,'p',91,'{}',' BOLD[  第二步： ]BOLD 检查硬盘完整性，并重置硬盘容量。',' BOLD[  第二步： ]BOLD 检查硬盘完整性，并重置硬盘容量。',0,'alvin',curdate());
insert into Content values(329,4,'pre',92,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#e2fsck -f /dev/storage/vo e2fsck 1.42.9 (28-Dec-2013)
Pass1:Checking inodes,blocks,and sizes 
Pass2:Checking directory structure 
Pass3:Checking directory connectivity
Pass4:Checking reference counts 
Pass5:Checking group summary information 
/dev/storage/vo: 11/38000 files (0.0%non-contiguous),10453/151552 blocks 
[root@linuxprobe ~]#resize2fs /dev/storage/vo 
resize2fs 1.42.9 (28-Dec-2013)
Resizing the filesystem on /dev/storage/vo to 299008 (1k) blocks.
The filesystem on /dev/storage/vo is now 299008 blocks long.
','[root@linuxprobe ~]#e2fsck -f /dev/storage/vo e2fsck 1.42.9 (28-Dec-2013)
Pass1:Checking inodes,blocks,and sizes 
Pass2:Checking directory structure 
Pass3:Checking directory connectivity
Pass4:Checking reference counts 
Pass5:Checking group summary information 
/dev/storage/vo: 11/38000 files (0.0%non-contiguous),10453/151552 blocks 
[root@linuxprobe ~]#resize2fs /dev/storage/vo 
resize2fs 1.42.9 (28-Dec-2013)
Resizing the filesystem on /dev/storage/vo to 299008 (1k) blocks.
The filesystem on /dev/storage/vo is now 299008 blocks long.
',0,'alvin',curdate());
insert into Content values(330,4,'p',93,'{}',' BOLD[  第三步： ]BOLD 重新挂载硬盘设备并查看挂载状态。',' BOLD[  第三步： ]BOLD 重新挂载硬盘设备并查看挂载状态。',0,'alvin',curdate());
insert into Content values(331,4,'pre',94,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mount -a 
[root@linuxprobe ~]#df -h
Filesystem  Size Used Avail Use%Mountedon 
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 985M 0 985M 0% /dev 
tmpfs 994M 80K 994M 1% /dev/shm 
tmpfs 994M 8.8M 986M 1% /run 
tmpfs 994M 0 994M 0% /sys/fs/cgroup
/dev/sr0 3.5G 3.5G 0 100% /media/cdrom
/dev/sda1 497M 119M 379M 24% /boot
/dev/mapper/storage-vo 279M 2.1M 259M 1% /linuxprobe
','[root@linuxprobe ~]#mount -a 
[root@linuxprobe ~]#df -h
Filesystem  Size Used Avail Use%Mountedon 
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 985M 0 985M 0% /dev 
tmpfs 994M 80K 994M 1% /dev/shm 
tmpfs 994M 8.8M 986M 1% /run 
tmpfs 994M 0 994M 0% /sys/fs/cgroup
/dev/sr0 3.5G 3.5G 0 100% /media/cdrom
/dev/sda1 497M 119M 379M 24% /boot
/dev/mapper/storage-vo 279M 2.1M 259M 1% /linuxprobe
',0,'alvin',curdate());
insert into Content values(332,4,'h3',95,'{}','缩小逻辑卷','缩小逻辑卷',0,'alvin',curdate());
insert into Content values(333,4,'p',96,'{}','        相较于扩容逻辑卷，在对逻辑卷进行缩容操作时，其丢失数据的风险更大。所以在生产环境中执行相应操作时，一定要提前备份好数据。另外Linux系统规定，在对LVM逻辑卷进 行缩容操作之前，要先检查文件系统的完整性（当然这也是为了保证我们的数据安全）。在执 行缩容操作前记得先把文件系统卸载掉。','        相较于扩容逻辑卷，在对逻辑卷进行缩容操作时，其丢失数据的风险更大。所以在生产环境中执行相应操作时，一定要提前备份好数据。另外Linux系统规定，在对LVM逻辑卷进 行缩容操作之前，要先检查文件系统的完整性（当然这也是为了保证我们的数据安全）。在执 行缩容操作前记得先把文件系统卸载掉。',0,'alvin',curdate());
insert into Content values(334,4,'pre',97,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#umount /linuxprobe
','[root@linuxprobe ~]#umount /linuxprobe
',0,'alvin',curdate());
insert into Content values(335,4,'p',98,'{}',' BOLD[  第一步： ]BOLD 检查文件系统的完整性。',' BOLD[  第一步： ]BOLD 检查文件系统的完整性。',0,'alvin',curdate());
insert into Content values(336,4,'pre',99,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#e2fsck -f /dev/storage/vo 
e2fsck 1.42.9 (28-Dec-2013)
Pass1:Checking inodes,blocks,and sizes 
Pass2:Checking directory structure 
Pass3:Checking directory connectivity 
Pass4:Checking reference counts 
Pass5:Checking group summary information 
/dev/storage/vo: 11/74000 files (0.0%non-contiguous),15507/299008 blocks
','[root@linuxprobe ~]#e2fsck -f /dev/storage/vo 
e2fsck 1.42.9 (28-Dec-2013)
Pass1:Checking inodes,blocks,and sizes 
Pass2:Checking directory structure 
Pass3:Checking directory connectivity 
Pass4:Checking reference counts 
Pass5:Checking group summary information 
/dev/storage/vo: 11/74000 files (0.0%non-contiguous),15507/299008 blocks
',0,'alvin',curdate());
insert into Content values(337,4,'p',100,'{}',' BOLD[  第二步： ]BOLD 把逻辑卷vo的容量减小到120MB。',' BOLD[  第二步： ]BOLD 把逻辑卷vo的容量减小到120MB。',0,'alvin',curdate());
insert into Content values(338,4,'pre',101,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#resize2fs /dev/storage/vo 120M 
resize2fs 1.42.9 (28-Dec-2013)
Resizing the filesystem on /dev/storage/vo to 122880(1k) blocks.The filesystem on /dev/storage/vo is now 122880 blocks long.
[root@linuxprobe ~]#lvreduce -L 120M /dev/storage/vo
WARNING:Reducing active logical volume to 120.00MiB
THIS MAY DESTROY YOUR DATA(filesystem etc.)
Do you really want to reduce vo? [y/n]:y
Reducing logical volume vo to 120.00MiB 
Logical volume vo successfully resized
','[root@linuxprobe ~]#resize2fs /dev/storage/vo 120M 
resize2fs 1.42.9 (28-Dec-2013)
Resizing the filesystem on /dev/storage/vo to 122880(1k) blocks.The filesystem on /dev/storage/vo is now 122880 blocks long.
[root@linuxprobe ~]#lvreduce -L 120M /dev/storage/vo
WARNING:Reducing active logical volume to 120.00MiB
THIS MAY DESTROY YOUR DATA(filesystem etc.)
Do you really want to reduce vo? [y/n]:y
Reducing logical volume vo to 120.00MiB 
Logical volume vo successfully resized
',0,'alvin',curdate());
insert into Content values(339,4,'p',102,'{}',' BOLD[  第三步： ]BOLD 重新挂载文件系统并查看系统状态。',' BOLD[  第三步： ]BOLD 重新挂载文件系统并查看系统状态。',0,'alvin',curdate());
insert into Content values(340,4,'pre',103,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mount -a 
[root@linuxprobe ~]#df -h
Filesystem  Size Used Avail Use%Mountedon 
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 985M 0 985M 0% /dev 
tmpfs 994M 80K 994M 1% /dev/shm 
tmpfs 994M 8.8M 986M 1% /run 
tmpfs 994M 0 994M 0% /sys/fs/cgroup
/dev/sr0 3.5G 3.5G 0 100% /media/cdrom
/dev/sda1 497M 119M 379M 24% /boot
/dev/mapper/storage-vo 113M 1.6M 103M 2% /linuxprobe
','[root@linuxprobe ~]#mount -a 
[root@linuxprobe ~]#df -h
Filesystem  Size Used Avail Use%Mountedon 
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 985M 0 985M 0% /dev 
tmpfs 994M 80K 994M 1% /dev/shm 
tmpfs 994M 8.8M 986M 1% /run 
tmpfs 994M 0 994M 0% /sys/fs/cgroup
/dev/sr0 3.5G 3.5G 0 100% /media/cdrom
/dev/sda1 497M 119M 379M 24% /boot
/dev/mapper/storage-vo 113M 1.6M 103M 2% /linuxprobe
',0,'alvin',curdate());
insert into Content values(341,4,'h3',104,'{}','逻辑卷快照','逻辑卷快照',0,'alvin',curdate());
insert into Content values(342,4,'p',105,'{}','        LVM还具备有“快照卷”功能，该功能类似于虚拟机软件的还原时间点功能。例如，可以对某一个逻辑卷设备做一次快照，如果日后发现数据被改错了，就可以利用之前做好的快照卷进行覆盖还原。LVM的快照卷功能有两个特点：','        LVM还具备有“快照卷”功能，该功能类似于虚拟机软件的还原时间点功能。例如，可以对某一个逻辑卷设备做一次快照，如果日后发现数据被改错了，就可以利用之前做好的快照卷进行覆盖还原。LVM的快照卷功能有两个特点：',0,'alvin',curdate());
insert into Content values(343,4,'ul',106,'{}','快照卷的容量必须等同于逻辑卷的容量；
快照卷仅一次有效，一旦执行还原操作后则会被立即自动删除。首先查看卷组的信息。','快照卷的容量必须等同于逻辑卷的容量；
快照卷仅一次有效，一旦执行还原操作后则会被立即自动删除。首先查看卷组的信息。',0,'alvin',curdate());
insert into Content values(344,4,'pre',107,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vgdisplay
---Volume group---
VG Name storage 
System ID 
Format lvm2 
Metadata Areas 2 
Metadata Sequence No 4 
VG Access read/write 
VG Status resizable 
MAX LV 0 
Cur LV 1 
Open LV 1 
Max PV 0 
Cur PV 2 
Act PV 2 
VG Size 39.99 GiB 
PE Size 4.00 MiB 
Total PE 10238 
Alloc PE / Size 30 / 120.00 MiB Free PE / Size 10208 / 39.88 GiB 
VG UUID CTaHAK-0TQv-Abdb-R83O-RU6V-YYkx-8o2R0e 
………………省略部分输出信息………………
','[root@linuxprobe ~]#vgdisplay
---Volume group---
VG Name storage 
System ID 
Format lvm2 
Metadata Areas 2 
Metadata Sequence No 4 
VG Access read/write 
VG Status resizable 
MAX LV 0 
Cur LV 1 
Open LV 1 
Max PV 0 
Cur PV 2 
Act PV 2 
VG Size 39.99 GiB 
PE Size 4.00 MiB 
Total PE 10238 
Alloc PE / Size 30 / 120.00 MiB Free PE / Size 10208 / 39.88 GiB 
VG UUID CTaHAK-0TQv-Abdb-R83O-RU6V-YYkx-8o2R0e 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(345,4,'p',108,'{}','        通过卷组的输出信息可以清晰看到，卷组中已经使用了120MB的容量，空闲容量还有39.88GB。接下来用重定向往逻辑卷设备所挂载的目录中写入一个文件。','        通过卷组的输出信息可以清晰看到，卷组中已经使用了120MB的容量，空闲容量还有39.88GB。接下来用重定向往逻辑卷设备所挂载的目录中写入一个文件。',0,'alvin',curdate());
insert into Content values(346,4,'pre',109,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#echo "Welcome to Linuxprobe.com" > /linuxprobe/readme.txt 
[root@linuxprobe ~]#ls -l /linuxprobe 
total 14 
drwx------. 2 root root 12288 Feb 1 07:18 lost+found
-rw-r--r--. 1 root root 26    Feb 1 07:38 readme.txt
','[root@linuxprobe ~]#echo "Welcome to Linuxprobe.com" > /linuxprobe/readme.txt 
[root@linuxprobe ~]#ls -l /linuxprobe 
total 14 
drwx------. 2 root root 12288 Feb 1 07:18 lost+found
-rw-r--r--. 1 root root 26    Feb 1 07:38 readme.txt
',0,'alvin',curdate());
insert into Content values(347,4,'p',110,'{}',' BOLD[  第一步： ]BOLD 使用-s参数生成一个快照卷，使用-L参数指定切割的大小。另外，还需要在命令后面写上是针对哪个逻辑卷执行的快照操作。',' BOLD[  第一步： ]BOLD 使用-s参数生成一个快照卷，使用-L参数指定切割的大小。另外，还需要在命令后面写上是针对哪个逻辑卷执行的快照操作。',0,'alvin',curdate());
insert into Content values(348,4,'pre',111,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#lvcreate -L 120M -s -n SNAP /dev/storage/vo
Logical volume "SNAP" created 
[root@linuxprobe ~]#lvdisplay 
---Logical volume---
LV Path /dev/storage/SNAP 
LV Name SNAP 
VG Name storage 
LV UUID BC7WKg-fHoK-Pc7J-yhSd-vD7d-lUnl-TihKlt 
LV Write Access read/write 
LV Creation host,time localhost.localdomain,2017-02-01 07:42:31 -0500 
LV snapshot status active destination for vo 
LV Status available 
# open 0 
LV Size 120.00 MiB 
Current LE 30 
COW-table size 120.00MiB 
COW-table LE 30 
Allocated to snapshot 0.01%
Snapshot chunk size 4.00KiB 
Segments 1 
Allocation inherit 
Read ahead sectors auto 
-currently set to 8192 
Block device 253:3 
………………省略部分输出信息………………
','[root@linuxprobe ~]#lvcreate -L 120M -s -n SNAP /dev/storage/vo
Logical volume "SNAP" created 
[root@linuxprobe ~]#lvdisplay 
---Logical volume---
LV Path /dev/storage/SNAP 
LV Name SNAP 
VG Name storage 
LV UUID BC7WKg-fHoK-Pc7J-yhSd-vD7d-lUnl-TihKlt 
LV Write Access read/write 
LV Creation host,time localhost.localdomain,2017-02-01 07:42:31 -0500 
LV snapshot status active destination for vo 
LV Status available 
# open 0 
LV Size 120.00 MiB 
Current LE 30 
COW-table size 120.00MiB 
COW-table LE 30 
Allocated to snapshot 0.01%
Snapshot chunk size 4.00KiB 
Segments 1 
Allocation inherit 
Read ahead sectors auto 
-currently set to 8192 
Block device 253:3 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(349,4,'p',112,'{}',' BOLD[  第二步： ]BOLD 在逻辑卷所挂载的目录中创建一个100MB的垃圾文件，然后再查看快照卷的状态。可以发现存储空间占的用量上升了。',' BOLD[  第二步： ]BOLD 在逻辑卷所挂载的目录中创建一个100MB的垃圾文件，然后再查看快照卷的状态。可以发现存储空间占的用量上升了。',0,'alvin',curdate());
insert into Content values(350,4,'pre',113,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#dd if=/dev/zero of=/linuxprobe/files count=1 bs=100M 
1+0 records in 
1+0 records out 
104857600 bytes (105MB) copied, 3.35432 s,31.3MB/s 
[root@linuxprobe ~]#lvdisplay
---Logical volume---
LV Path /dev/storage/SNAP 
LV Name SNAP 
VG Name storage 
LV UUID BC7WKg-fHoK-Pc7J-yhSd-vD7d-lUnl-TihKlt 
LV Write Access read/write 
LV Creation host,time localhost.localdomain,2017-02-01 07:42:31 -0500
LV snapshot status active destination for vo 
LV Status available 
# open 0 
LV Size 120.00 MiB 
Current LE 30 
COW-table size 120.00MiB 
COW-table LE 30 
Allocated to snapshot 83.71%
Snapshot chunk size 4.00KiB 
Segments 1 
Allocation in herit 
Read ahead sectors auto 
-currently set to 8192 
Block device 253:3
','[root@linuxprobe ~]#dd if=/dev/zero of=/linuxprobe/files count=1 bs=100M 
1+0 records in 
1+0 records out 
104857600 bytes (105MB) copied, 3.35432 s,31.3MB/s 
[root@linuxprobe ~]#lvdisplay
---Logical volume---
LV Path /dev/storage/SNAP 
LV Name SNAP 
VG Name storage 
LV UUID BC7WKg-fHoK-Pc7J-yhSd-vD7d-lUnl-TihKlt 
LV Write Access read/write 
LV Creation host,time localhost.localdomain,2017-02-01 07:42:31 -0500
LV snapshot status active destination for vo 
LV Status available 
# open 0 
LV Size 120.00 MiB 
Current LE 30 
COW-table size 120.00MiB 
COW-table LE 30 
Allocated to snapshot 83.71%
Snapshot chunk size 4.00KiB 
Segments 1 
Allocation in herit 
Read ahead sectors auto 
-currently set to 8192 
Block device 253:3
',0,'alvin',curdate());
insert into Content values(351,4,'p',114,'{}',' BOLD[  第三步： ]BOLD 为了校验SNAP快照卷的效果，需要对逻辑卷进行快照还原操作。在此之前记得先卸载掉逻辑卷设备与目录的挂载。',' BOLD[  第三步： ]BOLD 为了校验SNAP快照卷的效果，需要对逻辑卷进行快照还原操作。在此之前记得先卸载掉逻辑卷设备与目录的挂载。',0,'alvin',curdate());
insert into Content values(352,4,'pre',115,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#umount /linuxprobe 
[root@linuxprobe ~]#lvconvert --merge /dev/storage/SNAP
Merging of volume SNAP started.
vo: Merged: 21.4%
vo: Merged: 100.0%
Merge of snapshot into logical volume vo has finished.
Logical volume "SNAP" successfully removed
','[root@linuxprobe ~]#umount /linuxprobe 
[root@linuxprobe ~]#lvconvert --merge /dev/storage/SNAP
Merging of volume SNAP started.
vo: Merged: 21.4%
vo: Merged: 100.0%
Merge of snapshot into logical volume vo has finished.
Logical volume "SNAP" successfully removed
',0,'alvin',curdate());
insert into Content values(353,4,'p',116,'{}',' BOLD[  第四步： ]BOLD 快照卷会被自动删除掉，并且刚刚在逻辑卷设备被执行快照操作后再创建出来的100MB的垃圾文件也被清除了。',' BOLD[  第四步： ]BOLD 快照卷会被自动删除掉，并且刚刚在逻辑卷设备被执行快照操作后再创建出来的100MB的垃圾文件也被清除了。',0,'alvin',curdate());
insert into Content values(354,4,'pre',117,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mount -a 
[root@linuxprobe ~]#ls /linuxprobe/
lost+found readme.txt
','[root@linuxprobe ~]#mount -a 
[root@linuxprobe ~]#ls /linuxprobe/
lost+found readme.txt
',0,'alvin',curdate());
insert into Content values(355,4,'h3',118,'{}','删除逻辑卷','删除逻辑卷',0,'alvin',curdate());
insert into Content values(356,4,'p',119,'{}','        当生产环境中想要重新部署LVM或者不再需要使用LVM时，则需要执行LVM的删除 操作。为此，需要提前备份好重要的数据信息，然后依次删除逻辑卷、卷组、物理卷设备，这 个顺序不可颠倒。','        当生产环境中想要重新部署LVM或者不再需要使用LVM时，则需要执行LVM的删除 操作。为此，需要提前备份好重要的数据信息，然后依次删除逻辑卷、卷组、物理卷设备，这 个顺序不可颠倒。',0,'alvin',curdate());
insert into Content values(357,4,'p',120,'{}',' BOLD[  第一步： ]BOLD 取消逻辑卷与目录的挂载关联，删除配置文件中永久生效的设备参数。',' BOLD[  第一步： ]BOLD 取消逻辑卷与目录的挂载关联，删除配置文件中永久生效的设备参数。',0,'alvin',curdate());
insert into Content values(358,4,'pre',121,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#umount /linuxprobe 
[root@linuxprobe ~]#vim /etc/fstab 
#
# /etc/fstab 
# Created by anaconda on Fri Feb 19 22:08:59 2017 
# 
# Accessible filesystems,by reference,are maintained under \'/dev/disk\'
# Seem an pages fstab(5),findfs(8),mount(8) and / or blkid(8) for more info
#
/dev/mapper/rhel-root                        /        xfs     defaults  1  1
UUID=50591e35-d47a-4aeb-a0ca-1b4e8336d9b1    /boot    xfs     defaults  1  2
/dev/mapper                                  /rhel-swap swap swap defaults 0 0
/dev/cdrom                                   /media/cdrom iso9660 defaults 0 0
','[root@linuxprobe ~]#umount /linuxprobe 
[root@linuxprobe ~]#vim /etc/fstab 
#
# /etc/fstab 
# Created by anaconda on Fri Feb 19 22:08:59 2017 
# 
# Accessible filesystems,by reference,are maintained under \'/dev/disk\'
# Seem an pages fstab(5),findfs(8),mount(8) and / or blkid(8) for more info
#
/dev/mapper/rhel-root                        /        xfs     defaults  1  1
UUID=50591e35-d47a-4aeb-a0ca-1b4e8336d9b1    /boot    xfs     defaults  1  2
/dev/mapper                                  /rhel-swap swap swap defaults 0 0
/dev/cdrom                                   /media/cdrom iso9660 defaults 0 0
',0,'alvin',curdate());
insert into Content values(359,4,'p',122,'{}',' BOLD[  第二步： ]BOLD 删除逻辑卷设备，需要输入y来确认操作。',' BOLD[  第二步： ]BOLD 删除逻辑卷设备，需要输入y来确认操作。',0,'alvin',curdate());
insert into Content values(360,4,'pre',123,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#lvremove /dev/storage/vo 
Do you really want to remove active logical volume vo? [y/n]: y
Logical volume "vo" successfully removed
','[root@linuxprobe ~]#lvremove /dev/storage/vo 
Do you really want to remove active logical volume vo? [y/n]: y
Logical volume "vo" successfully removed
',0,'alvin',curdate());
insert into Content values(361,4,'p',124,'{}',' BOLD[  第三步： ]BOLD 删除卷组，此处只写卷组名称即可，不需要设备的绝对路径。',' BOLD[  第三步： ]BOLD 删除卷组，此处只写卷组名称即可，不需要设备的绝对路径。',0,'alvin',curdate());
insert into Content values(362,4,'pre',125,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vgremove storage
Volume group "storage" successfully removed
','[root@linuxprobe ~]#vgremove storage
Volume group "storage" successfully removed
',0,'alvin',curdate());
insert into Content values(363,4,'p',126,'{}',' BOLD[  第四步： ]BOLD 删除物理卷设备。',' BOLD[  第四步： ]BOLD 删除物理卷设备。',0,'alvin',curdate());
insert into Content values(364,4,'pre',127,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#pvremove /dev/sdb /dev/sdc
Labels on physical volume "/dev/sdb" successfully wiped 
Labels on physical volume "/dev/sdc" successfully wiped
','[root@linuxprobe ~]#pvremove /dev/sdb /dev/sdc
Labels on physical volume "/dev/sdb" successfully wiped 
Labels on physical volume "/dev/sdc" successfully wiped
',0,'alvin',curdate());
insert into Content values(365,4,'p',128,'{}','        在上述操作执行完毕之后，再执行lvdisplay、vgdisplay、pvdisplay命令来查看LVM的信息时就不会再看到信息了（前提是上述步骤的操作是正确的）。','        在上述操作执行完毕之后，再执行lvdisplay、vgdisplay、pvdisplay命令来查看LVM的信息时就不会再看到信息了（前提是上述步骤的操作是正确的）。',0,'alvin',curdate());
insert into Content values(366,5,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> iptables与firewalld防火墙',' <span class="color_h1">  Linux </span> iptables与firewalld防火墙',0,'alvin',curdate());
insert into Content values(367,5,'p',2,'{}','        保障数据的安全性是继保障数据的可用性之后最为重要的一项工作。防火墙作为公网 与内网之间的保护屏障，在保障数据的安全性方面起着至关重要的作用。考虑到大家还不了解RHEL7中新增的firewalld防火墙与先前版本中iptables防火墙之间的区别，老师决定先带领读者从理论层面和实际层面正确地认识在这两款防火墙之间的关系。','        保障数据的安全性是继保障数据的可用性之后最为重要的一项工作。防火墙作为公网 与内网之间的保护屏障，在保障数据的安全性方面起着至关重要的作用。考虑到大家还不了解RHEL7中新增的firewalld防火墙与先前版本中iptables防火墙之间的区别，老师决定先带领读者从理论层面和实际层面正确地认识在这两款防火墙之间的关系。',0,'alvin',curdate());
insert into Content values(368,5,'line',3,'{}','','',0,'alvin',curdate());
insert into Content values(369,5,'h2',4,'{}','防火墙管理工具','防火墙管理工具',0,'alvin',curdate());
insert into Content values(370,5,'p',5,'{}','        众所周知，相较于企业内网，外部的公网环境更加恶劣，罪恶丛生。在公网与企业内网 之间充当保护屏障的防火墙（见下图）虽然有软件或硬件之分，但主要功能都是依据策略对穿越防火墙自身的流量进行过滤。防火墙策略可以基于流量的源目地址、端口号、协议、应用等信息来定制，然后防火墙使用预先定制的策略规则监控出入的流量，若流量与某一条策略 规则相匹配，则执行相应的处理，反之则丢弃。这样一来，就可以保证仅有合法的流量在企业内网和外部公网之间流动了。','        众所周知，相较于企业内网，外部的公网环境更加恶劣，罪恶丛生。在公网与企业内网 之间充当保护屏障的防火墙（见下图）虽然有软件或硬件之分，但主要功能都是依据策略对穿越防火墙自身的流量进行过滤。防火墙策略可以基于流量的源目地址、端口号、协议、应用等信息来定制，然后防火墙使用预先定制的策略规则监控出入的流量，若流量与某一条策略 规则相匹配，则执行相应的处理，反之则丢弃。这样一来，就可以保证仅有合法的流量在企业内网和外部公网之间流动了。',0,'alvin',curdate());
insert into Content values(371,5,'image',6,'{"alt": "iptable", "class": ["attachment-full"], "height": "222", "src": "/static/img/linux/linux_iptable.png", "width": "676"}','/static/img/linux/linux_iptable.png','/static/img/linux/linux_iptable.png',0,'alvin',curdate());
insert into Content values(372,5,'p',7,'{}','        在RHEL7系统中，firewalld防火墙取代了iptables防火墙。对于接触Linux系统比较早或学习过RHEL6系统的读者来说，当他们发现曾经掌握的知识在RHEL7中不再适用，需要 全新学习firewalld时，难免会有抵触心理。其实，iptables与firewalld都不是真正的防火墙，它们都只是用来定义防火墙策略的防火墙管理工具而已，或者说，它们只是一种服务。iptables 服务会把配置好的防火墙策略交由内核层面的netfilter网络过滤器来处理，而firewalld服务则是把配置好的防火墙策略交由内核层面的nftables包过滤框架来处理。换句话说，当前在Linux系统中其实存在多个防火墙管理工具，旨在方便运维人员管理Linux系统中的防火墙策 略，我们只需要配置妥当其中的一个就足够了。虽然这些工具各有优劣，但它们在防火墙策 略的配置思路上是保持一致的。大家甚至可以不用完全掌握本章介绍的内容，只要在这多个防火墙管理工具中任选一款并将其学透，就足以满足日常的工作需求了。','        在RHEL7系统中，firewalld防火墙取代了iptables防火墙。对于接触Linux系统比较早或学习过RHEL6系统的读者来说，当他们发现曾经掌握的知识在RHEL7中不再适用，需要 全新学习firewalld时，难免会有抵触心理。其实，iptables与firewalld都不是真正的防火墙，它们都只是用来定义防火墙策略的防火墙管理工具而已，或者说，它们只是一种服务。iptables 服务会把配置好的防火墙策略交由内核层面的netfilter网络过滤器来处理，而firewalld服务则是把配置好的防火墙策略交由内核层面的nftables包过滤框架来处理。换句话说，当前在Linux系统中其实存在多个防火墙管理工具，旨在方便运维人员管理Linux系统中的防火墙策 略，我们只需要配置妥当其中的一个就足够了。虽然这些工具各有优劣，但它们在防火墙策 略的配置思路上是保持一致的。大家甚至可以不用完全掌握本章介绍的内容，只要在这多个防火墙管理工具中任选一款并将其学透，就足以满足日常的工作需求了。',0,'alvin',curdate());
insert into Content values(373,5,'line',8,'{}','','',0,'alvin',curdate());
insert into Content values(374,5,'h2',9,'{}','iptables','iptables',0,'alvin',curdate());
insert into Content values(375,5,'p',10,'{}','        在早期的Linux系统中，默认使用的是iptables防火墙管理服务来配置防火墙。尽管新型的firewalld防火墙管理服务已经被投入使用多年，但是大量的企业在生产环境中依然出于各种原因而继续使用iptables。考虑到iptables在当前生产环境中还具有顽强的生命力，以及为了使大家在求职面试过程中被问到iptables的相关知识时能胸有成竹，刘遄老师觉得还是有必要在本书中好好地讲解一下这项技术。更何况前文也提到，各个防火墙管理工具的配置思路 是一致的，在掌握了iptables后再学习其他防火墙管理工具时，也有借鉴意义。','        在早期的Linux系统中，默认使用的是iptables防火墙管理服务来配置防火墙。尽管新型的firewalld防火墙管理服务已经被投入使用多年，但是大量的企业在生产环境中依然出于各种原因而继续使用iptables。考虑到iptables在当前生产环境中还具有顽强的生命力，以及为了使大家在求职面试过程中被问到iptables的相关知识时能胸有成竹，刘遄老师觉得还是有必要在本书中好好地讲解一下这项技术。更何况前文也提到，各个防火墙管理工具的配置思路 是一致的，在掌握了iptables后再学习其他防火墙管理工具时，也有借鉴意义。',0,'alvin',curdate());
insert into Content values(376,5,'h3',11,'{}','策略与规则链','策略与规则链',0,'alvin',curdate());
insert into Content values(377,5,'p',12,'{}','        防火墙会从上至下的顺序来读取配置的策略规则，在找到匹配项后就立即结束匹配工作并去执行匹配项中定义的行为（即放行或阻止）。如果在读取完所有的策略规则之后没有匹配 项，就去执行默认的策略。一般而言，防火墙策略规则的设置有两种：一种是“通”（即放行），一种是“堵”（即阻止）。当防火墙的默认策略为拒绝时（堵），就要设置允许规则（通），否则谁都进不来；如果防火墙的默认策略为允许时，就要设置拒绝规则，否则谁都能进来，防火墙也就失去了防范的作用。','        防火墙会从上至下的顺序来读取配置的策略规则，在找到匹配项后就立即结束匹配工作并去执行匹配项中定义的行为（即放行或阻止）。如果在读取完所有的策略规则之后没有匹配 项，就去执行默认的策略。一般而言，防火墙策略规则的设置有两种：一种是“通”（即放行），一种是“堵”（即阻止）。当防火墙的默认策略为拒绝时（堵），就要设置允许规则（通），否则谁都进不来；如果防火墙的默认策略为允许时，就要设置拒绝规则，否则谁都能进来，防火墙也就失去了防范的作用。',0,'alvin',curdate());
insert into Content values(378,5,'p',13,'{}','        iptables服务把用于处理或过滤流量的策略条目称之为规则，多条规则可以组成一个规则链，而规则链则依据数据包处理位置的不同进行分类，具体如下：','        iptables服务把用于处理或过滤流量的策略条目称之为规则，多条规则可以组成一个规则链，而规则链则依据数据包处理位置的不同进行分类，具体如下：',0,'alvin',curdate());
insert into Content values(379,5,'ul',14,'{}','在进行路由选择前处理数据包（PREROUTING）；
处理流入的数据包（INPUT）；
处理流出的数据包（OUTPUT）；
处理转发的数据包（FORWARD）；
在进行路由选择后处理数据包（POSTROUTING）。','在进行路由选择前处理数据包（PREROUTING）；
处理流入的数据包（INPUT）；
处理流出的数据包（OUTPUT）；
处理转发的数据包（FORWARD）；
在进行路由选择后处理数据包（POSTROUTING）。',0,'alvin',curdate());
insert into Content values(380,5,'p',15,'{}','        一般来说，从内网向外网发送的流量一般都是可控且良性的，因此我们使用最多的就是INPUT规则链，该规则链可以增大黑客人员从外网入侵内网的难度。','        一般来说，从内网向外网发送的流量一般都是可控且良性的，因此我们使用最多的就是INPUT规则链，该规则链可以增大黑客人员从外网入侵内网的难度。',0,'alvin',curdate());
insert into Content values(381,5,'p',16,'{}','        比如在您居住的社区内，物业管理公司有两条规定：禁止小商小贩进入社区；各种车辆 在进入社区时都要登记。显而易见，这两条规定应该是用于社区的正门的（流量必须经过的地方），而不是每家每户的防盗门上。根据前面提到的防火墙策略的匹配顺序，可能会存在多种情况。比如，来访人员是小商小贩，则直接会被物业公司的保安拒之门外，也就无需再对车辆进行登记。如果来访人员乘坐一辆汽车进入社区正门，则“禁止小商小贩进入社区”的第一条规则就没有被匹配到，因此按照顺序匹配第二条策略，即需要对车辆进行登记。如果是社区居民要进入正门，则这两条规定都不会匹配到，因此会执行默认的放行策略。','        比如在您居住的社区内，物业管理公司有两条规定：禁止小商小贩进入社区；各种车辆 在进入社区时都要登记。显而易见，这两条规定应该是用于社区的正门的（流量必须经过的地方），而不是每家每户的防盗门上。根据前面提到的防火墙策略的匹配顺序，可能会存在多种情况。比如，来访人员是小商小贩，则直接会被物业公司的保安拒之门外，也就无需再对车辆进行登记。如果来访人员乘坐一辆汽车进入社区正门，则“禁止小商小贩进入社区”的第一条规则就没有被匹配到，因此按照顺序匹配第二条策略，即需要对车辆进行登记。如果是社区居民要进入正门，则这两条规定都不会匹配到，因此会执行默认的放行策略。',0,'alvin',curdate());
insert into Content values(382,5,'p',17,'{}','        但是，仅有策略规则还不能保证社区的安全，保安还应该知道采用什么样的动作来处理这些匹配的流量，比如“允许”、“拒绝”、“登记”、“不理它”。这些动作对应到iptables服务的术语中分别是ACCEPT（允许流量通过）、REJECT（拒绝流量通过）、LOG（记录日志信息）、DROP（拒绝流量通过）。“允许流量通过”和“记录日志信息”都比较好理解，这里需要着重 讲解的是REJECT和DROP的不同点。就DROP来说，它是直接将流量丢弃而且不响应；REJECT则会在拒绝流量后再回复一条“您的信息已经收到，但是被扔掉了”信息，从而让流 量发送方清晰地看到数据被拒绝的响应信息。','        但是，仅有策略规则还不能保证社区的安全，保安还应该知道采用什么样的动作来处理这些匹配的流量，比如“允许”、“拒绝”、“登记”、“不理它”。这些动作对应到iptables服务的术语中分别是ACCEPT（允许流量通过）、REJECT（拒绝流量通过）、LOG（记录日志信息）、DROP（拒绝流量通过）。“允许流量通过”和“记录日志信息”都比较好理解，这里需要着重 讲解的是REJECT和DROP的不同点。就DROP来说，它是直接将流量丢弃而且不响应；REJECT则会在拒绝流量后再回复一条“您的信息已经收到，但是被扔掉了”信息，从而让流 量发送方清晰地看到数据被拒绝的响应信息。',0,'alvin',curdate());
insert into Content values(383,5,'p',18,'{}','        我们来举一个例子，让各位读者更直观地理解这两个拒绝动作的不同之处。比如有一天您正在家里看电视，突然听到有人敲门，您透过防盗门的猫眼一看是推销商品的，便会在不需要的情况下开门并拒绝他们（REJECT）。但如果您看到的是债主带了十几个小弟来讨债，此时不仅要拒绝开门，还要默不作声，伪装成自己不在家的样子（DROP）。','        我们来举一个例子，让各位读者更直观地理解这两个拒绝动作的不同之处。比如有一天您正在家里看电视，突然听到有人敲门，您透过防盗门的猫眼一看是推销商品的，便会在不需要的情况下开门并拒绝他们（REJECT）。但如果您看到的是债主带了十几个小弟来讨债，此时不仅要拒绝开门，还要默不作声，伪装成自己不在家的样子（DROP）。',0,'alvin',curdate());
insert into Content values(384,5,'p',19,'{}','        当把Linux系统中的防火墙策略设置为REJECT拒绝动作后，流量发送方会看到端口不可达的响应：','        当把Linux系统中的防火墙策略设置为REJECT拒绝动作后，流量发送方会看到端口不可达的响应：',0,'alvin',curdate());
insert into Content values(385,5,'pre',20,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ping -c 4 192.168.10.10
PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.
From 192.168.10.10 icmp_seq=1 Destination Port Unreachable 
From 192.168.10.10 icmp_seq=2 Destination Port Unreachable 
From 192.168.10.10 icmp_seq=3 Destination Port Unreachable 
From 192.168.10.10 icmp_seq=4 Destination Port Unreachable 
--- 192.168.10.10 ping statistics ---
4 packets transmitted, 0 received,+4 errors,100% packet loss,time 3002ms
','[root@linuxprobe ~]#ping -c 4 192.168.10.10
PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.
From 192.168.10.10 icmp_seq=1 Destination Port Unreachable 
From 192.168.10.10 icmp_seq=2 Destination Port Unreachable 
From 192.168.10.10 icmp_seq=3 Destination Port Unreachable 
From 192.168.10.10 icmp_seq=4 Destination Port Unreachable 
--- 192.168.10.10 ping statistics ---
4 packets transmitted, 0 received,+4 errors,100% packet loss,time 3002ms
',0,'alvin',curdate());
insert into Content values(386,5,'p',21,'{}','        而把Linux系统中的防火墙策略修改成DROP拒绝动作后，流量发送方会看到响应超时的提醒。但是流量发送方无法判断流量是被拒绝，还是接收方主机当前不在线：','        而把Linux系统中的防火墙策略修改成DROP拒绝动作后，流量发送方会看到响应超时的提醒。但是流量发送方无法判断流量是被拒绝，还是接收方主机当前不在线：',0,'alvin',curdate());
insert into Content values(387,5,'pre',22,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ping -c 4 192.168.10.10 
PING 192.168.10.10 (192.168.10.10) 56 (84) bytes of data.
--- 192.168.10.10 ping statistics---
4 packets transmitted,0 received,100% packet loss,time 3000ms
','[root@linuxprobe ~]# ping -c 4 192.168.10.10 
PING 192.168.10.10 (192.168.10.10) 56 (84) bytes of data.
--- 192.168.10.10 ping statistics---
4 packets transmitted,0 received,100% packet loss,time 3000ms
',0,'alvin',curdate());
insert into Content values(388,5,'h3',23,'{}','iptables中基本的命令参数','iptables中基本的命令参数',0,'alvin',curdate());
insert into Content values(389,5,'p',24,'{}','        iptables是一款基于命令行的防火墙策略管理工具，具有大量参数，学习难度较大。好在对于日常的防火墙策略配置来讲，大家无需深入了解诸如“四表五链”的理论概念，只需要掌握常用的参数并做到灵活搭配即可，这就足以应对日常工作了。','        iptables是一款基于命令行的防火墙策略管理工具，具有大量参数，学习难度较大。好在对于日常的防火墙策略配置来讲，大家无需深入了解诸如“四表五链”的理论概念，只需要掌握常用的参数并做到灵活搭配即可，这就足以应对日常工作了。',0,'alvin',curdate());
insert into Content values(390,5,'p',25,'{}','        iptables命令可以根据流量的源地址、目的地址、传输协议、服务类型等信息进行匹配，一旦匹配成功，iptables就会根据策略规则所预设的动作来处理这些流量。另外，再次提醒一下，防火墙策略规则的匹配顺序是从上至下的，因此要把较为严格、优先级较高的策略规则放到前面，以免发生错误。表8-1总结归纳了常用的iptables命令参数。再次强调，我们无需死记硬背这些参数，只需借助下面的实验来理解掌握即可。','        iptables命令可以根据流量的源地址、目的地址、传输协议、服务类型等信息进行匹配，一旦匹配成功，iptables就会根据策略规则所预设的动作来处理这些流量。另外，再次提醒一下，防火墙策略规则的匹配顺序是从上至下的，因此要把较为严格、优先级较高的策略规则放到前面，以免发生错误。表8-1总结归纳了常用的iptables命令参数。再次强调，我们无需死记硬背这些参数，只需借助下面的实验来理解掌握即可。',0,'alvin',curdate());
insert into Content values(391,5,'table',26,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-P	设置默认策略
-F	清空规则链
-L	查看规则链
-A	在规则链的末尾加入新规则
-I num	在规则链的头部加入新规则
-D num	删除某一条规则
-s	匹配来源地址IP/MASK，加叹号“!”表示除这个IP外
-d	匹配目标地址
-i 网卡名称	匹配从这块网卡流入的数据
-o 网卡名称	匹配从这块网卡流出的数据
-p	匹配协议，如TCP、UDP、ICMP
--dport num	匹配目标端口号
--sport num	匹配来源端口号','参数	作用
-P	设置默认策略
-F	清空规则链
-L	查看规则链
-A	在规则链的末尾加入新规则
-I num	在规则链的头部加入新规则
-D num	删除某一条规则
-s	匹配来源地址IP/MASK，加叹号“!”表示除这个IP外
-d	匹配目标地址
-i 网卡名称	匹配从这块网卡流入的数据
-o 网卡名称	匹配从这块网卡流出的数据
-p	匹配协议，如TCP、UDP、ICMP
--dport num	匹配目标端口号
--sport num	匹配来源端口号',0,'alvin',curdate());
insert into Content values(392,5,'p',27,'{}',' BOLD[  在iptables命令后添加-L参数查看已有的防火墙规则链： ]BOLD',' BOLD[  在iptables命令后添加-L参数查看已有的防火墙规则链： ]BOLD',0,'alvin',curdate());
insert into Content values(393,5,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED 
ACCEPT all -- anywhere anywhere 
INPUT_direct all -- anywhere anywhere 
INPUT_ZONES_SOURCE all -- anywhere anywhere 
INPUT_ZONES all -- anywhere anywhere 
ACCEPT icmp -- anywhere anywhere 
REJECT all -- anywhere anywhere reject-with icmp-host-prohibited 
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
ACCEPT all -- anywhere anywhere ctstate RELATED,ESTABLISHED 
ACCEPT all -- anywhere anywhere 
INPUT_direct all -- anywhere anywhere 
INPUT_ZONES_SOURCE all -- anywhere anywhere 
INPUT_ZONES all -- anywhere anywhere 
ACCEPT icmp -- anywhere anywhere 
REJECT all -- anywhere anywhere reject-with icmp-host-prohibited 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(394,5,'p',29,'{}',' BOLD[  在iptables命令后添加-F参数清空已有的防火墙规则链： ]BOLD',' BOLD[  在iptables命令后添加-F参数清空已有的防火墙规则链： ]BOLD',0,'alvin',curdate());
insert into Content values(395,5,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -F 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target    prot opt source        destination
Chain FORWARD (pliicy ACCEPT)
target    prot opt source        destination
Chain OUTPUT (pliicy ACCEPT)
target    prot opt source        destination
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -F 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target    prot opt source        destination
Chain FORWARD (pliicy ACCEPT)
target    prot opt source        destination
Chain OUTPUT (pliicy ACCEPT)
target    prot opt source        destination
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(396,5,'p',31,'{}',' BOLD[  把INPUT规则链的默认策略设置为拒绝： ]BOLD',' BOLD[  把INPUT规则链的默认策略设置为拒绝： ]BOLD',0,'alvin',curdate());
insert into Content values(397,5,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -P INPUT DROP
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy DROP)
target    prot opt source        destination
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -P INPUT DROP
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy DROP)
target    prot opt source        destination
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(398,5,'p',33,'{}','        前文提到，防火墙策略规则的设置有两种：通和堵。当把INPUT链设置为默认拒绝后，就要在防火墙策略中写入允许策略了，否则所有到来的流量都会被拒绝掉。另外，需要注意的是，规则链的默认拒绝动作只能是DROP，而不能是REJECT。','        前文提到，防火墙策略规则的设置有两种：通和堵。当把INPUT链设置为默认拒绝后，就要在防火墙策略中写入允许策略了，否则所有到来的流量都会被拒绝掉。另外，需要注意的是，规则链的默认拒绝动作只能是DROP，而不能是REJECT。',0,'alvin',curdate());
insert into Content values(399,5,'p',34,'{}',' BOLD[  向INPUT链中添加允许ICMP流量进入的策略规则： ]BOLD',' BOLD[  向INPUT链中添加允许ICMP流量进入的策略规则： ]BOLD',0,'alvin',curdate());
insert into Content values(400,5,'p',35,'{}','        在日常运维工作中，经常会使用ping命令来检查对方主机是否在线，而向防火墙的INPUT规则链中添加一条允许ICMP流量进入的策略规则就默认允许了这种ping命令检测行为。','        在日常运维工作中，经常会使用ping命令来检查对方主机是否在线，而向防火墙的INPUT规则链中添加一条允许ICMP流量进入的策略规则就默认允许了这种ping命令检测行为。',0,'alvin',curdate());
insert into Content values(401,5,'pre',36,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -I INPUT -p icmp -j ACCEPT 
[root@linuxprobe ~]#ping -c 4 192.168.10.10 
PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.
64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.156ms 
64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.117ms 
64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.099ms 
64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.090ms 
---192.168.10.10 ping statistics---
4 packets transmitted,4 received,0% packet loss,time 2999ms 
rtt min/avg/max/mdev = 0.090/0.115/0.156/0.027ms
','[root@linuxprobe ~]#iptables -I INPUT -p icmp -j ACCEPT 
[root@linuxprobe ~]#ping -c 4 192.168.10.10 
PING 192.168.10.10 (192.168.10.10) 56(84) bytes of data.
64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.156ms 
64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.117ms 
64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.099ms 
64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.090ms 
---192.168.10.10 ping statistics---
4 packets transmitted,4 received,0% packet loss,time 2999ms 
rtt min/avg/max/mdev = 0.090/0.115/0.156/0.027ms
',0,'alvin',curdate());
insert into Content values(402,5,'p',37,'{}',' BOLD[  删除INPUT规则链中刚刚加入的那条策略(允许ICMP流量),并把默认策略设置为允许： ]BOLD',' BOLD[  删除INPUT规则链中刚刚加入的那条策略(允许ICMP流量),并把默认策略设置为允许： ]BOLD',0,'alvin',curdate());
insert into Content values(403,5,'pre',38,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -D INPUT1 
[root@linuxprobe ~]#iptables -P INPUT ACCEPT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -D INPUT1 
[root@linuxprobe ~]#iptables -P INPUT ACCEPT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(404,5,'p',39,'{}',' BOLD[  将INPUT规则链设置为只允许指定网段的主机访问本机的22端口，拒绝来自其它所有主机的流量： ]BOLD',' BOLD[  将INPUT规则链设置为只允许指定网段的主机访问本机的22端口，拒绝来自其它所有主机的流量： ]BOLD',0,'alvin',curdate());
insert into Content values(405,5,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -I INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT 
[root@linuxprobe ~]#iptables -A INPUT -p tcp --dport 22 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy CCEPT)
target prot opt source destination 
ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -I INPUT -s 192.168.10.0/24 -p tcp --dport 22 -j ACCEPT 
[root@linuxprobe ~]#iptables -A INPUT -p tcp --dport 22 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy CCEPT)
target prot opt source destination 
ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(406,5,'p',41,'{}','        再次重申，防火墙策略规则是按照从上到下的顺序匹配的，因此一定要把允许动作放到拒绝动作前面，否则所有的流量就将被拒绝掉，从而导致任何主机都无法访问我们的服务。另外，这里提到的22号端口是ssh服务使用的，老师先在这里挖坑，等大家学完后可再验证这个实验的效果。','        再次重申，防火墙策略规则是按照从上到下的顺序匹配的，因此一定要把允许动作放到拒绝动作前面，否则所有的流量就将被拒绝掉，从而导致任何主机都无法访问我们的服务。另外，这里提到的22号端口是ssh服务使用的，老师先在这里挖坑，等大家学完后可再验证这个实验的效果。',0,'alvin',curdate());
insert into Content values(407,5,'p',42,'{}','        在设置完上述INPUT规则链之后，我们使用IP地址在192.168.10.0/24网段内的主机访 问服务器（即前面提到的设置了INPUT规则链的主机）的22端口，效果如下：','        在设置完上述INPUT规则链之后，我们使用IP地址在192.168.10.0/24网段内的主机访 问服务器（即前面提到的设置了INPUT规则链的主机）的22端口，效果如下：',0,'alvin',curdate());
insert into Content values(408,5,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@ClientA ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key fingerprint is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)? yes 
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'s password:此处输入对方主机的root管理员密码
Last login: Sun Feb 12 01:50:25 2017 
[root@ClientA ~]#
','[root@ClientA ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key fingerprint is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)? yes 
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'s password:此处输入对方主机的root管理员密码
Last login: Sun Feb 12 01:50:25 2017 
[root@ClientA ~]#
',0,'alvin',curdate());
insert into Content values(409,5,'p',44,'{}','        然后，我们再使用IP地址在192.168.20.0/24网段内的主机访问服务器的22端口（虽网 段不同，但已确认可以相互通信），效果如下，就会提示连接请求被拒绝了（Connectionfailed）：','        然后，我们再使用IP地址在192.168.20.0/24网段内的主机访问服务器的22端口（虽网 段不同，但已确认可以相互通信），效果如下，就会提示连接请求被拒绝了（Connectionfailed）：',0,'alvin',curdate());
insert into Content values(410,5,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@ClientA ~]#ssh 192.168.10.10 
Connecting to 192.168.10.10:22...
Could not connect to \'192.168.10.10\'(port22):Connection failed.
','[root@ClientA ~]#ssh 192.168.10.10 
Connecting to 192.168.10.10:22...
Could not connect to \'192.168.10.10\'(port22):Connection failed.
',0,'alvin',curdate());
insert into Content values(411,5,'p',46,'{}',' BOLD[  向INPUT规则链中添加拒绝所有人访问本机12345端口的策略规则： ]BOLD',' BOLD[  向INPUT规则链中添加拒绝所有人访问本机12345端口的策略规则： ]BOLD',0,'alvin',curdate());
insert into Content values(412,5,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -I INPUT -p tcp --dport 12345 -j REJECT 
[root@linuxprobe ~]#iptables -I INPUT -p udp --dport 12345 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable 
REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable 
ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -I INPUT -p tcp --dport 12345 -j REJECT 
[root@linuxprobe ~]#iptables -I INPUT -p udp --dport 12345 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable 
REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable 
ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(413,5,'p',48,'{}',' BOLD[  向INPUT规则链中添加拒绝192.168.10.5主机访问本机80端口(Web服务)的策略规则： ]BOLD',' BOLD[  向INPUT规则链中添加拒绝192.168.10.5主机访问本机80端口(Web服务)的策略规则： ]BOLD',0,'alvin',curdate());
insert into Content values(414,5,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -I INPUT -p tcp -s 192.168.10.5 --dport 80 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable 
REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable REJECTtcp--anywhereanywheretcpdpt:italkreject-withicmp-port-unreachable ACCEPTtcp--192.168.10.0/24anywheretcpdpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -I INPUT -p tcp -s 192.168.10.5 --dport 80 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable 
REJECT udp -- anywhere anywhere udp dpt:italk reject-with icmp-port-unreachable REJECTtcp--anywhereanywheretcpdpt:italkreject-withicmp-port-unreachable ACCEPTtcp--192.168.10.0/24anywheretcpdpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(415,5,'p',50,'{}',' BOLD[  向INPUT规则链中添加拒绝所有主机访问本机1000~1024端口的策略规则： ]BOLD',' BOLD[  向INPUT规则链中添加拒绝所有主机访问本机1000~1024端口的策略规则： ]BOLD',0,'alvin',curdate());
insert into Content values(416,5,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#iptables -A INPUT -p tcp --dport 1000:1024 -j REJECT 
[root@linuxprobe ~]#iptables -A INPUT -p udp --dport 1000:1024 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable REJECTudp--anywhereanywhereudpdpt:italkreject-withicmp-port-unreachable 
REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable 
ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
REJECT tcp -- anywhere anywhere tcp dpts:cadlock2:1024 reject-with icmp-port-unreachable 
REJECT udp -- anywhere anywhere udp dpts:cadlock2:1024 reject-with icmp-port-unreachable 
………………省略部分输出信息………………
','[root@linuxprobe ~]#iptables -A INPUT -p tcp --dport 1000:1024 -j REJECT 
[root@linuxprobe ~]#iptables -A INPUT -p udp --dport 1000:1024 -j REJECT 
[root@linuxprobe ~]#iptables -L 
Chain INPUT (pliicy ACCEPT)
target prot opt source destination 
REJECT tcp -- 192.168.10.5 anywhere tcp dpt:http reject-with icmp-port-unreachable REJECTudp--anywhereanywhereudpdpt:italkreject-withicmp-port-unreachable 
REJECT tcp -- anywhere anywhere tcp dpt:italk reject-with icmp-port-unreachable 
ACCEPT tcp -- 192.168.10.0/24 anywhere tcp dpt:ssh 
REJECT tcp -- anywhere anywhere tcp dpt:ssh reject-with icmp-port-unreachable 
REJECT tcp -- anywhere anywhere tcp dpts:cadlock2:1024 reject-with icmp-port-unreachable 
REJECT udp -- anywhere anywhere udp dpts:cadlock2:1024 reject-with icmp-port-unreachable 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(417,5,'p',52,'{}','        有关iptables命令的知识讲解到此就结束了，大家是不是意犹未尽？考虑到Linux防火墙的发展趋势，大家只要能把上面的实例吸收消化，就可以完全搞定日常的iptables配置工作了。但是请特别注意，使用iptables命令配置的防火墙规则默认会在系统下一次重启时失效，如果想让配置的防火墙策略永久生效，还要执行保存命令：','        有关iptables命令的知识讲解到此就结束了，大家是不是意犹未尽？考虑到Linux防火墙的发展趋势，大家只要能把上面的实例吸收消化，就可以完全搞定日常的iptables配置工作了。但是请特别注意，使用iptables命令配置的防火墙规则默认会在系统下一次重启时失效，如果想让配置的防火墙策略永久生效，还要执行保存命令：',0,'alvin',curdate());
insert into Content values(418,5,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#service iptables save 
iptables:Saving firewall rules to /etc/sysconfig/iptables:[OK]
','[root@linuxprobe ~]#service iptables save 
iptables:Saving firewall rules to /etc/sysconfig/iptables:[OK]
',0,'alvin',curdate());
insert into Content values(419,5,'line',54,'{}','','',0,'alvin',curdate());
insert into Content values(420,5,'line',55,'{}','','',0,'alvin',curdate());
insert into Content values(421,5,'h2',56,'{}','firewalld','firewalld',0,'alvin',curdate());
insert into Content values(422,5,'p',57,'{}','        RHEL7系统中集成了多款防火墙管理工具，其中firewalld（DynamicFirewallManagerofLinux systems，Linux系统的动态防火墙管理器）服务是默认的防火墙配置管理工具，它拥有基于CLI（命令行界面）和基于GUI（图形用户界面）的两种管理方式。','        RHEL7系统中集成了多款防火墙管理工具，其中firewalld（DynamicFirewallManagerofLinux systems，Linux系统的动态防火墙管理器）服务是默认的防火墙配置管理工具，它拥有基于CLI（命令行界面）和基于GUI（图形用户界面）的两种管理方式。',0,'alvin',curdate());
insert into Content values(423,5,'p',58,'{}','        相较于传统的防火墙管理配置工具，firewalld支持动态更新技术并加入了区域（zone）的概念。简单来说，区域就是firewalld预先准备了几套防火墙策略集合（策略模板），用户可以根据生产场景的不同而选择合适的策略集合，从而实现防火墙策略之间的快速切换。例如，我们有一台笔记本电脑，每天都要在办公室、咖啡厅和家里使用。按常理来讲，这三者的安全 性按照由高到低的顺序来排列，应该是家庭、公司办公室、咖啡厅。当前，我们希望为这台笔记本电脑指定如下防火墙策略规则：在家中允许访问所有服务；在办公室内仅允许访问文件共享服务；在咖啡厅仅允许上网浏览。在以往，我们需要频繁地手动设置防火墙策略规则，而现在只需要预设好区域集合，然后只需轻点鼠标就可以自动切换了，从而极大地提升了防火 墙策略的应用效率。firewalld中常见的区域名称（默认为public）以及相应的策略规则如表所示。','        相较于传统的防火墙管理配置工具，firewalld支持动态更新技术并加入了区域（zone）的概念。简单来说，区域就是firewalld预先准备了几套防火墙策略集合（策略模板），用户可以根据生产场景的不同而选择合适的策略集合，从而实现防火墙策略之间的快速切换。例如，我们有一台笔记本电脑，每天都要在办公室、咖啡厅和家里使用。按常理来讲，这三者的安全 性按照由高到低的顺序来排列，应该是家庭、公司办公室、咖啡厅。当前，我们希望为这台笔记本电脑指定如下防火墙策略规则：在家中允许访问所有服务；在办公室内仅允许访问文件共享服务；在咖啡厅仅允许上网浏览。在以往，我们需要频繁地手动设置防火墙策略规则，而现在只需要预设好区域集合，然后只需轻点鼠标就可以自动切换了，从而极大地提升了防火 墙策略的应用效率。firewalld中常见的区域名称（默认为public）以及相应的策略规则如表所示。',0,'alvin',curdate());
insert into Content values(424,5,'table',59,'{"class": ["table", "table-bordered", "table-striped"]}','区域	默认策略规则
trusted	允许所有的数据包
home	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关，则允许流量
internal	等同于home区域
work	拒绝流入的流量，除非与流出的流量数相关；而如果流量与ssh、ipp-client与dhcpv6-client服务相关，则允许流量
public	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、dhcpv6-client服务相关，则允许流量
external	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量
dmz	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量
block	拒绝流入的流量，除非与流出的流量相关
drop	拒绝流入的流量，除非与流出的流量相关','区域	默认策略规则
trusted	允许所有的数据包
home	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、mdns、ipp-client、amba-client与dhcpv6-client服务相关，则允许流量
internal	等同于home区域
work	拒绝流入的流量，除非与流出的流量数相关；而如果流量与ssh、ipp-client与dhcpv6-client服务相关，则允许流量
public	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh、dhcpv6-client服务相关，则允许流量
external	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量
dmz	拒绝流入的流量，除非与流出的流量相关；而如果流量与ssh服务相关，则允许流量
block	拒绝流入的流量，除非与流出的流量相关
drop	拒绝流入的流量，除非与流出的流量相关',0,'alvin',curdate());
insert into Content values(425,5,'h3',60,'{}','终端管理工具','终端管理工具',0,'alvin',curdate());
insert into Content values(426,5,'p',61,'{}','        讲解Linux命令时曾经听到，命令行终端是一种极富效率的工作方式，firewall-cmd是firewalld防火墙配置管理工具的CLI（命令行界面）版本。它的参数一般都是以“长格式”来提供的，大家不要一听到长格式就头大，因为RHEL7系统支持部分命令的参数补 齐，其中就包含这条命令（很酷吧）。也就是说，现在除了能用Tab键自动补齐命令或文件名等内容之外，还可以用Tab键来补齐表中所示的长格式参数了（这太棒了）。','        讲解Linux命令时曾经听到，命令行终端是一种极富效率的工作方式，firewall-cmd是firewalld防火墙配置管理工具的CLI（命令行界面）版本。它的参数一般都是以“长格式”来提供的，大家不要一听到长格式就头大，因为RHEL7系统支持部分命令的参数补 齐，其中就包含这条命令（很酷吧）。也就是说，现在除了能用Tab键自动补齐命令或文件名等内容之外，还可以用Tab键来补齐表中所示的长格式参数了（这太棒了）。',0,'alvin',curdate());
insert into Content values(427,5,'table',62,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
--get-default-zone	查询默认的区域名称
--set-default-zone=<区域名称>	设置默认的区域，使其永久生效
--get-zones	显示可用的区域
--get-services	显示预先定义的服务
--get-active-zones	显示当前正在使用的区域与网卡名称
--add-source=	将源自此IP或子网的流量导向指定的区域
--remove-source=	不再将源自此IP或子网的流量导向某个指定区域
--add-interface=<网卡名称>	将源自该网卡的所有流量都导向某个指定区域
--change-interface=<网卡名称>	将某个网卡与区域进行关联
--list-all	显示当前区域的网卡配置参数、资源、端口以及服务等信息
--list-all-zones	显示所有区域的网卡配置参数、资源、端口以及服务等信息
--add-service=<服务名>	设置默认区域允许该服务的流量
--add-port=<端口号/协议>	设置默认区域允许该端口的流量
--remove-service=<服务名>	设置默认区域不再允许该服务的流量
--remove-port=<端口号/协议>	设置默认区域不再允许该端口的流量
--reload	让“永久生效”的配置规则立即生效，并覆盖当前的配置规则
--panic-on	开启应急状况模式
--panic-off	关闭应急状况模式','参数	作用
--get-default-zone	查询默认的区域名称
--set-default-zone=<区域名称>	设置默认的区域，使其永久生效
--get-zones	显示可用的区域
--get-services	显示预先定义的服务
--get-active-zones	显示当前正在使用的区域与网卡名称
--add-source=	将源自此IP或子网的流量导向指定的区域
--remove-source=	不再将源自此IP或子网的流量导向某个指定区域
--add-interface=<网卡名称>	将源自该网卡的所有流量都导向某个指定区域
--change-interface=<网卡名称>	将某个网卡与区域进行关联
--list-all	显示当前区域的网卡配置参数、资源、端口以及服务等信息
--list-all-zones	显示所有区域的网卡配置参数、资源、端口以及服务等信息
--add-service=<服务名>	设置默认区域允许该服务的流量
--add-port=<端口号/协议>	设置默认区域允许该端口的流量
--remove-service=<服务名>	设置默认区域不再允许该服务的流量
--remove-port=<端口号/协议>	设置默认区域不再允许该端口的流量
--reload	让“永久生效”的配置规则立即生效，并覆盖当前的配置规则
--panic-on	开启应急状况模式
--panic-off	关闭应急状况模式',0,'alvin',curdate());
insert into Content values(428,5,'p',63,'{}','        与Linux系统中其他的防火墙策略配置工具一样，使用firewalld配置的防火墙策略默认 为运行时（Runtime）模式，又称为当前生效模式，而且随着系统的重启会失效。如果想让配置策略一直存在，就需要使用永久（Permanent）模式了，方法就是在用firewall-cmd命令正常 设置防火墙策略时添加--permanent参数，这样配置的防火墙策略就可以永久生效了。但是，永久生效模式有一个“不近人情”的特点，就是使用它设置的策略只有在系统重启之后才 能自动生效。如果想让配置的策略立即生效，需要手动执行firewall-cmd--reload命令。','        与Linux系统中其他的防火墙策略配置工具一样，使用firewalld配置的防火墙策略默认 为运行时（Runtime）模式，又称为当前生效模式，而且随着系统的重启会失效。如果想让配置策略一直存在，就需要使用永久（Permanent）模式了，方法就是在用firewall-cmd命令正常 设置防火墙策略时添加--permanent参数，这样配置的防火墙策略就可以永久生效了。但是，永久生效模式有一个“不近人情”的特点，就是使用它设置的策略只有在系统重启之后才 能自动生效。如果想让配置的策略立即生效，需要手动执行firewall-cmd--reload命令。',0,'alvin',curdate());
insert into Content values(429,5,'p',64,'{}','        接下来的实验都很简单，但是提醒大家一定要仔细查看老师使用的是Runtime模式还是Permanent模式。如果不关注这个细节，就算是正确配置了防火墙策略，也可能无法达到 预期的效果。','        接下来的实验都很简单，但是提醒大家一定要仔细查看老师使用的是Runtime模式还是Permanent模式。如果不关注这个细节，就算是正确配置了防火墙策略，也可能无法达到 预期的效果。',0,'alvin',curdate());
insert into Content values(430,5,'p',65,'{}','        查看firewalld服务当前所使用的区域：','        查看firewalld服务当前所使用的区域：',0,'alvin',curdate());
insert into Content values(431,5,'pre',66,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --get-default-zone 
public
','[root@linuxprobe ~]#firewall-cmd --get-default-zone 
public
',0,'alvin',curdate());
insert into Content values(432,5,'p',67,'{}','        查询eno16777728网卡在firewalld服务中的区域：','        查询eno16777728网卡在firewalld服务中的区域：',0,'alvin',curdate());
insert into Content values(433,5,'pre',68,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --get-zone-of-interface=eno16777728 
public
','[root@linuxprobe ~]#firewall-cmd --get-zone-of-interface=eno16777728 
public
',0,'alvin',curdate());
insert into Content values(434,5,'p',69,'{}','        把firewalld服务中eno16777728网卡的默认区域修改为external，并在系统重启后生效。分别查看当前与永久模式下的区域名称：','        把firewalld服务中eno16777728网卡的默认区域修改为external，并在系统重启后生效。分别查看当前与永久模式下的区域名称：',0,'alvin',curdate());
insert into Content values(435,5,'pre',70,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --permanent --zone=external --change-interface=eno16777728 
success          
[root@linuxprobe ~]#firewall-cmd --get -zone-of-interface=eno16777728 
public           
[root@linuxprobe ~]#firewall-cmd --permanent --get-zone-of-interface=eno16777728 
external
','[root@linuxprobe ~]#firewall-cmd --permanent --zone=external --change-interface=eno16777728 
success          
[root@linuxprobe ~]#firewall-cmd --get -zone-of-interface=eno16777728 
public           
[root@linuxprobe ~]#firewall-cmd --permanent --get-zone-of-interface=eno16777728 
external
',0,'alvin',curdate());
insert into Content values(436,5,'p',71,'{}','        把firewalld服务的当前默认区域设置为public：','        把firewalld服务的当前默认区域设置为public：',0,'alvin',curdate());
insert into Content values(437,5,'pre',72,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --set-default-zone=public 
success 
[root@linuxprobe ~]#firewall-cmd --get-default-zone 
public
','[root@linuxprobe ~]#firewall-cmd --set-default-zone=public 
success 
[root@linuxprobe ~]#firewall-cmd --get-default-zone 
public
',0,'alvin',curdate());
insert into Content values(438,5,'p',73,'{}','        启动/关闭firewalld防火墙服务的应急状况模式，阻断一切网络连接（当远程控制服务器 时请慎用）：','        启动/关闭firewalld防火墙服务的应急状况模式，阻断一切网络连接（当远程控制服务器 时请慎用）：',0,'alvin',curdate());
insert into Content values(439,5,'pre',74,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --panic-on 
success 
[root@linuxprobe ~]#firewall-cmd --panic-off 
success
','[root@linuxprobe ~]#firewall-cmd --panic-on 
success 
[root@linuxprobe ~]#firewall-cmd --panic-off 
success
',0,'alvin',curdate());
insert into Content values(440,5,'p',75,'{}','        查询public区域是否允许请求SSH和HTTPS协议的流量：','        查询public区域是否允许请求SSH和HTTPS协议的流量：',0,'alvin',curdate());
insert into Content values(441,5,'pre',76,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --zone=public --query-service=ssh 
yes                                            
[root@linuxprobe ~]#firewall-cmd --zone=public --query-service=https 
no
','[root@linuxprobe ~]#firewall-cmd --zone=public --query-service=ssh 
yes                                            
[root@linuxprobe ~]#firewall-cmd --zone=public --query-service=https 
no
',0,'alvin',curdate());
insert into Content values(442,5,'p',77,'{}','        把firewalld服务中请求HTTPS协议的流量设置为永久允许，并立即生效：','        把firewalld服务中请求HTTPS协议的流量设置为永久允许，并立即生效：',0,'alvin',curdate());
insert into Content values(443,5,'pre',78,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --zone=public --add-service=https
success                          
[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --add-service=https 
success 
[root@linuxprobe ~]#firewall-cmd --reload 
success
','[root@linuxprobe ~]#firewall-cmd --zone=public --add-service=https
success                          
[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --add-service=https 
success 
[root@linuxprobe ~]#firewall-cmd --reload 
success
',0,'alvin',curdate());
insert into Content values(444,5,'p',79,'{}','        把firewalld服务中请求HTTP协议的流量设置为永久拒绝，并立即生效：','        把firewalld服务中请求HTTP协议的流量设置为永久拒绝，并立即生效：',0,'alvin',curdate());
insert into Content values(445,5,'pre',80,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --remove-service=http 
success                          
[root@linuxprobe ~]#firewall-cmd --reload 
success
','[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --remove-service=http 
success                          
[root@linuxprobe ~]#firewall-cmd --reload 
success
',0,'alvin',curdate());
insert into Content values(446,5,'p',81,'{}','        把在firewalld服务中访问8080和8081端口的流量策略设置为允许，但仅限当前生效：','        把在firewalld服务中访问8080和8081端口的流量策略设置为允许，但仅限当前生效：',0,'alvin',curdate());
insert into Content values(447,5,'pre',82,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --zone=public --add-port=8080-8081/tcp 
success                                        
[root@linuxprobe ~]#firewall-cmd --zone=public --list-ports 
8080-8081/tcp
','[root@linuxprobe ~]#firewall-cmd --zone=public --add-port=8080-8081/tcp 
success                                        
[root@linuxprobe ~]#firewall-cmd --zone=public --list-ports 
8080-8081/tcp
',0,'alvin',curdate());
insert into Content values(448,5,'p',83,'{}','        把原本访问本机888端口的流量转发到22端口，要且求当前和长期均有效：','        把原本访问本机888端口的流量转发到22端口，要且求当前和长期均有效：',0,'alvin',curdate());
insert into Content values(449,5,'pre',84,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.10.10 
success                          
[root@linuxprobe ~]#firewall-cmd --reload 
success
','[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --add-forward-port=port=888:proto=tcp:toport=22:toaddr=192.168.10.10 
success                          
[root@linuxprobe ~]#firewall-cmd --reload 
success
',0,'alvin',curdate());
insert into Content values(450,5,'p',85,'{}','        在客户端使用ssh命令尝试访问192.168.10.10主机的888端口：','        在客户端使用ssh命令尝试访问192.168.10.10主机的888端口：',0,'alvin',curdate());
insert into Content values(451,5,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','[root@client A ~]#ssh -p 888 192.168.10.10 
The authenticity of host \'[192.168.10.10]:888([192.168.10.10]:888)\' can\'t 
be established.
ECDSA key fingerprint is b8:25:88:89:5c:05:b6:dd:ef:76:63:ff:1a:54:02:1a.
Are you sure you want to continue connecting (yes/no)? yes 
Warning:Permanently added \'[192.168.10.10]:888\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'spassword:
Last login:Sun Jul 19 21:43:48 2017 from 192.168.10.10
','[root@client A ~]#ssh -p 888 192.168.10.10 
The authenticity of host \'[192.168.10.10]:888([192.168.10.10]:888)\' can\'t 
be established.
ECDSA key fingerprint is b8:25:88:89:5c:05:b6:dd:ef:76:63:ff:1a:54:02:1a.
Are you sure you want to continue connecting (yes/no)? yes 
Warning:Permanently added \'[192.168.10.10]:888\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'spassword:
Last login:Sun Jul 19 21:43:48 2017 from 192.168.10.10
',0,'alvin',curdate());
insert into Content values(452,5,'p',87,'{}','        firewalld中的富规则表示更细致、更详细的防火墙策略配置，它可以针对系统服务、端口号、源地址和目标地址等诸多信息进行更有针对性的策略配置。它的优先级在所有的防火 墙策略中也是最高的。比如，我们可以在firewalld服务中配置一条富规则，使其拒绝192.168.10.0/24网段的所有用户访问本机的ssh服务（22端口）：','        firewalld中的富规则表示更细致、更详细的防火墙策略配置，它可以针对系统服务、端口号、源地址和目标地址等诸多信息进行更有针对性的策略配置。它的优先级在所有的防火 墙策略中也是最高的。比如，我们可以在firewalld服务中配置一条富规则，使其拒绝192.168.10.0/24网段的所有用户访问本机的ssh服务（22端口）：',0,'alvin',curdate());
insert into Content values(453,5,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --add-rich-rule="rule family="ipv4" source address="192.168.10.0/24" service name="ssh" reject"
success 
[root@linuxprobe ~]#firewall-cmd --reload
success
','[root@linuxprobe ~]#firewall-cmd --permanent --zone=public --add-rich-rule="rule family="ipv4" source address="192.168.10.0/24" service name="ssh" reject"
success 
[root@linuxprobe ~]#firewall-cmd --reload
success
',0,'alvin',curdate());
insert into Content values(454,5,'p',89,'{}','        在客户端使用ssh命令尝试访问192.168.10.10主机的ssh服务（22端口）：','        在客户端使用ssh命令尝试访问192.168.10.10主机的ssh服务（22端口）：',0,'alvin',curdate());
insert into Content values(455,5,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','[root@client A ~]#ssh 192.168.10.10 
Connecting to 192.168.10.10:22...
Could not connect to \'192.168.10.10\' (port22):Connection failed.
','[root@client A ~]#ssh 192.168.10.10 
Connecting to 192.168.10.10:22...
Could not connect to \'192.168.10.10\' (port22):Connection failed.
',0,'alvin',curdate());
insert into Content values(456,5,'h3',91,'{}','图形管理工具','图形管理工具',0,'alvin',curdate());
insert into Content values(457,5,'p',92,'{}','        在各种版本的Linux系统中，几乎没有能让刘遄老师欣慰并推荐的图形化工具，但是firewall-config做到了。它是firewalld防火墙配置管理工具的GUI（图形用户界面）版本，几乎可以实现所有以命令行来执行的操作。毫不夸张的说，即使读者没有扎实的Linux命令基础，也完全可以通过它来妥善配置RHEL7中的防火墙策略。firewall-config的界面如图所示，其功能具体如下。','        在各种版本的Linux系统中，几乎没有能让刘遄老师欣慰并推荐的图形化工具，但是firewall-config做到了。它是firewalld防火墙配置管理工具的GUI（图形用户界面）版本，几乎可以实现所有以命令行来执行的操作。毫不夸张的说，即使读者没有扎实的Linux命令基础，也完全可以通过它来妥善配置RHEL7中的防火墙策略。firewall-config的界面如图所示，其功能具体如下。',0,'alvin',curdate());
insert into Content values(458,5,'ol',93,'{}','选择运行时（Runtime）模式或永久（Permanent）模式的配置。
可选的策略集合区域列表。
常用的系统服务列表。
当前正在使用的区域。
管理当前被选中区域中的服务。
管理当前被选中区域中的端口。
开启或关闭SNAT（源地址转换协议）技术。
设置端口转发策略。
制请求icmp服务的流量。
管理防火墙的富规则。
管理网卡设备。
被选中区域的服务，若勾选了相应服务前面的复选框，则表示允许与之相关 的流量。
firewall-config工具的运行状态。','选择运行时（Runtime）模式或永久（Permanent）模式的配置。
可选的策略集合区域列表。
常用的系统服务列表。
当前正在使用的区域。
管理当前被选中区域中的服务。
管理当前被选中区域中的端口。
开启或关闭SNAT（源地址转换协议）技术。
设置端口转发策略。
制请求icmp服务的流量。
管理防火墙的富规则。
管理网卡设备。
被选中区域的服务，若勾选了相应服务前面的复选框，则表示允许与之相关 的流量。
firewall-config工具的运行状态。',0,'alvin',curdate());
insert into Content values(459,5,'image',94,'{"alt": "firewall-config", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-config.png", "width": "676"}','/static/img/linux/linux_firewall-config.png','/static/img/linux/linux_firewall-config.png',0,'alvin',curdate());
insert into Content values(460,5,'p',95,'{}','        老师再啰嗦几句。在使用firewall-config工具配置完防火墙策略之后，无须进 行二次确认，因为只要有修改内容，它就自动进行保存。下面进行动手实践环节。','        老师再啰嗦几句。在使用firewall-config工具配置完防火墙策略之后，无须进 行二次确认，因为只要有修改内容，它就自动进行保存。下面进行动手实践环节。',0,'alvin',curdate());
insert into Content values(461,5,'p',96,'{}','        我们先将当前区域中请求http服务的流量设置为允许，但仅限当前生效。具体配置如图','        我们先将当前区域中请求http服务的流量设置为允许，但仅限当前生效。具体配置如图',0,'alvin',curdate());
insert into Content values(462,5,'image',97,'{"alt": "firewall-conf1", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-conf1.png", "width": "676"}','/static/img/linux/linux_firewall-conf1.png','/static/img/linux/linux_firewall-conf1.png',0,'alvin',curdate());
insert into Content values(463,5,'p',98,'{}','        尝试添加一条防火墙策略规则，使其放行访问8080～8088端口（TCP协议）的流量，并将其设置为永久生效，以达到系统重启后防火墙策略依然生效的目的。在按照下图1所示的界面配置完毕之后，还需要在Options菜单中单击ReloadFirewalld命令，让配置的防火墙策略立即生效（见下图2）。这与在命令行中执行--reload参数的效果一样。','        尝试添加一条防火墙策略规则，使其放行访问8080～8088端口（TCP协议）的流量，并将其设置为永久生效，以达到系统重启后防火墙策略依然生效的目的。在按照下图1所示的界面配置完毕之后，还需要在Options菜单中单击ReloadFirewalld命令，让配置的防火墙策略立即生效（见下图2）。这与在命令行中执行--reload参数的效果一样。',0,'alvin',curdate());
insert into Content values(464,5,'image',99,'{"alt": "firewall-conf2", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-conf2.png", "width": "676"}','/static/img/linux/linux_firewall-conf2.png','/static/img/linux/linux_firewall-conf2.png',0,'alvin',curdate());
insert into Content values(465,5,'image',100,'{"alt": "firewall-conf3", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-conf3.png", "width": "676"}','/static/img/linux/linux_firewall-conf3.png','/static/img/linux/linux_firewall-conf3.png',0,'alvin',curdate());
insert into Content values(466,5,'p',101,'{}','        大家可以看一下在网络中不使用SNAT技术（见图A）和使用SNAT技术（见图B）时的情况。在图A所示的局域网中有多台PC，如果网关服务器没有应用SNAT技术，则互联网中的网站服务器在收到PC的请求数据包，并回送响应数据包时，将无法在网络中找到这 个私有网络的IP地址，所以PC也就收不到响应数据包了。在图B所示的局域网中，由于网关服务器应用了SNAT技术，所以互联网中的网站服务器会将响应数据包发给网关服务器，再由后者转发给局域网中的PC。','        大家可以看一下在网络中不使用SNAT技术（见图A）和使用SNAT技术（见图B）时的情况。在图A所示的局域网中有多台PC，如果网关服务器没有应用SNAT技术，则互联网中的网站服务器在收到PC的请求数据包，并回送响应数据包时，将无法在网络中找到这 个私有网络的IP地址，所以PC也就收不到响应数据包了。在图B所示的局域网中，由于网关服务器应用了SNAT技术，所以互联网中的网站服务器会将响应数据包发给网关服务器，再由后者转发给局域网中的PC。',0,'alvin',curdate());
insert into Content values(467,5,'image',102,'{"alt": "firewall-nsnat", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-nsnat.png", "width": "876"}','/static/img/linux/linux_firewall-nsnat.png','/static/img/linux/linux_firewall-nsnat.png',0,'alvin',curdate());
insert into Content values(468,5,'image',103,'{"alt": "firewall-snat", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-snat.png", "width": "876"}','/static/img/linux/linux_firewall-snat.png','/static/img/linux/linux_firewall-snat.png',0,'alvin',curdate());
insert into Content values(469,5,'p',104,'{}','        使用iptables命令实现SNAT技术是一件很麻烦的事情，但是在firewall-config中却 是小菜一碟了。用户只需按照图C进行配置，并选中Masqueradezone复选框，就自动开启了SNAT技术。','        使用iptables命令实现SNAT技术是一件很麻烦的事情，但是在firewall-config中却 是小菜一碟了。用户只需按照图C进行配置，并选中Masqueradezone复选框，就自动开启了SNAT技术。',0,'alvin',curdate());
insert into Content values(470,5,'image',105,'{"alt": "firewall-setsnat", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-setsnat.png", "width": "676"}','/static/img/linux/linux_firewall-setsnat.png','/static/img/linux/linux_firewall-setsnat.png',0,'alvin',curdate());
insert into Content values(471,5,'p',106,'{}','        为了让大家直观查看不同工具在实现相同功能的区别，这里使用firewall-config工具重新演示了前面使用firewall-cmd来配置防火墙策略规则，将本机888端口的流量转发到22端口，且要求当前和长期均有效，具体如图D和图E所示。','        为了让大家直观查看不同工具在实现相同功能的区别，这里使用firewall-config工具重新演示了前面使用firewall-cmd来配置防火墙策略规则，将本机888端口的流量转发到22端口，且要求当前和长期均有效，具体如图D和图E所示。',0,'alvin',curdate());
insert into Content values(472,5,'image',107,'{"alt": "firewall-setlocalip", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-setlocalip.png", "width": "676"}','/static/img/linux/linux_firewall-setlocalip.png','/static/img/linux/linux_firewall-setlocalip.png',0,'alvin',curdate());
insert into Content values(473,5,'image',108,'{"alt": "firewall-alive", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-alive.png", "width": "676"}','/static/img/linux/linux_firewall-alive.png','/static/img/linux/linux_firewall-alive.png',0,'alvin',curdate());
insert into Content values(474,5,'p',109,'{}','        配置富规则，让192.168.10.20主机访问到本机的1234端口号，如图F所示。','        配置富规则，让192.168.10.20主机访问到本机的1234端口号，如图F所示。',0,'alvin',curdate());
insert into Content values(475,5,'image',110,'{"alt": "firewall-setrule", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-setrule.png", "width": "676"}','/static/img/linux/linux_firewall-setrule.png','/static/img/linux/linux_firewall-setrule.png',0,'alvin',curdate());
insert into Content values(476,5,'p',111,'{}','        如果生产环境中的服务器有多块网卡在同时提供服务（这种情况很常见），则对内网和对外网提供服务的网卡要选择的防火墙策略区域也是不一样的。也就是说，可以把网卡与防火 墙策略区域进行绑定（见图G），这样就可以使用不同的防火墙区域策略，对源自不同网卡 的流量进行针对性的监控，效果会更好。','        如果生产环境中的服务器有多块网卡在同时提供服务（这种情况很常见），则对内网和对外网提供服务的网卡要选择的防火墙策略区域也是不一样的。也就是说，可以把网卡与防火 墙策略区域进行绑定（见图G），这样就可以使用不同的防火墙区域策略，对源自不同网卡 的流量进行针对性的监控，效果会更好。',0,'alvin',curdate());
insert into Content values(477,5,'image',112,'{"alt": "firewall-bindrule", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firewall-bindrule.png", "width": "676"}','/static/img/linux/linux_firewall-bindrule.png','/static/img/linux/linux_firewall-bindrule.png',0,'alvin',curdate());
insert into Content values(478,5,'p',113,'{}','        最后，老师想说的是，firewall-config工具真的非常实用，很多原本复杂的长命令被 用图形化按钮替代，设置规则也简单明了，足以应对日常工作。所以再次向大家强调配置防火墙策略的原则—只要能实现所需的功能，用什么工具请随君便。','        最后，老师想说的是，firewall-config工具真的非常实用，很多原本复杂的长命令被 用图形化按钮替代，设置规则也简单明了，足以应对日常工作。所以再次向大家强调配置防火墙策略的原则—只要能实现所需的功能，用什么工具请随君便。',0,'alvin',curdate());
insert into Content values(479,5,'line',114,'{}','','',0,'alvin',curdate());
insert into Content values(480,5,'h2',115,'{}','服务的访问控制列表','服务的访问控制列表',0,'alvin',curdate());
insert into Content values(481,5,'p',116,'{}','        TCPWrappers是RHEL7系统中默认启用的一款流量监控程序，它能够根据来访主机的地址与本机的目标服务程序作出允许或拒绝的操作。换句话说，Linux系统中其实有两个层面的防火 墙，第一种是前面讲到的基于TCP/IP协议的流量过滤工具，而TCPWrappers服务则是能允许或禁止Linux系统提供服务的防火墙，从而在更高层面保护了Linux系统的安全运行。','        TCPWrappers是RHEL7系统中默认启用的一款流量监控程序，它能够根据来访主机的地址与本机的目标服务程序作出允许或拒绝的操作。换句话说，Linux系统中其实有两个层面的防火 墙，第一种是前面讲到的基于TCP/IP协议的流量过滤工具，而TCPWrappers服务则是能允许或禁止Linux系统提供服务的防火墙，从而在更高层面保护了Linux系统的安全运行。',0,'alvin',curdate());
insert into Content values(482,5,'p',117,'{}','        TCPWrappers服务的防火墙策略由两个控制列表文件所控制，用户可以编辑允许控制列表文件来放行对服务的请求流量，也可以编辑拒绝控制列表文件来阻止对服务的请求流量。控制列表 文件修改后会立即生效，系统将会先检查允许控制列表文件（/etc/hosts.allow），如果匹配到相应的允许策略则放行流量；如果没有匹配，则去进一步匹配拒绝控制列表文件（/etc/hosts.deny），若 找到匹配项则拒绝该流量。如果这两个文件全都没有匹配到，则默认放行流量。','        TCPWrappers服务的防火墙策略由两个控制列表文件所控制，用户可以编辑允许控制列表文件来放行对服务的请求流量，也可以编辑拒绝控制列表文件来阻止对服务的请求流量。控制列表 文件修改后会立即生效，系统将会先检查允许控制列表文件（/etc/hosts.allow），如果匹配到相应的允许策略则放行流量；如果没有匹配，则去进一步匹配拒绝控制列表文件（/etc/hosts.deny），若 找到匹配项则拒绝该流量。如果这两个文件全都没有匹配到，则默认放行流量。',0,'alvin',curdate());
insert into Content values(483,5,'p',118,'{}','        TCPWrappers服务的控制列表文件配置起来并不复杂，常用的参数如表所示。','        TCPWrappers服务的控制列表文件配置起来并不复杂，常用的参数如表所示。',0,'alvin',curdate());
insert into Content values(484,5,'table',119,'{"class": ["table", "table-bordered", "table-striped"]}','客户端类型	示例	满足示例的客户端列表
单一主机	192.168.10.10	IP地址为192.168.10.10的主机
指定网段	192.168.10.	IP段为192.168.10.0/24的主机
指定网段	192.168.10.0/255.255.255.0	IP段为192.168.10.0/24的主机
指定DNS后缀	.linuxprobe.com	所有DNS后缀为.linuxprobe.com的主机
指定主机名称	www.linuxprobe.com	主机名称为www.linuxprobe.com的主机
指定所有客户端	ALL	所有主机全部包括在内','客户端类型	示例	满足示例的客户端列表
单一主机	192.168.10.10	IP地址为192.168.10.10的主机
指定网段	192.168.10.	IP段为192.168.10.0/24的主机
指定网段	192.168.10.0/255.255.255.0	IP段为192.168.10.0/24的主机
指定DNS后缀	.linuxprobe.com	所有DNS后缀为.linuxprobe.com的主机
指定主机名称	www.linuxprobe.com	主机名称为www.linuxprobe.com的主机
指定所有客户端	ALL	所有主机全部包括在内',0,'alvin',curdate());
insert into Content values(485,5,'p',120,'{}',' BOLD[  在配置TCPWrappers服务时需要遵循两个原则： ]BOLD',' BOLD[  在配置TCPWrappers服务时需要遵循两个原则： ]BOLD',0,'alvin',curdate());
insert into Content values(486,5,'ul',121,'{}','编写拒绝策略规则时，填写的是服务名称，而非协议名称；
建议先编写拒绝策略规则，再编写允许策略规则，以便直观地看到相应的效果。','编写拒绝策略规则时，填写的是服务名称，而非协议名称；
建议先编写拒绝策略规则，再编写允许策略规则，以便直观地看到相应的效果。',0,'alvin',curdate());
insert into Content values(487,5,'p',122,'{}','        下面编写拒绝策略规则文件，禁止访问本机sshd服务的所有流量（无须/etc/hosts.deny文件中修改原有的注释信息）：','        下面编写拒绝策略规则文件，禁止访问本机sshd服务的所有流量（无须/etc/hosts.deny文件中修改原有的注释信息）：',0,'alvin',curdate());
insert into Content values(488,5,'pre',123,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/hosts.deny 
#
# hosts.deny This file contains access rules which are used to 
# deny connections to network services that either use 
# the tcp_wrappers library or that have been 
# started through at cp_wrappers-enabled xinetd.
# 
# The rules in this file can also be set up in 
# /etc/hosts.allow with a \'deny\' option instead.
# 
# See \'man5 hosts_options\' and \'man5 hosts_access\'
# for information on rule syntax.
# See \'man tcpd\' for information on tcp_wrappers 
sshd:*

[root@linuxprobe ~]#ssh 192.168.10.10 
ssh_exchange_identification: read: Connection reset by peer
','[root@linuxprobe ~]#vim /etc/hosts.deny 
#
# hosts.deny This file contains access rules which are used to 
# deny connections to network services that either use 
# the tcp_wrappers library or that have been 
# started through at cp_wrappers-enabled xinetd.
# 
# The rules in this file can also be set up in 
# /etc/hosts.allow with a \'deny\' option instead.
# 
# See \'man5 hosts_options\' and \'man5 hosts_access\'
# for information on rule syntax.
# See \'man tcpd\' for information on tcp_wrappers 
sshd:*

[root@linuxprobe ~]#ssh 192.168.10.10 
ssh_exchange_identification: read: Connection reset by peer
',0,'alvin',curdate());
insert into Content values(489,5,'p',124,'{}','        接下来，在允许策略规则文件中添加一条规则，使其放行源自192.168.10.0/24网段，访 问本机sshd服务的所有流量。可以看到，服务器立刻就放行了访问sshd服务的流量，效果非 常直观：','        接下来，在允许策略规则文件中添加一条规则，使其放行源自192.168.10.0/24网段，访 问本机sshd服务的所有流量。可以看到，服务器立刻就放行了访问sshd服务的流量，效果非 常直观：',0,'alvin',curdate());
insert into Content values(490,5,'pre',125,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/hosts.allow 
#
# hosts.allow This file contains access rules which are used to 
# allow or deny connections to network services that 
# either use the tcp_wrappers library or that have been 
# started through at cp_wrappers-enabled xinetd.
# 
# See \'man5 hosts_options\' and \'man5 hosts_access\'
# for information on rule syntax.
# See \'man tcpd\' for information on tcp_wrappers 
sshd:192.168.10.

[root@linuxprobe ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key finger printis 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)?yes 
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.root@192.168.10.10\'s password:
Last login:Wed May 4 07:56:29 2017 
[root@linuxprobe~]#
','[root@linuxprobe ~]#vim /etc/hosts.allow 
#
# hosts.allow This file contains access rules which are used to 
# allow or deny connections to network services that 
# either use the tcp_wrappers library or that have been 
# started through at cp_wrappers-enabled xinetd.
# 
# See \'man5 hosts_options\' and \'man5 hosts_access\'
# for information on rule syntax.
# See \'man tcpd\' for information on tcp_wrappers 
sshd:192.168.10.

[root@linuxprobe ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key finger printis 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)?yes 
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.root@192.168.10.10\'s password:
Last login:Wed May 4 07:56:29 2017 
[root@linuxprobe~]#
',0,'alvin',curdate());
insert into Content values(491,6,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用ssh服务管理远程主机',' <span class="color_h1">  Linux </span> 使用ssh服务管理远程主机',0,'alvin',curdate());
insert into Content values(492,6,'p',2,'{}','        本章讲解了如何使用nmtui命令配置网络参数，以及通过nmcli命令查看网络信息并管理网络会话服务，从而让您能够在不同工作场景中快速地切换网络运行参数；还讲解了如何 手工绑定mode6模式双网卡，实现网络的负载均衡。','        本章讲解了如何使用nmtui命令配置网络参数，以及通过nmcli命令查看网络信息并管理网络会话服务，从而让您能够在不同工作场景中快速地切换网络运行参数；还讲解了如何 手工绑定mode6模式双网卡，实现网络的负载均衡。',0,'alvin',curdate());
insert into Content values(493,6,'p',3,'{}','        本章还深入介绍了SSH协议与sshd服务程序的理论知识、Linux系统的远程管理方法以及在系统中配置服务程序的方法，并采用实验的形式演示了使用基于密码验证的sshd服务程序进行远程登录，以及使用screen服务程序远程管理Linux系统的不间断会话等技术。','        本章还深入介绍了SSH协议与sshd服务程序的理论知识、Linux系统的远程管理方法以及在系统中配置服务程序的方法，并采用实验的形式演示了使用基于密码验证的sshd服务程序进行远程登录，以及使用screen服务程序远程管理Linux系统的不间断会话等技术。',0,'alvin',curdate());
insert into Content values(494,6,'p',4,'{}','        当掌握了本章的内容之后，也就完全具备了对Linux系统进行配置管理的知识。而且后续章节中将陆续引入大量实用服务的配置内容，读者将用到本章学习的知识进行配置，这样一方面可以让读者对生产环境中用到的大多数热门服务程序有一个广泛且深入的认识，另一方面也可以掌握相应的配置方法。','        当掌握了本章的内容之后，也就完全具备了对Linux系统进行配置管理的知识。而且后续章节中将陆续引入大量实用服务的配置内容，读者将用到本章学习的知识进行配置，这样一方面可以让读者对生产环境中用到的大多数热门服务程序有一个广泛且深入的认识，另一方面也可以掌握相应的配置方法。',0,'alvin',curdate());
insert into Content values(495,6,'line',5,'{}','','',0,'alvin',curdate());
insert into Content values(496,6,'h2',6,'{}','配置网络服务','配置网络服务',0,'alvin',curdate());
insert into Content values(497,6,'h3',7,'{}','配置网络参数','配置网络参数',0,'alvin',curdate());
insert into Content values(498,6,'p',8,'{}','        截至目前，大家已经完全可以利用当前所学的知识来管理Linux系统了。当然，大家的水平完全可以更进一步，当有朝一日登顶技术巅峰时，您一定会感谢现在正在努力学习的您。','        截至目前，大家已经完全可以利用当前所学的知识来管理Linux系统了。当然，大家的水平完全可以更进一步，当有朝一日登顶技术巅峰时，您一定会感谢现在正在努力学习的您。',0,'alvin',curdate());
insert into Content values(499,6,'p',9,'{}','        我们接下来将学习如何在Linux系统上配置服务。但是在此之前，必须先保证主机之间 能够顺畅地通信。如果网络不通，即便服务部署得再正确用户也无法顺利访问，所以，配置网 络并确保网络的连通性是学习部署Linux服务之前的最后一个重要知识点。','        我们接下来将学习如何在Linux系统上配置服务。但是在此之前，必须先保证主机之间 能够顺畅地通信。如果网络不通，即便服务部署得再正确用户也无法顺利访问，所以，配置网 络并确保网络的连通性是学习部署Linux服务之前的最后一个重要知识点。',0,'alvin',curdate());
insert into Content values(500,6,'p',10,'{}','        在之前讲解了如何使用Vim文本编辑器来配置网络参数，其实，在RHEL7系统中有至少5种网络的配置方法，老师尽量在本书中为大家逐一演示。这里教给大家的是使用nmtui命令来配置网络，其具体的配置步骤如下图所示。当遇到不容易理解的内容时，我们会额外进行解释说明。','        在之前讲解了如何使用Vim文本编辑器来配置网络参数，其实，在RHEL7系统中有至少5种网络的配置方法，老师尽量在本书中为大家逐一演示。这里教给大家的是使用nmtui命令来配置网络，其具体的配置步骤如下图所示。当遇到不容易理解的内容时，我们会额外进行解释说明。',0,'alvin',curdate());
insert into Content values(501,6,'p',11,'{}','1、执行nmtui命令运行网络配置工具','1、执行nmtui命令运行网络配置工具',0,'alvin',curdate());
insert into Content values(502,6,'image',12,'{"alt": "nmtui", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_nmtui.png", "width": "676"}','/static/img/linux/linux_nmtui.png','/static/img/linux/linux_nmtui.png',0,'alvin',curdate());
insert into Content values(503,6,'p',13,'{}','2、选中Editaconnection并按下回车键','2、选中Editaconnection并按下回车键',0,'alvin',curdate());
insert into Content values(504,6,'image',14,'{"alt": "editconn", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_editconn.png", "width": "676"}','/static/img/linux/linux_editconn.png','/static/img/linux/linux_editconn.png',0,'alvin',curdate());
insert into Content values(505,6,'p',15,'{}',' BOLD[  3、选中要编辑的网卡名称，然后按下Edit（编辑）按钮 ]BOLD <br/> 在RHEL5、RHEL6系统及其他大多数早期的Linux系统中，网卡的名称一直都是eth0、eth1、eth2、……，但在RHEL7中则变成了类似于eno16777736这样的名字。不过除了网卡 的名称发生变化之外，其他几乎一切照旧，因此这里演示的网络配置实验完全可以适用于各种版本的Linux系统。',' BOLD[  3、选中要编辑的网卡名称，然后按下Edit（编辑）按钮 ]BOLD <br/> 在RHEL5、RHEL6系统及其他大多数早期的Linux系统中，网卡的名称一直都是eth0、eth1、eth2、……，但在RHEL7中则变成了类似于eno16777736这样的名字。不过除了网卡 的名称发生变化之外，其他几乎一切照旧，因此这里演示的网络配置实验完全可以适用于各种版本的Linux系统。',0,'alvin',curdate());
insert into Content values(506,6,'image',16,'{"alt": "editnetwork", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_editnetwork.png", "width": "676"}','/static/img/linux/linux_editnetwork.png','/static/img/linux/linux_editnetwork.png',0,'alvin',curdate());
insert into Content values(507,6,'p',17,'{}','4、把网络IPv4的配置方式改成Manual（手动）','4、把网络IPv4的配置方式改成Manual（手动）',0,'alvin',curdate());
insert into Content values(508,6,'image',18,'{"alt": "tomannual", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_tomannual.png", "width": "676"}','/static/img/linux/linux_tomannual.png','/static/img/linux/linux_tomannual.png',0,'alvin',curdate());
insert into Content values(509,6,'p',19,'{}',' BOLD[  5、按下Show（显示）按钮，显示信息配置框 ]BOLD',' BOLD[  5、按下Show（显示）按钮，显示信息配置框 ]BOLD',0,'alvin',curdate());
insert into Content values(510,6,'image',20,'{"alt": "show_info", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_show_info.png", "width": "676"}','/static/img/linux/linux_show_info.png','/static/img/linux/linux_show_info.png',0,'alvin',curdate());
insert into Content values(511,6,'p',21,'{}',' BOLD[  6、填写IP地址 ]BOLD <br/> 现在，在服务器主机的网络配置信息中填写IP地址192.168.10.10/24。',' BOLD[  6、填写IP地址 ]BOLD <br/> 现在，在服务器主机的网络配置信息中填写IP地址192.168.10.10/24。',0,'alvin',curdate());
insert into Content values(512,6,'image',22,'{"alt": "setipaddr", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_setipaddr.png", "width": "676"}','/static/img/linux/linux_setipaddr.png','/static/img/linux/linux_setipaddr.png',0,'alvin',curdate());
insert into Content values(513,6,'p',23,'{}','7、单击OK按钮保存配置','7、单击OK按钮保存配置',0,'alvin',curdate());
insert into Content values(514,6,'image',24,'{"alt": "setok", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_setok.png", "width": "676"}','/static/img/linux/linux_setok.png','/static/img/linux/linux_setok.png',0,'alvin',curdate());
insert into Content values(515,6,'p',25,'{}','8、单击Quit按钮退出','8、单击Quit按钮退出',0,'alvin',curdate());
insert into Content values(516,6,'image',26,'{"alt": "quit", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_quit.png", "width": "676"}','/static/img/linux/linux_quit.png','/static/img/linux/linux_quit.png',0,'alvin',curdate());
insert into Content values(517,6,'p',27,'{}','        至此，在Linux系统中配置网络的步骤就结束了。老师经常会发现，很多人在安装RHEL7系统时默认没有激活网卡。如果各位读者有同样的情况也不用担心，只需使用Vim编辑器将网卡配置文件中的ONBOOT 参数修改成yes，这样在系统重启后网卡就被激活了。','        至此，在Linux系统中配置网络的步骤就结束了。老师经常会发现，很多人在安装RHEL7系统时默认没有激活网卡。如果各位读者有同样的情况也不用担心，只需使用Vim编辑器将网卡配置文件中的ONBOOT 参数修改成yes，这样在系统重启后网卡就被激活了。',0,'alvin',curdate());
insert into Content values(518,6,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-eno16777736
TYPE=Ethernet 
BOOTPROTO=none 
DEFROUTE=yes 
IPV4_FAILURE_FATAL=no 
IPV6INIT=yes 
IPV6_AUTOCONF=yes 
IPV6_DEFROUTE=yes 
IPV6_FAILURE_FATAL=no 
NAME=eno16777736 
UUID=ec77579b-2ced-481f-9c09-f562b321e268 
ONBOOT=yes 
IPADDR0=192.168.10.10
HWADDR=00:0C:29:C4:A4:09 PREFIX0=24 
IPV6_PEERDNS=yes 
IPV6_PEERROUTES=yes
','[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-eno16777736
TYPE=Ethernet 
BOOTPROTO=none 
DEFROUTE=yes 
IPV4_FAILURE_FATAL=no 
IPV6INIT=yes 
IPV6_AUTOCONF=yes 
IPV6_DEFROUTE=yes 
IPV6_FAILURE_FATAL=no 
NAME=eno16777736 
UUID=ec77579b-2ced-481f-9c09-f562b321e268 
ONBOOT=yes 
IPADDR0=192.168.10.10
HWADDR=00:0C:29:C4:A4:09 PREFIX0=24 
IPV6_PEERDNS=yes 
IPV6_PEERROUTES=yes
',0,'alvin',curdate());
insert into Content values(519,6,'p',29,'{}','        当修改完Linux系统中的服务配置文件后，并不会对服务程序立即产生效果。要想让服务程序获取到最新的配置文件，需要手动重启相应的服务，之后就可以看到网络畅通了：','        当修改完Linux系统中的服务配置文件后，并不会对服务程序立即产生效果。要想让服务程序获取到最新的配置文件，需要手动重启相应的服务，之后就可以看到网络畅通了：',0,'alvin',curdate());
insert into Content values(520,6,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#systemctl restart network 
[root@linuxprobe ~]#ping -c 4 192.168.10.10 
PING 192.168.10.10(192.168.10.10) 56(84) bytes of data.
64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.056ms 
64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.099ms 
64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.095ms 
64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.095ms

--- 192.168.10.10 ping statistics ---
4 packets transmitted,4 received,0% packet loss,time 2999ms 
rtt min/avg/max/mdev =0.056/0.086/0.099/0.018ms
','[root@linuxprobe ~]#systemctl restart network 
[root@linuxprobe ~]#ping -c 4 192.168.10.10 
PING 192.168.10.10(192.168.10.10) 56(84) bytes of data.
64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.056ms 
64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.099ms 
64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.095ms 
64 bytes from 192.168.10.10: icmp_seq=4 ttl=64 time=0.095ms

--- 192.168.10.10 ping statistics ---
4 packets transmitted,4 received,0% packet loss,time 2999ms 
rtt min/avg/max/mdev =0.056/0.086/0.099/0.018ms
',0,'alvin',curdate());
insert into Content values(521,6,'h3',31,'{}','创建网络会话','创建网络会话',0,'alvin',curdate());
insert into Content values(522,6,'p',32,'{}','        RHEL和CentOS系统默认使用NetworkManager来提供网络服务，这是一种动态管理网 络配置的守护进程，能够让网络设备保持连接状态。可以使用nmcli命令来管理Network Manager服务。nmcli是一款基于命令行的网络配置工具，功能丰富，参数众多。它可以轻松地查看网络信息或网络状态：','        RHEL和CentOS系统默认使用NetworkManager来提供网络服务，这是一种动态管理网 络配置的守护进程，能够让网络设备保持连接状态。可以使用nmcli命令来管理Network Manager服务。nmcli是一款基于命令行的网络配置工具，功能丰富，参数众多。它可以轻松地查看网络信息或网络状态：',0,'alvin',curdate());
insert into Content values(523,6,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#nmcli connection show 
NAME UUID TYPE DEVICE 
eno16777736 ec77579b-2ced-481f-9c09-f562b321e268802-3-etherneteno16777736 
[root@linuxprobe ~]#nmcli con show eno16777736 
connection.id:eno16777736 
connection.uuid:ec77579b-2ced-481f-9c09-f562b321e268 
connection.interface-name:--
connection.type:802-3-ethernet 
connection.autoconnect:yes 
connection.timestamp:1487348994 
connection.read-only:no 
connection.permissions:
connection.zone:--
connection.master:--
connection.slave-type:--
connection.secondaries:
connection.gateway-ping-timeout:0 
………………省略部分输出信息………………
','[root@linuxprobe ~]#nmcli connection show 
NAME UUID TYPE DEVICE 
eno16777736 ec77579b-2ced-481f-9c09-f562b321e268802-3-etherneteno16777736 
[root@linuxprobe ~]#nmcli con show eno16777736 
connection.id:eno16777736 
connection.uuid:ec77579b-2ced-481f-9c09-f562b321e268 
connection.interface-name:--
connection.type:802-3-ethernet 
connection.autoconnect:yes 
connection.timestamp:1487348994 
connection.read-only:no 
connection.permissions:
connection.zone:--
connection.master:--
connection.slave-type:--
connection.secondaries:
connection.gateway-ping-timeout:0 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(524,6,'p',34,'{}','        另外，RHEL7系统支持网络会话功能，允许用户在多个配置文件中快速切换（非常类似于firewalld防火墙服务中的区域技术）。如果我们在公司网络中使用笔记本电脑时需要手动指定网络的IP地址，而回到家中则是使用DHCP自动分配IP地址。这就需要麻烦地频繁修改 IP地址，但是使用了网络会话功能后一切就简单多了—只需在不同的使用环境中激活相应的网络会话，就可以实现网络配置信息的自动切换了。','        另外，RHEL7系统支持网络会话功能，允许用户在多个配置文件中快速切换（非常类似于firewalld防火墙服务中的区域技术）。如果我们在公司网络中使用笔记本电脑时需要手动指定网络的IP地址，而回到家中则是使用DHCP自动分配IP地址。这就需要麻烦地频繁修改 IP地址，但是使用了网络会话功能后一切就简单多了—只需在不同的使用环境中激活相应的网络会话，就可以实现网络配置信息的自动切换了。',0,'alvin',curdate());
insert into Content values(525,6,'p',35,'{}','        可以使用nmcli命令并按照“connectionaddcon-nametypeifname”的格式来创建网络会话。假设将公司网络中的网络会话称之为company，将家庭网络中的网络会话称之为house，现在依次创建各自的网络会话。','        可以使用nmcli命令并按照“connectionaddcon-nametypeifname”的格式来创建网络会话。假设将公司网络中的网络会话称之为company，将家庭网络中的网络会话称之为house，现在依次创建各自的网络会话。',0,'alvin',curdate());
insert into Content values(526,6,'p',36,'{}','        使用con-name参数指定公司所使用的网络会话名称company，然后依次用ifname参数指定本机的网卡名称（千万要以实际环境为准，不要照抄书上的eno16777736），用autoconnectno参数设置该网络会话默认不被自动激活，以及用ip4及gw4参数手动指定网络的IP地址：','        使用con-name参数指定公司所使用的网络会话名称company，然后依次用ifname参数指定本机的网卡名称（千万要以实际环境为准，不要照抄书上的eno16777736），用autoconnectno参数设置该网络会话默认不被自动激活，以及用ip4及gw4参数手动指定网络的IP地址：',0,'alvin',curdate());
insert into Content values(527,6,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#nmcli connecti on add con-name company ifname eno16777736 
autoconnect no type ethernet ip4 192.168.10.10/24 gw4 192.168.10.1 
Connection \'company\' (86c71220-0057-419e-b615-38f4014cfdee) successfully added.
','[root@linuxprobe ~]#nmcli connecti on add con-name company ifname eno16777736 
autoconnect no type ethernet ip4 192.168.10.10/24 gw4 192.168.10.1 
Connection \'company\' (86c71220-0057-419e-b615-38f4014cfdee) successfully added.
',0,'alvin',curdate());
insert into Content values(528,6,'p',38,'{}','        使用con-name参数指定家庭所使用的网络会话名称house。因为我们想从外部DHCP服务器自动获得IP地址，因此这里不需要进行手动指定。','        使用con-name参数指定家庭所使用的网络会话名称house。因为我们想从外部DHCP服务器自动获得IP地址，因此这里不需要进行手动指定。',0,'alvin',curdate());
insert into Content values(529,6,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#nmcli connection add con-name house type ethernet ifname eno16777736 
Connection \'house\' (44acf0a7-07e2-40b4-94ba-69ea973090fb) successfully added.
','[root@linuxprobe ~]#nmcli connection add con-name house type ethernet ifname eno16777736 
Connection \'house\' (44acf0a7-07e2-40b4-94ba-69ea973090fb) successfully added.
',0,'alvin',curdate());
insert into Content values(530,6,'p',40,'{}','        在成功创建网络会话后，可以使用nmcli命令查看创建的所有网络会话：','        在成功创建网络会话后，可以使用nmcli命令查看创建的所有网络会话：',0,'alvin',curdate());
insert into Content values(531,6,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#nmcli connection show 
NAME UUID TYPE DEVICE
house 44acf0a7-07e2-40b4-94ba-69ea973090fb 802-3-ethernet--
company 86c71220-0057-419e-b615-38f4014cfdee 802-3-ethernet--
eno16777736 ec77579b-2ced-481f-9c09-f562b321e268 802-3-etherneteno16777736
','[root@linuxprobe ~]#nmcli connection show 
NAME UUID TYPE DEVICE
house 44acf0a7-07e2-40b4-94ba-69ea973090fb 802-3-ethernet--
company 86c71220-0057-419e-b615-38f4014cfdee 802-3-ethernet--
eno16777736 ec77579b-2ced-481f-9c09-f562b321e268 802-3-etherneteno16777736
',0,'alvin',curdate());
insert into Content values(532,6,'p',42,'{}','        使用nmcli命令配置过的网络会话是永久生效的，这样当我们下班回家后，顺手启用house 网络会话，网卡就能自动通过DHCP获取到IP地址了。','        使用nmcli命令配置过的网络会话是永久生效的，这样当我们下班回家后，顺手启用house 网络会话，网卡就能自动通过DHCP获取到IP地址了。',0,'alvin',curdate());
insert into Content values(533,6,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#nmcli connection up house 
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/2)
[root@linuxprobe ~]#ifconfig 
eno1677773628: flags=4163<up,broadcast,running,multicast> mtu 1500
inet 192.168.100.128 netmask 255.255.255.0 broadcast 192.168.100.255 
inet6 fe80::20c:29ff:fec4:a409 prefixlen 64 scopeid 0x20<link/>
ether 00:0c:29:c4:a4:09 txqueuelen 1000(Ethernet)
RX packets 42 bytes 4198(4.0KiB)
RX errors 0 dropped 0 overruns 0 frame 0 
TX packets 75 bytes 10441(10.1KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

lo:flags=73<up,loopback,running> mtu 65536

inet 127.0.0.1 netmask 255.0.0.0 
inet6 ::1 prefixlen 128 scopeid 0x10<host>
loop txqueuelen 0 (Local Loopback)
RX packets 518 bytes 44080 (43.0KiB)
RX errors 0 dropped 0 overruns 0 frame 0 
TX packets 518 bytes 44080 (43.0KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0','[root@linuxprobe ~]#nmcli connection up house 
Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/2)
[root@linuxprobe ~]#ifconfig 
eno1677773628: flags=4163<up,broadcast,running,multicast> mtu 1500
inet 192.168.100.128 netmask 255.255.255.0 broadcast 192.168.100.255 
inet6 fe80::20c:29ff:fec4:a409 prefixlen 64 scopeid 0x20<link/>
ether 00:0c:29:c4:a4:09 txqueuelen 1000(Ethernet)
RX packets 42 bytes 4198(4.0KiB)
RX errors 0 dropped 0 overruns 0 frame 0 
TX packets 75 bytes 10441(10.1KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

lo:flags=73<up,loopback,running> mtu 65536

inet 127.0.0.1 netmask 255.0.0.0 
inet6 ::1 prefixlen 128 scopeid 0x10<host>
loop txqueuelen 0 (Local Loopback)
RX packets 518 bytes 44080 (43.0KiB)
RX errors 0 dropped 0 overruns 0 frame 0 
TX packets 518 bytes 44080 (43.0KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0',0,'alvin',curdate());
insert into Content values(534,6,'p',44,'{}','        如果大家使用的是虚拟机，请把虚拟机系统的网卡（网络适配器）切换成桥接模式，如图所示。然后重启虚拟机系统即可。','        如果大家使用的是虚拟机，请把虚拟机系统的网卡（网络适配器）切换成桥接模式，如图所示。然后重启虚拟机系统即可。',0,'alvin',curdate());
insert into Content values(535,6,'image',45,'{"alt": "bridge_conn", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bridge_conn.png", "width": "676"}','/static/img/linux/linux_bridge_conn.png','/static/img/linux/linux_bridge_conn.png',0,'alvin',curdate());
insert into Content values(536,6,'h3',46,'{}','绑定两块网卡','绑定两块网卡',0,'alvin',curdate());
insert into Content values(537,6,'p',47,'{}','        一般来讲，生产环境必须提供7×24小时的网络传输服务。借助于网卡绑定技术，不仅可以提高网络传输速度，更重要的是，还可以确保在其中一块网卡出现故障时，依然可以正 常提供网络服务。假设我们对两块网卡实施了绑定技术，这样在正常工作中它们会共同传输 数据，使得网络传输的速度变得更快；而且即使有一块网卡突然出现了故障，另外一块网卡 便会立即自动顶替上去，保证数据传输不会中断。','        一般来讲，生产环境必须提供7×24小时的网络传输服务。借助于网卡绑定技术，不仅可以提高网络传输速度，更重要的是，还可以确保在其中一块网卡出现故障时，依然可以正 常提供网络服务。假设我们对两块网卡实施了绑定技术，这样在正常工作中它们会共同传输 数据，使得网络传输的速度变得更快；而且即使有一块网卡突然出现了故障，另外一块网卡 便会立即自动顶替上去，保证数据传输不会中断。',0,'alvin',curdate());
insert into Content values(538,6,'p',48,'{}','        下面我们来看一下如何绑定网卡。','        下面我们来看一下如何绑定网卡。',0,'alvin',curdate());
insert into Content values(539,6,'p',49,'{}',' BOLD[  第一步 ]BOLD ：在虚拟机系统中再添加一块网卡设备，请确保两块网卡都处在同一个网络连接中（即网卡模式相同），如图A和图B所示。处于相同模式的网卡设备才可以进行网卡 绑定，否则这两块网卡无法互相传送数据。',' BOLD[  第一步 ]BOLD ：在虚拟机系统中再添加一块网卡设备，请确保两块网卡都处在同一个网络连接中（即网卡模式相同），如图A和图B所示。处于相同模式的网卡设备才可以进行网卡 绑定，否则这两块网卡无法互相传送数据。',0,'alvin',curdate());
insert into Content values(540,6,'image',50,'{"alt": "setnetwork1", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_setnetwork1.png", "width": "676"}','/static/img/linux/linux_setnetwork1.png','/static/img/linux/linux_setnetwork1.png',0,'alvin',curdate());
insert into Content values(541,6,'image',51,'{"alt": "setnetwork2", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_setnetwork2.png", "width": "476"}','/static/img/linux/linux_setnetwork2.png','/static/img/linux/linux_setnetwork2.png',0,'alvin',curdate());
insert into Content values(542,6,'p',52,'{}',' BOLD[  第二步 ]BOLD ：使用Vim文本编辑器来配置网卡设备的绑定参数。网卡绑定的理论知识类似于前面学习的RAID硬盘组，我们需要对参与绑定的网卡设备逐个进行“初始设置”。需要注意的是，这些原本独立的网卡设备此时需要被配置成为一块“从属”网卡，服务于“主”网卡，不应该再有自己的IP地址等信息。在进行了初始设置之后，它们就可以支持网卡绑定。',' BOLD[  第二步 ]BOLD ：使用Vim文本编辑器来配置网卡设备的绑定参数。网卡绑定的理论知识类似于前面学习的RAID硬盘组，我们需要对参与绑定的网卡设备逐个进行“初始设置”。需要注意的是，这些原本独立的网卡设备此时需要被配置成为一块“从属”网卡，服务于“主”网卡，不应该再有自己的IP地址等信息。在进行了初始设置之后，它们就可以支持网卡绑定。',0,'alvin',curdate());
insert into Content values(543,6,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 
TYPE=Ethernet 
BOOTPROTO=none 
ONBOOT=yes 
USERCTL=no 
DEVICE=eno16777736 
MASTER=bond0 
SLAVE=yes 
[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-eno33554968 
TYPE=Ethernet 
BOOTPROTO=none 
ONBOOT=yes 
USERCTL=no 
DEVICE=eno33554968 
MASTER=bond0
SLAVE=yes
','[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-eno16777736 
TYPE=Ethernet 
BOOTPROTO=none 
ONBOOT=yes 
USERCTL=no 
DEVICE=eno16777736 
MASTER=bond0 
SLAVE=yes 
[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-eno33554968 
TYPE=Ethernet 
BOOTPROTO=none 
ONBOOT=yes 
USERCTL=no 
DEVICE=eno33554968 
MASTER=bond0
SLAVE=yes
',0,'alvin',curdate());
insert into Content values(544,6,'p',54,'{}','        还需要将绑定后的设备命名为bond0并把IP地址等信息填写进去，这样当用户访问相应服务的时候，实际上就是由这两块网卡设备在共同提供服务。','        还需要将绑定后的设备命名为bond0并把IP地址等信息填写进去，这样当用户访问相应服务的时候，实际上就是由这两块网卡设备在共同提供服务。',0,'alvin',curdate());
insert into Content values(545,6,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-bond0 
TYPE=Ethernet 
BOOTPROTO=none 
ONBOOT=yes 
USERCTL=no 
DEVICE=bond0 
IPADDR=192.168.10.10 
PREFIX=24 
DNS=192.168.10.1 
NM_CONTROLLED=no
','[root@linuxprobe ~]#vim /etc/sysconfig/network-scripts/ifcfg-bond0 
TYPE=Ethernet 
BOOTPROTO=none 
ONBOOT=yes 
USERCTL=no 
DEVICE=bond0 
IPADDR=192.168.10.10 
PREFIX=24 
DNS=192.168.10.1 
NM_CONTROLLED=no
',0,'alvin',curdate());
insert into Content values(546,6,'p',56,'{}',' BOLD[  第三步 ]BOLD ：让Linux内核支持网卡绑定驱动。常见的网卡绑定驱动有三种模式—mode0、mode1和mode6。下面以绑定两块网卡为例，讲解使用的情景。',' BOLD[  第三步 ]BOLD ：让Linux内核支持网卡绑定驱动。常见的网卡绑定驱动有三种模式—mode0、mode1和mode6。下面以绑定两块网卡为例，讲解使用的情景。',0,'alvin',curdate());
insert into Content values(547,6,'ul',57,'{}','mode0（平衡负载模式）：平时两块网卡均工作，且自动备援，但需要在与服务器本地网卡相连的交换机设备上进行端口聚合来支持绑定技术。
mode1（自动备援模式）：平时只有一块网卡工作，在它故障后自动替换为另外的网卡。
mode6（平衡负载模式）：平时两块网卡均工作，且自动备援，无须交换机设备提供辅助支持。','mode0（平衡负载模式）：平时两块网卡均工作，且自动备援，但需要在与服务器本地网卡相连的交换机设备上进行端口聚合来支持绑定技术。
mode1（自动备援模式）：平时只有一块网卡工作，在它故障后自动替换为另外的网卡。
mode6（平衡负载模式）：平时两块网卡均工作，且自动备援，无须交换机设备提供辅助支持。',0,'alvin',curdate());
insert into Content values(548,6,'p',58,'{}','        比如有一台用于提供NFS或者samba服务的文件服务器，它所能提供的最大网络传输速度为100Mbit/s，但是访问该服务器的用户数量特别多，那么它的访问压力一定很大。在生产环境中，网络的可靠性是极为重要的，而且网络的传输速度也必须得以保证。针对这样的情况，比较好的选择就是mode6网卡绑定驱动模式了。因为mode6能够让两块网卡同时一起工作，当 其中一块网卡出现故障后能自动备援，且无需交换机设备支援，从而提供了可靠的网络传输保障。','        比如有一台用于提供NFS或者samba服务的文件服务器，它所能提供的最大网络传输速度为100Mbit/s，但是访问该服务器的用户数量特别多，那么它的访问压力一定很大。在生产环境中，网络的可靠性是极为重要的，而且网络的传输速度也必须得以保证。针对这样的情况，比较好的选择就是mode6网卡绑定驱动模式了。因为mode6能够让两块网卡同时一起工作，当 其中一块网卡出现故障后能自动备援，且无需交换机设备支援，从而提供了可靠的网络传输保障。',0,'alvin',curdate());
insert into Content values(549,6,'p',59,'{}','        下面使用Vim文本编辑器创建一个用于网卡绑定的驱动文件，使得绑定后的bond0网卡 设备能够支持绑定技术（bonding）；同时定义网卡以mode6模式进行绑定，且出现故障时自 动切换的时间为100毫秒。','        下面使用Vim文本编辑器创建一个用于网卡绑定的驱动文件，使得绑定后的bond0网卡 设备能够支持绑定技术（bonding）；同时定义网卡以mode6模式进行绑定，且出现故障时自 动切换的时间为100毫秒。',0,'alvin',curdate());
insert into Content values(550,6,'pre',60,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim/etc/modprobe.d/bond.conf 
alias bond0 bonding 
options bond0 miimon=100 mode=6
','[root@linuxprobe ~]#vim/etc/modprobe.d/bond.conf 
alias bond0 bonding 
options bond0 miimon=100 mode=6
',0,'alvin',curdate());
insert into Content values(551,6,'p',61,'{}',' BOLD[  第四步 ]BOLD ：重启网络服务后网卡绑定操作即可成功。正常情况下只有bond0网卡设备才会有IP地址等信息：',' BOLD[  第四步 ]BOLD ：重启网络服务后网卡绑定操作即可成功。正常情况下只有bond0网卡设备才会有IP地址等信息：',0,'alvin',curdate());
insert into Content values(552,6,'pre',62,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#systemctl restart network 
[root@linuxprobe ~]#ifconfig 
bond0: flags=5187<up,broadcast,running,master,multicast> mtu 1500 
inet 192.168.10.10 netmask 255.255.255.0 broadcast 192.168.10.255 
inet6 fe80::20c:29ff:fe9c:637d prefixlen 64 scopeid 0x20<link/>
ether 00:0c:29:9c:63:7dtxqueuelen0(Ethernet)
RX packets 700 bytes 82899 (80.9KiB)
RX errors 0 dropped 6 overruns 0 frame 0 
TX packets 588 bytes 40260 (39.3KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

eno16777736:flags=6211<up,broadcast,running,slave,multicast> mtu 1500 
ether 00:0c:29:9c:63:73 txqueuelen 1000(Ethernet)
RX packets 347 bytes 40112 (39.1KiB)
RX errors 0 dropped 6 overruns 0 frame 0 
TX packets 263 bytes 20682 (20.1KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

eno33554968:flags=6211<up,broadcast,running,slave,multicast> mtu 1500 
ether00:0c:29:9c:63:7d txqueuelen 1000(Ethernet)
RX packets 353 bytes 42787(41.7KiB)
RX errors 0 dropped 0 overruns 0 frame 0 
TX packets 325 bytes 19578(19.1KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0','[root@linuxprobe ~]#systemctl restart network 
[root@linuxprobe ~]#ifconfig 
bond0: flags=5187<up,broadcast,running,master,multicast> mtu 1500 
inet 192.168.10.10 netmask 255.255.255.0 broadcast 192.168.10.255 
inet6 fe80::20c:29ff:fe9c:637d prefixlen 64 scopeid 0x20<link/>
ether 00:0c:29:9c:63:7dtxqueuelen0(Ethernet)
RX packets 700 bytes 82899 (80.9KiB)
RX errors 0 dropped 6 overruns 0 frame 0 
TX packets 588 bytes 40260 (39.3KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

eno16777736:flags=6211<up,broadcast,running,slave,multicast> mtu 1500 
ether 00:0c:29:9c:63:73 txqueuelen 1000(Ethernet)
RX packets 347 bytes 40112 (39.1KiB)
RX errors 0 dropped 6 overruns 0 frame 0 
TX packets 263 bytes 20682 (20.1KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0

eno33554968:flags=6211<up,broadcast,running,slave,multicast> mtu 1500 
ether00:0c:29:9c:63:7d txqueuelen 1000(Ethernet)
RX packets 353 bytes 42787(41.7KiB)
RX errors 0 dropped 0 overruns 0 frame 0 
TX packets 325 bytes 19578(19.1KiB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0',0,'alvin',curdate());
insert into Content values(553,6,'p',63,'{}','        可以在本地主机执行ping192.168.10.10命令检查网络的连通性。为了检验网卡绑定技术的自动备援功能，我们突然在虚拟机硬件配置中随机移除一块网卡设备，可以非常清晰地看到网卡切换的过程（一般只有1个数据丢包）。然后另外一块网卡会继续为用户提供服务。','        可以在本地主机执行ping192.168.10.10命令检查网络的连通性。为了检验网卡绑定技术的自动备援功能，我们突然在虚拟机硬件配置中随机移除一块网卡设备，可以非常清晰地看到网卡切换的过程（一般只有1个数据丢包）。然后另外一块网卡会继续为用户提供服务。',0,'alvin',curdate());
insert into Content values(554,6,'pre',64,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ping 192.168.10.10 
PING 192.168.10.10 (192.168.10.10) 56 (84) bytes of data.
64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.109ms 
64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.102ms 
64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.066ms 
ping:sendmsg: Network is unreachable 
64 bytes from 192.168.10.10: icmp_seq=5 ttl=64 time=0.065ms 
64 bytes from 192.168.10.10: icmp_seq=6 ttl=64 time=0.048ms 
64 bytes from 192.168.10.10: icmp_seq=7 ttl=64 time=0.042ms 
64 bytes from 192.168.10.10: icmp_seq=8 ttl=64 time=0.079ms 
^C 
---192.168.10.10pingstatistics---
8 packets transmitted,7 received,12% packet loss,time 7006ms rtt min/avg/max/mdev=0.042/0.073/0.109/0.023ms
','[root@linuxprobe ~]#ping 192.168.10.10 
PING 192.168.10.10 (192.168.10.10) 56 (84) bytes of data.
64 bytes from 192.168.10.10: icmp_seq=1 ttl=64 time=0.109ms 
64 bytes from 192.168.10.10: icmp_seq=2 ttl=64 time=0.102ms 
64 bytes from 192.168.10.10: icmp_seq=3 ttl=64 time=0.066ms 
ping:sendmsg: Network is unreachable 
64 bytes from 192.168.10.10: icmp_seq=5 ttl=64 time=0.065ms 
64 bytes from 192.168.10.10: icmp_seq=6 ttl=64 time=0.048ms 
64 bytes from 192.168.10.10: icmp_seq=7 ttl=64 time=0.042ms 
64 bytes from 192.168.10.10: icmp_seq=8 ttl=64 time=0.079ms 
^C 
---192.168.10.10pingstatistics---
8 packets transmitted,7 received,12% packet loss,time 7006ms rtt min/avg/max/mdev=0.042/0.073/0.109/0.023ms
',0,'alvin',curdate());
insert into Content values(555,6,'line',65,'{}','','',0,'alvin',curdate());
insert into Content values(556,6,'h2',66,'{}','远程控制服务','远程控制服务',0,'alvin',curdate());
insert into Content values(557,6,'h3',67,'{}','配置sshd服务','配置sshd服务',0,'alvin',curdate());
insert into Content values(558,6,'p',68,'{}','        SSH（SecureShell）是一种能够以安全的方式提供远程登录的协议，也是目前远程管理Linux系统的首选方式。在此之前，一般使用FTP或Telnet来进行远程登录。但是因为它们以明文的形式在网络中传输账户密码和数据信息，因此很不安全，很容易受到黑客发起的中间人攻击，这轻则篡改传输的数据信息，重则直接抓取服务器的账户密码。','        SSH（SecureShell）是一种能够以安全的方式提供远程登录的协议，也是目前远程管理Linux系统的首选方式。在此之前，一般使用FTP或Telnet来进行远程登录。但是因为它们以明文的形式在网络中传输账户密码和数据信息，因此很不安全，很容易受到黑客发起的中间人攻击，这轻则篡改传输的数据信息，重则直接抓取服务器的账户密码。',0,'alvin',curdate());
insert into Content values(559,6,'p',69,'{}','        想要使用SSH协议来远程管理Linux系统，则需要部署配置sshd服务程序。sshd是基于SSH 协议开发的一款远程管理服务程序，不仅使用起来方便快捷，而且能够提供两种安全验证的方法：','        想要使用SSH协议来远程管理Linux系统，则需要部署配置sshd服务程序。sshd是基于SSH 协议开发的一款远程管理服务程序，不仅使用起来方便快捷，而且能够提供两种安全验证的方法：',0,'alvin',curdate());
insert into Content values(560,6,'ul',70,'{}','基于口令的验证—用账户和密码来验证登录；
基于密钥的验证—需要在本地生成密钥对，然后把密钥对中的公钥上传至服务器，并与服务器中的公钥进行比较；该方式相较来说更安全。','基于口令的验证—用账户和密码来验证登录；
基于密钥的验证—需要在本地生成密钥对，然后把密钥对中的公钥上传至服务器，并与服务器中的公钥进行比较；该方式相较来说更安全。',0,'alvin',curdate());
insert into Content values(561,6,'p',71,'{}','        前文曾多次强调“Linux系统中的一切都是文件”，因此在Linux系统中修改服务程序的运行 参数，实际上就是在修改程序配置文件的过程。sshd服务的配置信息保存在/etc/ssh/sshd_config文件中。运维人员一般会把保存着最主要配置信息的文件称为主配置文件，而配置文件中有许多以井号开头的注释行，要想让这些配置参数生效，需要在修改参数后再去掉前面的井号。sshd服务配置文件中包含的重要参数如表所示。','        前文曾多次强调“Linux系统中的一切都是文件”，因此在Linux系统中修改服务程序的运行 参数，实际上就是在修改程序配置文件的过程。sshd服务的配置信息保存在/etc/ssh/sshd_config文件中。运维人员一般会把保存着最主要配置信息的文件称为主配置文件，而配置文件中有许多以井号开头的注释行，要想让这些配置参数生效，需要在修改参数后再去掉前面的井号。sshd服务配置文件中包含的重要参数如表所示。',0,'alvin',curdate());
insert into Content values(562,6,'table',72,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
Port 22	默认的sshd服务端口
ListenAddress 0.0.0.0	设定sshd服务器监听的IP地址
Protocol 2	SSH协议的版本号
HostKey /etc/ssh/ssh_host_key	SSH协议版本为1时，DES私钥存放的位置
HostKey /etc/ssh/ssh_host_rsa_key	SSH协议版本为2时，RSA私钥存放的位置
HostKey /etc/ssh/ssh_host_dsa_key	SSH协议版本为2时，DSA私钥存放的位置
PermitRootLogin yes	设定是否允许root管理员直接登录
StrictModes yes	当远程用户的私钥改变时直接拒绝连接
MaxAuthTries 6	最大密码尝试次数
MaxSessions 10	最大终端数
PasswordAuthentication yes	是否允许密码验证
PermitEmptyPasswords no	是否允许空密码登录（很不安全）','参数	作用
Port 22	默认的sshd服务端口
ListenAddress 0.0.0.0	设定sshd服务器监听的IP地址
Protocol 2	SSH协议的版本号
HostKey /etc/ssh/ssh_host_key	SSH协议版本为1时，DES私钥存放的位置
HostKey /etc/ssh/ssh_host_rsa_key	SSH协议版本为2时，RSA私钥存放的位置
HostKey /etc/ssh/ssh_host_dsa_key	SSH协议版本为2时，DSA私钥存放的位置
PermitRootLogin yes	设定是否允许root管理员直接登录
StrictModes yes	当远程用户的私钥改变时直接拒绝连接
MaxAuthTries 6	最大密码尝试次数
MaxSessions 10	最大终端数
PasswordAuthentication yes	是否允许密码验证
PermitEmptyPasswords no	是否允许空密码登录（很不安全）',0,'alvin',curdate());
insert into Content values(563,6,'p',73,'{}','        在RHEL7系统中，已经默认安装并启用了sshd服务程序。接下来使用ssh命令进行远 程连接，其格式为“ssh[参数]主机IP地址”。要退出登录则执行exit命令。','        在RHEL7系统中，已经默认安装并启用了sshd服务程序。接下来使用ssh命令进行远 程连接，其格式为“ssh[参数]主机IP地址”。要退出登录则执行exit命令。',0,'alvin',curdate());
insert into Content values(564,6,'pre',74,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.20(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 4f:a7:91:9e:8d:6f:b9:48:02:32:61:95:48:ed:1e:3f.
Are you sure you want to continue connecting (yes/no) ? yes 
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts. 
root@192.168.10.20\'s password:
Last login:Wed Apr 15 15:54:21 2017 from 192.168.10.10 
[root@linuxprobe ~]#
[root@linuxprobe ~]#exit 
logout 
Connection to 192.168.10.10 closed.
','[root@linuxprobe ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.20(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 4f:a7:91:9e:8d:6f:b9:48:02:32:61:95:48:ed:1e:3f.
Are you sure you want to continue connecting (yes/no) ? yes 
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts. 
root@192.168.10.20\'s password:
Last login:Wed Apr 15 15:54:21 2017 from 192.168.10.10 
[root@linuxprobe ~]#
[root@linuxprobe ~]#exit 
logout 
Connection to 192.168.10.10 closed.
',0,'alvin',curdate());
insert into Content values(565,6,'p',75,'{}','        如果禁止以root管理员的身份远程登录到服务器，则可以大大降低被黑客暴力破解密码的几率。下面进行相应配置。首先使用Vim文本编辑器打开sshd服务的主配置文件，然后把第48行#PermitRootLoginyes参数前的井号（#）去掉，并把参数值yes改成no，这样就不再允许root管理员远程登录了。记得最后保存文件并退出。','        如果禁止以root管理员的身份远程登录到服务器，则可以大大降低被黑客暴力破解密码的几率。下面进行相应配置。首先使用Vim文本编辑器打开sshd服务的主配置文件，然后把第48行#PermitRootLoginyes参数前的井号（#）去掉，并把参数值yes改成no，这样就不再允许root管理员远程登录了。记得最后保存文件并退出。',0,'alvin',curdate());
insert into Content values(566,6,'pre',76,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/ssh/sshd_config
………………省略部分输出信息………………
46 
47 #LoginGraceTime 2m
48 PermitRootLogin no 
49 #StrictModes yes 
50 #MaxAuthTries 6 
51 #MaxSessions 10 
52 
………………省略部分输出信息………………
','[root@linuxprobe ~]#vim /etc/ssh/sshd_config
………………省略部分输出信息………………
46 
47 #LoginGraceTime 2m
48 PermitRootLogin no 
49 #StrictModes yes 
50 #MaxAuthTries 6 
51 #MaxSessions 10 
52 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(567,6,'p',77,'{}','        再次提醒的是，一般的服务程序并不会在配置文件修改之后立即获得最新的参数。如果想让新配置文件生效，则需要手动重启相应的服务程序。最好也将这个服务程序加入到开机启动项中，这样系统在下一次启动时，该服务程序便会自动运行，继续为用户提供服务。','        再次提醒的是，一般的服务程序并不会在配置文件修改之后立即获得最新的参数。如果想让新配置文件生效，则需要手动重启相应的服务程序。最好也将这个服务程序加入到开机启动项中，这样系统在下一次启动时，该服务程序便会自动运行，继续为用户提供服务。',0,'alvin',curdate());
insert into Content values(568,6,'pre',78,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#systemctl restart sshd 
[root@linuxprobe ~]#systemctl enable sshd
','[root@linuxprobe ~]#systemctl restart sshd 
[root@linuxprobe ~]#systemctl enable sshd
',0,'alvin',curdate());
insert into Content values(569,6,'p',79,'{}','        这样一来，当root管理员再来尝试访问sshd服务程序时，系统会提示不可访问的错误信息。虽然sshd服务程序的参数相对比较简单，但这就是在Linux系统中配置服务程序的正确方法。大家要做的是举一反三、活学活用，这样即便以后遇到了陌生的服务，也一样可以搞定了。','        这样一来，当root管理员再来尝试访问sshd服务程序时，系统会提示不可访问的错误信息。虽然sshd服务程序的参数相对比较简单，但这就是在Linux系统中配置服务程序的正确方法。大家要做的是举一反三、活学活用，这样即便以后遇到了陌生的服务，也一样可以搞定了。',0,'alvin',curdate());
insert into Content values(570,6,'pre',80,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ssh192.168.10.10 
root@192.168.10.10\'s password:
Permission denied,please try again.
','[root@linuxprobe ~]#ssh192.168.10.10 
root@192.168.10.10\'s password:
Permission denied,please try again.
',0,'alvin',curdate());
insert into Content values(571,6,'h3',81,'{}','安全密钥验证','安全密钥验证',0,'alvin',curdate());
insert into Content values(572,6,'p',82,'{}','        加密是对信息进行编码和解码的技术，它通过一定的算法（密钥）将原本可以直接阅读 的明文信息转换成密文形式。密钥即是密文的钥匙，有私钥和公钥之分。在传输数据时，如果担心被他人监听或截获，就可以在传输前先使用公钥对数据加密处理，然后再行传送。这样，只有掌握私钥的用户才能解密这段数据，除此之外的其他人即便截获了数据，一般也很难将其破译为明文信息。','        加密是对信息进行编码和解码的技术，它通过一定的算法（密钥）将原本可以直接阅读 的明文信息转换成密文形式。密钥即是密文的钥匙，有私钥和公钥之分。在传输数据时，如果担心被他人监听或截获，就可以在传输前先使用公钥对数据加密处理，然后再行传送。这样，只有掌握私钥的用户才能解密这段数据，除此之外的其他人即便截获了数据，一般也很难将其破译为明文信息。',0,'alvin',curdate());
insert into Content values(573,6,'p',83,'{}','        一言以蔽之，在生产环境中使用密码进行口令验证终归存在着被暴力破解或嗅探截获的风险。如果正确配置了密钥验证方式，那么sshd服务程序将更加安全。我们下面进行具体的配置，其步骤如下。','        一言以蔽之，在生产环境中使用密码进行口令验证终归存在着被暴力破解或嗅探截获的风险。如果正确配置了密钥验证方式，那么sshd服务程序将更加安全。我们下面进行具体的配置，其步骤如下。',0,'alvin',curdate());
insert into Content values(574,6,'p',84,'{}',' BOLD[  第一步 ]BOLD ：在客户端主机中生成“密钥对”。',' BOLD[  第一步 ]BOLD ：在客户端主机中生成“密钥对”。',0,'alvin',curdate());
insert into Content values(575,6,'pre',85,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key(/root/.ssh/id_rsa):
Created directory \'/root/.ssh\'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key finger print is:
40:32:48:18:e4:ac:c0:c3:c1:ba:7c:6c:3a:a8:b5:22 root@linuxprobe.com 
The key\'s randomart image is:
+--[RSA2048]------+
|+*..o.           |
|*.o +            |
|o*   .           |
|+.    .          |
|o..    S         |
|..+              |
|.=               |
|E+.              |
|+.o              |
+-----------------+
','[root@linuxprobe ~]#ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key(/root/.ssh/id_rsa):
Created directory \'/root/.ssh\'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key finger print is:
40:32:48:18:e4:ac:c0:c3:c1:ba:7c:6c:3a:a8:b5:22 root@linuxprobe.com 
The key\'s randomart image is:
+--[RSA2048]------+
|+*..o.           |
|*.o +            |
|o*   .           |
|+.    .          |
|o..    S         |
|..+              |
|.=               |
|E+.              |
|+.o              |
+-----------------+
',0,'alvin',curdate());
insert into Content values(576,6,'p',86,'{}',' BOLD[  第二步 ]BOLD ：把客户端主机中生成的公钥文件传送至远程主机：',' BOLD[  第二步 ]BOLD ：把客户端主机中生成的公钥文件传送至远程主机：',0,'alvin',curdate());
insert into Content values(577,6,'pre',87,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ssh-copy-id 192.168.10.10 
The authenticity of host \'192.168.10.20(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 4f:a7:91:9e:8d:6f:b9:48:02:32:61:95:48:ed:1e:3f.
Are you sure you want to continue connecting (yes/no)? yes 
/usr/bin/ssh-copy-id:INFO:attempting to login with the new key(s),to filter out 
any that are already installed 
/usr/bin/ssh-copy-id:INFO:1 key(s )remain to be installed--if you are prompted now 
it is to install the new keys 
root@192.168.10.10\'s password:
Number of key(s) added:1 
Now try logging into the machine, with: "ssh\'192.168.10.10\'"
and check to make sure that only the key(s) you wanted were added.
','[root@linuxprobe ~]#ssh-copy-id 192.168.10.10 
The authenticity of host \'192.168.10.20(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 4f:a7:91:9e:8d:6f:b9:48:02:32:61:95:48:ed:1e:3f.
Are you sure you want to continue connecting (yes/no)? yes 
/usr/bin/ssh-copy-id:INFO:attempting to login with the new key(s),to filter out 
any that are already installed 
/usr/bin/ssh-copy-id:INFO:1 key(s )remain to be installed--if you are prompted now 
it is to install the new keys 
root@192.168.10.10\'s password:
Number of key(s) added:1 
Now try logging into the machine, with: "ssh\'192.168.10.10\'"
and check to make sure that only the key(s) you wanted were added.
',0,'alvin',curdate());
insert into Content values(578,6,'p',88,'{}',' BOLD[  第三步 ]BOLD ：对服务器进行设置，使其只允许密钥验证，拒绝传统的口令验证方式。记得在修改配置文件后保存并重启sshd服务程序。',' BOLD[  第三步 ]BOLD ：对服务器进行设置，使其只允许密钥验证，拒绝传统的口令验证方式。记得在修改配置文件后保存并重启sshd服务程序。',0,'alvin',curdate());
insert into Content values(579,6,'pre',89,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/ssh/sshd_config
………………省略部分输出信息………………
74 
75 #To disable tunneled clear text passwords,change to no here!
76 #PasswordAuthentication yes 
77 #PermitEmptyPasswords no 
78 PasswordAuthentication no 
79 
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart sshd
','[root@linuxprobe ~]#vim /etc/ssh/sshd_config
………………省略部分输出信息………………
74 
75 #To disable tunneled clear text passwords,change to no here!
76 #PasswordAuthentication yes 
77 #PermitEmptyPasswords no 
78 PasswordAuthentication no 
79 
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart sshd
',0,'alvin',curdate());
insert into Content values(580,6,'p',90,'{}',' BOLD[  第四步 ]BOLD ：在客户端尝试登录到服务器，此时无须输入密码也可成功登录。',' BOLD[  第四步 ]BOLD ：在客户端尝试登录到服务器，此时无须输入密码也可成功登录。',0,'alvin',curdate());
insert into Content values(581,6,'pre',91,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#ssh 192.168.10.10 
Last login: Mon Apr 13 19:34:13 2017
','[root@linuxprobe ~]#ssh 192.168.10.10 
Last login: Mon Apr 13 19:34:13 2017
',0,'alvin',curdate());
insert into Content values(582,6,'h3',92,'{}','远程传输命令sftp','远程传输命令sftp',0,'alvin',curdate());
insert into Content values(583,6,'p',93,'{}','        sftp是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol的安全文件传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。','        sftp是Secure File Transfer Protocol的缩写，安全文件传送协议。可以为传输文件提供一种安全的加密方法。sftp 与 ftp 有着几乎一样的语法和功能。SFTP 为 SSH的一部分，是一种传输档案至 Blogger 伺服器的安全方式。其实在SSH软件包中，已经包含了一个叫作SFTP(Secure File Transfer Protocol的安全文件传输子系统，SFTP本身没有单独的守护进程，它必须使用sshd守护进程（端口号默认是22）来完成相应的连接操作，所以从某种意义上来说，SFTP并不像一个服务器程序，而更像是一个客户端程序。SFTP同样是使用加密传输认证信息和传输的数据，所以，使用SFTP是非常安全的。但是，由于这种传输方式使用了加密/解密技术，所以传输效率比普通的FTP要低得多，如果您对网络安全性要求更高时，可以使用SFTP代替FTP。',0,'alvin',curdate());
insert into Content values(584,6,'p',94,'{}','常用方式如下：','常用方式如下：',0,'alvin',curdate());
insert into Content values(585,6,'pre',95,'{"class": ["prettyprint", "lang-bash"]}','格式：sftp

通过sftp连接，端口为默认的22，用户为Linux当前登录用户。

格式：sftp -oPort=21
通过sftp连接，指定端口21，用户为Linux当前登录用户。

格式：sftp $id@$server
通过sftp连接，端口为默认的22，指定用户$id,指定服务端$server。

格式：sftp -oPort=21 $id@$server
通过sftp连接，端口为21，指定用户$id,指定服务端$server。

sftp连接成功之后常用操作命令如下：
help/? 打印帮助信息。
pwd   查看远程服务器当前目录；
lpwd  查看本地系统的当前目录。
cd 将远程服务器的当前目录更改为
lcd 将本地系统的当前目录更改为 
ls 显示远程服务器上当前目录的文件名；
ls -l  显示远程服务器上当前目录的文件详细列表；
ls 显示远程服务器上符合指定模式的文件名；
ls -l   显示远程服务器上符合指定模式的文件详细列表。
lls 显示本地系统上当前目录的文件名；
lls的其他参数与ls命令的类似。
get 下载指定文件；
get 下载符合指定模式的文件。
put 上传指定文件；
get 上传符合指定模式的文件。
progress 切换是否显示文件传输进度。
mkdir 在远程服务器上创建目录；
lmkdir 在本地系统上创建目录。
exit/quit/bye 退出sftp。
! 启动一个本地shell。
! 执行本地命令行。
其他命令还有：chgrp, chmod, chown, ln, lumask, rename, rm, rmdir, symlink, version。
','格式：sftp

通过sftp连接，端口为默认的22，用户为Linux当前登录用户。

格式：sftp -oPort=21
通过sftp连接，指定端口21，用户为Linux当前登录用户。

格式：sftp $id@$server
通过sftp连接，端口为默认的22，指定用户$id,指定服务端$server。

格式：sftp -oPort=21 $id@$server
通过sftp连接，端口为21，指定用户$id,指定服务端$server。

sftp连接成功之后常用操作命令如下：
help/? 打印帮助信息。
pwd   查看远程服务器当前目录；
lpwd  查看本地系统的当前目录。
cd 将远程服务器的当前目录更改为
lcd 将本地系统的当前目录更改为 
ls 显示远程服务器上当前目录的文件名；
ls -l  显示远程服务器上当前目录的文件详细列表；
ls 显示远程服务器上符合指定模式的文件名；
ls -l   显示远程服务器上符合指定模式的文件详细列表。
lls 显示本地系统上当前目录的文件名；
lls的其他参数与ls命令的类似。
get 下载指定文件；
get 下载符合指定模式的文件。
put 上传指定文件；
get 上传符合指定模式的文件。
progress 切换是否显示文件传输进度。
mkdir 在远程服务器上创建目录；
lmkdir 在本地系统上创建目录。
exit/quit/bye 退出sftp。
! 启动一个本地shell。
! 执行本地命令行。
其他命令还有：chgrp, chmod, chown, ln, lumask, rename, rm, rmdir, symlink, version。
',0,'alvin',curdate());
insert into Content values(586,6,'h3',96,'{}','远程传输命令scp','远程传输命令scp',0,'alvin',curdate());
insert into Content values(587,6,'p',97,'{}','        scp（securecopy）是一个基于SSH协议在网络之间进行安全传输的命令，其格式为“scp [参数]本地文件远程帐户@远程IP地址:远程目录”。','        scp（securecopy）是一个基于SSH协议在网络之间进行安全传输的命令，其格式为“scp [参数]本地文件远程帐户@远程IP地址:远程目录”。',0,'alvin',curdate());
insert into Content values(588,6,'p',98,'{}','        与讲解的cp命令不同，cp命令只能在本地硬盘中进行文件复制，而scp不仅能够通过网络传送数据，而且所有的数据都将进行加密处理。例如，如果想把一些文件通过网络从一台主机传递到其他主机，这两台主机又恰巧是Linux系统，这时使用scp 命令就可以轻松完成文件的传递了。scp命令中可用的参数以及作用如表所示。','        与讲解的cp命令不同，cp命令只能在本地硬盘中进行文件复制，而scp不仅能够通过网络传送数据，而且所有的数据都将进行加密处理。例如，如果想把一些文件通过网络从一台主机传递到其他主机，这两台主机又恰巧是Linux系统，这时使用scp 命令就可以轻松完成文件的传递了。scp命令中可用的参数以及作用如表所示。',0,'alvin',curdate());
insert into Content values(589,6,'table',99,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-v	显示详细的连接进度
-P	指定远程主机的sshd端口号
-r	用于传送文件夹
-6	使用IPv6协议','参数	作用
-v	显示详细的连接进度
-P	指定远程主机的sshd端口号
-r	用于传送文件夹
-6	使用IPv6协议',0,'alvin',curdate());
insert into Content values(590,6,'p',100,'{}','        在使用scp命令把文件从本地复制到远程主机时，首先需要以绝对路径的形式写清本地 文件的存放位置。如果要传送整个文件夹内的所有数据，还需要额外添加参数-r进行递归操作。然后写上要传送到的远程主机的IP地址，远程服务器便会要求进行身份验证了。当前用户名称为root，而密码则为远程服务器的密码。如果想使用指定用户的身份进行验证，可使用用户名@主机地址的参数格式。最后需要在远程主机的IP地址后面添加冒号，并在后面写上要传送到远程主机的哪个文件夹中。只要参数正确并且成功验证了用户身份，即可开始传送工作。由于scp命令是基于SSH协议进行文件传送的，而9.2.2小节又设置好了密钥验证，因此当前在传输文件时，并不需要账户和密码。','        在使用scp命令把文件从本地复制到远程主机时，首先需要以绝对路径的形式写清本地 文件的存放位置。如果要传送整个文件夹内的所有数据，还需要额外添加参数-r进行递归操作。然后写上要传送到的远程主机的IP地址，远程服务器便会要求进行身份验证了。当前用户名称为root，而密码则为远程服务器的密码。如果想使用指定用户的身份进行验证，可使用用户名@主机地址的参数格式。最后需要在远程主机的IP地址后面添加冒号，并在后面写上要传送到远程主机的哪个文件夹中。只要参数正确并且成功验证了用户身份，即可开始传送工作。由于scp命令是基于SSH协议进行文件传送的，而9.2.2小节又设置好了密钥验证，因此当前在传输文件时，并不需要账户和密码。',0,'alvin',curdate());
insert into Content values(591,6,'pre',101,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#echo "WelcometoLinuxProbe.Com" > readme.txt 
[root@linuxprobe ~]#scp /root/readme.txt 192.168.10.20:/home
root@192.168.10.20\'s password:
readme.txt   100%   260.0KB/s   00:00
','[root@linuxprobe ~]#echo "WelcometoLinuxProbe.Com" > readme.txt 
[root@linuxprobe ~]#scp /root/readme.txt 192.168.10.20:/home
root@192.168.10.20\'s password:
readme.txt   100%   260.0KB/s   00:00
',0,'alvin',curdate());
insert into Content values(592,6,'p',102,'{}','        此外，还可以使用scp命令把远程主机上的文件下载到本地主机，其命令格式为“scp[参数]远程用户@远程IP地址:远程文件本地目录”。例如，可以把远程主机的系统版本信息文件下载过来，这样就无须先登录远程主机，再进行文件传送了，也就省去了很多周折。','        此外，还可以使用scp命令把远程主机上的文件下载到本地主机，其命令格式为“scp[参数]远程用户@远程IP地址:远程文件本地目录”。例如，可以把远程主机的系统版本信息文件下载过来，这样就无须先登录远程主机，再进行文件传送了，也就省去了很多周折。',0,'alvin',curdate());
insert into Content values(593,6,'pre',103,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#scp 192.168.10.20:/etc/redhat-release /root
root@192.168.10.20\'s password:
redhat-release 100% 520.1KB/s 00:00 
[root@linuxprobe ~]#cat redhat-release
Red Hat Enterprise Linux Server release 7.0(Maipo)
','[root@linuxprobe ~]#scp 192.168.10.20:/etc/redhat-release /root
root@192.168.10.20\'s password:
redhat-release 100% 520.1KB/s 00:00 
[root@linuxprobe ~]#cat redhat-release
Red Hat Enterprise Linux Server release 7.0(Maipo)
',0,'alvin',curdate());
insert into Content values(594,6,'line',104,'{}','','',0,'alvin',curdate());
insert into Content values(595,6,'h2',105,'{}','不间断会话服务','不间断会话服务',0,'alvin',curdate());
insert into Content values(596,6,'p',106,'{}','        大家在学习sshd服务时，不知有没有注意到这样一个事情：当与远程主机的会话被关闭 时，在远程主机上运行的命令也随之被中断。','        大家在学习sshd服务时，不知有没有注意到这样一个事情：当与远程主机的会话被关闭 时，在远程主机上运行的命令也随之被中断。',0,'alvin',curdate());
insert into Content values(597,6,'p',107,'{}','        如果我们正在使用命令来打包文件，或者正在使用脚本安装某个服务程序，中途是绝对不能关闭在本地打开的终端窗口或断开网络链接的，甚至是网速的波动都有可能导致任务中断，此时只能重新进行远程链接并重新开始任务。还有些时候，我们正在执行文件打包操作，同时又想用脚本来安装某个服务程序，这时会因为打包操作的输出信息占满用户的屏幕界面，而只能再打开一个执行远程会话的终端窗口，时间久了，难免会忘记这些打开的终端窗口是做什么用的了。','        如果我们正在使用命令来打包文件，或者正在使用脚本安装某个服务程序，中途是绝对不能关闭在本地打开的终端窗口或断开网络链接的，甚至是网速的波动都有可能导致任务中断，此时只能重新进行远程链接并重新开始任务。还有些时候，我们正在执行文件打包操作，同时又想用脚本来安装某个服务程序，这时会因为打包操作的输出信息占满用户的屏幕界面，而只能再打开一个执行远程会话的终端窗口，时间久了，难免会忘记这些打开的终端窗口是做什么用的了。',0,'alvin',curdate());
insert into Content values(598,6,'p',108,'{}','        screen是一款能够实现多窗口远程控制的开源服务程序，简单来说就是为了解决网络异常中断或为了同时控制多个远程终端窗口而设计的程序。用户还可以使用screen服务程序同时在多个远程会话中自由切换，能够做到实现如下功能。','        screen是一款能够实现多窗口远程控制的开源服务程序，简单来说就是为了解决网络异常中断或为了同时控制多个远程终端窗口而设计的程序。用户还可以使用screen服务程序同时在多个远程会话中自由切换，能够做到实现如下功能。',0,'alvin',curdate());
insert into Content values(599,6,'ul',109,'{}',' BOLD[  会话恢复: ]BOLD 即便网络中断，也可让会话随时恢复，确保用户不会失去对远程会话的控制。
 BOLD[  多窗口: ]BOLD 每个会话都是独立运行的，拥有各自独立的输入输出终端窗口，终端窗口内显示过的信息也将被分开隔离保存，以便下次使用时依然能看到之前的操作记录。
 BOLD[  会话共享: ]BOLD 当多个用户同时登录到远程服务器时，便可以使用会话共享功能让用户之 间的输入输出信息共享。',' BOLD[  会话恢复: ]BOLD 即便网络中断，也可让会话随时恢复，确保用户不会失去对远程会话的控制。
 BOLD[  多窗口: ]BOLD 每个会话都是独立运行的，拥有各自独立的输入输出终端窗口，终端窗口内显示过的信息也将被分开隔离保存，以便下次使用时依然能看到之前的操作记录。
 BOLD[  会话共享: ]BOLD 当多个用户同时登录到远程服务器时，便可以使用会话共享功能让用户之 间的输入输出信息共享。',0,'alvin',curdate());
insert into Content values(600,6,'p',110,'{}','        在RHEL7系统中，没有默认安装screen服务程序，因此需要配置Yum仓库来安装它。首先将虚拟机的CD/DVD光盘选项设置为“使用ISO镜像文件”，并选择已经下载好的系统镜像，如图所示。','        在RHEL7系统中，没有默认安装screen服务程序，因此需要配置Yum仓库来安装它。首先将虚拟机的CD/DVD光盘选项设置为“使用ISO镜像文件”，并选择已经下载好的系统镜像，如图所示。',0,'alvin',curdate());
insert into Content values(601,6,'image',111,'{"alt": "installscreen", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_installscreen.png", "width": "476"}','/static/img/linux/linux_installscreen.png','/static/img/linux/linux_installscreen.png',0,'alvin',curdate());
insert into Content values(602,6,'p',112,'{}','        然后，把光盘设备中的系统镜像挂载到/media/cdrom目录。','        然后，把光盘设备中的系统镜像挂载到/media/cdrom目录。',0,'alvin',curdate());
insert into Content values(603,6,'pre',113,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#mkdir -p /media/cdrom 
[root@linuxprobe ~]#mount /dev/cdrom/media/cdrom 
mount: /dev/sr0 is write-protected,mounting read-only
','[root@linuxprobe ~]#mkdir -p /media/cdrom 
[root@linuxprobe ~]#mount /dev/cdrom/media/cdrom 
mount: /dev/sr0 is write-protected,mounting read-only
',0,'alvin',curdate());
insert into Content values(604,6,'p',114,'{}','        最后，使用Vim文本编辑器创建Yum仓库的配置文件。下述命令中用到的具体参数的含义，可参考Command。','        最后，使用Vim文本编辑器创建Yum仓库的配置文件。下述命令中用到的具体参数的含义，可参考Command。',0,'alvin',curdate());
insert into Content values(605,6,'pre',115,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#vim /etc/yum.repos.d/rhel7.repo [rhel7]
name=rhel7 
baseurl=file:///media/cdrom 
enabled=1 
gpgcheck=0
','[root@linuxprobe ~]#vim /etc/yum.repos.d/rhel7.repo [rhel7]
name=rhel7 
baseurl=file:///media/cdrom 
enabled=1 
gpgcheck=0
',0,'alvin',curdate());
insert into Content values(606,6,'p',116,'{}','        现在，就可以使用Yum仓库来安装screen服务程序了。简捷起见，刘遄老师将对后面章节中出现的Yum软件安装信息进行过滤—把重复性高及无意义的非必要信息省略。','        现在，就可以使用Yum仓库来安装screen服务程序了。简捷起见，刘遄老师将对后面章节中出现的Yum软件安装信息进行过滤—把重复性高及无意义的非必要信息省略。',0,'alvin',curdate());
insert into Content values(607,6,'pre',117,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#yum install screen 
Loaded plugins: langpacks,product-id,subscription-manager 
This system is not registered to RedHat Subscription Management.You can use 
subscription-manager to register.
rhel | 4.1kB 00:00 
Resolving Dependencies 
--> Running transaction check 
---> Package screen.x86_64 0:4.1.0-0.19.20120314git3c2946.el7 will be installed 
-->Finished Dependency Resolution 
Dependencies Resolved 
===============================================================================
Package Arch Version Repository 
Size 
===============================================================================
Installing:
screen x86_6 44.1.0-0.19.20120314git3c2946.el7 rhel 551 k 
Transaction Summary 
===============================================================================
Install 1 Package 
Total download size: 551 k 
Installed size: 914 k 
Is this ok[y/d/N]: y 
Downloading packages:
Running transaction  check 
Running transaction  test 
Transaction test succeeded 
Running transaction
Installing:screen-4.1.0-0.19.20120314git3c2946.el7.x86_64 1/1 
Verifying:screen-4.1.0-0.19.20120314git3c2946.el7.x86_64 1/1 
Installed:
screen.x86_640:4.1.0-0.19.20120314git3c2946.el7 
Complete!
','[root@linuxprobe ~]#yum install screen 
Loaded plugins: langpacks,product-id,subscription-manager 
This system is not registered to RedHat Subscription Management.You can use 
subscription-manager to register.
rhel | 4.1kB 00:00 
Resolving Dependencies 
--> Running transaction check 
---> Package screen.x86_64 0:4.1.0-0.19.20120314git3c2946.el7 will be installed 
-->Finished Dependency Resolution 
Dependencies Resolved 
===============================================================================
Package Arch Version Repository 
Size 
===============================================================================
Installing:
screen x86_6 44.1.0-0.19.20120314git3c2946.el7 rhel 551 k 
Transaction Summary 
===============================================================================
Install 1 Package 
Total download size: 551 k 
Installed size: 914 k 
Is this ok[y/d/N]: y 
Downloading packages:
Running transaction  check 
Running transaction  test 
Transaction test succeeded 
Running transaction
Installing:screen-4.1.0-0.19.20120314git3c2946.el7.x86_64 1/1 
Verifying:screen-4.1.0-0.19.20120314git3c2946.el7.x86_64 1/1 
Installed:
screen.x86_640:4.1.0-0.19.20120314git3c2946.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(608,6,'h3',118,'{}','管理远程会话','管理远程会话',0,'alvin',curdate());
insert into Content values(609,6,'p',119,'{}','        screen命令能做的事情非常多：可以用-S参数创建会话窗口；用-d参数将指定会话进行 离线处理；用-r参数恢复指定会话；用-x参数一次性恢复所有的会话；用-ls参数显示当前已有的会话；以及用-wipe参数把目前无法使用的会话删除，等等。','        screen命令能做的事情非常多：可以用-S参数创建会话窗口；用-d参数将指定会话进行 离线处理；用-r参数恢复指定会话；用-x参数一次性恢复所有的会话；用-ls参数显示当前已有的会话；以及用-wipe参数把目前无法使用的会话删除，等等。',0,'alvin',curdate());
insert into Content values(610,6,'p',120,'{}','        下面创建一个名称为backup的会话窗口。请各位读者留心观察，当在命令行中敲下这条 命令的一瞬间，屏幕会快速闪动一下，这时就已经进入screen服务会话中了，在里面运行的任何操作都会被后台记录下来。','        下面创建一个名称为backup的会话窗口。请各位读者留心观察，当在命令行中敲下这条 命令的一瞬间，屏幕会快速闪动一下，这时就已经进入screen服务会话中了，在里面运行的任何操作都会被后台记录下来。',0,'alvin',curdate());
insert into Content values(611,6,'pre',121,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#screen-S backup 
[root@linuxprobe ~]#
','[root@linuxprobe ~]#screen-S backup 
[root@linuxprobe ~]#
',0,'alvin',curdate());
insert into Content values(612,6,'p',122,'{}','        执行命令后会立即返回一个提示符。虽然看起来与刚才没有不同，但实际上可以查看到 当前的会话正在工作中。','        执行命令后会立即返回一个提示符。虽然看起来与刚才没有不同，但实际上可以查看到 当前的会话正在工作中。',0,'alvin',curdate());
insert into Content values(613,6,'pre',123,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#screen -ls 
There is a screen on:
32230.backup (Attached)
1 Socket in /var/run/screen/S-root.
','[root@linuxprobe ~]#screen -ls 
There is a screen on:
32230.backup (Attached)
1 Socket in /var/run/screen/S-root.
',0,'alvin',curdate());
insert into Content values(614,6,'p',124,'{}','        要想退出一个会话也十分简单，只需在命令行中执行exit命令即可。','        要想退出一个会话也十分简单，只需在命令行中执行exit命令即可。',0,'alvin',curdate());
insert into Content values(615,6,'pre',125,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#exit 
[screen is terminating]
','[root@linuxprobe ~]#exit 
[screen is terminating]
',0,'alvin',curdate());
insert into Content values(616,6,'p',126,'{}','        在日常的生产环境中，其实并不是必须先创建会话，然后再开始工作。可以直接使用screen命令执行要运行的命令，这样在命令中的一切操作也都会被记录下来，当命令执行结束后screen会话也会自动结束。','        在日常的生产环境中，其实并不是必须先创建会话，然后再开始工作。可以直接使用screen命令执行要运行的命令，这样在命令中的一切操作也都会被记录下来，当命令执行结束后screen会话也会自动结束。',0,'alvin',curdate());
insert into Content values(617,6,'pre',127,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#screen vim memo.txt
 welcome to linuxprobe.com
','[root@linuxprobe ~]#screen vim memo.txt
 welcome to linuxprobe.com
',0,'alvin',curdate());
insert into Content values(618,6,'p',128,'{}','        为了演示screen不间断会话服务的强大之处，我们先来创建一个名为linux的会话，然后强行把窗口关闭掉（这与进行远程连接时突然断网具有相同的效果）：','        为了演示screen不间断会话服务的强大之处，我们先来创建一个名为linux的会话，然后强行把窗口关闭掉（这与进行远程连接时突然断网具有相同的效果）：',0,'alvin',curdate());
insert into Content values(619,6,'pre',129,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#screen -S linux 
[root@linuxprobe ~]#
[root@linuxprobe ~]#tail -f /var/log/messages 
Feb 20 11:20:01 localhost systemd:Starting Session 2 of user root.
Feb 20 11:20:01 localhost systemd:Started Session 2 of user root.
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]: [system] Activating service 
name=\'com.redhat.SubscriptionManager\'(using servicehelper)
Feb 20 11:21:19 localhost dbus[1124]: [system] Activating service 
name=\'com.redhat.SubscriptionManager\'(usingservicehelper)
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]: [system] Successfully activated service 
\'com.redhat.SubscriptionManager\'
Feb 20 11:21:19 localhost dbus[1124]:[system]Successfully activated service 
\'com.redhat.Subscription Manager\'
Feb 20 11:30:01 localhost systemd:Starting Session 3 of user root.
Feb 20 11:30:01 localhost systemd:Started Session 3 of user root.
Feb 20 11:30:43 localhost systemd:Starting Cleanup of Temporary Directories...
Feb 20 11:30:43 localhost systemd:Started Cleanup of Temporary Directories.
','[root@linuxprobe ~]#screen -S linux 
[root@linuxprobe ~]#
[root@linuxprobe ~]#tail -f /var/log/messages 
Feb 20 11:20:01 localhost systemd:Starting Session 2 of user root.
Feb 20 11:20:01 localhost systemd:Started Session 2 of user root.
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]: [system] Activating service 
name=\'com.redhat.SubscriptionManager\'(using servicehelper)
Feb 20 11:21:19 localhost dbus[1124]: [system] Activating service 
name=\'com.redhat.SubscriptionManager\'(usingservicehelper)
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]: [system] Successfully activated service 
\'com.redhat.SubscriptionManager\'
Feb 20 11:21:19 localhost dbus[1124]:[system]Successfully activated service 
\'com.redhat.Subscription Manager\'
Feb 20 11:30:01 localhost systemd:Starting Session 3 of user root.
Feb 20 11:30:01 localhost systemd:Started Session 3 of user root.
Feb 20 11:30:43 localhost systemd:Starting Cleanup of Temporary Directories...
Feb 20 11:30:43 localhost systemd:Started Cleanup of Temporary Directories.
',0,'alvin',curdate());
insert into Content values(620,6,'p',130,'{}','        由于刚才关闭了会话窗口，这样的操作在传统的远程控制中一定会导致正在运行的命令也突然终止，但在screen不间断会话服务中则不会这样。我们只需查看一下刚刚离线的会话 名称，然后尝试恢复回来就可以继续工作了：','        由于刚才关闭了会话窗口，这样的操作在传统的远程控制中一定会导致正在运行的命令也突然终止，但在screen不间断会话服务中则不会这样。我们只需查看一下刚刚离线的会话 名称，然后尝试恢复回来就可以继续工作了：',0,'alvin',curdate());
insert into Content values(621,6,'pre',131,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]#screen -ls 
There is a screen on:
13469.linux ( Detached )
1 Socket in /var/run/screen/S-root.
[root@linuxprobe ~]#screen -r linux
[root@linuxprobe ~]#
[root@linuxprobe ~]#tail -f /var/log/messages 
Feb 20 11:20:01 localhost systemd:Starting Session 2 of user root.
Feb 20 11:20:01 localhost systemd:Started Session 2 of user root.
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]:[system] Activating service 
name=\'com.redhat.SubscriptionManager\'(using servicehelper)
Feb 20 11:21:19 localhost dbus[1124]:[system]Activating service name=\'com.redhat.SubscriptionManager\'(using servicehelper)
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]:[system]Successfully 
activatedservice\'com.redhat.SubscriptionManager\'
Feb 20 11:21:19 localhost dbus[1124]:[system]Successfully activated service 
\'com.redhat.SubscriptionManager\'
Feb 20 11:30:01 localhost systemd:Starting Session 3 of user root.
Feb 20 11:30:01 localhost systemd:Started Session 3 of user root.
Feb 20 11:30:43 localhost systemd:Starting Cleanup of Temporary Directories...
Feb 20 11:30:43 localhost systemd:Started Cleanup of Temporary Directories.
Feb 20 11:40:01 localhost systemd:Starting Session 4 of user root.
Feb 20 11:40:01 localhost systemd:Started Session 4 of user root.
','[root@linuxprobe ~]#screen -ls 
There is a screen on:
13469.linux ( Detached )
1 Socket in /var/run/screen/S-root.
[root@linuxprobe ~]#screen -r linux
[root@linuxprobe ~]#
[root@linuxprobe ~]#tail -f /var/log/messages 
Feb 20 11:20:01 localhost systemd:Starting Session 2 of user root.
Feb 20 11:20:01 localhost systemd:Started Session 2 of user root.
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]:[system] Activating service 
name=\'com.redhat.SubscriptionManager\'(using servicehelper)
Feb 20 11:21:19 localhost dbus[1124]:[system]Activating service name=\'com.redhat.SubscriptionManager\'(using servicehelper)
Feb 20 11:21:19 localhost dbus-daemon:dbus[1124]:[system]Successfully 
activatedservice\'com.redhat.SubscriptionManager\'
Feb 20 11:21:19 localhost dbus[1124]:[system]Successfully activated service 
\'com.redhat.SubscriptionManager\'
Feb 20 11:30:01 localhost systemd:Starting Session 3 of user root.
Feb 20 11:30:01 localhost systemd:Started Session 3 of user root.
Feb 20 11:30:43 localhost systemd:Starting Cleanup of Temporary Directories...
Feb 20 11:30:43 localhost systemd:Started Cleanup of Temporary Directories.
Feb 20 11:40:01 localhost systemd:Starting Session 4 of user root.
Feb 20 11:40:01 localhost systemd:Started Session 4 of user root.
',0,'alvin',curdate());
insert into Content values(622,6,'p',132,'{}','        如果我们突然又想到了还有其他事情需要处理，也可以多创建几个会话窗口放在一起使用。如果这段时间内不再使用某个会话窗口，可以把它设置为临时断开（detach）模式，随后在需要时再重新连接（attach）回来即可。这段时间内，在会话窗口内运行的程序会继续执行。','        如果我们突然又想到了还有其他事情需要处理，也可以多创建几个会话窗口放在一起使用。如果这段时间内不再使用某个会话窗口，可以把它设置为临时断开（detach）模式，随后在需要时再重新连接（attach）回来即可。这段时间内，在会话窗口内运行的程序会继续执行。',0,'alvin',curdate());
insert into Content values(623,6,'h3',133,'{}','会话共享功能','会话共享功能',0,'alvin',curdate());
insert into Content values(624,6,'p',134,'{}','        screen命令不仅可以确保用户在极端情况下也不丢失对系统的远程控制，保证了生产环境中远程工作的不间断性，而且它还具有会话共享、分屏切割、会话锁定等实用的功能。其 中，会话共享功能是一件很酷的事情，当多个用户同时控制主机的时候，它可以把屏幕内容共享出来，也就是说每个用户都可以看到相同的内容。','        screen命令不仅可以确保用户在极端情况下也不丢失对系统的远程控制，保证了生产环境中远程工作的不间断性，而且它还具有会话共享、分屏切割、会话锁定等实用的功能。其 中，会话共享功能是一件很酷的事情，当多个用户同时控制主机的时候，它可以把屏幕内容共享出来，也就是说每个用户都可以看到相同的内容。',0,'alvin',curdate());
insert into Content values(625,6,'p',135,'{}','        screen的会话共享功能的流程拓扑如图所示。','        screen的会话共享功能的流程拓扑如图所示。',0,'alvin',curdate());
insert into Content values(626,6,'image',136,'{"alt": "process_ssh", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_process_ssh.png", "width": "676"}','/static/img/linux/linux_process_ssh.png','/static/img/linux/linux_process_ssh.png',0,'alvin',curdate());
insert into Content values(627,6,'p',137,'{}','        要实现会话共享功能，首先使用ssh服务程序将终端A远程连接到服务器，并创建一个会话窗口。','        要实现会话共享功能，首先使用ssh服务程序将终端A远程连接到服务器，并创建一个会话窗口。',0,'alvin',curdate());
insert into Content values(628,6,'pre',138,'{"class": ["prettyprint", "lang-bash"]}','[root@clientA ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)? yes
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'s password:
Last login:Wed May4 07:56:29 2017
[root@clientA ~]#screen -S linuxprobe 
[root@clientA ~]#
','[root@clientA ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)? yes
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'s password:
Last login:Wed May4 07:56:29 2017
[root@clientA ~]#screen -S linuxprobe 
[root@clientA ~]#
',0,'alvin',curdate());
insert into Content values(629,6,'p',139,'{}','        然后，使用ssh服务程序将终端B远程连接到服务器，并执行获取远程会话的命令。接下来，两台主机就能看到相同的内容了。','        然后，使用ssh服务程序将终端B远程连接到服务器，并执行获取远程会话的命令。接下来，两台主机就能看到相同的内容了。',0,'alvin',curdate());
insert into Content values(630,6,'pre',140,'{"class": ["prettyprint", "lang-bash"]}','[root@clientB ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)? yes
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'s password:
Last login:Wed Feb22 04:55:38 2017 from 192.168.10.10 
[root@clientB ~]#screen-x 
[root@clientB ~]
','[root@clientB ~]#ssh 192.168.10.10 
The authenticity of host \'192.168.10.10(192.168.10.10)\' can\'t be established.
ECDSA key finger print is 70:3b:5d:37:96:7b:2e:a5:28:0d:7e:dc:47:6a:fe:5c.
Are you sure you want to continue connecting (yes/no)? yes
Warning:Permanently added \'192.168.10.10\'(ECDSA) to the list of known hosts.
root@192.168.10.10\'s password:
Last login:Wed Feb22 04:55:38 2017 from 192.168.10.10 
[root@clientB ~]#screen-x 
[root@clientB ~]
',0,'alvin',curdate());
insert into Content values(631,7,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用Apache服务部署静态网站',' <span class="color_h1">  Linux </span> 使用Apache服务部署静态网站',0,'alvin',curdate());
insert into Content values(632,7,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(633,7,'h2',3,'{}','网站服务程序','网站服务程序',0,'alvin',curdate());
insert into Content values(634,7,'p',4,'{}','        1970年，作为互联网前身的ARPANET（阿帕网）已初具雏形，并开始向非军用部门开放，许多大学和商业部门开始接入。虽然彼时阿帕网的规模（只有4台主机联网运行）还不如现在的局域网成熟，但是它依然为网络技术的进步打下了扎实的基础。','        1970年，作为互联网前身的ARPANET（阿帕网）已初具雏形，并开始向非军用部门开放，许多大学和商业部门开始接入。虽然彼时阿帕网的规模（只有4台主机联网运行）还不如现在的局域网成熟，但是它依然为网络技术的进步打下了扎实的基础。',0,'alvin',curdate());
insert into Content values(635,7,'p',5,'{}','        想必我们大多数人都是通过访问网站而开始接触互联网的吧。我们平时访问的网站服务就是Web网络服务，一般是指允许用户通过浏览器访问到互联网中各种资源的服务。如图所示，Web网络服务是一种被动访问的服务程序，即只有接收到互联网中其他主机发出的请求后才会响应，最终用于提供服务程序的Web服务器会通过HTTP（超文本传输协议）或HTTPS（安全超文本传输协议）把请求的内容传送给用户。','        想必我们大多数人都是通过访问网站而开始接触互联网的吧。我们平时访问的网站服务就是Web网络服务，一般是指允许用户通过浏览器访问到互联网中各种资源的服务。如图所示，Web网络服务是一种被动访问的服务程序，即只有接收到互联网中其他主机发出的请求后才会响应，最终用于提供服务程序的Web服务器会通过HTTP（超文本传输协议）或HTTPS（安全超文本传输协议）把请求的内容传送给用户。',0,'alvin',curdate());
insert into Content values(636,7,'p',6,'{}','        目前能够提供Web网络服务的程序有IIS、Nginx和Apache等。其中，IIS（Internet Information Services，互联网信息服务）是Windows系统中默认的Web服务程序，这是一款图形化的网站管理工具，不仅可以提供Web网站服务，还可以提供FTP、NMTP、SMTP等服务。但是，IIS只能在Windows系统中使用，而我们这本书的名字是《Linux就该这么学》，所以它也就不在我们的学习范围之内了。','        目前能够提供Web网络服务的程序有IIS、Nginx和Apache等。其中，IIS（Internet Information Services，互联网信息服务）是Windows系统中默认的Web服务程序，这是一款图形化的网站管理工具，不仅可以提供Web网站服务，还可以提供FTP、NMTP、SMTP等服务。但是，IIS只能在Windows系统中使用，而我们这本书的名字是《Linux就该这么学》，所以它也就不在我们的学习范围之内了。',0,'alvin',curdate());
insert into Content values(637,7,'image',7,'{"alt": "nmtui", "class": ["attachment-full"], "height": "282", "src": "/static/img/linux/linux_server_web_connection.png", "width": "676"}','/static/img/linux/linux_server_web_connection.png','/static/img/linux/linux_server_web_connection.png',0,'alvin',curdate());
insert into Content values(638,7,'p',8,'{}','        2004年10月4日，为俄罗斯知名门户站点而开发的Web服务程序Nginx横空出世。Nginx程序作为一款轻量级的网站服务软件，因其稳定性和丰富的功能而快速占领服务器市场，但Nginx最被认可的还当是系统资源消耗低且并发能力强，因此得到了国内诸如新浪、网易、腾讯等门户站的青睐。本书将在第20章讲解Nginx服务程序。','        2004年10月4日，为俄罗斯知名门户站点而开发的Web服务程序Nginx横空出世。Nginx程序作为一款轻量级的网站服务软件，因其稳定性和丰富的功能而快速占领服务器市场，但Nginx最被认可的还当是系统资源消耗低且并发能力强，因此得到了国内诸如新浪、网易、腾讯等门户站的青睐。本书将在第20章讲解Nginx服务程序。',0,'alvin',curdate());
insert into Content values(639,7,'p',9,'{}','        Apache程序是目前拥有很高市场占有率的Web服务程序之一，其跨平台和安全性广泛被认可且拥有快速、可靠、简单的API扩展。下图所示为Apache服务基金会的著名Logo，它的名字取自美国印第安人的土著语，寓意着拥有高超的作战策略和无穷的耐性。Apache服务程序可以运行在Linux系统、UNIX系统甚至是Windows系统中，支持基于IP、域名及端口号的虚拟主机功能，支持多种认证方式，集成有代理服务器模块、安全Socket层（SSL），能够实时监视服务状态与定制日志消息，并有着各类丰富的模块支持。','        Apache程序是目前拥有很高市场占有率的Web服务程序之一，其跨平台和安全性广泛被认可且拥有快速、可靠、简单的API扩展。下图所示为Apache服务基金会的著名Logo，它的名字取自美国印第安人的土著语，寓意着拥有高超的作战策略和无穷的耐性。Apache服务程序可以运行在Linux系统、UNIX系统甚至是Windows系统中，支持基于IP、域名及端口号的虚拟主机功能，支持多种认证方式，集成有代理服务器模块、安全Socket层（SSL），能够实时监视服务状态与定制日志消息，并有着各类丰富的模块支持。',0,'alvin',curdate());
insert into Content values(640,7,'image',10,'{"alt": "nmtui", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_apache_logo.jpg", "width": "676"}','/static/img/linux/linux_apache_logo.jpg','/static/img/linux/linux_apache_logo.jpg',0,'alvin',curdate());
insert into Content values(641,7,'p',11,'{}','        Apache程序是在RHEL 5、6、7系统的默认Web服务程序，其相关知识点一直也是RHCSA和RHCE认证考试的重点内容。','        Apache程序是在RHEL 5、6、7系统的默认Web服务程序，其相关知识点一直也是RHCSA和RHCE认证考试的重点内容。',0,'alvin',curdate());
insert into Content values(642,7,'p',12,'{}','        总结来说，Nginx服务程序作为后起之秀，已经通过自身的优势与努力赢得了大批站长的信赖。Nginx真的很棒！','        总结来说，Nginx服务程序作为后起之秀，已经通过自身的优势与努力赢得了大批站长的信赖。Nginx真的很棒！',0,'alvin',curdate());
insert into Content values(643,7,'p',13,'{}','        但是，Apache程序作为老牌的Web服务程序，一方面在Web服务器软件市场具有相当高的占有率，另一方面Apache也是RHEL 7系统中默认的Web服务程序，而且还是RHCSA和RHCE认证考试的必考内容，因此无论从实际应用角度还是从应对红帽认证考试的角度，我们都有必要好好学习Apache服务程序的部署，并深入挖掘其可用的丰富功能。','        但是，Apache程序作为老牌的Web服务程序，一方面在Web服务器软件市场具有相当高的占有率，另一方面Apache也是RHEL 7系统中默认的Web服务程序，而且还是RHCSA和RHCE认证考试的必考内容，因此无论从实际应用角度还是从应对红帽认证考试的角度，我们都有必要好好学习Apache服务程序的部署，并深入挖掘其可用的丰富功能。',0,'alvin',curdate());
insert into Content values(644,7,'p',14,'{}',' BOLD[  第1步： ]BOLD 把光盘设备中的系统镜像挂载到/media/cdrom目录。',' BOLD[  第1步： ]BOLD 把光盘设备中的系统镜像挂载到/media/cdrom目录。',0,'alvin',curdate());
insert into Content values(645,7,'pre',15,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir -p /media/cdrom
[root@linuxprobe ~]# mount /dev/cdrom /media/cdrom
mount: /dev/sr0 is write-protected, mounting read-only
','[root@linuxprobe ~]# mkdir -p /media/cdrom
[root@linuxprobe ~]# mount /dev/cdrom /media/cdrom
mount: /dev/sr0 is write-protected, mounting read-only
',0,'alvin',curdate());
insert into Content values(646,7,'p',16,'{}',' BOLD[  第2步： ]BOLD 使用Vim文本编辑器创建Yum仓库的配置文件，下述命令中具体参数的含义可参考其它章节。',' BOLD[  第2步： ]BOLD 使用Vim文本编辑器创建Yum仓库的配置文件，下述命令中具体参数的含义可参考其它章节。',0,'alvin',curdate());
insert into Content values(647,7,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/yum.repos.d/rhel7.repo
[rhel7]
name=rhel7
baseurl=file:///media/cdrom
enabled=1
gpgcheck=0
','[root@linuxprobe ~]# vim /etc/yum.repos.d/rhel7.repo
[rhel7]
name=rhel7
baseurl=file:///media/cdrom
enabled=1
gpgcheck=0
',0,'alvin',curdate());
insert into Content values(648,7,'p',18,'{}',' BOLD[  第3步： ]BOLD 动手安装Apache服务程序。注意，使用yum命令进行安装时，跟在命令后面的Apache服务的软件包名称为httpd。如果直接执行yum install apache命令，则系统会报错。',' BOLD[  第3步： ]BOLD 动手安装Apache服务程序。注意，使用yum命令进行安装时，跟在命令后面的Apache服务的软件包名称为httpd。如果直接执行yum install apache命令，则系统会报错。',0,'alvin',curdate());
insert into Content values(649,7,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install httpd
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 httpd x86_64 2.4.6-17.el7 rhel 1.2 M
Installing for dependencies:
 apr x86_64 1.4.8-3.el7 rhel 103 k
 apr-util x86_64 1.5.2-6.el7 rhel 92 k
 httpd-tools x86_64 2.4.6-17.el7 rhel 77 k
 mailcap noarch 2.1.41-2.el7 rhel 31 k
Transaction Summary
================================================================================
Install 1 Package (+4 Dependent packages)
Total download size: 1.5 M
Installed size: 4.3 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
………………省略部分输出信息………………
Complete!
','[root@linuxprobe ~]# yum install httpd
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 httpd x86_64 2.4.6-17.el7 rhel 1.2 M
Installing for dependencies:
 apr x86_64 1.4.8-3.el7 rhel 103 k
 apr-util x86_64 1.5.2-6.el7 rhel 92 k
 httpd-tools x86_64 2.4.6-17.el7 rhel 77 k
 mailcap noarch 2.1.41-2.el7 rhel 31 k
Transaction Summary
================================================================================
Install 1 Package (+4 Dependent packages)
Total download size: 1.5 M
Installed size: 4.3 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
………………省略部分输出信息………………
Complete!
',0,'alvin',curdate());
insert into Content values(650,7,'p',20,'{}',' BOLD[  第4步： ]BOLD 启用httpd服务程序并将其加入到开机启动项中，使其能够随系统开机而运行，从而持续为用户提供Web服务：',' BOLD[  第4步： ]BOLD 启用httpd服务程序并将其加入到开机启动项中，使其能够随系统开机而运行，从而持续为用户提供Web服务：',0,'alvin',curdate());
insert into Content values(651,7,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl start httpd
[root@linuxprobe ~]# systemctl enable httpd
ln -s \'/usr/lib/systemd/system/httpd.service\' \'/etc/systemd/system/multi-user.target.wants/httpd.service\'
','[root@linuxprobe ~]# systemctl start httpd
[root@linuxprobe ~]# systemctl enable httpd
ln -s \'/usr/lib/systemd/system/httpd.service\' \'/etc/systemd/system/multi-user.target.wants/httpd.service\'
',0,'alvin',curdate());
insert into Content values(652,7,'p',22,'{}','大家在浏览器（这里以Firefox浏览器为例）的地址栏中输入http://127.0.0.1并按回车键，就可以看到用于提供Web服务的httpd服务程序的默认页面了，如图所示。','大家在浏览器（这里以Firefox浏览器为例）的地址栏中输入http://127.0.0.1并按回车键，就可以看到用于提供Web服务的httpd服务程序的默认页面了，如图所示。',0,'alvin',curdate());
insert into Content values(653,7,'image',23,'{"alt": "nmtui", "class": ["attachment-full"], "height": "582", "src": "/static/img/linux/linux_apache_firefox.png", "width": "690"}','/static/img/linux/linux_apache_firefox.png','/static/img/linux/linux_apache_firefox.png',0,'alvin',curdate());
insert into Content values(654,7,'h2',24,'{}','配置服务文件参数','配置服务文件参数',0,'alvin',curdate());
insert into Content values(655,7,'p',25,'{}','        需要提醒大家的是，前文介绍的httpd服务程序的安装和运行，仅仅是httpd服务程序的一些皮毛，我们依然有很长的道路要走。在Linux系统中配置服务，其实就是修改服务的配置文件，因此，还需要知道这些配置文件的所在位置以及用途，httpd服务程序的主要配置文件及存放位置如表所示。','        需要提醒大家的是，前文介绍的httpd服务程序的安装和运行，仅仅是httpd服务程序的一些皮毛，我们依然有很长的道路要走。在Linux系统中配置服务，其实就是修改服务的配置文件，因此，还需要知道这些配置文件的所在位置以及用途，httpd服务程序的主要配置文件及存放位置如表所示。',0,'alvin',curdate());
insert into Content values(656,7,'table',26,'{"class": ["table", "table-bordered", "table-striped"]}','服务目录	/etc/httpd
主配置文件	/etc/httpd/conf/httpd.conf
网站数据目录	/var/www/html
访问日志	/var/log/httpd/access_log
错误日志	/var/log/httpd/error_log','服务目录	/etc/httpd
主配置文件	/etc/httpd/conf/httpd.conf
网站数据目录	/var/www/html
访问日志	/var/log/httpd/access_log
错误日志	/var/log/httpd/error_log',0,'alvin',curdate());
insert into Content values(657,7,'p',27,'{}','        大家在首次打开httpd服务程序的主配置文件，可能会吓一跳—竟然有353行！这得至少需要一周的时间才能看完吧？！但是，大家只要仔细观看就会发现刘遄老师在这里调皮了。因为在这个配置文件中，所有以井号（#）开始的行都是注释行，其目的是对httpd服务程序的功能或某一行参数进行介绍，我们不需要逐行研究这些内容。','        大家在首次打开httpd服务程序的主配置文件，可能会吓一跳—竟然有353行！这得至少需要一周的时间才能看完吧？！但是，大家只要仔细观看就会发现刘遄老师在这里调皮了。因为在这个配置文件中，所有以井号（#）开始的行都是注释行，其目的是对httpd服务程序的功能或某一行参数进行介绍，我们不需要逐行研究这些内容。',0,'alvin',curdate());
insert into Content values(658,7,'p',28,'{}','        在httpd服务程序的主配置文件中，存在三种类型的信息：注释行信息、全局配置、区域配置，如图所示。','        在httpd服务程序的主配置文件中，存在三种类型的信息：注释行信息、全局配置、区域配置，如图所示。',0,'alvin',curdate());
insert into Content values(659,7,'image',29,'{"alt": "httpd_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_httpd_setting.png", "width": "676"}','/static/img/linux/linux_httpd_setting.png','/static/img/linux/linux_httpd_setting.png',0,'alvin',curdate());
insert into Content values(660,7,'p',30,'{}','        各位读者已经接触过注释信息，因此这里主要讲解全局配置参数与区域配置参数的区别。顾名思义，全局配置参数就是一种全局性的配置参数，可作用于对所有的子站点，既保证了子站点的正常访问，也有效减少了频繁写入重复参数的工作量。区域配置参数则是单独针对于每个独立的子站点进行设置的。就像在大学食堂里面打饭，食堂负责打饭的阿姨先给每位同学来一碗标准大小的白饭（全局配置），然后再根据每位同学的具体要求盛放他们想吃的菜（区域配置）。在httpd服务程序主配置文件中，最为常用的参数如表所示。','        各位读者已经接触过注释信息，因此这里主要讲解全局配置参数与区域配置参数的区别。顾名思义，全局配置参数就是一种全局性的配置参数，可作用于对所有的子站点，既保证了子站点的正常访问，也有效减少了频繁写入重复参数的工作量。区域配置参数则是单独针对于每个独立的子站点进行设置的。就像在大学食堂里面打饭，食堂负责打饭的阿姨先给每位同学来一碗标准大小的白饭（全局配置），然后再根据每位同学的具体要求盛放他们想吃的菜（区域配置）。在httpd服务程序主配置文件中，最为常用的参数如表所示。',0,'alvin',curdate());
insert into Content values(661,7,'table',31,'{"class": ["table", "table-bordered", "table-striped"]}','ServerRoot	服务目录
ServerAdmin	管理员邮箱
User	运行服务的用户
Group	运行服务的用户组
ServerName	网站服务器的域名
DocumentRoot	网站数据目录
Listen	监听的IP地址与端口号
DirectoryIndex	默认的索引页页面
ErrorLog	错误日志文件
CustomLog	访问日志文件
Timeout	网页超时时间，默认为300秒','ServerRoot	服务目录
ServerAdmin	管理员邮箱
User	运行服务的用户
Group	运行服务的用户组
ServerName	网站服务器的域名
DocumentRoot	网站数据目录
Listen	监听的IP地址与端口号
DirectoryIndex	默认的索引页页面
ErrorLog	错误日志文件
CustomLog	访问日志文件
Timeout	网页超时时间，默认为300秒',0,'alvin',curdate());
insert into Content values(662,7,'p',32,'{}','        从上表中可知，DocumentRoot参数用于定义网站数据的保存路径，其参数的默认值是把网站数据存放到/var/www/html目录中；而当前网站普遍的首页面名称是index.html，因此可以向/var/www/html目录中写入一个文件，替换掉httpd服务程序的默认首页面，该操作会立即生效。','        从上表中可知，DocumentRoot参数用于定义网站数据的保存路径，其参数的默认值是把网站数据存放到/var/www/html目录中；而当前网站普遍的首页面名称是index.html，因此可以向/var/www/html目录中写入一个文件，替换掉httpd服务程序的默认首页面，该操作会立即生效。',0,'alvin',curdate());
insert into Content values(663,7,'p',33,'{}','        在执行上述操作之后，再在Firefox浏览器中刷新httpd服务程序，可以看到该程序的首页面内容已经发生了改变，如图所示。','        在执行上述操作之后，再在Firefox浏览器中刷新httpd服务程序，可以看到该程序的首页面内容已经发生了改变，如图所示。',0,'alvin',curdate());
insert into Content values(664,7,'pre',34,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# echo "Welcome To LinuxProbe.Com" > /var/www/html/index.html
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# echo "Welcome To LinuxProbe.Com" > /var/www/html/index.html
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(665,7,'image',35,'{"alt": "firefox_index", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_firefox_index.png", "width": "590"}','/static/img/linux/linux_firefox_index.png','/static/img/linux/linux_firefox_index.png',0,'alvin',curdate());
insert into Content values(666,7,'p',36,'{}','        在完成这个实验之后，是不是信心爆棚了呢？！在默认情况下，网站数据是保存在/var/www/html目录中，而如果想把保存网站数据的目录修改为/home/wwwroot目录，该怎么操作呢？且看下文。','        在完成这个实验之后，是不是信心爆棚了呢？！在默认情况下，网站数据是保存在/var/www/html目录中，而如果想把保存网站数据的目录修改为/home/wwwroot目录，该怎么操作呢？且看下文。',0,'alvin',curdate());
insert into Content values(667,7,'p',37,'{}',' BOLD[  第1步： ]BOLD 建立网站数据的保存目录，并创建首页文件。',' BOLD[  第1步： ]BOLD 建立网站数据的保存目录，并创建首页文件。',0,'alvin',curdate());
insert into Content values(668,7,'pre',38,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /home/wwwroot
[root@linuxprobe ~]# echo "The New Web Directory" > /home/wwwroot/index.html
','[root@linuxprobe ~]# mkdir /home/wwwroot
[root@linuxprobe ~]# echo "The New Web Directory" > /home/wwwroot/index.html
',0,'alvin',curdate());
insert into Content values(669,7,'p',39,'{}',' BOLD[  第2步： ]BOLD 打开httpd服务程序的主配置文件，将约第119行用于定义网站数据保存路径的参数DocumentRoot修改为/home/wwwroot，同时还需要将约第124行用于定义目录权限的参数Directory后面的路径也修改为/home/wwwroot。配置文件修改完毕后即可保存并退出。',' BOLD[  第2步： ]BOLD 打开httpd服务程序的主配置文件，将约第119行用于定义网站数据保存路径的参数DocumentRoot修改为/home/wwwroot，同时还需要将约第124行用于定义目录权限的参数Directory后面的路径也修改为/home/wwwroot。配置文件修改完毕后即可保存并退出。',0,'alvin',curdate());
insert into Content values(670,7,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf 
………………省略部分输出信息………………
113 
114 #
115 # DocumentRoot: The directory out of which you will serve your
116 # documents. By default, all requests are taken from this directory, bu t
117 # symbolic links and aliases may be used to point to other locations.
118 #
119 DocumentRoot "/home/wwwroot"
120 
121 #
122 # Relax access to content within /var/www.
123 #
124 <Directory "/home/wwwroot">
125 AllowOverride None
126 # Allow open access:
127 Require all granted
128 </Directory>
………………省略部分输出信息………………
[root@linuxprobe ~]#
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf 
………………省略部分输出信息………………
113 
114 #
115 # DocumentRoot: The directory out of which you will serve your
116 # documents. By default, all requests are taken from this directory, bu t
117 # symbolic links and aliases may be used to point to other locations.
118 #
119 DocumentRoot "/home/wwwroot"
120 
121 #
122 # Relax access to content within /var/www.
123 #
124 <Directory "/home/wwwroot">
125 AllowOverride None
126 # Allow open access:
127 Require all granted
128 </Directory>
………………省略部分输出信息………………
[root@linuxprobe ~]#
',0,'alvin',curdate());
insert into Content values(671,7,'p',41,'{}',' BOLD[  第3步： ]BOLD 重新启动httpd服务程序并验证效果，浏览器刷新页面后的内容如图所示。奇怪！为什么看到了httpd服务程序的默认首页面？按理来说，只有在网站的首页面文件不存在或者用户权限不足时，才显示httpd服务程序的默认首页面。我们在尝试访问http://127.0.0.1/index.html页面时，竟然发现页面中显示“Forbidden,You don\'t have permission to access /index.html on this server.”。而这一切正是SELinux在捣鬼。',' BOLD[  第3步： ]BOLD 重新启动httpd服务程序并验证效果，浏览器刷新页面后的内容如图所示。奇怪！为什么看到了httpd服务程序的默认首页面？按理来说，只有在网站的首页面文件不存在或者用户权限不足时，才显示httpd服务程序的默认首页面。我们在尝试访问http://127.0.0.1/index.html页面时，竟然发现页面中显示“Forbidden,You don\'t have permission to access /index.html on this server.”。而这一切正是SELinux在捣鬼。',0,'alvin',curdate());
insert into Content values(672,7,'pre',42,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(673,7,'image',43,'{"alt": "firefox_test", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_firefox_test.png", "width": "676"}','/static/img/linux/linux_firefox_test.png','/static/img/linux/linux_firefox_test.png',0,'alvin',curdate());
insert into Content values(674,7,'h2',44,'{}','SELinux安全子系统','SELinux安全子系统',0,'alvin',curdate());
insert into Content values(675,7,'p',45,'{}','        SELinux（Security-Enhanced Linux）是美国国家安全局在Linux开源社区的帮助下开发的一个强制访问控制（MAC，Mandatory Access Control）的安全子系统。RHEL 7系统使用SELinux技术的目的是为了让各个服务进程都受到约束，使其仅获取到本应获取的资源。','        SELinux（Security-Enhanced Linux）是美国国家安全局在Linux开源社区的帮助下开发的一个强制访问控制（MAC，Mandatory Access Control）的安全子系统。RHEL 7系统使用SELinux技术的目的是为了让各个服务进程都受到约束，使其仅获取到本应获取的资源。',0,'alvin',curdate());
insert into Content values(676,7,'p',46,'{}','        例如，您在自己的电脑上下载了一个美图软件，当您全神贯注地使用它给照片进行美颜的时候，它却在后台默默监听着浏览器中输入的密码信息，而这显然不应该是它应做的事情（哪怕是访问电脑中的图片资源，都情有可原）。SELinux安全子系统就是为了杜绝此类情况而设计的，它能够从多方面监控违法行为：对服务程序的功能进行限制（SELinux域限制可以确保服务程序做不了出格的事情）；对文件资源的访问限制（SELinux安全上下文确保文件资源只能被其所属的服务程序进行访问）。','        例如，您在自己的电脑上下载了一个美图软件，当您全神贯注地使用它给照片进行美颜的时候，它却在后台默默监听着浏览器中输入的密码信息，而这显然不应该是它应做的事情（哪怕是访问电脑中的图片资源，都情有可原）。SELinux安全子系统就是为了杜绝此类情况而设计的，它能够从多方面监控违法行为：对服务程序的功能进行限制（SELinux域限制可以确保服务程序做不了出格的事情）；对文件资源的访问限制（SELinux安全上下文确保文件资源只能被其所属的服务程序进行访问）。',0,'alvin',curdate());
insert into Content values(677,7,'p',47,'{}','        经常会把“SELinux域”和“SELinux安全上下文”称为是Linux系统中的双保险，系统内的服务程序只能规规矩矩地拿到自己所应该获取的资源，这样即便黑客入侵了系统，也无法利用系统内的服务程序进行越权操作。但是，非常可惜的是，SELinux服务比较复杂，配置难度也很大，加之很多运维人员对这项技术理解不深，从而导致很多服务器在部署好Linux系统后直接将SELinux禁用了；这绝对不是明智的选择。','        经常会把“SELinux域”和“SELinux安全上下文”称为是Linux系统中的双保险，系统内的服务程序只能规规矩矩地拿到自己所应该获取的资源，这样即便黑客入侵了系统，也无法利用系统内的服务程序进行越权操作。但是，非常可惜的是，SELinux服务比较复杂，配置难度也很大，加之很多运维人员对这项技术理解不深，从而导致很多服务器在部署好Linux系统后直接将SELinux禁用了；这绝对不是明智的选择。',0,'alvin',curdate());
insert into Content values(678,7,'p',48,'{}','        SELinux服务有三种配置模式，具体如下。','        SELinux服务有三种配置模式，具体如下。',0,'alvin',curdate());
insert into Content values(679,7,'ul',49,'{}','enforcing：强制启用安全策略模式，将拦截服务的不合法请求。
permissive：遇到服务越权访问时，只发出警告而不强制拦截。
disabled：对于越权的行为不警告也不拦截。','enforcing：强制启用安全策略模式，将拦截服务的不合法请求。
permissive：遇到服务越权访问时，只发出警告而不强制拦截。
disabled：对于越权的行为不警告也不拦截。',0,'alvin',curdate());
insert into Content values(680,7,'p',50,'{}','        本章所有实验都是在强制启用安全策略模式下进行的，虽然在禁用SELinux服务后确实能够减少报错几率，但这在生产环境中相当不推荐。建议大家检查一下自己的系统，查看SELinux服务主配置文件中定义的默认状态。如果是permissive或disabled，建议赶紧修改为enforcing。','        本章所有实验都是在强制启用安全策略模式下进行的，虽然在禁用SELinux服务后确实能够减少报错几率，但这在生产环境中相当不推荐。建议大家检查一下自己的系统，查看SELinux服务主配置文件中定义的默认状态。如果是permissive或disabled，建议赶紧修改为enforcing。',0,'alvin',curdate());
insert into Content values(681,7,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/selinux/config
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
# enforcing - SELinux security policy is enforced.
# permissive - SELinux prints warnings instead of enforcing.
# disabled - No SELinux policy is loaded.
SELINUX=enforcing
# SELINUXTYPE= can take one of these two values:
# targeted - Targeted processes are protected,
# minimum - Modification of targeted policy. Only selected processes are protected. 
# mls - Multi Level Security protection.
SELINUXTYPE=targeted
','[root@linuxprobe ~]# vim /etc/selinux/config
# This file controls the state of SELinux on the system.
# SELINUX= can take one of these three values:
# enforcing - SELinux security policy is enforced.
# permissive - SELinux prints warnings instead of enforcing.
# disabled - No SELinux policy is loaded.
SELINUX=enforcing
# SELINUXTYPE= can take one of these two values:
# targeted - Targeted processes are protected,
# minimum - Modification of targeted policy. Only selected processes are protected. 
# mls - Multi Level Security protection.
SELINUXTYPE=targeted
',0,'alvin',curdate());
insert into Content values(682,7,'p',52,'{}','        SELinux服务的主配置文件中，定义的是SELinux的默认运行状态，可以将其理解为系统重启后的状态，因此它不会在更改后立即生效。可以使用getenforce命令获得当前SELinux服务的运行模式：','        SELinux服务的主配置文件中，定义的是SELinux的默认运行状态，可以将其理解为系统重启后的状态，因此它不会在更改后立即生效。可以使用getenforce命令获得当前SELinux服务的运行模式：',0,'alvin',curdate());
insert into Content values(683,7,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# getenforce 
Enforcing
','[root@linuxprobe ~]# getenforce 
Enforcing
',0,'alvin',curdate());
insert into Content values(684,7,'p',54,'{}','        为了确认上图所示的结果确实是因为SELinux而导致的，可以用setenforce [0|1]命令修改SELinux当前的运行模式（0为禁用，1为启用）。注意，这种修改只是临时的，在系统重启后就会失效：','        为了确认上图所示的结果确实是因为SELinux而导致的，可以用setenforce [0|1]命令修改SELinux当前的运行模式（0为禁用，1为启用）。注意，这种修改只是临时的，在系统重启后就会失效：',0,'alvin',curdate());
insert into Content values(685,7,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# setenforce 0
[root@linuxprobe ~]# getenforce
Permissive
','[root@linuxprobe ~]# setenforce 0
[root@linuxprobe ~]# getenforce
Permissive
',0,'alvin',curdate());
insert into Content values(686,7,'p',56,'{}','        再次刷新网页，就会看到正常的网页内容了，如下图所示。可见，问题确实是出在了SELinux服务上面。','        再次刷新网页，就会看到正常的网页内容了，如下图所示。可见，问题确实是出在了SELinux服务上面。',0,'alvin',curdate());
insert into Content values(687,7,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe wwwroot]# firefox
','[root@linuxprobe wwwroot]# firefox
',0,'alvin',curdate());
insert into Content values(688,7,'image',58,'{"alt": "firefox_reset", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_firefox_reset.png", "width": "590"}','/static/img/linux/linux_firefox_reset.png','/static/img/linux/linux_firefox_reset.png',0,'alvin',curdate());
insert into Content values(689,7,'p',59,'{}','        现在，我们来回忆一下前面的操作中到底是哪里出问题了呢？','        现在，我们来回忆一下前面的操作中到底是哪里出问题了呢？',0,'alvin',curdate());
insert into Content values(690,7,'p',60,'{}','        httpd服务程序的功能是允许用户访问网站内容，因此SELinux肯定会默认放行用户对网站的请求操作。但是，我们将网站数据的默认保存目录修改为了/home/wwwroot，而这就产生问题了。在6.1小节中讲到，/home目录是用来存放普通用户的家目录数据的，而现在，httpd提供的网站服务却要去获取普通用户家目录中的数据了，这显然违反了SELinux的监管原则。','        httpd服务程序的功能是允许用户访问网站内容，因此SELinux肯定会默认放行用户对网站的请求操作。但是，我们将网站数据的默认保存目录修改为了/home/wwwroot，而这就产生问题了。在6.1小节中讲到，/home目录是用来存放普通用户的家目录数据的，而现在，httpd提供的网站服务却要去获取普通用户家目录中的数据了，这显然违反了SELinux的监管原则。',0,'alvin',curdate());
insert into Content values(691,7,'p',61,'{}','        现在，我们把SELinux服务恢复到强制启用安全策略模式，然后分别查看原始网站数据的保存目录与当前网站数据的保存目录是否拥有不同的SELinux安全上下文值：','        现在，我们把SELinux服务恢复到强制启用安全策略模式，然后分别查看原始网站数据的保存目录与当前网站数据的保存目录是否拥有不同的SELinux安全上下文值：',0,'alvin',curdate());
insert into Content values(692,7,'pre',62,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# setenforce 1
[root@linuxprobe ~]# ls -Zd /var/www/html
drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /var/www/html
[root@linuxprobe ~]# ls -Zd /home/wwwroot
drwxrwxrwx. root root unconfined_u:object_r:home_root_t:s0 /home/wwwroot
','[root@linuxprobe ~]# setenforce 1
[root@linuxprobe ~]# ls -Zd /var/www/html
drwxr-xr-x. root root system_u:object_r:httpd_sys_content_t:s0 /var/www/html
[root@linuxprobe ~]# ls -Zd /home/wwwroot
drwxrwxrwx. root root unconfined_u:object_r:home_root_t:s0 /home/wwwroot
',0,'alvin',curdate());
insert into Content values(693,7,'p',63,'{}','        在文件上设置的SELinux安全上下文是由用户段、角色段以及类型段等多个信息项共同组成的。其中，用户段system_u代表系统进程的身份，角色段object_r代表文件目录的角色，类型段httpd_sys_content_t代表网站服务的系统文件。由于SELinux服务实在太过复杂，现在大家只需要简单熟悉SELinux服务的作用就可以，刘遄老师未来会在本书的进阶篇中单独拿出一个章节仔细讲解SELinux服务。','        在文件上设置的SELinux安全上下文是由用户段、角色段以及类型段等多个信息项共同组成的。其中，用户段system_u代表系统进程的身份，角色段object_r代表文件目录的角色，类型段httpd_sys_content_t代表网站服务的系统文件。由于SELinux服务实在太过复杂，现在大家只需要简单熟悉SELinux服务的作用就可以，刘遄老师未来会在本书的进阶篇中单独拿出一个章节仔细讲解SELinux服务。',0,'alvin',curdate());
insert into Content values(694,7,'p',64,'{}','        针对当前这种情况，我们只需要使用semanage命令，将当前网站目录/home/wwwroot的SELinux安全上下文修改为跟原始网站目录的一样就可以了。','        针对当前这种情况，我们只需要使用semanage命令，将当前网站目录/home/wwwroot的SELinux安全上下文修改为跟原始网站目录的一样就可以了。',0,'alvin',curdate());
insert into Content values(695,7,'p',65,'{}','semanage命令','semanage命令',0,'alvin',curdate());
insert into Content values(696,7,'p',66,'{}','        semanage命令用于管理SELinux的策略，格式为“semanage [选项] [文件]”。','        semanage命令用于管理SELinux的策略，格式为“semanage [选项] [文件]”。',0,'alvin',curdate());
insert into Content values(697,7,'p',67,'{}','        SELinux服务极大地提升了Linux系统的安全性，将用户权限牢牢地锁在笼子里。semanage命令不仅能够像传统chcon命令那样—设置文件、目录的策略，还可以管理网络端口、消息接口（这些新特性将在本章后文中涵盖）。使用semanage命令时，经常用到的几个参数及其功能如下所示：','        SELinux服务极大地提升了Linux系统的安全性，将用户权限牢牢地锁在笼子里。semanage命令不仅能够像传统chcon命令那样—设置文件、目录的策略，还可以管理网络端口、消息接口（这些新特性将在本章后文中涵盖）。使用semanage命令时，经常用到的几个参数及其功能如下所示：',0,'alvin',curdate());
insert into Content values(698,7,'ul',68,'{}','-l参数用于查询；
-a参数用于添加；
-m参数用于修改；
-d参数用于删除。','-l参数用于查询；
-a参数用于添加；
-m参数用于修改；
-d参数用于删除。',0,'alvin',curdate());
insert into Content values(699,7,'p',69,'{}','        例如，可以向新的网站数据目录中新添加一条SELinux安全上下文，让这个目录以及里面的所有文件能够被httpd服务程序所访问到：','        例如，可以向新的网站数据目录中新添加一条SELinux安全上下文，让这个目录以及里面的所有文件能够被httpd服务程序所访问到：',0,'alvin',curdate());
insert into Content values(700,7,'pre',70,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/*
','[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/*
',0,'alvin',curdate());
insert into Content values(701,7,'p',71,'{}','        注意，执行上述设置之后，还无法立即访问网站，还需要使用restorecon命令将设置好的SELinux安全上下文立即生效。在使用restorecon命令时，可以加上-Rv参数对指定的目录进行递归操作，以及显示SELinux安全上下文的修改过程。最后，再次刷新页面，就可以正常看到网页内容了，结果如图所示。','        注意，执行上述设置之后，还无法立即访问网站，还需要使用restorecon命令将设置好的SELinux安全上下文立即生效。在使用restorecon命令时，可以加上-Rv参数对指定的目录进行递归操作，以及显示SELinux安全上下文的修改过程。最后，再次刷新页面，就可以正常看到网页内容了，结果如图所示。',0,'alvin',curdate());
insert into Content values(702,7,'pre',72,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# restorecon -Rv /home/wwwroot/
restorecon reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# restorecon -Rv /home/wwwroot/
restorecon reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(703,7,'image',73,'{"alt": "firefox_reset", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_firefox_reset.png", "width": "590"}','/static/img/linux/linux_firefox_reset.png','/static/img/linux/linux_firefox_reset.png',0,'alvin',curdate());
insert into Content values(704,7,'p',74,'{}','        真可谓是一波三折！原本认为只要把httpd服务程序配置妥当就可以大功告成，结果却反复受到了SELinux安全上下文的限制。所以，建议大家在配置httpd服务程序时，一定要细心、耐心。一旦成功配妥httpd服务程序之后，就会发现SELinux服务并没有那么难。','        真可谓是一波三折！原本认为只要把httpd服务程序配置妥当就可以大功告成，结果却反复受到了SELinux安全上下文的限制。所以，建议大家在配置httpd服务程序时，一定要细心、耐心。一旦成功配妥httpd服务程序之后，就会发现SELinux服务并没有那么难。',0,'alvin',curdate());
insert into Content values(705,7,'p',75,'{}','        因为在RHCSA、RHCE或RHCA考试中，都需要先重启您的机器然后再执行判分脚本。因此，建议读者在日常工作中要养成将所需服务添加到开机启动项中的习惯，比如这里就需要添加systemctl enable httpd命令。','        因为在RHCSA、RHCE或RHCA考试中，都需要先重启您的机器然后再执行判分脚本。因此，建议读者在日常工作中要养成将所需服务添加到开机启动项中的习惯，比如这里就需要添加systemctl enable httpd命令。',0,'alvin',curdate());
insert into Content values(706,7,'h2',76,'{}','个人用户主页功能','个人用户主页功能',0,'alvin',curdate());
insert into Content values(707,7,'p',77,'{}','        如果想在系统中为每位用户建立一个独立的网站，通常的方法是基于虚拟网站主机功能来部署多个网站。但这个工作会让管理员苦不堪言（尤其是用户数量很庞大时），而且在用户自行管理网站时，还会碰到各种权限限制，需要为此做很多额外的工作。其实，httpd服务程序提供的个人用户主页功能完全可以胜任这个工作。该功能可以让系统内所有的用户在自己的家目录中管理个人的网站，而且访问起来也非常容易。','        如果想在系统中为每位用户建立一个独立的网站，通常的方法是基于虚拟网站主机功能来部署多个网站。但这个工作会让管理员苦不堪言（尤其是用户数量很庞大时），而且在用户自行管理网站时，还会碰到各种权限限制，需要为此做很多额外的工作。其实，httpd服务程序提供的个人用户主页功能完全可以胜任这个工作。该功能可以让系统内所有的用户在自己的家目录中管理个人的网站，而且访问起来也非常容易。',0,'alvin',curdate());
insert into Content values(708,7,'p',78,'{}',' BOLD[  第1步： ]BOLD 在httpd服务程序中，默认没有开启个人用户主页功能。为此，我们需要编辑下面的配置文件，然后在第17行的UserDir disabled参数前面加上井号（#），表示让httpd服务程序开启个人用户主页功能；同时再把第24行的UserDir public_html参数前面的井号（#）去掉（UserDir参数表示网站数据在用户家目录中的保存目录名称，即public_html目录）。最后，在修改完毕后记得保存。',' BOLD[  第1步： ]BOLD 在httpd服务程序中，默认没有开启个人用户主页功能。为此，我们需要编辑下面的配置文件，然后在第17行的UserDir disabled参数前面加上井号（#），表示让httpd服务程序开启个人用户主页功能；同时再把第24行的UserDir public_html参数前面的井号（#）去掉（UserDir参数表示网站数据在用户家目录中的保存目录名称，即public_html目录）。最后，在修改完毕后记得保存。',0,'alvin',curdate());
insert into Content values(709,7,'pre',79,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf.d/userdir.conf 
 1 #
 2 # UserDir: The name of the directory that is appended onto a user\'s home
 3 # directory if a ~user request is received.
 4 #
 5 # The path to the end user account \'public_html\' directory must be
 6 # accessible to the webserver userid. This usually means that ~userid
 7 # must have permissions of 711, ~userid/public_html must have permissions
 8 # of 755, and documents contained therein must be world-readable.
 9 # Otherwise, the client will only receive a "403 Forbidden" message.
 10 #
 11 <IfModule mod_userdir.c>
 12 #
 13 # UserDir is disabled by default since it can confirm the presence
 14 # of a username on the system (depending on home directory
 15 # permissions).
 16 #
 17 # UserDir disabled
 18 
 19 #
 20 # To enable requests to /~user/ to serve the user\'s public_html
 21 # directory, remove the "UserDir disabled" line above, and uncomment
 22 # the following line instead:
 23 # 
 24   UserDir public_html
 25 </IfModule>
 26 
 27 #
 28 # Control access to UserDir directories. The following is an example
 29 # for a site where these directories are restricted to read-only.
 30 #
 31 <Directory "/home/*/public_html">
 32 AllowOverride FileInfo AuthConfig Limit Indexes
 33 Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
 34 Require method GET POST OPTIONS
 35 </Directory>
 ','[root@linuxprobe ~]# vim /etc/httpd/conf.d/userdir.conf 
 1 #
 2 # UserDir: The name of the directory that is appended onto a user\'s home
 3 # directory if a ~user request is received.
 4 #
 5 # The path to the end user account \'public_html\' directory must be
 6 # accessible to the webserver userid. This usually means that ~userid
 7 # must have permissions of 711, ~userid/public_html must have permissions
 8 # of 755, and documents contained therein must be world-readable.
 9 # Otherwise, the client will only receive a "403 Forbidden" message.
 10 #
 11 <IfModule mod_userdir.c>
 12 #
 13 # UserDir is disabled by default since it can confirm the presence
 14 # of a username on the system (depending on home directory
 15 # permissions).
 16 #
 17 # UserDir disabled
 18 
 19 #
 20 # To enable requests to /~user/ to serve the user\'s public_html
 21 # directory, remove the "UserDir disabled" line above, and uncomment
 22 # the following line instead:
 23 # 
 24   UserDir public_html
 25 </IfModule>
 26 
 27 #
 28 # Control access to UserDir directories. The following is an example
 29 # for a site where these directories are restricted to read-only.
 30 #
 31 <Directory "/home/*/public_html">
 32 AllowOverride FileInfo AuthConfig Limit Indexes
 33 Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
 34 Require method GET POST OPTIONS
 35 </Directory>
 ',0,'alvin',curdate());
insert into Content values(710,7,'p',80,'{}',' BOLD[  第2步： ]BOLD 在用户家目录中建立用于保存网站数据的目录及首页面文件。另外，还需要把家目录的权限修改为755，保证其他人也有权限读取里面的内容。',' BOLD[  第2步： ]BOLD 在用户家目录中建立用于保存网站数据的目录及首页面文件。另外，还需要把家目录的权限修改为755，保证其他人也有权限读取里面的内容。',0,'alvin',curdate());
insert into Content values(711,7,'pre',81,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe home]# su - linuxprobe
Last login: Fri May 22 13:17:37 CST 2017 on :0
[linuxprobe@linuxprobe ~]$ mkdir public_html
[linuxprobe@linuxprobe ~]$ echo "This is linuxprobe\'s website" > public_html/index.html
[linuxprobe@linuxprobe ~]$ chmod -Rf 755 /home/linuxprobe
','[root@linuxprobe home]# su - linuxprobe
Last login: Fri May 22 13:17:37 CST 2017 on :0
[linuxprobe@linuxprobe ~]$ mkdir public_html
[linuxprobe@linuxprobe ~]$ echo "This is linuxprobe\'s website" > public_html/index.html
[linuxprobe@linuxprobe ~]$ chmod -Rf 755 /home/linuxprobe
',0,'alvin',curdate());
insert into Content values(712,7,'p',82,'{}',' BOLD[  第3步： ]BOLD 重新启动httpd服务程序，在浏览器的地址栏中输入网址，其格式为“网址/~用户名”（其中的波浪号是必需的，而且网址、波浪号、用户名之间没有空格），从理论上来讲就可以看到用户的个人网站了。不出所料的是，系统显示报错页面，如图所示。这一定还是SELinux惹的祸。',' BOLD[  第3步： ]BOLD 重新启动httpd服务程序，在浏览器的地址栏中输入网址，其格式为“网址/~用户名”（其中的波浪号是必需的，而且网址、波浪号、用户名之间没有空格），从理论上来讲就可以看到用户的个人网站了。不出所料的是，系统显示报错页面，如图所示。这一定还是SELinux惹的祸。',0,'alvin',curdate());
insert into Content values(713,7,'image',83,'{"alt": "apache_forbidden", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_apache_forbidden.png", "width": "590"}','/static/img/linux/linux_apache_forbidden.png','/static/img/linux/linux_apache_forbidden.png',0,'alvin',curdate());
insert into Content values(714,7,'p',84,'{}',' BOLD[  第4步： ]BOLD 思考这次报错的原因是什么。httpd服务程序在提供个人用户主页功能时，该用户的网站数据目录本身就应该是存放到与这位用户对应的家目录中的，所以应该不需要修改家目录的SELinux安全上下文。但是，前文还讲到了SELinux域的概念。SELinux域确保服务程序不能执行违规的操作，只能本本分分地为用户提供服务。httpd服务中突然开启的这项个人用户主页功能到底有没有被SELinux域默认允许呢？',' BOLD[  第4步： ]BOLD 思考这次报错的原因是什么。httpd服务程序在提供个人用户主页功能时，该用户的网站数据目录本身就应该是存放到与这位用户对应的家目录中的，所以应该不需要修改家目录的SELinux安全上下文。但是，前文还讲到了SELinux域的概念。SELinux域确保服务程序不能执行违规的操作，只能本本分分地为用户提供服务。httpd服务中突然开启的这项个人用户主页功能到底有没有被SELinux域默认允许呢？',0,'alvin',curdate());
insert into Content values(715,7,'p',85,'{}','接下来使用getsebool命令查询并过滤出所有与HTTP协议相关的安全策略。其中，off为禁止状态，on为允许状态。','接下来使用getsebool命令查询并过滤出所有与HTTP协议相关的安全策略。其中，off为禁止状态，on为允许状态。',0,'alvin',curdate());
insert into Content values(716,7,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# getsebool -a | grep http
httpd_anon_write --> off
httpd_builtin_scripting --> on
httpd_can_check_spam --> off
httpd_can_connect_ftp --> off
httpd_can_connect_ldap --> off
httpd_can_connect_mythtv --> off
httpd_can_connect_zabbix --> off
httpd_can_network_connect --> off
httpd_can_network_connect_cobbler --> off
httpd_can_network_connect_db --> off
httpd_can_network_memcache --> off
httpd_can_network_relay --> off
httpd_can_sendmail --> off
httpd_dbus_avahi --> off
httpd_dbus_sssd --> off
httpd_dontaudit_search_dirs --> off
httpd_enable_cgi --> on
httpd_enable_ftp_server --> off
httpd_enable_homedirs --> off
httpd_execmem --> off
httpd_graceful_shutdown --> on
httpd_manage_ipa --> off
httpd_mod_auth_ntlm_winbind --> off
httpd_mod_auth_pam --> off
httpd_read_user_content --> off
httpd_run_stickshift --> off
httpd_serve_cobbler_files --> off
httpd_setrlimit --> off
httpd_ssi_exec --> off
httpd_sys_script_anon_write --> off
httpd_tmp_exec --> off
httpd_tty_comm --> off
httpd_unified --> off
httpd_use_cifs --> off
httpd_use_fusefs --> off
httpd_use_gpg --> off
httpd_use_nfs --> off
httpd_use_openstack --> off
httpd_use_sasl --> off
httpd_verify_dns --> off
named_tcp_bind_http_port --> off
prosody_bind_http_port --> off
','[root@linuxprobe ~]# getsebool -a | grep http
httpd_anon_write --> off
httpd_builtin_scripting --> on
httpd_can_check_spam --> off
httpd_can_connect_ftp --> off
httpd_can_connect_ldap --> off
httpd_can_connect_mythtv --> off
httpd_can_connect_zabbix --> off
httpd_can_network_connect --> off
httpd_can_network_connect_cobbler --> off
httpd_can_network_connect_db --> off
httpd_can_network_memcache --> off
httpd_can_network_relay --> off
httpd_can_sendmail --> off
httpd_dbus_avahi --> off
httpd_dbus_sssd --> off
httpd_dontaudit_search_dirs --> off
httpd_enable_cgi --> on
httpd_enable_ftp_server --> off
httpd_enable_homedirs --> off
httpd_execmem --> off
httpd_graceful_shutdown --> on
httpd_manage_ipa --> off
httpd_mod_auth_ntlm_winbind --> off
httpd_mod_auth_pam --> off
httpd_read_user_content --> off
httpd_run_stickshift --> off
httpd_serve_cobbler_files --> off
httpd_setrlimit --> off
httpd_ssi_exec --> off
httpd_sys_script_anon_write --> off
httpd_tmp_exec --> off
httpd_tty_comm --> off
httpd_unified --> off
httpd_use_cifs --> off
httpd_use_fusefs --> off
httpd_use_gpg --> off
httpd_use_nfs --> off
httpd_use_openstack --> off
httpd_use_sasl --> off
httpd_verify_dns --> off
named_tcp_bind_http_port --> off
prosody_bind_http_port --> off
',0,'alvin',curdate());
insert into Content values(717,7,'p',87,'{}','        面对如此多的SELinux域安全策略规则，实在没有必要逐个理解它们，我们只要能通过名字大致猜测出相关的策略用途就足够了。比如，想要开启httpd服务的个人用户主页功能，那么用到的SELinux域安全策略应该是httpd_enable_homedirs吧？大致确定后就可以用setsebool命令来修改SELinux策略中各条规则的布尔值了。大家一定要记得在setsebool命令后面加上-P参数，让修改后的SELinux策略规则永久生效且立即生效。随后刷新网页，其效果如下图所示。','        面对如此多的SELinux域安全策略规则，实在没有必要逐个理解它们，我们只要能通过名字大致猜测出相关的策略用途就足够了。比如，想要开启httpd服务的个人用户主页功能，那么用到的SELinux域安全策略应该是httpd_enable_homedirs吧？大致确定后就可以用setsebool命令来修改SELinux策略中各条规则的布尔值了。大家一定要记得在setsebool命令后面加上-P参数，让修改后的SELinux策略规则永久生效且立即生效。随后刷新网页，其效果如下图所示。',0,'alvin',curdate());
insert into Content values(718,7,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# setsebool -P httpd_enable_homedirs=on
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# setsebool -P httpd_enable_homedirs=on
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(719,7,'image',89,'{"alt": "apache_website", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_apache_website.png", "width": "590"}','/static/img/linux/linux_apache_website.png','/static/img/linux/linux_apache_website.png',0,'alvin',curdate());
insert into Content values(720,7,'p',90,'{}','        有时，网站的拥有者并不希望直接将网页内容显示出来，只想让通过身份验证的用户访客看到里面的内容，这时就可以在网站中添加口令功能了。','        有时，网站的拥有者并不希望直接将网页内容显示出来，只想让通过身份验证的用户访客看到里面的内容，这时就可以在网站中添加口令功能了。',0,'alvin',curdate());
insert into Content values(721,7,'p',91,'{}',' BOLD[  第1步： ]BOLD 先使用htpasswd命令生成密码数据库。-c参数表示第一次生成；后面再分别添加密码数据库的存放文件，以及验证要用到的用户名称（该用户不必是系统中已有的本地账户）。',' BOLD[  第1步： ]BOLD 先使用htpasswd命令生成密码数据库。-c参数表示第一次生成；后面再分别添加密码数据库的存放文件，以及验证要用到的用户名称（该用户不必是系统中已有的本地账户）。',0,'alvin',curdate());
insert into Content values(722,7,'pre',92,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# htpasswd -c /etc/httpd/passwd linuxprobe
New password:此处输入用于网页验证的密码
Re-type new password:再输入一遍进行确认
Adding password for user linuxprobe
','[root@linuxprobe ~]# htpasswd -c /etc/httpd/passwd linuxprobe
New password:此处输入用于网页验证的密码
Re-type new password:再输入一遍进行确认
Adding password for user linuxprobe
',0,'alvin',curdate());
insert into Content values(723,7,'p',93,'{}',' BOLD[  第2步： ]BOLD 编辑个人用户主页功能的配置文件。把第31～35行的参数信息修改成下列内容，其中井号（#）开头的内容为刘遄老师添加的注释信息，可将其忽略。随后保存并退出配置文件，重启httpd服务程序即可生效。',' BOLD[  第2步： ]BOLD 编辑个人用户主页功能的配置文件。把第31～35行的参数信息修改成下列内容，其中井号（#）开头的内容为刘遄老师添加的注释信息，可将其忽略。随后保存并退出配置文件，重启httpd服务程序即可生效。',0,'alvin',curdate());
insert into Content values(724,7,'pre',94,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe home]# su - linuxprobe
Last login: Fri May 22 13:17:37 CST 2017 on :0
[linuxprobe@linuxprobe ~]$ mkdir public_html
[linuxprobe@linuxprobe ~]$ echo "This is linuxprobe\'s website" > public_html/index.html
[linuxprobe@linuxprobe ~]$ chmod -Rf 755 /home/linuxprobe
','[root@linuxprobe home]# su - linuxprobe
Last login: Fri May 22 13:17:37 CST 2017 on :0
[linuxprobe@linuxprobe ~]$ mkdir public_html
[linuxprobe@linuxprobe ~]$ echo "This is linuxprobe\'s website" > public_html/index.html
[linuxprobe@linuxprobe ~]$ chmod -Rf 755 /home/linuxprobe
',0,'alvin',curdate());
insert into Content values(725,7,'p',95,'{}',' BOLD[  第2步： ]BOLD 在用户家目录中建立用于保存网站数据的目录及首页面文件。另外，还需要把家目录的权限修改为755，保证其他人也有权限读取里面的内容。',' BOLD[  第2步： ]BOLD 在用户家目录中建立用于保存网站数据的目录及首页面文件。另外，还需要把家目录的权限修改为755，保证其他人也有权限读取里面的内容。',0,'alvin',curdate());
insert into Content values(726,7,'pre',96,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf.d/userdir.conf
27 #
28 # Control access to UserDir directories. The following is an example
29 # for a site where these directories are restricted to read-only.
30 #
31 <Directory "/home/*/public_html">
32 AllowOverride all
#刚刚生成出来的密码验证文件保存路径
33 authuserfile "/etc/httpd/passwd"
#当用户尝试访问个人用户网站时的提示信息
34 authname "My privately website"
35 authtype basic
#用户进行账户密码登录时需要验证的用户名称
36 require user linuxprobe
37 </Directory>
[root@linuxprobe ~]# systemctl restart httpd
','[root@linuxprobe ~]# vim /etc/httpd/conf.d/userdir.conf
27 #
28 # Control access to UserDir directories. The following is an example
29 # for a site where these directories are restricted to read-only.
30 #
31 <Directory "/home/*/public_html">
32 AllowOverride all
#刚刚生成出来的密码验证文件保存路径
33 authuserfile "/etc/httpd/passwd"
#当用户尝试访问个人用户网站时的提示信息
34 authname "My privately website"
35 authtype basic
#用户进行账户密码登录时需要验证的用户名称
36 require user linuxprobe
37 </Directory>
[root@linuxprobe ~]# systemctl restart httpd
',0,'alvin',curdate());
insert into Content values(727,7,'p',97,'{}','此后，当用户再想访问某个用户的个人网站时，就必须要输入账户和密码才能正常访问了。另外，验证时使用的账户和密码是用htpasswd命令生成的专门用于网站登录的口令密码，而不是系统中的用户密码，请不要搞错了。登录界面如下图所示。','此后，当用户再想访问某个用户的个人网站时，就必须要输入账户和密码才能正常访问了。另外，验证时使用的账户和密码是用htpasswd命令生成的专门用于网站登录的口令密码，而不是系统中的用户密码，请不要搞错了。登录界面如下图所示。',0,'alvin',curdate());
insert into Content values(728,7,'image',98,'{"alt": "apache_auth", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_apache_auth.png", "width": "676"}','/static/img/linux/linux_apache_auth.png','/static/img/linux/linux_apache_auth.png',0,'alvin',curdate());
insert into Content values(729,7,'h2',99,'{}','虚拟网站主机功能','虚拟网站主机功能',0,'alvin',curdate());
insert into Content values(730,7,'p',100,'{}','        如果每台运行Linux系统的服务器上只能运行一个网站，那么人气低、流量小的草根站长就要被迫承担着高昂的服务器租赁费用了，这显然也会造成硬件资源的浪费。在虚拟专用服务器（Virtual Private Server，VPS）与云计算技术诞生以前，IDC服务供应商为了能够更充分地利用服务器资源，同时也为了降低购买门槛，于是纷纷启用了虚拟主机功能。','        如果每台运行Linux系统的服务器上只能运行一个网站，那么人气低、流量小的草根站长就要被迫承担着高昂的服务器租赁费用了，这显然也会造成硬件资源的浪费。在虚拟专用服务器（Virtual Private Server，VPS）与云计算技术诞生以前，IDC服务供应商为了能够更充分地利用服务器资源，同时也为了降低购买门槛，于是纷纷启用了虚拟主机功能。',0,'alvin',curdate());
insert into Content values(731,7,'p',101,'{}','        利用虚拟主机功能，可以把一台处于运行状态的物理服务器分割成多个“虚拟的服务器”。但是，该技术无法实现目前云主机技术的硬件资源隔离，让这些虚拟的服务器共同使用物理服务器的硬件资源，供应商只能限制硬盘的使用空间大小。出于各种考虑的因素（主要是价格低廉），目前依然有很多企业或个人站长在使用虚拟主机的形式来部署网站。','        利用虚拟主机功能，可以把一台处于运行状态的物理服务器分割成多个“虚拟的服务器”。但是，该技术无法实现目前云主机技术的硬件资源隔离，让这些虚拟的服务器共同使用物理服务器的硬件资源，供应商只能限制硬盘的使用空间大小。出于各种考虑的因素（主要是价格低廉），目前依然有很多企业或个人站长在使用虚拟主机的形式来部署网站。',0,'alvin',curdate());
insert into Content values(732,7,'p',102,'{}','        Apache的虚拟主机功能是服务器基于用户请求的不同IP地址、主机域名或端口号，实现提供多个网站同时为外部提供访问服务的技术，如图所示，用户请求的资源不同，最终获取到的网页内容也各不相同。如果大家之前没有做过网站，可能不太理解其中的原理，等一会儿搭建出实验环境并看到实验效果之后，您一定就会明白了。','        Apache的虚拟主机功能是服务器基于用户请求的不同IP地址、主机域名或端口号，实现提供多个网站同时为外部提供访问服务的技术，如图所示，用户请求的资源不同，最终获取到的网页内容也各不相同。如果大家之前没有做过网站，可能不太理解其中的原理，等一会儿搭建出实验环境并看到实验效果之后，您一定就会明白了。',0,'alvin',curdate());
insert into Content values(733,7,'p',103,'{}','再次提醒大家，在做每个实验之前请先将虚拟机还原到最初始状态，以免多个实验之间相互产生冲突。','再次提醒大家，在做每个实验之前请先将虚拟机还原到最初始状态，以免多个实验之间相互产生冲突。',0,'alvin',curdate());
insert into Content values(734,7,'image',104,'{"alt": "apache_tabu", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_apache_tabu.png", "width": "676"}','/static/img/linux/linux_apache_tabu.png','/static/img/linux/linux_apache_tabu.png',0,'alvin',curdate());
insert into Content values(735,7,'h3',105,'{}','基于IP地址','基于IP地址',0,'alvin',curdate());
insert into Content values(736,7,'p',106,'{}','        如果一台服务器有多个IP地址，而且每个IP地址与服务器上部署的每个网站一一对应，这样当用户请求访问不同的IP地址时，会访问到不同网站的页面资源。而且，每个网站都有一个独立的IP地址，对搜索引擎优化也大有裨益。因此以这种方式提供虚拟网站主机功能不仅最常见，也受到了网站站长的欢迎（尤其是草根站长）。','        如果一台服务器有多个IP地址，而且每个IP地址与服务器上部署的每个网站一一对应，这样当用户请求访问不同的IP地址时，会访问到不同网站的页面资源。而且，每个网站都有一个独立的IP地址，对搜索引擎优化也大有裨益。因此以这种方式提供虚拟网站主机功能不仅最常见，也受到了网站站长的欢迎（尤其是草根站长）。',0,'alvin',curdate());
insert into Content values(737,7,'p',107,'{}','        在前面分别讲解了用于配置网络的两种方法，大家在实验中和工作中可随意选择。就当前的实验来讲，需要配置的IP地址如下图所示。在配置完毕并重启网卡服务之后，记得检查网络的连通性，确保三个IP地址均可正常访问，如图10-14所示（这很重要，一定要测试好，然后再进行下一步!）。','        在前面分别讲解了用于配置网络的两种方法，大家在实验中和工作中可随意选择。就当前的实验来讲，需要配置的IP地址如下图所示。在配置完毕并重启网卡服务之后，记得检查网络的连通性，确保三个IP地址均可正常访问，如图10-14所示（这很重要，一定要测试好，然后再进行下一步!）。',0,'alvin',curdate());
insert into Content values(738,7,'image',108,'{"alt": "apache_baseip", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_apache_baseip.png", "width": "676"}','/static/img/linux/linux_apache_baseip.png','/static/img/linux/linux_apache_baseip.png',0,'alvin',curdate());
insert into Content values(739,7,'p',109,'{}',' BOLD[  第1步： ]BOLD 分别在/home/wwwroot中创建用于保存不同网站数据的3个目录，并向其中分别写入网站的首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便我们稍后能更直观地检查效果。',' BOLD[  第1步： ]BOLD 分别在/home/wwwroot中创建用于保存不同网站数据的3个目录，并向其中分别写入网站的首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便我们稍后能更直观地检查效果。',0,'alvin',curdate());
insert into Content values(740,7,'image',110,'{"alt": "check_internet_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_check_internet_setting.png", "width": "676"}','/static/img/linux/linux_check_internet_setting.png','/static/img/linux/linux_check_internet_setting.png',0,'alvin',curdate());
insert into Content values(741,7,'pre',111,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir -p /home/wwwroot/10
[root@linuxprobe ~]# mkdir -p /home/wwwroot/20
[root@linuxprobe ~]# mkdir -p /home/wwwroot/30
[root@linuxprobe ~]# echo "IP:192.168.10.10" > /home/wwwroot/10/index.html
[root@linuxprobe ~]# echo "IP:192.168.10.20" > /home/wwwroot/20/index.html
[root@linuxprobe ~]# echo "IP:192.168.10.30" > /home/wwwroot/30/index.html
','[root@linuxprobe ~]# mkdir -p /home/wwwroot/10
[root@linuxprobe ~]# mkdir -p /home/wwwroot/20
[root@linuxprobe ~]# mkdir -p /home/wwwroot/30
[root@linuxprobe ~]# echo "IP:192.168.10.10" > /home/wwwroot/10/index.html
[root@linuxprobe ~]# echo "IP:192.168.10.20" > /home/wwwroot/20/index.html
[root@linuxprobe ~]# echo "IP:192.168.10.30" > /home/wwwroot/30/index.html
',0,'alvin',curdate());
insert into Content values(742,7,'p',112,'{}',' BOLD[  第2步： ]BOLD 在httpd服务的配置文件中大约113行处开始，分别追加写入三个基于IP地址的虚拟主机网站参数，然后保存并退出。记得需要重启httpd服务，这些配置才生效。',' BOLD[  第2步： ]BOLD 在httpd服务的配置文件中大约113行处开始，分别追加写入三个基于IP地址的虚拟主机网站参数，然后保存并退出。记得需要重启httpd服务，这些配置才生效。',0,'alvin',curdate());
insert into Content values(743,7,'pre',113,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
113 <VirtualHost 192.168.10.10>
114 DocumentRoot /home/wwwroot/10
115 ServerName www.linuxprobe.com
116 <Directory /home/wwwroot/10 >
117 AllowOverride None
118 Require all granted
119 </Directory>
120 </VirtualHost>
121 <VirtualHost 192.168.10.20>
122 DocumentRoot /home/wwwroot/20
123 ServerName bbs.linuxprobe.com
124 <Directory /home/wwwroot/20 >
125 AllowOverride None
126 Require all granted
127 </Directory>
128 </VirtualHost>
129 <VirtualHost 192.168.10.30>
130 DocumentRoot /home/wwwroot/30
131 ServerName tech.linuxprobe.com
132 <Directory /home/wwwroot/30 >
133 AllowOverride None
134 Require all granted
135 </Directory>
136 </VirtualHost>
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart httpd
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
113 <VirtualHost 192.168.10.10>
114 DocumentRoot /home/wwwroot/10
115 ServerName www.linuxprobe.com
116 <Directory /home/wwwroot/10 >
117 AllowOverride None
118 Require all granted
119 </Directory>
120 </VirtualHost>
121 <VirtualHost 192.168.10.20>
122 DocumentRoot /home/wwwroot/20
123 ServerName bbs.linuxprobe.com
124 <Directory /home/wwwroot/20 >
125 AllowOverride None
126 Require all granted
127 </Directory>
128 </VirtualHost>
129 <VirtualHost 192.168.10.30>
130 DocumentRoot /home/wwwroot/30
131 ServerName tech.linuxprobe.com
132 <Directory /home/wwwroot/30 >
133 AllowOverride None
134 Require all granted
135 </Directory>
136 </VirtualHost>
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart httpd
',0,'alvin',curdate());
insert into Content values(744,7,'p',114,'{}',' BOLD[  第3步： ]BOLD 此时访问网站，则会看到httpd服务程序的默认首页面。大家现在应该立刻就反应过来—这是SELinux在捣鬼。由于当前的/home/wwwroot目录及里面的网站数据目录的SELinux安全上下文与网站服务不吻合，因此httpd服务程序无法获取到这些网站数据目录。我们需要手动把新的网站数据目录的SELinux安全上下文设置正确（见前文的实验），并使用restorecon命令让新设置的SELinux安全上下文立即生效，这样就可以立即看到网站的访问效果了，如图所示。',' BOLD[  第3步： ]BOLD 此时访问网站，则会看到httpd服务程序的默认首页面。大家现在应该立刻就反应过来—这是SELinux在捣鬼。由于当前的/home/wwwroot目录及里面的网站数据目录的SELinux安全上下文与网站服务不吻合，因此httpd服务程序无法获取到这些网站数据目录。我们需要手动把新的网站数据目录的SELinux安全上下文设置正确（见前文的实验），并使用restorecon命令让新设置的SELinux安全上下文立即生效，这样就可以立即看到网站的访问效果了，如图所示。',0,'alvin',curdate());
insert into Content values(745,7,'pre',115,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/10
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/10/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/20
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/20/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/30
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/30/*
[root@linuxprobe ~]# restorecon -Rv /home/wwwroot
restorecon reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/10 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/10/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/20 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/20/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/30 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/30/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/10
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/10/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/20
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/20/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/30
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/30/*
[root@linuxprobe ~]# restorecon -Rv /home/wwwroot
restorecon reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/10 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/10/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/20 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/20/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/30 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/30/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(746,7,'image',116,'{"alt": "connect_diffip", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_connect_diffip.png", "width": "676"}','/static/img/linux/linux_connect_diffip.png','/static/img/linux/linux_connect_diffip.png',0,'alvin',curdate());
insert into Content values(747,7,'h3',117,'{}','基于主机域名','基于主机域名',0,'alvin',curdate());
insert into Content values(748,7,'p',118,'{}','        当服务器无法为每个网站都分配一个独立IP地址的时候，可以尝试让Apache自动识别用户请求的域名，从而根据不同的域名请求来传输不同的内容。在这种情况下的配置更加简单，只需要保证位于生产环境中的服务器上有一个可用的IP地址（这里以192.168.10.10为例）就可以了。由于当前还没有介绍如何配置DNS解析服务，因此需要手工定义IP地址与域名之间的对应关系。/etc/hosts是Linux系统中用于强制把某个主机域名解析到指定IP地址的配置文件。简单来说，只要这个文件配置正确，即使网卡参数中没有DNS信息也依然能够将域名解析为某个IP地址。','        当服务器无法为每个网站都分配一个独立IP地址的时候，可以尝试让Apache自动识别用户请求的域名，从而根据不同的域名请求来传输不同的内容。在这种情况下的配置更加简单，只需要保证位于生产环境中的服务器上有一个可用的IP地址（这里以192.168.10.10为例）就可以了。由于当前还没有介绍如何配置DNS解析服务，因此需要手工定义IP地址与域名之间的对应关系。/etc/hosts是Linux系统中用于强制把某个主机域名解析到指定IP地址的配置文件。简单来说，只要这个文件配置正确，即使网卡参数中没有DNS信息也依然能够将域名解析为某个IP地址。',0,'alvin',curdate());
insert into Content values(749,7,'p',119,'{}',' BOLD[  第1步： ]BOLD 手工定义IP地址与域名之间对应关系的配置文件，保存并退出后会立即生效。可以通过分别ping这些域名来验证域名是否已经成功解析为IP地址。',' BOLD[  第1步： ]BOLD 手工定义IP地址与域名之间对应关系的配置文件，保存并退出后会立即生效。可以通过分别ping这些域名来验证域名是否已经成功解析为IP地址。',0,'alvin',curdate());
insert into Content values(750,7,'pre',120,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/hosts
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.10.10 www.linuxprobe.com bbs.linuxprobe.com tech.linuxprobe.com
[root@linuxprobe ~]# ping -c 4 www.linuxprobe.com
PING www.linuxprobe.com (192.168.10.10) 56(84) bytes of data.
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=1 ttl=64 time=0.070 ms
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=2 ttl=64 time=0.077 ms
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=3 ttl=64 time=0.061 ms
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=4 ttl=64 time=0.069 ms
--- www.linuxprobe.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.061/0.069/0.077/0.008 ms
[root@linuxprobe ~]# 
','[root@linuxprobe ~]# vim /etc/hosts
127.0.0.1 localhost localhost.localdomain localhost4 localhost4.localdomain4
::1 localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.10.10 www.linuxprobe.com bbs.linuxprobe.com tech.linuxprobe.com
[root@linuxprobe ~]# ping -c 4 www.linuxprobe.com
PING www.linuxprobe.com (192.168.10.10) 56(84) bytes of data.
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=1 ttl=64 time=0.070 ms
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=2 ttl=64 time=0.077 ms
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=3 ttl=64 time=0.061 ms
64 bytes from www.linuxprobe.com (192.168.10.10): icmp_seq=4 ttl=64 time=0.069 ms
--- www.linuxprobe.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 2999ms
rtt min/avg/max/mdev = 0.061/0.069/0.077/0.008 ms
[root@linuxprobe ~]# 
',0,'alvin',curdate());
insert into Content values(751,7,'p',121,'{}',' BOLD[  第2步： ]BOLD 分别在/home/wwwroot中创建用于保存不同网站数据的三个目录，并向其中分别写入网站的首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便我们稍后能更直观地检查效果。',' BOLD[  第2步： ]BOLD 分别在/home/wwwroot中创建用于保存不同网站数据的三个目录，并向其中分别写入网站的首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便我们稍后能更直观地检查效果。',0,'alvin',curdate());
insert into Content values(752,7,'pre',122,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir -p /home/wwwroot/www
[root@linuxprobe ~]# mkdir -p /home/wwwroot/bbs
[root@linuxprobe ~]# mkdir -p /home/wwwroot/tech
[root@linuxprobe ~]# echo "WWW.linuxprobe.com" > /home/wwwroot/www/index.html
[root@linuxprobe ~]# echo "BBS.linuxprobe.com" > /home/wwwroot/bbs/index.html
[root@linuxprobe ~]# echo "TECH.linuxprobe.com" > /home/wwwroot/tech/index.html
','[root@linuxprobe ~]# mkdir -p /home/wwwroot/www
[root@linuxprobe ~]# mkdir -p /home/wwwroot/bbs
[root@linuxprobe ~]# mkdir -p /home/wwwroot/tech
[root@linuxprobe ~]# echo "WWW.linuxprobe.com" > /home/wwwroot/www/index.html
[root@linuxprobe ~]# echo "BBS.linuxprobe.com" > /home/wwwroot/bbs/index.html
[root@linuxprobe ~]# echo "TECH.linuxprobe.com" > /home/wwwroot/tech/index.html
',0,'alvin',curdate());
insert into Content values(753,7,'p',123,'{}',' BOLD[  第3步： ]BOLD 在httpd服务的配置文件中大约113行处开始，分别追加写入三个基于主机名的虚拟主机网站参数，然后保存并退出。记得需要重启httpd服务，这些配置才生效。',' BOLD[  第3步： ]BOLD 在httpd服务的配置文件中大约113行处开始，分别追加写入三个基于主机名的虚拟主机网站参数，然后保存并退出。记得需要重启httpd服务，这些配置才生效。',0,'alvin',curdate());
insert into Content values(754,7,'pre',124,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
113 <VirtualHost 192.168.10.10>
114 DocumentRoot "/home/wwwroot/www"
115 ServerName "www.linuxprobe.com"
116 <Directory "/home/wwwroot/www">
117 AllowOverride None
118 Require all granted
119 </directory> 
120 </VirtualHost>
121 <VirtualHost 192.168.10.10>
122 DocumentRoot "/home/wwwroot/bbs"
123 ServerName "bbs.linuxprobe.com"
124 <Directory "/home/wwwroot/bbs">
125 AllowOverride None
126 Require all granted
127 </Directory>
128 </VirtualHost>
129 <VirtualHost 192.168.10.10>
130 DocumentRoot "/home/wwwroot/tech"
131 ServerName "tech.linuxprobe.com"
132 <Directory "/home/wwwroot/tech">
133 AllowOverride None第4步：
134 Require all granted
135 </directory>
136 </VirtualHost>
………………省略部分输出信息………………
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
113 <VirtualHost 192.168.10.10>
114 DocumentRoot "/home/wwwroot/www"
115 ServerName "www.linuxprobe.com"
116 <Directory "/home/wwwroot/www">
117 AllowOverride None
118 Require all granted
119 </directory> 
120 </VirtualHost>
121 <VirtualHost 192.168.10.10>
122 DocumentRoot "/home/wwwroot/bbs"
123 ServerName "bbs.linuxprobe.com"
124 <Directory "/home/wwwroot/bbs">
125 AllowOverride None
126 Require all granted
127 </Directory>
128 </VirtualHost>
129 <VirtualHost 192.168.10.10>
130 DocumentRoot "/home/wwwroot/tech"
131 ServerName "tech.linuxprobe.com"
132 <Directory "/home/wwwroot/tech">
133 AllowOverride None第4步：
134 Require all granted
135 </directory>
136 </VirtualHost>
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(755,7,'p',125,'{}',' BOLD[  第4步： ]BOLD 因为当前的网站数据目录还是在/home/wwwroot目录中，因此还是必须要正确设置网站数据目录文件的SELinux安全上下文，使其与网站服务功能相吻合。最后记得用restorecon命令让新配置的SELinux安全上下文立即生效，这样就可以立即访问到虚拟主机网站了，效果如图所示。',' BOLD[  第4步： ]BOLD 因为当前的网站数据目录还是在/home/wwwroot目录中，因此还是必须要正确设置网站数据目录文件的SELinux安全上下文，使其与网站服务功能相吻合。最后记得用restorecon命令让新配置的SELinux安全上下文立即生效，这样就可以立即访问到虚拟主机网站了，效果如图所示。',0,'alvin',curdate());
insert into Content values(756,7,'pre',126,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# htpasswd -c /etc/httpd/passwd linuxprobe
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/www
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/www/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/bbs
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/bbs/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/tech
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/tech/*
[root@linuxprobe ~]# restorecon -Rv /home/wwwroot
reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/www context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/www/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/bbs context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/bbs/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/tech context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/tech/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# firefox 
','[root@linuxprobe ~]# htpasswd -c /etc/httpd/passwd linuxprobe
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/www
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/www/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/bbs
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/bbs/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/tech
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/tech/*
[root@linuxprobe ~]# restorecon -Rv /home/wwwroot
reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/www context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/www/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/bbs context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/bbs/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/tech context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/tech/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# firefox 
',0,'alvin',curdate());
insert into Content values(757,7,'image',127,'{"alt": "connect_diffserver", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_connect_diffserver.png", "width": "676"}','/static/img/linux/linux_connect_diffserver.png','/static/img/linux/linux_connect_diffserver.png',0,'alvin',curdate());
insert into Content values(758,7,'h3',128,'{}','基于端口号','基于端口号',0,'alvin',curdate());
insert into Content values(759,7,'p',129,'{}','        基于端口号的虚拟主机功能可以让用户通过指定的端口号来访问服务器上的网站资源。在使用Apache配置虚拟网站主机功能时，基于端口号的配置方式是最复杂的。因此我们不仅要考虑httpd服务程序的配置因素，还需要考虑到SELinux服务对新开设端口的监控。一般来说，使用80、443、8080等端口号来提供网站访问服务是比较合理的，如果使用其他端口号则会受到SELinux服务的限制。','        基于端口号的虚拟主机功能可以让用户通过指定的端口号来访问服务器上的网站资源。在使用Apache配置虚拟网站主机功能时，基于端口号的配置方式是最复杂的。因此我们不仅要考虑httpd服务程序的配置因素，还需要考虑到SELinux服务对新开设端口的监控。一般来说，使用80、443、8080等端口号来提供网站访问服务是比较合理的，如果使用其他端口号则会受到SELinux服务的限制。',0,'alvin',curdate());
insert into Content values(760,7,'p',130,'{}','        在接下来的实验中，我们不但要考虑到目录上应用的SELinux安全上下文的限制，还需要考虑SELinux域对httpd服务程序的管控。','        在接下来的实验中，我们不但要考虑到目录上应用的SELinux安全上下文的限制，还需要考虑SELinux域对httpd服务程序的管控。',0,'alvin',curdate());
insert into Content values(761,7,'p',131,'{}',' BOLD[  第1步： ]BOLD 分别在/home/wwwroot中创建用于保存不同网站数据的两个目录，并向其中分别写入网站的首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便我们稍后能更直观地检查效果。',' BOLD[  第1步： ]BOLD 分别在/home/wwwroot中创建用于保存不同网站数据的两个目录，并向其中分别写入网站的首页文件。每个首页文件中应有明确区分不同网站内容的信息，方便我们稍后能更直观地检查效果。',0,'alvin',curdate());
insert into Content values(762,7,'pre',132,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir -p /home/wwwroot/6111
[root@linuxprobe ~]# mkdir -p /home/wwwroot/6222
[root@linuxprobe ~]# echo "port:6111" > /home/wwwroot/6111/index.html
[root@linuxprobe ~]# echo "port:6222" > /home/wwwroot/6222/index.html
','[root@linuxprobe ~]# mkdir -p /home/wwwroot/6111
[root@linuxprobe ~]# mkdir -p /home/wwwroot/6222
[root@linuxprobe ~]# echo "port:6111" > /home/wwwroot/6111/index.html
[root@linuxprobe ~]# echo "port:6222" > /home/wwwroot/6222/index.html
',0,'alvin',curdate());
insert into Content values(763,7,'p',133,'{}',' BOLD[  第2步： ]BOLD 在httpd服务配置文件的第43行和第44行分别添加用于监听6111和6222端口的参数。',' BOLD[  第2步： ]BOLD 在httpd服务配置文件的第43行和第44行分别添加用于监听6111和6222端口的参数。',0,'alvin',curdate());
insert into Content values(764,7,'pre',134,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf 
………………省略部分输出信息……………… 
 33 #
 34 # Listen: Allows you to bind Apache to specific IP addresses and/or
 35 # ports, instead of the default. See also the <VirtualHost>
 36 # directive.
 37 #
 38 # Change this to Listen on specific IP addresses as shown below to 
 39 # prevent Apache from glomming onto all bound IP addresses.
 40 #
 41 #Listen 12.34.56.78:80
 42 Listen 80
 43 Listen 6111
 44 Listen 6222
………………省略部分输出信息……………… 
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf 
………………省略部分输出信息……………… 
 33 #
 34 # Listen: Allows you to bind Apache to specific IP addresses and/or
 35 # ports, instead of the default. See also the <VirtualHost>
 36 # directive.
 37 #
 38 # Change this to Listen on specific IP addresses as shown below to 
 39 # prevent Apache from glomming onto all bound IP addresses.
 40 #
 41 #Listen 12.34.56.78:80
 42 Listen 80
 43 Listen 6111
 44 Listen 6222
………………省略部分输出信息……………… 
',0,'alvin',curdate());
insert into Content values(765,7,'p',135,'{}',' BOLD[  第3步： ]BOLD 在httpd服务的配置文件中大约113行处开始，分别追加写入两个基于端口号的虚拟主机网站参数，然后保存并退出。记得需要重启httpd服务，这些配置才生效。',' BOLD[  第3步： ]BOLD 在httpd服务的配置文件中大约113行处开始，分别追加写入两个基于端口号的虚拟主机网站参数，然后保存并退出。记得需要重启httpd服务，这些配置才生效。',0,'alvin',curdate());
insert into Content values(766,7,'pre',136,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息……………… 
113 <VirtualHost 192.168.10.10:6111>
114 DocumentRoot "/home/wwwroot/6111"
115 ServerName www.linuxprobe.com
116 <Directory "/home/wwwroot/6111">
117 AllowOverride None
118 Require all granted
119 </Directory> 
120 </VirtualHost>
121 <VirtualHost 192.168.10.10:6222>
122 DocumentRoot "/home/wwwroot/6222"
123 ServerName bbs.linuxprobe.com
124 <Directory "/home/wwwroot/6222">
125 AllowOverride None
126 Require all granted
127 </Directory>
128 </VirtualHost>
………………省略部分输出信息………………
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息……………… 
113 <VirtualHost 192.168.10.10:6111>
114 DocumentRoot "/home/wwwroot/6111"
115 ServerName www.linuxprobe.com
116 <Directory "/home/wwwroot/6111">
117 AllowOverride None
118 Require all granted
119 </Directory> 
120 </VirtualHost>
121 <VirtualHost 192.168.10.10:6222>
122 DocumentRoot "/home/wwwroot/6222"
123 ServerName bbs.linuxprobe.com
124 <Directory "/home/wwwroot/6222">
125 AllowOverride None
126 Require all granted
127 </Directory>
128 </VirtualHost>
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(767,7,'p',137,'{}',' BOLD[  第4步： ]BOLD 因为我们把网站数据目录存放在/home/wwwroot目录中，因此还是必须要正确设置网站数据目录文件的SELinux安全上下文，使其与网站服务功能相吻合。最后记得用restorecon命令让新配置的SELinux安全上下文立即生效。',' BOLD[  第4步： ]BOLD 因为我们把网站数据目录存放在/home/wwwroot目录中，因此还是必须要正确设置网站数据目录文件的SELinux安全上下文，使其与网站服务功能相吻合。最后记得用restorecon命令让新配置的SELinux安全上下文立即生效。',0,'alvin',curdate());
insert into Content values(768,7,'pre',138,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6111
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6111/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6222
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6222/*
[root@linuxprobe ~]# restorecon -Rv /home/wwwroot/
restorecon reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6111 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6111/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6222 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6222/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# systemctl restart httpd
Job for httpd.service failed. See \'systemctl status httpd.service\' and \'journalctl -xn\' for details.
','[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6111
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6111/*
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6222
[root@linuxprobe ~]# semanage fcontext -a -t httpd_sys_content_t /home/wwwroot/6222/*
[root@linuxprobe ~]# restorecon -Rv /home/wwwroot/
restorecon reset /home/wwwroot context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6111 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6111/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6222 context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
restorecon reset /home/wwwroot/6222/index.html context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:httpd_sys_content_t:s0
[root@linuxprobe ~]# systemctl restart httpd
Job for httpd.service failed. See \'systemctl status httpd.service\' and \'journalctl -xn\' for details.
',0,'alvin',curdate());
insert into Content values(769,7,'p',139,'{}','        见鬼了！在妥当配置httpd服务程序和SELinux安全上下文并重启httpd服务后，竟然出现报错信息。这是因为SELinux服务检测到6111和6222端口原本不属于Apache服务应该需要的资源，但现在却以httpd服务程序的名义监听使用了，所以SELinux会拒绝使用Apache服务使用这两个端口。我们可以使用semanage命令查询并过滤出所有与HTTP协议相关且SELinux服务允许的端口列表。','        见鬼了！在妥当配置httpd服务程序和SELinux安全上下文并重启httpd服务后，竟然出现报错信息。这是因为SELinux服务检测到6111和6222端口原本不属于Apache服务应该需要的资源，但现在却以httpd服务程序的名义监听使用了，所以SELinux会拒绝使用Apache服务使用这两个端口。我们可以使用semanage命令查询并过滤出所有与HTTP协议相关且SELinux服务允许的端口列表。',0,'alvin',curdate());
insert into Content values(770,7,'pre',140,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# semanage port -l | grep http
http_cache_port_t tcp 8080, 8118, 8123, 10001-10010
http_cache_port_t udp 3130
http_port_t tcp 80, 81, 443, 488, 8008, 8009, 8443, 9000
pegasus_http_port_t tcp 5988
pegasus_https_port_t tcp 5989
','[root@linuxprobe ~]# semanage port -l | grep http
http_cache_port_t tcp 8080, 8118, 8123, 10001-10010
http_cache_port_t udp 3130
http_port_t tcp 80, 81, 443, 488, 8008, 8009, 8443, 9000
pegasus_http_port_t tcp 5988
pegasus_https_port_t tcp 5989
',0,'alvin',curdate());
insert into Content values(771,7,'p',141,'{}',' BOLD[  第5步： ]BOLD SELinux允许的与HTTP协议相关的端口号中默认没有包含6111和6222，因此需要将这两个端口号手动添加进去。该操作会立即生效，而且在系统重启过后依然有效。设置好后再重启httpd服务程序，然后就可以看到网页内容了，结果如下图所示。',' BOLD[  第5步： ]BOLD SELinux允许的与HTTP协议相关的端口号中默认没有包含6111和6222，因此需要将这两个端口号手动添加进去。该操作会立即生效，而且在系统重启过后依然有效。设置好后再重启httpd服务程序，然后就可以看到网页内容了，结果如下图所示。',0,'alvin',curdate());
insert into Content values(772,7,'pre',142,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# semanage port -a -t http_port_t -p tcp 6111
[root@linuxprobe ~]# semanage port -a -t http_port_t -p tcp 6222
[root@linuxprobe ~]# semanage port -l| grep http
http_cache_port_t tcp 8080, 8118, 8123, 10001-10010
http_cache_port_t udp 3130
http_port_t tcp  6222, 6111, 80, 81, 443, 488, 8008, 8009, 8443, 9000
pegasus_http_port_t tcp 5988
pegasus_https_port_t tcp 5989
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# semanage port -a -t http_port_t -p tcp 6111
[root@linuxprobe ~]# semanage port -a -t http_port_t -p tcp 6222
[root@linuxprobe ~]# semanage port -l| grep http
http_cache_port_t tcp 8080, 8118, 8123, 10001-10010
http_cache_port_t udp 3130
http_port_t tcp  6222, 6111, 80, 81, 443, 488, 8008, 8009, 8443, 9000
pegasus_http_port_t tcp 5988
pegasus_https_port_t tcp 5989
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(773,7,'image',143,'{"alt": "connect_diffport", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_connect_diffport.png", "width": "676"}','/static/img/linux/linux_connect_diffport.png','/static/img/linux/linux_connect_diffport.png',0,'alvin',curdate());
insert into Content values(774,7,'h2',144,'{}','Apache的访问控制','Apache的访问控制',0,'alvin',curdate());
insert into Content values(775,7,'p',145,'{}','        Apache可以基于源主机名、源IP地址或源主机上的浏览器特征等信息对网站上的资源进行访问控制。它通过Allow指令允许某个主机访问服务器上的网站资源，通过Deny指令实现禁止访问。在允许或禁止访问网站资源时，还会用到Order指令，这个指令用来定义Allow或Deny指令起作用的顺序，其匹配原则是按照顺序进行匹配，若匹配成功则执行后面的默认指令。比如“Order Allow, Deny”表示先将源主机与允许规则进行匹配，若匹配成功则允许访问请求，反之则拒绝访问请求。','        Apache可以基于源主机名、源IP地址或源主机上的浏览器特征等信息对网站上的资源进行访问控制。它通过Allow指令允许某个主机访问服务器上的网站资源，通过Deny指令实现禁止访问。在允许或禁止访问网站资源时，还会用到Order指令，这个指令用来定义Allow或Deny指令起作用的顺序，其匹配原则是按照顺序进行匹配，若匹配成功则执行后面的默认指令。比如“Order Allow, Deny”表示先将源主机与允许规则进行匹配，若匹配成功则允许访问请求，反之则拒绝访问请求。',0,'alvin',curdate());
insert into Content values(776,7,'p',146,'{}',' BOLD[  第1步： ]BOLD 先在服务器上的网站数据目录中新建一个子目录，并在这个子目录中创建一个包含Successful单词的首页文件。',' BOLD[  第1步： ]BOLD 先在服务器上的网站数据目录中新建一个子目录，并在这个子目录中创建一个包含Successful单词的首页文件。',0,'alvin',curdate());
insert into Content values(777,7,'pre',147,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /var/www/html/server
[root@linuxprobe ~]# echo "Successful" > /var/www/html/server/index.html
','[root@linuxprobe ~]# mkdir /var/www/html/server
[root@linuxprobe ~]# echo "Successful" > /var/www/html/server/index.html
',0,'alvin',curdate());
insert into Content values(778,7,'p',148,'{}',' BOLD[  第2步： ]BOLD 打开httpd服务的配置文件，在第129行后面添加下述规则来限制源主机的访问。这段规则的含义是允许使用Firefox浏览器的主机访问服务器上的首页文件，除此之外的所有请求都将被拒绝。使用Firefox浏览器的访问效果如下图所示。',' BOLD[  第2步： ]BOLD 打开httpd服务的配置文件，在第129行后面添加下述规则来限制源主机的访问。这段规则的含义是允许使用Firefox浏览器的主机访问服务器上的首页文件，除此之外的所有请求都将被拒绝。使用Firefox浏览器的访问效果如下图所示。',0,'alvin',curdate());
insert into Content values(779,7,'pre',149,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
129 <Directory "/var/www/html/server">
130 SetEnvIf User-Agent "Firefox" ff=1
131 Order allow,deny
132 Allow from env=ff
133 </Directory>
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
129 <Directory "/var/www/html/server">
130 SetEnvIf User-Agent "Firefox" ff=1
131 Order allow,deny
132 Allow from env=ff
133 </Directory>
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(780,7,'image',150,'{"alt": "connect_success", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_connect_success.png", "width": "590"}','/static/img/linux/linux_connect_success.png','/static/img/linux/linux_connect_success.png',0,'alvin',curdate());
insert into Content values(781,7,'p',151,'{}','        除了匹配源主机的浏览器特征之外，还可以通过匹配源主机的IP地址进行访问控制。例如，我们只允许IP地址为192.168.10.20的主机访问网站资源，那么就可以在httpd服务配置文件的第129行后面添加下述规则。这样在重启httpd服务程序后再用本机（即服务器，其IP地址为192.168.10.10）来访问网站的首页面时就会提示访问被拒绝了，如下图所示。','        除了匹配源主机的浏览器特征之外，还可以通过匹配源主机的IP地址进行访问控制。例如，我们只允许IP地址为192.168.10.20的主机访问网站资源，那么就可以在httpd服务配置文件的第129行后面添加下述规则。这样在重启httpd服务程序后再用本机（即服务器，其IP地址为192.168.10.10）来访问网站的首页面时就会提示访问被拒绝了，如下图所示。',0,'alvin',curdate());
insert into Content values(782,7,'pre',152,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
129 <Directory "/var/www/html/server">
130 Order allow,deny 
131 Allow from 192.168.10.20
132 </Directory>
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
','[root@linuxprobe ~]# vim /etc/httpd/conf/httpd.conf
………………省略部分输出信息………………
129 <Directory "/var/www/html/server">
130 Order allow,deny 
131 Allow from 192.168.10.20
132 </Directory>
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# firefox
',0,'alvin',curdate());
insert into Content values(783,7,'image',153,'{"alt": "reject_cause_diffip", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_reject_cause_diffip.jpg", "width": "590"}','/static/img/linux/linux_reject_cause_diffip.jpg','/static/img/linux/linux_reject_cause_diffip.jpg',0,'alvin',curdate());
insert into Content values(784,8,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用Vsftpd服务传输文件',' <span class="color_h1">  Linux </span> 使用Vsftpd服务传输文件',0,'alvin',curdate());
insert into Content values(785,8,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(786,8,'h2',3,'{}','文件传输协议','文件传输协议',0,'alvin',curdate());
insert into Content values(787,8,'p',4,'{}','        一般来讲，人们将计算机联网的首要目的就是获取资料，而文件传输是一种非常重要的获取资料的方式。今天的互联网是由几千万台个人计算机、工作站、服务器、小型机、大型机、巨型机等具有不同型号、不同架构的物理设备共同组成的，而且即便是个人计算机，也可能会装有Windows、Linux、UNIX、Mac等不同的操作系统。为了能够在如此复杂多样的设备之间解决问题解决文件传输问题，文件传输协议（FTP）应运而生。','        一般来讲，人们将计算机联网的首要目的就是获取资料，而文件传输是一种非常重要的获取资料的方式。今天的互联网是由几千万台个人计算机、工作站、服务器、小型机、大型机、巨型机等具有不同型号、不同架构的物理设备共同组成的，而且即便是个人计算机，也可能会装有Windows、Linux、UNIX、Mac等不同的操作系统。为了能够在如此复杂多样的设备之间解决问题解决文件传输问题，文件传输协议（FTP）应运而生。',0,'alvin',curdate());
insert into Content values(788,8,'p',5,'{}','        FTP是一种在互联网中进行文件传输的协议，基于客户端/服务器模式，默认使用20、21号端口，其中端口20（数据端口）用于进行数据传输，端口21（命令端口）用于接受客户端发出的相关FTP命令与参数。FTP服务器普遍部署于内网中，具有容易搭建、方便管理的特点。而且有些FTP客户端工具还可以支持文件的多点下载以及断点续传技术，因此FTP服务得到了广大用户的青睐。FTP协议的传输拓扑如图所示。','        FTP是一种在互联网中进行文件传输的协议，基于客户端/服务器模式，默认使用20、21号端口，其中端口20（数据端口）用于进行数据传输，端口21（命令端口）用于接受客户端发出的相关FTP命令与参数。FTP服务器普遍部署于内网中，具有容易搭建、方便管理的特点。而且有些FTP客户端工具还可以支持文件的多点下载以及断点续传技术，因此FTP服务得到了广大用户的青睐。FTP协议的传输拓扑如图所示。',0,'alvin',curdate());
insert into Content values(789,8,'image',6,'{"alt": "ftp_connect", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_ftp_connect.png", "width": "676"}','/static/img/linux/linux_ftp_connect.png','/static/img/linux/linux_ftp_connect.png',0,'alvin',curdate());
insert into Content values(790,8,'p',7,'{}','        FTP服务器是按照FTP协议在互联网上提供文件存储和访问服务的主机，FTP客户端则是向服务器发送连接请求，以建立数据传输链路的主机。FTP协议有下面两种工作模式。','        FTP服务器是按照FTP协议在互联网上提供文件存储和访问服务的主机，FTP客户端则是向服务器发送连接请求，以建立数据传输链路的主机。FTP协议有下面两种工作模式。',0,'alvin',curdate());
insert into Content values(791,8,'ul',8,'{}',' BOLD[  主动模式： ]BOLD FTP服务器主动向客户端发起连接请求。
 BOLD[  被动模式： ]BOLD FTP服务器等待客户端发起连接请求（FTP的默认工作模式）。',' BOLD[  主动模式： ]BOLD FTP服务器主动向客户端发起连接请求。
 BOLD[  被动模式： ]BOLD FTP服务器等待客户端发起连接请求（FTP的默认工作模式）。',0,'alvin',curdate());
insert into Content values(792,8,'p',9,'{}','        防火墙一般是用于过滤从外网进入内网的流量，因此有些时候需要将FTP的工作模式设置为主动模式，才可以传输数据。','        防火墙一般是用于过滤从外网进入内网的流量，因此有些时候需要将FTP的工作模式设置为主动模式，才可以传输数据。',0,'alvin',curdate());
insert into Content values(793,8,'p',10,'{}','        vsftpd（very secure ftp daemon，非常安全的FTP守护进程）是一款运行在Linux操作系统上的FTP服务程序，不仅完全开源而且免费，此外，还具有很高的安全性、传输速度，以及支持虚拟用户验证等其他FTP服务程序不具备的特点。','        vsftpd（very secure ftp daemon，非常安全的FTP守护进程）是一款运行在Linux操作系统上的FTP服务程序，不仅完全开源而且免费，此外，还具有很高的安全性、传输速度，以及支持虚拟用户验证等其他FTP服务程序不具备的特点。',0,'alvin',curdate());
insert into Content values(794,8,'p',11,'{}','        在配置妥当Yum软件仓库之后，就可以安装vsftpd服务程序了。','        在配置妥当Yum软件仓库之后，就可以安装vsftpd服务程序了。',0,'alvin',curdate());
insert into Content values(795,8,'pre',12,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install vsftpd
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 vsftpd x86_64 3.0.2-9.el7 rhel 166 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 166 k
Installed size: 343 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : vsftpd-3.0.2-9.el7.x86_64 1/1 
 Verifying : vsftpd-3.0.2-9.el7.x86_64 1/1 
Installed:
 vsftpd.x86_64 0:3.0.2-9.el7 
Complete!
','[root@linuxprobe ~]# yum install vsftpd
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 vsftpd x86_64 3.0.2-9.el7 rhel 166 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 166 k
Installed size: 343 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : vsftpd-3.0.2-9.el7.x86_64 1/1 
 Verifying : vsftpd-3.0.2-9.el7.x86_64 1/1 
Installed:
 vsftpd.x86_64 0:3.0.2-9.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(796,8,'p',13,'{}','        iptables防火墙管理工具默认禁止了FTP传输协议的端口号，因此在正式配置vsftpd服务程序之前，为了避免这些默认的防火墙策略“捣乱”，还需要清空iptables防火墙的默认策略，并把当前已经被清理的防火墙策略状态保存下来：','        iptables防火墙管理工具默认禁止了FTP传输协议的端口号，因此在正式配置vsftpd服务程序之前，为了避免这些默认的防火墙策略“捣乱”，还需要清空iptables防火墙的默认策略，并把当前已经被清理的防火墙策略状态保存下来：',0,'alvin',curdate());
insert into Content values(797,8,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
','[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
',0,'alvin',curdate());
insert into Content values(798,8,'p',15,'{}','        vsftpd服务程序的主配置文件（/etc/vsftpd/vsftpd.conf）内容总长度达到123行，但其中大多数参数在开头都添加了井号（#），从而成为注释信息，大家没有必要在注释信息上花费太多的时间。我们可以在grep命令后面添加-v参数，过滤并反选出没有包含井号（#）的参数行（即过滤掉所有的注释信息），然后将过滤后的参数行通过输出重定向符写回原始的主配置文件中：','        vsftpd服务程序的主配置文件（/etc/vsftpd/vsftpd.conf）内容总长度达到123行，但其中大多数参数在开头都添加了井号（#），从而成为注释信息，大家没有必要在注释信息上花费太多的时间。我们可以在grep命令后面添加-v参数，过滤并反选出没有包含井号（#）的参数行（即过滤掉所有的注释信息），然后将过滤后的参数行通过输出重定向符写回原始的主配置文件中：',0,'alvin',curdate());
insert into Content values(799,8,'pre',16,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf_bak
[root@linuxprobe ~]# grep -v "#" /etc/vsftpd/vsftpd.conf_bak > /etc/vsftpd/vsftpd.conf
[root@linuxprobe ~]# cat /etc/vsftpd/vsftpd.conf
anonymous_enable=YES
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
listen=NO
listen_ipv6=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
','[root@linuxprobe ~]# mv /etc/vsftpd/vsftpd.conf /etc/vsftpd/vsftpd.conf_bak
[root@linuxprobe ~]# grep -v "#" /etc/vsftpd/vsftpd.conf_bak > /etc/vsftpd/vsftpd.conf
[root@linuxprobe ~]# cat /etc/vsftpd/vsftpd.conf
anonymous_enable=YES
local_enable=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
listen=NO
listen_ipv6=YES
pam_service_name=vsftpd
userlist_enable=YES
tcp_wrappers=YES
',0,'alvin',curdate());
insert into Content values(800,8,'p',17,'{}','下表中罗列了vsftpd服务程序主配置文件中常用的参数以及作用。当前大家只需要简单了解即可，在后续的实验中将演示这些参数的用法，以帮助大家熟悉并掌握。','下表中罗列了vsftpd服务程序主配置文件中常用的参数以及作用。当前大家只需要简单了解即可，在后续的实验中将演示这些参数的用法，以帮助大家熟悉并掌握。',0,'alvin',curdate());
insert into Content values(801,8,'table',18,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
listen=[YES|NO]	是否以独立运行的方式监听服务
listen_address=IP地址	设置要监听的IP地址
listen_port=21	设置FTP服务的监听端口
download_enable＝[YES|NO]	是否允许下载文件
userlist_enable=[YES|NO]userlist_deny=[YES|NO]	设置用户列表为“允许”还是“禁止”操作
max_clients=0	最大客户端连接数，0为不限制
max_per_ip=0	同一IP地址的最大连接数，0为不限制
anonymous_enable=[YES|NO]	是否允许匿名用户访问
anon_upload_enable=[YES|NO]	是否允许匿名用户上传文件
anon_umask=022	匿名用户上传文件的umask值
anon_root=/var/ftp	匿名用户的FTP根目录
anon_mkdir_write_enable=[YES|NO]	是否允许匿名用户创建目录
anon_other_write_enable=[YES|NO]	是否开放匿名用户的其他写入权限（包括重命名、删除等操作权限）
anon_max_rate=0	匿名用户的最大传输速率（字节/秒），0为不限制
local_enable=[YES|NO]	是否允许本地用户登录FTP
local_umask=022	本地用户上传文件的umask值
local_root=/var/ftp	本地用户的FTP根目录
chroot_local_user=[YES|NO]	是否将用户权限禁锢在FTP目录，以确保安全
local_max_rate=0	本地用户最大传输速率（字节/秒），0为不限制','参数	作用
listen=[YES|NO]	是否以独立运行的方式监听服务
listen_address=IP地址	设置要监听的IP地址
listen_port=21	设置FTP服务的监听端口
download_enable＝[YES|NO]	是否允许下载文件
userlist_enable=[YES|NO]userlist_deny=[YES|NO]	设置用户列表为“允许”还是“禁止”操作
max_clients=0	最大客户端连接数，0为不限制
max_per_ip=0	同一IP地址的最大连接数，0为不限制
anonymous_enable=[YES|NO]	是否允许匿名用户访问
anon_upload_enable=[YES|NO]	是否允许匿名用户上传文件
anon_umask=022	匿名用户上传文件的umask值
anon_root=/var/ftp	匿名用户的FTP根目录
anon_mkdir_write_enable=[YES|NO]	是否允许匿名用户创建目录
anon_other_write_enable=[YES|NO]	是否开放匿名用户的其他写入权限（包括重命名、删除等操作权限）
anon_max_rate=0	匿名用户的最大传输速率（字节/秒），0为不限制
local_enable=[YES|NO]	是否允许本地用户登录FTP
local_umask=022	本地用户上传文件的umask值
local_root=/var/ftp	本地用户的FTP根目录
chroot_local_user=[YES|NO]	是否将用户权限禁锢在FTP目录，以确保安全
local_max_rate=0	本地用户最大传输速率（字节/秒），0为不限制',0,'alvin',curdate());
insert into Content values(802,8,'h2',19,'{}','Vsftpd服务程序','Vsftpd服务程序',0,'alvin',curdate());
insert into Content values(803,8,'p',20,'{}','        vsftpd作为更加安全的文件传输的服务程序，允许用户以三种认证模式登录到FTP服务器上。','        vsftpd作为更加安全的文件传输的服务程序，允许用户以三种认证模式登录到FTP服务器上。',0,'alvin',curdate());
insert into Content values(804,8,'ul',21,'{}',' BOLD[  匿名开放模式： ]BOLD 是一种最不安全的认证模式，任何人都可以无需密码验证而直接登录到FTP服务器。
 BOLD[  本地用户模式： ]BOLD 是通过Linux系统本地的账户密码信息进行认证的模式，相较于匿名开放模式更安全，而且配置起来也很简单。但是如果被黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，从而完全控制整台服务器。
 BOLD[  虚拟用户模式： ]BOLD 是这三种模式中最安全的一种认证模式，它需要为FTP服务单独建立用户数据库文件，虚拟出用来进行口令验证的账户信息，而这些账户信息在服务器系统中实际上是不存在的，仅供FTP服务程序进行认证使用。这样，即使黑客破解了账户信息也无法登录服务器，从而有效降低了破坏范围和影响。',' BOLD[  匿名开放模式： ]BOLD 是一种最不安全的认证模式，任何人都可以无需密码验证而直接登录到FTP服务器。
 BOLD[  本地用户模式： ]BOLD 是通过Linux系统本地的账户密码信息进行认证的模式，相较于匿名开放模式更安全，而且配置起来也很简单。但是如果被黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，从而完全控制整台服务器。
 BOLD[  虚拟用户模式： ]BOLD 是这三种模式中最安全的一种认证模式，它需要为FTP服务单独建立用户数据库文件，虚拟出用来进行口令验证的账户信息，而这些账户信息在服务器系统中实际上是不存在的，仅供FTP服务程序进行认证使用。这样，即使黑客破解了账户信息也无法登录服务器，从而有效降低了破坏范围和影响。',0,'alvin',curdate());
insert into Content values(805,8,'p',22,'{}','        ftp是Linux系统中以命令行界面的方式来管理FTP传输服务的客户端工具。我们首先手动安装这个ftp客户端工具，以便在后续实验中查看结果。','        ftp是Linux系统中以命令行界面的方式来管理FTP传输服务的客户端工具。我们首先手动安装这个ftp客户端工具，以便在后续实验中查看结果。',0,'alvin',curdate());
insert into Content values(806,8,'pre',23,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install ftp
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 ftp x86_64 0.17-66.el7 rhel 61 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 61 k
Installed size: 96 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : ftp-0.17-66.el7.x86_64 1/1 
 Verifying : ftp-0.17-66.el7.x86_64 1/1
Installed:
 ftp.x86_64 0:0.17-66.el7
Complete!
','[root@linuxprobe ~]# yum install ftp
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 ftp x86_64 0.17-66.el7 rhel 61 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 61 k
Installed size: 96 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : ftp-0.17-66.el7.x86_64 1/1 
 Verifying : ftp-0.17-66.el7.x86_64 1/1
Installed:
 ftp.x86_64 0:0.17-66.el7
Complete!
',0,'alvin',curdate());
insert into Content values(807,8,'h3',24,'{}','匿名访问模式','匿名访问模式',0,'alvin',curdate());
insert into Content values(808,8,'p',25,'{}','        前文提到，在vsftpd服务程序中，匿名开放模式是最不安全的一种认证模式。任何人都可以无需密码验证而直接登录到FTP服务器。这种模式一般用来访问不重要的公开文件（在生产环境中尽量不要存放重要文件）。当然，如果采用第8章中介绍的防火墙管理工具（如Tcp_wrappers服务程序）将vsftpd服务程序允许访问的主机范围设置为企业内网，也可以提供基本的安全性。','        前文提到，在vsftpd服务程序中，匿名开放模式是最不安全的一种认证模式。任何人都可以无需密码验证而直接登录到FTP服务器。这种模式一般用来访问不重要的公开文件（在生产环境中尽量不要存放重要文件）。当然，如果采用第8章中介绍的防火墙管理工具（如Tcp_wrappers服务程序）将vsftpd服务程序允许访问的主机范围设置为企业内网，也可以提供基本的安全性。',0,'alvin',curdate());
insert into Content values(809,8,'p',26,'{}','        vsftpd服务程序默认开启了匿名开放模式，我们需要做的就是开放匿名用户的上传、下载文件的权限，以及让匿名用户创建、删除、更名文件的权限。需要注意的是，针对匿名用户放开这些权限会带来潜在危险，我们只是为了在Linux系统中练习配置vsftpd服务程序而放开了这些权限，不建议在生产环境中如此行事。下表罗列了可以向匿名用户开放的权限参数以及作用。','        vsftpd服务程序默认开启了匿名开放模式，我们需要做的就是开放匿名用户的上传、下载文件的权限，以及让匿名用户创建、删除、更名文件的权限。需要注意的是，针对匿名用户放开这些权限会带来潜在危险，我们只是为了在Linux系统中练习配置vsftpd服务程序而放开了这些权限，不建议在生产环境中如此行事。下表罗列了可以向匿名用户开放的权限参数以及作用。',0,'alvin',curdate());
insert into Content values(810,8,'table',27,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
anonymous_enable=YES	允许匿名访问模式
anon_umask=022	匿名用户上传文件的umask值
anon_upload_enable=YES	允许匿名用户上传文件
anon_mkdir_write_enable=YES	允许匿名用户创建目录
anon_other_write_enable=YES	允许匿名用户修改目录名称或删除目录','参数	作用
anonymous_enable=YES	允许匿名访问模式
anon_umask=022	匿名用户上传文件的umask值
anon_upload_enable=YES	允许匿名用户上传文件
anon_mkdir_write_enable=YES	允许匿名用户创建目录
anon_other_write_enable=YES	允许匿名用户修改目录名称或删除目录',0,'alvin',curdate());
insert into Content values(811,8,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
1 anonymous_enable=YES
2 anon_umask=022
3 anon_upload_enable=YES
4 anon_mkdir_write_enable=YES
5 anon_other_write_enable=YES
6 local_enable=YES
7 write_enable=YES
8 local_umask=022
9 dirmessage_enable=YES
10 xferlog_enable=YES
11 connect_from_port_20=YES
12 xferlog_std_format=YES
13 listen=NO
14 listen_ipv6=YES
15 pam_service_name=vsftpd
16 userlist_enable=YES
17 tcp_wrappers=YES
','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
1 anonymous_enable=YES
2 anon_umask=022
3 anon_upload_enable=YES
4 anon_mkdir_write_enable=YES
5 anon_other_write_enable=YES
6 local_enable=YES
7 write_enable=YES
8 local_umask=022
9 dirmessage_enable=YES
10 xferlog_enable=YES
11 connect_from_port_20=YES
12 xferlog_std_format=YES
13 listen=NO
14 listen_ipv6=YES
15 pam_service_name=vsftpd
16 userlist_enable=YES
17 tcp_wrappers=YES
',0,'alvin',curdate());
insert into Content values(812,8,'p',29,'{}','        在vsftpd服务程序的主配置文件中正确填写参数，然后保存并退出。还需要重启vsftpd服务程序，让新的配置参数生效。在此需要提醒各位读者，在生产环境中或者在RHCSA、RHCE、RHCA认证考试中一定要把配置过的服务程序加入到开机启动项中，以保证服务器在重启后依然能够正常提供传输服务：','        在vsftpd服务程序的主配置文件中正确填写参数，然后保存并退出。还需要重启vsftpd服务程序，让新的配置参数生效。在此需要提醒各位读者，在生产环境中或者在RHCSA、RHCE、RHCA认证考试中一定要把配置过的服务程序加入到开机启动项中，以保证服务器在重启后依然能够正常提供传输服务：',0,'alvin',curdate());
insert into Content values(813,8,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
 ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service
','[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
 ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service
',0,'alvin',curdate());
insert into Content values(814,8,'p',31,'{}','        现在就可以在客户端执行ftp命令连接到远程的FTP服务器了。在vsftpd服务程序的匿名开放认证模式下，其账户统一为anonymous，密码为空。而且在连接到FTP服务器后，默认访问的是/var/ftp目录。我们可以切换到该目录下的pub目录中，然后尝试创建一个新的目录文件，以检验是否拥有写入权限：','        现在就可以在客户端执行ftp命令连接到远程的FTP服务器了。在vsftpd服务程序的匿名开放认证模式下，其账户统一为anonymous，密码为空。而且在连接到FTP服务器后，默认访问的是/var/ftp目录。我们可以切换到该目录下的pub目录中，然后尝试创建一个新的目录文件，以检验是否拥有写入权限：',0,'alvin',curdate());
insert into Content values(815,8,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
550 Permission denied.
','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
550 Permission denied.
',0,'alvin',curdate());
insert into Content values(816,8,'p',33,'{}','        系统显示拒绝创建目录！我们明明在前面清空了iptables防火墙策略，而且也在vsftpd服务程序的主配置文件中添加了允许匿名用户创建目录和写入文件的权限啊。建议大家先不要着急往下看，而是自己思考一下这个问题的解决办法，以锻炼您的Linux系统排错能力。','        系统显示拒绝创建目录！我们明明在前面清空了iptables防火墙策略，而且也在vsftpd服务程序的主配置文件中添加了允许匿名用户创建目录和写入文件的权限啊。建议大家先不要着急往下看，而是自己思考一下这个问题的解决办法，以锻炼您的Linux系统排错能力。',0,'alvin',curdate());
insert into Content values(817,8,'p',34,'{}','        前文提到，在vsftpd服务程序的匿名开放认证模式下，默认访问的是/var/ftp目录。查看该目录的权限得知，只有root管理员才有写入权限。怪不得系统会拒绝操作呢！下面将目录的所有者身份改成系统账户ftp即可（该账户在系统中已经存在），这样应该可以了吧：','        前文提到，在vsftpd服务程序的匿名开放认证模式下，默认访问的是/var/ftp目录。查看该目录的权限得知，只有root管理员才有写入权限。怪不得系统会拒绝操作呢！下面将目录的所有者身份改成系统账户ftp即可（该账户在系统中已经存在），这样应该可以了吧：',0,'alvin',curdate());
insert into Content values(818,8,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ls -ld /var/ftp/pub
drwxr-xr-x. 3 root root 16 Jul 13 14:38 /var/ftp/pub
[root@linuxprobe ~]# chown -Rf ftp /var/ftp/pub
[root@linuxprobe ~]# ls -ld /var/ftp/pub
drwxr-xr-x. 3 ftp root 16 Jul 13 14:38 /var/ftp/pub
[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
550 Create directory operation failed.
','[root@linuxprobe ~]# ls -ld /var/ftp/pub
drwxr-xr-x. 3 root root 16 Jul 13 14:38 /var/ftp/pub
[root@linuxprobe ~]# chown -Rf ftp /var/ftp/pub
[root@linuxprobe ~]# ls -ld /var/ftp/pub
drwxr-xr-x. 3 ftp root 16 Jul 13 14:38 /var/ftp/pub
[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
550 Create directory operation failed.
',0,'alvin',curdate());
insert into Content values(819,8,'p',36,'{}','        系统再次报错！尽管我们在使用ftp命令登入FTP服务器后，再创建目录时系统依然提示操作失败，但是报错信息却发生了变化。在没有写入权限时，系统提示“权限拒绝”（Permission denied）所以刘遄老师怀疑是权限的问题。但现在系统提示“创建目录的操作失败”（Create directory operation failed），想必各位读者也应该意识到是SELinux服务在“捣乱”了吧。','        系统再次报错！尽管我们在使用ftp命令登入FTP服务器后，再创建目录时系统依然提示操作失败，但是报错信息却发生了变化。在没有写入权限时，系统提示“权限拒绝”（Permission denied）所以刘遄老师怀疑是权限的问题。但现在系统提示“创建目录的操作失败”（Create directory operation failed），想必各位读者也应该意识到是SELinux服务在“捣乱”了吧。',0,'alvin',curdate());
insert into Content values(820,8,'p',37,'{}','        下面使用getsebool命令查看与FTP相关的SELinux域策略都有哪些：','        下面使用getsebool命令查看与FTP相关的SELinux域策略都有哪些：',0,'alvin',curdate());
insert into Content values(821,8,'pre',38,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# getsebool -a | grep ftp
ftp_home_dir --> off
ftpd_anon_write --> off
ftpd_connect_all_unreserved --> off
ftpd_connect_db --> off
ftpd_full_access --> off
ftpd_use_cifs --> off
ftpd_use_fusefs --> off
ftpd_use_nfs --> off
ftpd_use_passive_mode --> off
httpd_can_connect_ftp --> off
httpd_enable_ftp_server --> off
sftpd_anon_write --> off
sftpd_enable_homedirs --> off
sftpd_full_access --> off
sftpd_write_ssh_home --> off
tftp_anon_write --> off
tftp_home_dir --> off
','[root@linuxprobe ~]# getsebool -a | grep ftp
ftp_home_dir --> off
ftpd_anon_write --> off
ftpd_connect_all_unreserved --> off
ftpd_connect_db --> off
ftpd_full_access --> off
ftpd_use_cifs --> off
ftpd_use_fusefs --> off
ftpd_use_nfs --> off
ftpd_use_passive_mode --> off
httpd_can_connect_ftp --> off
httpd_enable_ftp_server --> off
sftpd_anon_write --> off
sftpd_enable_homedirs --> off
sftpd_full_access --> off
sftpd_write_ssh_home --> off
tftp_anon_write --> off
tftp_home_dir --> off
',0,'alvin',curdate());
insert into Content values(822,8,'p',39,'{}','        我们可以根据经验（需要长期培养，别无它法）和策略的名称判断出是ftpd_full_access--> off策略规则导致了操作失败。接下来修改该策略规则，并且在设置时使用-P参数让修改过的策略永久生效，确保在服务器重启后依然能够顺利写入文件。','        我们可以根据经验（需要长期培养，别无它法）和策略的名称判断出是ftpd_full_access--> off策略规则导致了操作失败。接下来修改该策略规则，并且在设置时使用-P参数让修改过的策略永久生效，确保在服务器重启后依然能够顺利写入文件。',0,'alvin',curdate());
insert into Content values(823,8,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# setsebool -P ftpd_full_access=on
','[root@linuxprobe ~]# setsebool -P ftpd_full_access=on
',0,'alvin',curdate());
insert into Content values(824,8,'p',41,'{}','再次提醒各位读者，在进行下一次实验之前，一定记得将虚拟机还原到最初始的状态，以免多个实验相互产生冲突。','再次提醒各位读者，在进行下一次实验之前，一定记得将虚拟机还原到最初始的状态，以免多个实验相互产生冲突。',0,'alvin',curdate());
insert into Content values(825,8,'p',42,'{}','        现在便可以顺利执行文件创建、修改及删除等操作了。','        现在便可以顺利执行文件创建、修改及删除等操作了。',0,'alvin',curdate());
insert into Content values(826,8,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
257 "/pub/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): anonymous
331 Please specify the password.
Password:此处敲击回车即可
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> cd pub
250 Directory successfully changed.
ftp> mkdir files
257 "/pub/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
',0,'alvin',curdate());
insert into Content values(827,8,'h3',44,'{}','本地用户模式','本地用户模式',0,'alvin',curdate());
insert into Content values(828,8,'p',45,'{}','        相较于匿名开放模式，本地用户模式要更安全，而且配置起来也很简单。如果大家之前用的是匿名开放模式，现在就可以将它关了，然后开启本地用户模式。针对本地用户模式的权限参数以及作用如下表所示。','        相较于匿名开放模式，本地用户模式要更安全，而且配置起来也很简单。如果大家之前用的是匿名开放模式，现在就可以将它关了，然后开启本地用户模式。针对本地用户模式的权限参数以及作用如下表所示。',0,'alvin',curdate());
insert into Content values(829,8,'table',46,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
anonymous_enable=NO	禁止匿名访问模式
local_enable=YES	允许本地用户模式
write_enable=YES	设置可写权限
local_umask=022	本地用户模式创建文件的umask值
userlist_deny=YES	启用“禁止用户名单”，名单文件为ftpusers和user_list
userlist_enable=YES	开启用户作用名单文件功能','参数	作用
anonymous_enable=NO	禁止匿名访问模式
local_enable=YES	允许本地用户模式
write_enable=YES	设置可写权限
local_umask=022	本地用户模式创建文件的umask值
userlist_deny=YES	启用“禁止用户名单”，名单文件为ftpusers和user_list
userlist_enable=YES	开启用户作用名单文件功能',0,'alvin',curdate());
insert into Content values(830,8,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
1 anonymous_enable=NO
2 local_enable=YES
3 write_enable=YES
4 local_umask=022
5 dirmessage_enable=YES
6 xferlog_enable=YES
7 connect_from_port_20=YES
8 xferlog_std_format=YES
9 listen=NO
10 listen_ipv6=YES
11 pam_service_name=vsftpd
12 userlist_enable=YES
13 tcp_wrappers=YES
','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
1 anonymous_enable=NO
2 local_enable=YES
3 write_enable=YES
4 local_umask=022
5 dirmessage_enable=YES
6 xferlog_enable=YES
7 connect_from_port_20=YES
8 xferlog_std_format=YES
9 listen=NO
10 listen_ipv6=YES
11 pam_service_name=vsftpd
12 userlist_enable=YES
13 tcp_wrappers=YES
',0,'alvin',curdate());
insert into Content values(831,8,'p',48,'{}','        在vsftpd服务程序的主配置文件中正确填写参数，然后保存并退出。还需要重启vsftpd服务程序，让新的配置参数生效。在执行完上一个实验后还原了虚拟机的读者，还需要将配置好的服务添加到开机启动项中，以便在系统重启自后依然可以正常使用vsftpd服务。','        在vsftpd服务程序的主配置文件中正确填写参数，然后保存并退出。还需要重启vsftpd服务程序，让新的配置参数生效。在执行完上一个实验后还原了虚拟机的读者，还需要将配置好的服务添加到开机启动项中，以便在系统重启自后依然可以正常使用vsftpd服务。',0,'alvin',curdate());
insert into Content values(832,8,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
 ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service
 ','[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
 ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service
 ',0,'alvin',curdate());
insert into Content values(833,8,'p',50,'{}','        按理来讲，现在已经完全可以本地用户的身份登录FTP服务器了。但是在使用root管理员登录后，系统提示如下的错误信息：','        按理来讲，现在已经完全可以本地用户的身份登录FTP服务器了。但是在使用root管理员登录后，系统提示如下的错误信息：',0,'alvin',curdate());
insert into Content values(834,8,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): root
530 Permission denied.
Login failed.
ftp>
','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): root
530 Permission denied.
Login failed.
ftp>
',0,'alvin',curdate());
insert into Content values(835,8,'p',52,'{}','        可见，在我们输入root管理员的密码之前，就已经被系统拒绝访问了。这是因为vsftpd服务程序所在的目录中默认存放着两个名为“用户名单”的文件（ftpusers和user_list）。不知道大家是否已看过一部日本电影“死亡笔记”（刘遄老师在上学期间的最爱），里面就提到有一个黑色封皮的小本子，只要将别人的名字写进去，这人就会挂掉。vsftpd服务程序目录中的这两个文件也有类似的功能—只要里面写有某位用户的名字，就不再允许这位用户登录到FTP服务器上。','        可见，在我们输入root管理员的密码之前，就已经被系统拒绝访问了。这是因为vsftpd服务程序所在的目录中默认存放着两个名为“用户名单”的文件（ftpusers和user_list）。不知道大家是否已看过一部日本电影“死亡笔记”（刘遄老师在上学期间的最爱），里面就提到有一个黑色封皮的小本子，只要将别人的名字写进去，这人就会挂掉。vsftpd服务程序目录中的这两个文件也有类似的功能—只要里面写有某位用户的名字，就不再允许这位用户登录到FTP服务器上。',0,'alvin',curdate());
insert into Content values(836,8,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/vsftpd/user_list 
1 # vsftpd userlist
2 # If userlist_deny=NO, only allow users in this file
3 # If userlist_deny=YES (default), never allow users in this file, and
4 # do not even prompt for a password.
5 # Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers
6 # for users that are denied.
7 root
8 bin
9 daemon
10 adm
11 lp
12 sync
13 shutdown
14 halt
15 mail
16 news
17 uucp
18 operator
19 games
20 nobody
[root@linuxprobe ~]# cat /etc/vsftpd/ftpusers 
# Users that are not allowed to login via ftp
1 root
2 bin
3 daemon
4 adm
5 lp
6 sync
7 shutdown
8 halt
9 mail
10 news
11 uucp
12 operator
13 games
14 nobody
','[root@linuxprobe ~]# cat /etc/vsftpd/user_list 
1 # vsftpd userlist
2 # If userlist_deny=NO, only allow users in this file
3 # If userlist_deny=YES (default), never allow users in this file, and
4 # do not even prompt for a password.
5 # Note that the default vsftpd pam config also checks /etc/vsftpd/ftpusers
6 # for users that are denied.
7 root
8 bin
9 daemon
10 adm
11 lp
12 sync
13 shutdown
14 halt
15 mail
16 news
17 uucp
18 operator
19 games
20 nobody
[root@linuxprobe ~]# cat /etc/vsftpd/ftpusers 
# Users that are not allowed to login via ftp
1 root
2 bin
3 daemon
4 adm
5 lp
6 sync
7 shutdown
8 halt
9 mail
10 news
11 uucp
12 operator
13 games
14 nobody
',0,'alvin',curdate());
insert into Content values(837,8,'p',54,'{}','        果然如此！vsftpd服务程序为了保证服务器的安全性而默认禁止了root管理员和大多数系统用户的登录行为，这样可以有效地避免黑客通过FTP服务对root管理员密码进行暴力破解。如果您确认在生产环境中使用root管理员不会对系统安全产生影响，只需按照上面的提示删除掉root用户名即可。我们也可以选择ftpusers和user_list文件中没有的一个普通用户尝试登录FTP服务器：','        果然如此！vsftpd服务程序为了保证服务器的安全性而默认禁止了root管理员和大多数系统用户的登录行为，这样可以有效地避免黑客通过FTP服务对root管理员密码进行暴力破解。如果您确认在生产环境中使用root管理员不会对系统安全产生影响，只需按照上面的提示删除掉root用户名即可。我们也可以选择ftpusers和user_list文件中没有的一个普通用户尝试登录FTP服务器：',0,'alvin',curdate());
insert into Content values(838,8,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ftp 192.168.10.10 
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): linuxprobe
331 Please specify the password.
Password:此处输入该用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
550 Create directory operation failed.
','[root@linuxprobe ~]# ftp 192.168.10.10 
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): linuxprobe
331 Please specify the password.
Password:此处输入该用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
550 Create directory operation failed.
',0,'alvin',curdate());
insert into Content values(839,8,'p',56,'{}','        在采用本地用户模式登录FTP服务器后，默认访问的是该用户的家目录，也就是说，访问的是/home/linuxprobe目录。而且该目录的默认所有者、所属组都是该用户自己，因此不存在写入权限不足的情况。但是当前的操作仍然被拒绝，是因为我们刚才将虚拟机系统还原到最初的状态了。为此，需要再次开启SELinux域中对FTP服务的允许策略：','        在采用本地用户模式登录FTP服务器后，默认访问的是该用户的家目录，也就是说，访问的是/home/linuxprobe目录。而且该目录的默认所有者、所属组都是该用户自己，因此不存在写入权限不足的情况。但是当前的操作仍然被拒绝，是因为我们刚才将虚拟机系统还原到最初的状态了。为此，需要再次开启SELinux域中对FTP服务的允许策略：',0,'alvin',curdate());
insert into Content values(840,8,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# getsebool -a | grep ftp
ftp_home_dir --> off
ftpd_anon_write --> off
ftpd_connect_all_unreserved --> off
ftpd_connect_db --> off
ftpd_full_access --> off
ftpd_use_cifs --> off
ftpd_use_fusefs --> off
ftpd_use_nfs --> off
ftpd_use_passive_mode --> off
httpd_can_connect_ftp --> off
httpd_enable_ftp_server --> off
sftpd_anon_write --> off
sftpd_enable_homedirs --> off
sftpd_full_access --> off
sftpd_write_ssh_home --> off
tftp_anon_write --> off
tftp_home_dir --> off
[root@linuxprobe ~]# setsebool -P ftpd_full_access=on
','[root@linuxprobe ~]# getsebool -a | grep ftp
ftp_home_dir --> off
ftpd_anon_write --> off
ftpd_connect_all_unreserved --> off
ftpd_connect_db --> off
ftpd_full_access --> off
ftpd_use_cifs --> off
ftpd_use_fusefs --> off
ftpd_use_nfs --> off
ftpd_use_passive_mode --> off
httpd_can_connect_ftp --> off
httpd_enable_ftp_server --> off
sftpd_anon_write --> off
sftpd_enable_homedirs --> off
sftpd_full_access --> off
sftpd_write_ssh_home --> off
tftp_anon_write --> off
tftp_home_dir --> off
[root@linuxprobe ~]# setsebool -P ftpd_full_access=on
',0,'alvin',curdate());
insert into Content values(841,8,'p',58,'{}','        再啰嗦几句。在实验课程和生产环境中设置SELinux域策略时，一定记得添加-P参数，否则服务器在重启后就会按照原有的策略进行控制，从而导致配置过的服务无法使用。','        再啰嗦几句。在实验课程和生产环境中设置SELinux域策略时，一定记得添加-P参数，否则服务器在重启后就会按照原有的策略进行控制，从而导致配置过的服务无法使用。',0,'alvin',curdate());
insert into Content values(842,8,'p',59,'{}','        在配置妥当后再使用本地用户尝试登录下FTP服务器，分别执行文件的创建、重命名及删除等命令。操作均成功！','        在配置妥当后再使用本地用户尝试登录下FTP服务器，分别执行文件的创建、重命名及删除等命令。操作均成功！',0,'alvin',curdate());
insert into Content values(843,8,'pre',60,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): linuxprobe
331 Please specify the password.
Password:此处输入该用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
257 "/home/linuxprobe/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): linuxprobe
331 Please specify the password.
Password:此处输入该用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
257 "/home/linuxprobe/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
',0,'alvin',curdate());
insert into Content values(844,8,'h3',61,'{}','虚拟用户模式','虚拟用户模式',0,'alvin',curdate());
insert into Content values(845,8,'p',62,'{}','        我们最后讲解的虚拟用户模式是这三种模式中最安全的一种认证模式，当然，因为安全性较之于前面两种模式有了提升，所以配置流程也会稍微复杂一些。','        我们最后讲解的虚拟用户模式是这三种模式中最安全的一种认证模式，当然，因为安全性较之于前面两种模式有了提升，所以配置流程也会稍微复杂一些。',0,'alvin',curdate());
insert into Content values(846,8,'p',63,'{}',' BOLD[  第1步： ]BOLD 创建用于进行FTP认证的用户数据库文件，其中奇数行为账户名，偶数行为密码。例如，我们分别创建出zhangsan和lisi两个用户，密码均为redhat：',' BOLD[  第1步： ]BOLD 创建用于进行FTP认证的用户数据库文件，其中奇数行为账户名，偶数行为密码。例如，我们分别创建出zhangsan和lisi两个用户，密码均为redhat：',0,'alvin',curdate());
insert into Content values(847,8,'pre',64,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /etc/vsftpd/
[root@linuxprobe vsftpd]# vim vuser.list
zhangsan
redhat
lisi
redhat
','[root@linuxprobe ~]# cd /etc/vsftpd/
[root@linuxprobe vsftpd]# vim vuser.list
zhangsan
redhat
lisi
redhat
',0,'alvin',curdate());
insert into Content values(848,8,'p',65,'{}','        但是，明文信息既不安全，也不符合让vsftpd服务程序直接加载的格式，因此需要使用db_load命令用哈希（hash）算法将原始的明文信息文件转换成数据库文件，并且降低数据库文件的权限（避免其他人看到数据库文件的内容），然后再把原始的明文信息文件删除。','        但是，明文信息既不安全，也不符合让vsftpd服务程序直接加载的格式，因此需要使用db_load命令用哈希（hash）算法将原始的明文信息文件转换成数据库文件，并且降低数据库文件的权限（避免其他人看到数据库文件的内容），然后再把原始的明文信息文件删除。',0,'alvin',curdate());
insert into Content values(849,8,'pre',66,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe vsftpd]# db_load -T -t hash -f vuser.list vuser.db
[root@linuxprobe vsftpd]# file vuser.db
vuser.db: Berkeley DB (Hash, version 9, native byte-order)
[root@linuxprobe vsftpd]# chmod 600 vuser.db
[root@linuxprobe vsftpd]# rm -f vuser.list
','[root@linuxprobe vsftpd]# db_load -T -t hash -f vuser.list vuser.db
[root@linuxprobe vsftpd]# file vuser.db
vuser.db: Berkeley DB (Hash, version 9, native byte-order)
[root@linuxprobe vsftpd]# chmod 600 vuser.db
[root@linuxprobe vsftpd]# rm -f vuser.list
',0,'alvin',curdate());
insert into Content values(850,8,'p',67,'{}',' BOLD[  第2步： ]BOLD 创建vsftpd服务程序用于存储文件的根目录以及虚拟用户映射的系统本地用户。FTP服务用于存储文件的根目录指的是，当虚拟用户登录后所访问的默认位置。',' BOLD[  第2步： ]BOLD 创建vsftpd服务程序用于存储文件的根目录以及虚拟用户映射的系统本地用户。FTP服务用于存储文件的根目录指的是，当虚拟用户登录后所访问的默认位置。',0,'alvin',curdate());
insert into Content values(851,8,'p',68,'{}','        由于Linux系统中的每一个文件都有所有者、所属组属性，例如使用虚拟账户“张三”新建了一个文件，但是系统中找不到账户“张三”，就会导致这个文件的权限出现错误。为此，需要再创建一个可以映射到虚拟用户的系统本地用户。简单来说，就是让虚拟用户默认登录到与之有映射关系的这个系统本地用户的家目录中，虚拟用户创建的文件的属性也都归属于这个系统本地用户，从而避免Linux系统无法处理虚拟用户所创建文件的属性权限。','        由于Linux系统中的每一个文件都有所有者、所属组属性，例如使用虚拟账户“张三”新建了一个文件，但是系统中找不到账户“张三”，就会导致这个文件的权限出现错误。为此，需要再创建一个可以映射到虚拟用户的系统本地用户。简单来说，就是让虚拟用户默认登录到与之有映射关系的这个系统本地用户的家目录中，虚拟用户创建的文件的属性也都归属于这个系统本地用户，从而避免Linux系统无法处理虚拟用户所创建文件的属性权限。',0,'alvin',curdate());
insert into Content values(852,8,'p',69,'{}','        为了方便管理FTP服务器上的数据，可以把这个系统本地用户的家目录设置为/var目录（该目录用来存放经常发生改变的数据）。并且为了安全起见，我们将这个系统本地用户设置为不允许登录FTP服务器，这不会影响虚拟用户登录，而且还可以避免黑客通过这个系统本地用户进行登录。','        为了方便管理FTP服务器上的数据，可以把这个系统本地用户的家目录设置为/var目录（该目录用来存放经常发生改变的数据）。并且为了安全起见，我们将这个系统本地用户设置为不允许登录FTP服务器，这不会影响虚拟用户登录，而且还可以避免黑客通过这个系统本地用户进行登录。',0,'alvin',curdate());
insert into Content values(853,8,'pre',70,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# useradd -d /var/ftproot -s /sbin/nologin virtual
[root@linuxprobe ~]# ls -ld /var/ftproot/
drwx------. 3 virtual virtual 74 Jul 14 17:50 /var/ftproot/
[root@linuxprobe ~]# chmod -Rf 755 /var/ftproot/
','[root@linuxprobe ~]# useradd -d /var/ftproot -s /sbin/nologin virtual
[root@linuxprobe ~]# ls -ld /var/ftproot/
drwx------. 3 virtual virtual 74 Jul 14 17:50 /var/ftproot/
[root@linuxprobe ~]# chmod -Rf 755 /var/ftproot/
',0,'alvin',curdate());
insert into Content values(854,8,'p',71,'{}',' BOLD[  第3步： ]BOLD 建立用于支持虚拟用户的PAM文件。',' BOLD[  第3步： ]BOLD 建立用于支持虚拟用户的PAM文件。',0,'alvin',curdate());
insert into Content values(855,8,'p',72,'{}','        PAM（可插拔认证模块）是一种认证机制，通过一些动态链接库和统一的API把系统提供的服务与认证方式分开，使得系统管理员可以根据需求灵活调整服务程序的不同认证方式。要想把PAM功能和作用完全讲透，至少要一个章节的篇幅才可以（对该主题感兴趣的读者敬请关注本书的进阶篇，里面会详细讲解PAM）。','        PAM（可插拔认证模块）是一种认证机制，通过一些动态链接库和统一的API把系统提供的服务与认证方式分开，使得系统管理员可以根据需求灵活调整服务程序的不同认证方式。要想把PAM功能和作用完全讲透，至少要一个章节的篇幅才可以（对该主题感兴趣的读者敬请关注本书的进阶篇，里面会详细讲解PAM）。',0,'alvin',curdate());
insert into Content values(856,8,'p',73,'{}','        通俗来讲，PAM是一组安全机制的模块，系统管理员可以用来轻易地调整服务程序的认证方式，而不必对应用程序进行任何修改。PAM采取了分层设计（应用程序层、应用接口层、鉴别模块层）的思想，其结构如下图所示。','        通俗来讲，PAM是一组安全机制的模块，系统管理员可以用来轻易地调整服务程序的认证方式，而不必对应用程序进行任何修改。PAM采取了分层设计（应用程序层、应用接口层、鉴别模块层）的思想，其结构如下图所示。',0,'alvin',curdate());
insert into Content values(857,8,'image',74,'{"alt": "vsftpd_pam", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_vsftpd_pam.jpg", "width": "476"}','/static/img/linux/linux_vsftpd_pam.jpg','/static/img/linux/linux_vsftpd_pam.jpg',0,'alvin',curdate());
insert into Content values(858,8,'p',75,'{}','        新建一个用于虚拟用户认证的PAM文件vsftpd.vu，其中PAM文件内的“db=”参数为使用db_load命令生成的账户密码数据库文件的路径，但不用写数据库文件的后缀：','        新建一个用于虚拟用户认证的PAM文件vsftpd.vu，其中PAM文件内的“db=”参数为使用db_load命令生成的账户密码数据库文件的路径，但不用写数据库文件的后缀：',0,'alvin',curdate());
insert into Content values(859,8,'pre',76,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/pam.d/vsftpd.vu
auth       required     pam_userdb.so db=/etc/vsftpd/vuser
account    required     pam_userdb.so db=/etc/vsftpd/vuser
','[root@linuxprobe ~]# vim /etc/pam.d/vsftpd.vu
auth       required     pam_userdb.so db=/etc/vsftpd/vuser
account    required     pam_userdb.so db=/etc/vsftpd/vuser
',0,'alvin',curdate());
insert into Content values(860,8,'p',77,'{}',' BOLD[  第4步： ]BOLD 在vsftpd服务程序的主配置文件中通过pam_service_name参数将PAM认证文件的名称修改为vsftpd.vu，PAM作为应用程序层与鉴别模块层的连接纽带，可以让应用程序根据需求灵活地在自身插入所需的鉴别功能模块。当应用程序需要PAM认证时，则需要在应用程序中定义负责认证的PAM配置文件，实现所需的认证功能。',' BOLD[  第4步： ]BOLD 在vsftpd服务程序的主配置文件中通过pam_service_name参数将PAM认证文件的名称修改为vsftpd.vu，PAM作为应用程序层与鉴别模块层的连接纽带，可以让应用程序根据需求灵活地在自身插入所需的鉴别功能模块。当应用程序需要PAM认证时，则需要在应用程序中定义负责认证的PAM配置文件，实现所需的认证功能。',0,'alvin',curdate());
insert into Content values(861,8,'p',78,'{}','        例如，在vsftpd服务程序的主配置文件中默认就带有参数pam_service_name=vsftpd，表示登录FTP服务器时是根据/etc/pam.d/vsftpd文件进行安全认证的。现在我们要做的就是把vsftpd主配置文件中原有的PAM认证文件vsftpd修改为新建的vsftpd.vu文件即可。该操作中用到的参数以及作用如下表所示。','        例如，在vsftpd服务程序的主配置文件中默认就带有参数pam_service_name=vsftpd，表示登录FTP服务器时是根据/etc/pam.d/vsftpd文件进行安全认证的。现在我们要做的就是把vsftpd主配置文件中原有的PAM认证文件vsftpd修改为新建的vsftpd.vu文件即可。该操作中用到的参数以及作用如下表所示。',0,'alvin',curdate());
insert into Content values(862,8,'table',79,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
anonymous_enable=NO	禁止匿名开放模式
local_enable=YES	允许本地用户模式
guest_enable=YES	开启虚拟用户模式
guest_username=virtual	指定虚拟用户账户
pam_service_name=vsftpd.vu	指定PAM文件
allow_writeable_chroot=YES	允许对禁锢的FTP根目录执行写入操作，而且不拒绝用户的登录请求','参数	作用
anonymous_enable=NO	禁止匿名开放模式
local_enable=YES	允许本地用户模式
guest_enable=YES	开启虚拟用户模式
guest_username=virtual	指定虚拟用户账户
pam_service_name=vsftpd.vu	指定PAM文件
allow_writeable_chroot=YES	允许对禁锢的FTP根目录执行写入操作，而且不拒绝用户的登录请求',0,'alvin',curdate());
insert into Content values(863,8,'pre',80,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
1 anonymous_enable=NO
2 local_enable=YES
3 guest_enable=YES
4 guest_username=virtual
5 allow_writeable_chroot=YES
6 write_enable=YES
7 local_umask=022
8 dirmessage_enable=YES
9 xferlog_enable=YES
10 connect_from_port_20=YES
11 xferlog_std_format=YES
12 listen=NO
13 listen_ipv6=YES
14 pam_service_name=vsftpd.vu
15 userlist_enable=YES
16 tcp_wrappers=YES
','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
1 anonymous_enable=NO
2 local_enable=YES
3 guest_enable=YES
4 guest_username=virtual
5 allow_writeable_chroot=YES
6 write_enable=YES
7 local_umask=022
8 dirmessage_enable=YES
9 xferlog_enable=YES
10 connect_from_port_20=YES
11 xferlog_std_format=YES
12 listen=NO
13 listen_ipv6=YES
14 pam_service_name=vsftpd.vu
15 userlist_enable=YES
16 tcp_wrappers=YES
',0,'alvin',curdate());
insert into Content values(864,8,'p',81,'{}',' BOLD[  第5步： ]BOLD 为虚拟用户设置不同的权限。虽然账户zhangsan和lisi都是用于vsftpd服务程序认证的虚拟账户，但是我们依然想对这两人进行区别对待。比如，允许张三上传、创建、修改、查看、删除文件，只允许李四查看文件。这可以通过vsftpd服务程序来实现。只需新建一个目录，在里面分别创建两个以zhangsan和lisi命名的文件，其中在名为zhangsan的文件中写入允许的相关权限（使用匿名用户的参数）：',' BOLD[  第5步： ]BOLD 为虚拟用户设置不同的权限。虽然账户zhangsan和lisi都是用于vsftpd服务程序认证的虚拟账户，但是我们依然想对这两人进行区别对待。比如，允许张三上传、创建、修改、查看、删除文件，只允许李四查看文件。这可以通过vsftpd服务程序来实现。只需新建一个目录，在里面分别创建两个以zhangsan和lisi命名的文件，其中在名为zhangsan的文件中写入允许的相关权限（使用匿名用户的参数）：',0,'alvin',curdate());
insert into Content values(865,8,'pre',82,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /etc/vsftpd/vusers_dir/
[root@linuxprobe ~]# cd /etc/vsftpd/vusers_dir/
[root@linuxprobe vusers_dir]# touch lisi
[root@linuxprobe vusers_dir]# vim zhangsan
anon_upload_enable=YES
anon_mkdir_write_enable=YES
anon_other_write_enable=YES
','[root@linuxprobe ~]# mkdir /etc/vsftpd/vusers_dir/
[root@linuxprobe ~]# cd /etc/vsftpd/vusers_dir/
[root@linuxprobe vusers_dir]# touch lisi
[root@linuxprobe vusers_dir]# vim zhangsan
anon_upload_enable=YES
anon_mkdir_write_enable=YES
anon_other_write_enable=YES
',0,'alvin',curdate());
insert into Content values(866,8,'p',83,'{}','        然后再次修改vsftpd主配置文件，通过添加user_config_dir参数来定义这两个虚拟用户不同权限的配置文件所存放的路径。为了让修改后的参数立即生效，需要重启vsftpd服务程序并将该服务添加到开机启动项中：','        然后再次修改vsftpd主配置文件，通过添加user_config_dir参数来定义这两个虚拟用户不同权限的配置文件所存放的路径。为了让修改后的参数立即生效，需要重启vsftpd服务程序并将该服务添加到开机启动项中：',0,'alvin',curdate());
insert into Content values(867,8,'pre',84,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
anonymous_enable=NO
local_enable=YES
guest_enable=YES
guest_username=virtual
allow_writeable_chroot=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
listen=NO
listen_ipv6=YES
pam_service_name=vsftpd.vu
userlist_enable=YES
tcp_wrappers=YES
user_config_dir=/etc/vsftpd/vusers_dir
[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
 ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service
','[root@linuxprobe ~]# vim /etc/vsftpd/vsftpd.conf
anonymous_enable=NO
local_enable=YES
guest_enable=YES
guest_username=virtual
allow_writeable_chroot=YES
write_enable=YES
local_umask=022
dirmessage_enable=YES
xferlog_enable=YES
connect_from_port_20=YES
xferlog_std_format=YES
listen=NO
listen_ipv6=YES
pam_service_name=vsftpd.vu
userlist_enable=YES
tcp_wrappers=YES
user_config_dir=/etc/vsftpd/vusers_dir
[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
 ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service
',0,'alvin',curdate());
insert into Content values(868,8,'p',85,'{}',' BOLD[  第6步： ]BOLD 设置SELinux域允许策略，然后使用虚拟用户模式登录FTP服务器。相信大家可以猜到，SELinux会继续来捣乱。所以，先按照前面实验中的步骤开启SELinux域的允许策略，以免再次出现操作失败的情况：',' BOLD[  第6步： ]BOLD 设置SELinux域允许策略，然后使用虚拟用户模式登录FTP服务器。相信大家可以猜到，SELinux会继续来捣乱。所以，先按照前面实验中的步骤开启SELinux域的允许策略，以免再次出现操作失败的情况：',0,'alvin',curdate());
insert into Content values(869,8,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# getsebool -a | grep ftp
ftp_home_dir –> off
ftpd_anon_write –> off
ftpd_connect_all_unreserved –> off
ftpd_connect_db –> off
ftpd_full_access –> off
ftpd_use_cifs –> off
ftpd_use_fusefs –> off
ftpd_use_nfs –> off
ftpd_use_passive_mode –> off
httpd_can_connect_ftp –> off
httpd_enable_ftp_server –> off
sftpd_anon_write –> off
sftpd_enable_homedirs –> off
sftpd_full_access –> off
sftpd_write_ssh_home –> off
tftp_anon_write –> off
tftp_home_dir –> off
[root@linuxprobe ~]# setsebool -P ftpd_full_access=on
','[root@linuxprobe ~]# getsebool -a | grep ftp
ftp_home_dir –> off
ftpd_anon_write –> off
ftpd_connect_all_unreserved –> off
ftpd_connect_db –> off
ftpd_full_access –> off
ftpd_use_cifs –> off
ftpd_use_fusefs –> off
ftpd_use_nfs –> off
ftpd_use_passive_mode –> off
httpd_can_connect_ftp –> off
httpd_enable_ftp_server –> off
sftpd_anon_write –> off
sftpd_enable_homedirs –> off
sftpd_full_access –> off
sftpd_write_ssh_home –> off
tftp_anon_write –> off
tftp_home_dir –> off
[root@linuxprobe ~]# setsebool -P ftpd_full_access=on
',0,'alvin',curdate());
insert into Content values(870,8,'p',87,'{}','        此时，不但可以使用虚拟用户模式成功登录到FTP服务器，还可以分别使用账户zhangsan和lisi来检验他们的权限。当然，读者在生产环境中一定要根据真实需求来灵活配置参数，不要照搬这里的实验操作。','        此时，不但可以使用虚拟用户模式成功登录到FTP服务器，还可以分别使用账户zhangsan和lisi来检验他们的权限。当然，读者在生产环境中一定要根据真实需求来灵活配置参数，不要照搬这里的实验操作。',0,'alvin',curdate());
insert into Content values(871,8,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): lisi
331 Please specify the password.
Password:此处输入虚拟用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
550 Permission denied.
ftp> exit
221 Goodbye.
[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): zhangsan
331 Please specify the password.
Password:此处输入虚拟用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
257 "/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
','[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): lisi
331 Please specify the password.
Password:此处输入虚拟用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
550 Permission denied.
ftp> exit
221 Goodbye.
[root@linuxprobe ~]# ftp 192.168.10.10
Connected to 192.168.10.10 (192.168.10.10).
220 (vsFTPd 3.0.2)
Name (192.168.10.10:root): zhangsan
331 Please specify the password.
Password:此处输入虚拟用户的密码
230 Login successful.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> mkdir files
257 "/files" created
ftp> rename files database
350 Ready for RNTO.
250 Rename successful.
ftp> rmdir database
250 Remove directory operation successful.
ftp> exit
221 Goodbye.
',0,'alvin',curdate());
insert into Content values(872,8,'h2',89,'{}','TFTP简单文件传输协议','TFTP简单文件传输协议',0,'alvin',curdate());
insert into Content values(873,8,'p',90,'{}','        简单文件传输协议（Trivial File Transfer Protocol，TFTP）是一种基于UDP协议在客户端和服务器之间进行简单文件传输的协议。顾名思义，它提供不复杂、开销不大的文件传输服务（可将其当作FTP协议的简化版本）。','        简单文件传输协议（Trivial File Transfer Protocol，TFTP）是一种基于UDP协议在客户端和服务器之间进行简单文件传输的协议。顾名思义，它提供不复杂、开销不大的文件传输服务（可将其当作FTP协议的简化版本）。',0,'alvin',curdate());
insert into Content values(874,8,'p',91,'{}','        TFTP的命令功能不如FTP服务强大，甚至不能遍历目录，在安全性方面也弱于FTP服务。而且，由于TFTP在传输文件时采用的是UDP协议，占用的端口号为69，因此文件的传输过程也不像FTP协议那样可靠。但是，因为TFTP不需要客户端的权限认证，也就减少了无谓的系统和网络带宽消耗，因此在传输琐碎（trivial）不大的文件时，效率更高。','        TFTP的命令功能不如FTP服务强大，甚至不能遍历目录，在安全性方面也弱于FTP服务。而且，由于TFTP在传输文件时采用的是UDP协议，占用的端口号为69，因此文件的传输过程也不像FTP协议那样可靠。但是，因为TFTP不需要客户端的权限认证，也就减少了无谓的系统和网络带宽消耗，因此在传输琐碎（trivial）不大的文件时，效率更高。',0,'alvin',curdate());
insert into Content values(875,8,'p',92,'{}','        接下来在系统上安装TFTP的软件包，进行体验。','        接下来在系统上安装TFTP的软件包，进行体验。',0,'alvin',curdate());
insert into Content values(876,8,'pre',93,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install tftp-server tftp
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 tftp x86_64 5.2-11.el7 rhel 35 k
 tftp-server x86_64 5.2-11.el7 rhel 44 k
Installing for dependencies:
 xinetd x86_64 2:2.3.15-12.el7 rhel 128 k
Transaction Summary
================================================================================
Install 2 Packages (+1 Dependent package)
Total download size: 207 k
Installed size: 373 k
Is this ok [y/d/N]: y
Downloading packages:
………………省略部分输出信息………………
Installed:
 tftp.x86_64 0:5.2-11.el7 tftp-server.x86_64 0:5.2-11.el7 
Dependency Installed:
 xinetd.x86_64 2:2.3.15-12.el7 
Complete!
','[root@linuxprobe ~]# yum install tftp-server tftp
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 tftp x86_64 5.2-11.el7 rhel 35 k
 tftp-server x86_64 5.2-11.el7 rhel 44 k
Installing for dependencies:
 xinetd x86_64 2:2.3.15-12.el7 rhel 128 k
Transaction Summary
================================================================================
Install 2 Packages (+1 Dependent package)
Total download size: 207 k
Installed size: 373 k
Is this ok [y/d/N]: y
Downloading packages:
………………省略部分输出信息………………
Installed:
 tftp.x86_64 0:5.2-11.el7 tftp-server.x86_64 0:5.2-11.el7 
Dependency Installed:
 xinetd.x86_64 2:2.3.15-12.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(877,8,'p',94,'{}','        在RHEL 7系统中，TFTP服务是使用xinetd服务程序来管理的。xinetd服务可以用来管理多种轻量级的网络服务，而且具有强大的日志功能。简单来说，在安装TFTP软件包后，还需要在xinetd服务程序中将其开启，把默认的禁用（disable）参数修改为no：','        在RHEL 7系统中，TFTP服务是使用xinetd服务程序来管理的。xinetd服务可以用来管理多种轻量级的网络服务，而且具有强大的日志功能。简单来说，在安装TFTP软件包后，还需要在xinetd服务程序中将其开启，把默认的禁用（disable）参数修改为no：',0,'alvin',curdate());
insert into Content values(878,8,'pre',95,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/xinetd.d/tftp
service tftp
{
        socket_type             = dgram
        protocol                = udp
        wait                    = yes
        user                    = root
        server                  = /usr/sbin/in.tftpd
        server_args             = -s /var/lib/tftpboot
        disable                 = no
        per_source              = 11
        cps                     = 100 2
        flags                   = IPv4
}
','[root@linuxprobe ~]# vim /etc/xinetd.d/tftp
service tftp
{
        socket_type             = dgram
        protocol                = udp
        wait                    = yes
        user                    = root
        server                  = /usr/sbin/in.tftpd
        server_args             = -s /var/lib/tftpboot
        disable                 = no
        per_source              = 11
        cps                     = 100 2
        flags                   = IPv4
}
',0,'alvin',curdate());
insert into Content values(879,8,'p',96,'{}','        然后，重启xinetd服务并将它添加到系统的开机启动项中，以确保TFTP服务在系统重启后依然处于运行状态。考虑到有些系统的防火墙默认没有允许UDP协议的69端口，因此需要手动将该端口号加入到防火墙的允许策略中：','        然后，重启xinetd服务并将它添加到系统的开机启动项中，以确保TFTP服务在系统重启后依然处于运行状态。考虑到有些系统的防火墙默认没有允许UDP协议的69端口，因此需要手动将该端口号加入到防火墙的允许策略中：',0,'alvin',curdate());
insert into Content values(880,8,'pre',97,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart xinetd
[root@linuxprobe ~]# systemctl enable xinetd
[root@linuxprobe ~]# firewall-cmd --permanent --add-port=69/udp
success
[root@linuxprobe ~]# firewall-cmd --reload 
success
','[root@linuxprobe ~]# systemctl restart xinetd
[root@linuxprobe ~]# systemctl enable xinetd
[root@linuxprobe ~]# firewall-cmd --permanent --add-port=69/udp
success
[root@linuxprobe ~]# firewall-cmd --reload 
success
',0,'alvin',curdate());
insert into Content values(881,8,'p',98,'{}','        TFTP的根目录为/var/lib/tftpboot。我们可以使用刚安装好的tftp命令尝试访问其中的文件，亲身体验TFTP服务的文件传输过程。在使用tftp命令访问文件时，可能会用到下表中的参数。','        TFTP的根目录为/var/lib/tftpboot。我们可以使用刚安装好的tftp命令尝试访问其中的文件，亲身体验TFTP服务的文件传输过程。在使用tftp命令访问文件时，可能会用到下表中的参数。',0,'alvin',curdate());
insert into Content values(882,8,'table',99,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
?	帮助信息
put	上传文件
get	下载文件
verbose	显示详细的处理信息
status	显示当前的状态信息
binary	使用二进制进行传输
ascii	使用ASCII码进行传输
timeout	设置重传的超时时间
quit	退出','参数	作用
?	帮助信息
put	上传文件
get	下载文件
verbose	显示详细的处理信息
status	显示当前的状态信息
binary	使用二进制进行传输
ascii	使用ASCII码进行传输
timeout	设置重传的超时时间
quit	退出',0,'alvin',curdate());
insert into Content values(883,8,'pre',100,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# echo "i love linux" > /var/lib/tftpboot/readme.txt
[root@linuxprobe ~]# tftp 192.168.10.10
tftp> get readme.txt
tftp> quit
[root@linuxprobe ~]# ls
anaconda-ks.cfg Documents initial-setup-ks.cfg Pictures readme.txt Videos
Desktop Downloads Music Public Templates
[root@linuxprobe ~]# cat readme.txt 
i love linux
','[root@linuxprobe ~]# echo "i love linux" > /var/lib/tftpboot/readme.txt
[root@linuxprobe ~]# tftp 192.168.10.10
tftp> get readme.txt
tftp> quit
[root@linuxprobe ~]# ls
anaconda-ks.cfg Documents initial-setup-ks.cfg Pictures readme.txt Videos
Desktop Downloads Music Public Templates
[root@linuxprobe ~]# cat readme.txt 
i love linux
',0,'alvin',curdate());
insert into Content values(884,8,'p',101,'{}','        当然，TFTP服务的玩法还不止于此，第19章会将TFTP服务与其他软件相搭配，组合出一套完整的自动化部署系统方案。大家继续加油！','        当然，TFTP服务的玩法还不止于此，第19章会将TFTP服务与其他软件相搭配，组合出一套完整的自动化部署系统方案。大家继续加油！',0,'alvin',curdate());
insert into Content values(885,9,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用Samba或NFS实现文件共享',' <span class="color_h1">  Linux </span> 使用Samba或NFS实现文件共享',0,'alvin',curdate());
insert into Content values(886,9,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(887,9,'h2',3,'{}','SAMBA文件共享服务','SAMBA文件共享服务',0,'alvin',curdate());
insert into Content values(888,9,'p',4,'{}','        FTP文件传输服务确实可以让主机之间的文件传输变得简单方便，但是FTP协议的本质是传输文件，而非共享文件，因此要想通过客户端直接在服务器上修改文件内容还是一件比较麻烦的事情。','        FTP文件传输服务确实可以让主机之间的文件传输变得简单方便，但是FTP协议的本质是传输文件，而非共享文件，因此要想通过客户端直接在服务器上修改文件内容还是一件比较麻烦的事情。',0,'alvin',curdate());
insert into Content values(889,9,'p',5,'{}','        1987年，微软公司和英特尔公司共同制定了SMB（Server Messages Block，服务器消息块）协议，旨在解决局域网内的文件或打印机等资源的共享问题，这也使得在多个主机之间共享文件变得越来越简单。到了1991年，当时还在读大学的Tridgwell为了解决Linux系统与Windows系统之间的文件共享问题，基于SMB协议开发出了SMBServer服务程序。这是一款开源的文件共享软件，经过简单配置就能够实现Linux系统与Windows系统之间的文件共享工作。当时，Tridgwell想把这款软件的名字SMBServer注册成为商标，但却被商标局以SMB是没有意义的字符而拒绝了申请。后来Tridgwell不断翻看词典，突然看到一个拉丁舞蹈的名字—Samba，而且这个热情洋溢的舞蹈名字中又恰好包含了“SMB”，于是Samba服务程序的名字由此诞生（见图12-1）。Samba服务程序现在已经成为在Linux系统与Windows系统之间共享文件的最佳选择。','        1987年，微软公司和英特尔公司共同制定了SMB（Server Messages Block，服务器消息块）协议，旨在解决局域网内的文件或打印机等资源的共享问题，这也使得在多个主机之间共享文件变得越来越简单。到了1991年，当时还在读大学的Tridgwell为了解决Linux系统与Windows系统之间的文件共享问题，基于SMB协议开发出了SMBServer服务程序。这是一款开源的文件共享软件，经过简单配置就能够实现Linux系统与Windows系统之间的文件共享工作。当时，Tridgwell想把这款软件的名字SMBServer注册成为商标，但却被商标局以SMB是没有意义的字符而拒绝了申请。后来Tridgwell不断翻看词典，突然看到一个拉丁舞蹈的名字—Samba，而且这个热情洋溢的舞蹈名字中又恰好包含了“SMB”，于是Samba服务程序的名字由此诞生（见图12-1）。Samba服务程序现在已经成为在Linux系统与Windows系统之间共享文件的最佳选择。',0,'alvin',curdate());
insert into Content values(890,9,'image',6,'{"alt": "samba_logo", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_samba_logo.jpg", "width": "476"}','/static/img/linux/linux_samba_logo.jpg','/static/img/linux/linux_samba_logo.jpg',0,'alvin',curdate());
insert into Content values(891,9,'p',7,'{}','        Samba服务程序的配置方法与之前讲解的很多服务的配置方法类似，首先需要先通过Yum软件仓库来安装Samba服务程序（Samba服务程序的名字也恰巧是软件包的名字）：','        Samba服务程序的配置方法与之前讲解的很多服务的配置方法类似，首先需要先通过Yum软件仓库来安装Samba服务程序（Samba服务程序的名字也恰巧是软件包的名字）：',0,'alvin',curdate());
insert into Content values(892,9,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~ ]# yum install samba
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 samba x86_64 4.1.1-31.el7 rhel 527 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 527 k
Installed size: 1.5 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : samba-4.1.1-31.el7.x86_64 1/1 
 Verifying : samba-4.1.1-31.el7.x86_64 1/1 
Installed:
 samba.x86_64 0:4.1.1-31.el7 
Complete!
','[root@linuxprobe ~ ]# yum install samba
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 samba x86_64 4.1.1-31.el7 rhel 527 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 527 k
Installed size: 1.5 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : samba-4.1.1-31.el7.x86_64 1/1 
 Verifying : samba-4.1.1-31.el7.x86_64 1/1 
Installed:
 samba.x86_64 0:4.1.1-31.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(893,9,'p',9,'{}','        安装完毕后打开Samba服务程序的主配置文件，发现竟然有320行之多！有没有被吓到？但仔细一看就会发现，其实大多数都是以井号（#）开头的注释信息行。有刘遄老师在，肯定是不会让大家去“死啃”这些内容的。','        安装完毕后打开Samba服务程序的主配置文件，发现竟然有320行之多！有没有被吓到？但仔细一看就会发现，其实大多数都是以井号（#）开头的注释信息行。有刘遄老师在，肯定是不会让大家去“死啃”这些内容的。',0,'alvin',curdate());
insert into Content values(894,9,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/samba/smb.conf 
# This is the main Samba configuration file. For detailed information about the
# options listed here, refer to the smb.conf(5) manual page. Samba has a huge
# number of configurable options, most of which are not shown in this example.
#
# The Official Samba 3.2.x HOWTO and Reference Guide contains step-by-step
# guides for installing, configuring, and using Samba:
# http://www.samba.org/samba/docs/Samba-HOWTO-Collection.pdf
#
# The Samba-3 by Example guide has working examples for smb.conf. This guide is
# generated daily: http://www.samba.org/samba/docs/Samba-Guide.pdf
#
# In this file, lines starting with a semicolon (;) or a hash (#) are
# comments and are ignored. This file uses hashes to denote commentary and
# semicolons for parts of the file you may wish to configure.
#
# Note: Run the "testparm" command after modifying this file to check for basic
# syntax errors.
#
………………省略部分输出信息………………
','[root@linuxprobe ~]# cat /etc/samba/smb.conf 
# This is the main Samba configuration file. For detailed information about the
# options listed here, refer to the smb.conf(5) manual page. Samba has a huge
# number of configurable options, most of which are not shown in this example.
#
# The Official Samba 3.2.x HOWTO and Reference Guide contains step-by-step
# guides for installing, configuring, and using Samba:
# http://www.samba.org/samba/docs/Samba-HOWTO-Collection.pdf
#
# The Samba-3 by Example guide has working examples for smb.conf. This guide is
# generated daily: http://www.samba.org/samba/docs/Samba-Guide.pdf
#
# In this file, lines starting with a semicolon (;) or a hash (#) are
# comments and are ignored. This file uses hashes to denote commentary and
# semicolons for parts of the file you may wish to configure.
#
# Note: Run the "testparm" command after modifying this file to check for basic
# syntax errors.
#
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(895,9,'p',11,'{}','        由于在Samba服务程序的主配置文件中，注释信息行实在太多，不便于分析里面的重要参数，因此先把主配置文件改个名字，然后使用cat命令读入主配置文件，再在grep命令后面添加-v参数（反向选择），分别去掉所有以井号（#）和分号（;）开头的注释信息行，对于剩余的空白行可以使用^$参数来表示并进行反选过滤，最后把过滤后的可用参数信息通过重定向符覆盖写入到原始文件名称中。执行过滤后剩下的Samba服务程序的参数并不复杂，为了更方便读者查阅参数的功能，下表罗列了这些参数以及相应的注释说明。','        由于在Samba服务程序的主配置文件中，注释信息行实在太多，不便于分析里面的重要参数，因此先把主配置文件改个名字，然后使用cat命令读入主配置文件，再在grep命令后面添加-v参数（反向选择），分别去掉所有以井号（#）和分号（;）开头的注释信息行，对于剩余的空白行可以使用^$参数来表示并进行反选过滤，最后把过滤后的可用参数信息通过重定向符覆盖写入到原始文件名称中。执行过滤后剩下的Samba服务程序的参数并不复杂，为了更方便读者查阅参数的功能，下表罗列了这些参数以及相应的注释说明。',0,'alvin',curdate());
insert into Content values(896,9,'table',12,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
    [global]	#全局参数。
workgroup = MYGROUP	#工作组名称
server string = Samba Server Version %v	#服务器介绍信息，参数%v为显示SMB版本号
log file = /var/log/samba/log.%m	#定义日志文件的存放位置与名称，参数%m为来访的主机名
max log size = 50	#定义日志文件的最大容量为50KB
security = user	#share：来访主机无需验证口令；比较方便，但安全性很差<ul>#user：需验证来访主机提供的口令后才可以访问；提升了安全性<ul>#server：使用独立的远程主机验证来访主机提供的口令（集中管理账户）<ul>#domain：使用域控制器进行身份验证
passdb backend = tdbsam	#smbpasswd：使用smbpasswd命令为系统用户设置Samba服务程序的密码<ul>#tdbsam：创建数据库文件并使用pdbedit命令建立Samba服务程序的用户<ul>#ldapsam：基于LDAP服务进行账户验证
load printers = yes	#设置在Samba服务启动时是否共享打印机设备
cups options = raw	#打印机的选项
    [homes]	#共享参数
comment = Home Directories	#描述信息
browseable = no	#指定共享信息是否在“网上邻居”中可见
writable = yes	#定义是否可以执行写入操作，与“read only”相反
    [printers]	#指定共享信息是否在“网上邻居”中可见
comment = All Printers	
path = /var/spool/samba	#共享文件的实际路径(重要)。
browseable = no	
guest ok = no	#是否所有人可见，等同于"public"参数。
writable = no	
printable = yes	','参数	作用
    [global]	#全局参数。
workgroup = MYGROUP	#工作组名称
server string = Samba Server Version %v	#服务器介绍信息，参数%v为显示SMB版本号
log file = /var/log/samba/log.%m	#定义日志文件的存放位置与名称，参数%m为来访的主机名
max log size = 50	#定义日志文件的最大容量为50KB
security = user	#share：来访主机无需验证口令；比较方便，但安全性很差<ul>#user：需验证来访主机提供的口令后才可以访问；提升了安全性<ul>#server：使用独立的远程主机验证来访主机提供的口令（集中管理账户）<ul>#domain：使用域控制器进行身份验证
passdb backend = tdbsam	#smbpasswd：使用smbpasswd命令为系统用户设置Samba服务程序的密码<ul>#tdbsam：创建数据库文件并使用pdbedit命令建立Samba服务程序的用户<ul>#ldapsam：基于LDAP服务进行账户验证
load printers = yes	#设置在Samba服务启动时是否共享打印机设备
cups options = raw	#打印机的选项
    [homes]	#共享参数
comment = Home Directories	#描述信息
browseable = no	#指定共享信息是否在“网上邻居”中可见
writable = yes	#定义是否可以执行写入操作，与“read only”相反
    [printers]	#指定共享信息是否在“网上邻居”中可见
comment = All Printers	
path = /var/spool/samba	#共享文件的实际路径(重要)。
browseable = no	
guest ok = no	#是否所有人可见，等同于"public"参数。
writable = no	
printable = yes	',0,'alvin',curdate());
insert into Content values(897,9,'pre',13,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mv /etc/samba/smb.conf /etc/samba/smb.conf.bak
[root@linuxprobe ~]# cat /etc/samba/smb.conf.bak | grep -v "#" | grep -v ";" | grep -v "^$" > /etc/samba/smb.conf
[root@linuxprobe ~]# cat /etc/samba/smb.conf
','[root@linuxprobe ~]# mv /etc/samba/smb.conf /etc/samba/smb.conf.bak
[root@linuxprobe ~]# cat /etc/samba/smb.conf.bak | grep -v "#" | grep -v ";" | grep -v "^$" > /etc/samba/smb.conf
[root@linuxprobe ~]# cat /etc/samba/smb.conf
',0,'alvin',curdate());
insert into Content values(898,9,'h3',14,'{}','配置共享资源','配置共享资源',0,'alvin',curdate());
insert into Content values(899,9,'p',15,'{}','        Samba服务程序的主配置文件与前面学习过的Apache服务很相似，包括全局配置参数和区域配置参数。全局配置参数用于设置整体的资源共享环境，对里面的每一个独立的共享资源都有效。区域配置参数则用于设置单独的共享资源，且仅对该资源有效。创建共享资源的方法很简单，只要将表12-2中的参数写入到Samba服务程序的主配置文件中，然后重启该服务即可。','        Samba服务程序的主配置文件与前面学习过的Apache服务很相似，包括全局配置参数和区域配置参数。全局配置参数用于设置整体的资源共享环境，对里面的每一个独立的共享资源都有效。区域配置参数则用于设置单独的共享资源，且仅对该资源有效。创建共享资源的方法很简单，只要将表12-2中的参数写入到Samba服务程序的主配置文件中，然后重启该服务即可。',0,'alvin',curdate());
insert into Content values(900,9,'table',16,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
[database]	共享名称为database
comment = Do not arbitrarily modify the database file	警告用户不要随意修改数据库
path = /home/database	共享目录为/home/database
public = no	关闭“所有人可见”
writable = yes	允许写入操作','参数	作用
[database]	共享名称为database
comment = Do not arbitrarily modify the database file	警告用户不要随意修改数据库
path = /home/database	共享目录为/home/database
public = no	关闭“所有人可见”
writable = yes	允许写入操作',0,'alvin',curdate());
insert into Content values(901,9,'p',17,'{}',' BOLD[  第1步： ]BOLD 创建用于访问共享资源的账户信息。在RHEL 7系统中，Samba服务程序默认使用的是用户口令认证模式（user）。这种认证模式可以确保仅让有密码且受信任的用户访问共享资源，而且验证过程也十分简单。不过，只有建立账户信息数据库之后，才能使用用户口令认证模式。另外，Samba服务程序的数据库要求账户必须在当前系统中已经存在，否则日后创建文件时将导致文件的权限属性混乱不堪，由此引发错误。',' BOLD[  第1步： ]BOLD 创建用于访问共享资源的账户信息。在RHEL 7系统中，Samba服务程序默认使用的是用户口令认证模式（user）。这种认证模式可以确保仅让有密码且受信任的用户访问共享资源，而且验证过程也十分简单。不过，只有建立账户信息数据库之后，才能使用用户口令认证模式。另外，Samba服务程序的数据库要求账户必须在当前系统中已经存在，否则日后创建文件时将导致文件的权限属性混乱不堪，由此引发错误。',0,'alvin',curdate());
insert into Content values(902,9,'p',18,'{}','        pdbedit命令用于管理SMB服务程序的账户信息数据库，格式为“pdbedit [选项] 账户”。在第一次把账户信息写入到数据库时需要使用-a参数，以后在执行修改密码、删除账户等操作时就不再需要该参数了。pdbedit命令中使用的参数以及作用如下表所示。','        pdbedit命令用于管理SMB服务程序的账户信息数据库，格式为“pdbedit [选项] 账户”。在第一次把账户信息写入到数据库时需要使用-a参数，以后在执行修改密码、删除账户等操作时就不再需要该参数了。pdbedit命令中使用的参数以及作用如下表所示。',0,'alvin',curdate());
insert into Content values(903,9,'table',19,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-a 用户名	建立Samba用户
-x 用户名	删除Samba用户
-L	列出用户列表
-Lv	列出用户详细信息的列表','参数	作用
-a 用户名	建立Samba用户
-x 用户名	删除Samba用户
-L	列出用户列表
-Lv	列出用户详细信息的列表',0,'alvin',curdate());
insert into Content values(904,9,'pre',20,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# id linuxprobe
uid=1000(linuxprobe) gid=1000(linuxprobe) groups=1000(linuxprobe)
[root@linuxprobe ~]# pdbedit -a -u linuxprobe
new password:此处输入该账户在Samba服务数据库中的密码
retype new password:再次输入密码进行确认
Unix username: linuxprobe
NT username: 
Account Flags: [U ]
User SID: S-1-5-21-507407404-3243012849-3065158664-1000
Primary Group SID: S-1-5-21-507407404-3243012849-3065158664-513
Full Name: linuxprobe
Home Directory: \\localhost\linuxprobe
HomeDir Drive: 
Logon Script: 
Profile Path: \\localhost\linuxprobe\profile
Domain: LOCALHOST
Account desc: 
Workstations: 
Munged dial: 
Logon time: 0
Logoff time: Wed, 06 Feb 2036 10:06:39 EST
Kickoff time: Wed, 06 Feb 2036 10:06:39 EST
Password last set: Mon, 13 Mar 2017 04:22:25 EDT
Password can change: Mon, 13 Mar 2017 04:22:25 EDT
Password must change: never
Last bad password : 0
Bad password count : 0
Logon hours : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
','[root@linuxprobe ~]# id linuxprobe
uid=1000(linuxprobe) gid=1000(linuxprobe) groups=1000(linuxprobe)
[root@linuxprobe ~]# pdbedit -a -u linuxprobe
new password:此处输入该账户在Samba服务数据库中的密码
retype new password:再次输入密码进行确认
Unix username: linuxprobe
NT username: 
Account Flags: [U ]
User SID: S-1-5-21-507407404-3243012849-3065158664-1000
Primary Group SID: S-1-5-21-507407404-3243012849-3065158664-513
Full Name: linuxprobe
Home Directory: \\localhost\linuxprobe
HomeDir Drive: 
Logon Script: 
Profile Path: \\localhost\linuxprobe\profile
Domain: LOCALHOST
Account desc: 
Workstations: 
Munged dial: 
Logon time: 0
Logoff time: Wed, 06 Feb 2036 10:06:39 EST
Kickoff time: Wed, 06 Feb 2036 10:06:39 EST
Password last set: Mon, 13 Mar 2017 04:22:25 EDT
Password can change: Mon, 13 Mar 2017 04:22:25 EDT
Password must change: never
Last bad password : 0
Bad password count : 0
Logon hours : FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
',0,'alvin',curdate());
insert into Content values(905,9,'p',21,'{}',' BOLD[  第2步： ]BOLD 创建用于共享资源的文件目录。在创建时，不仅要考虑到文件读写权限的问题，而且由于/home目录是系统中普通用户的家目录，因此还需要考虑应用于该目录的SELinux安全上下文所带来的限制。在前面对Samba服务程序配置文件中的注释信息进行过滤时，这些过滤的信息中就有关于SELinux安全上下文策略的说明，我们只需按照过滤信息中有关SELinux安全上下文策略中的说明中给的值进行修改即可。修改完毕后执行restorecon命令，让应用于目录的新SELinux安全上下文立即生效。',' BOLD[  第2步： ]BOLD 创建用于共享资源的文件目录。在创建时，不仅要考虑到文件读写权限的问题，而且由于/home目录是系统中普通用户的家目录，因此还需要考虑应用于该目录的SELinux安全上下文所带来的限制。在前面对Samba服务程序配置文件中的注释信息进行过滤时，这些过滤的信息中就有关于SELinux安全上下文策略的说明，我们只需按照过滤信息中有关SELinux安全上下文策略中的说明中给的值进行修改即可。修改完毕后执行restorecon命令，让应用于目录的新SELinux安全上下文立即生效。',0,'alvin',curdate());
insert into Content values(906,9,'pre',22,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /home/database
[root@linuxprobe ~]# chown -Rf linuxprobe:linuxprobe /home/database
[root@linuxprobe ~]# semanage fcontext -a -t samba_share_t /home/database
[root@linuxprobe ~]# restorecon -Rv /home/database
restorecon reset /home/database context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:samba_share_t:s0
','[root@linuxprobe ~]# mkdir /home/database
[root@linuxprobe ~]# chown -Rf linuxprobe:linuxprobe /home/database
[root@linuxprobe ~]# semanage fcontext -a -t samba_share_t /home/database
[root@linuxprobe ~]# restorecon -Rv /home/database
restorecon reset /home/database context unconfined_u:object_r:home_root_t:s0->unconfined_u:object_r:samba_share_t:s0
',0,'alvin',curdate());
insert into Content values(907,9,'p',23,'{}',' BOLD[  第3步： ]BOLD 设置SELinux服务与策略，使其允许通过Samba服务程序访问普通用户家目录。执行getsebool命令，筛选出所有与Samba服务程序相关的SELinux域策略，根据策略的名称（和经验）选择出正确的策略条目进行开启即可：',' BOLD[  第3步： ]BOLD 设置SELinux服务与策略，使其允许通过Samba服务程序访问普通用户家目录。执行getsebool命令，筛选出所有与Samba服务程序相关的SELinux域策略，根据策略的名称（和经验）选择出正确的策略条目进行开启即可：',0,'alvin',curdate());
insert into Content values(908,9,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# getsebool -a | grep samba
samba_create_home_dirs --> off
samba_domain_controller --> off
samba_enable_home_dirs --> off
samba_export_all_ro --> off
samba_export_all_rw --> off
samba_portmapper --> off
samba_run_unconfined --> off
samba_share_fusefs --> off
samba_share_nfs --> off
sanlock_use_samba --> off
use_samba_home_dirs --> off
virt_sandbox_use_samba --> off
virt_use_samba --> off
[root@linuxprobe ~]# setsebool -P samba_enable_home_dirs on
','[root@linuxprobe ~]# getsebool -a | grep samba
samba_create_home_dirs --> off
samba_domain_controller --> off
samba_enable_home_dirs --> off
samba_export_all_ro --> off
samba_export_all_rw --> off
samba_portmapper --> off
samba_run_unconfined --> off
samba_share_fusefs --> off
samba_share_nfs --> off
sanlock_use_samba --> off
use_samba_home_dirs --> off
virt_sandbox_use_samba --> off
virt_use_samba --> off
[root@linuxprobe ~]# setsebool -P samba_enable_home_dirs on
',0,'alvin',curdate());
insert into Content values(909,9,'p',25,'{}',' BOLD[  第4步： ]BOLD 在Samba服务程序的主配置文件中，根据上表所提到的格式写入共享信息。在原始的配置文件中，[homes]参数为来访用户的家目录共享信息，[printers]参数为共享的打印机设备。这两项如果在今后的工作中不需要，可以像刘遄老师一样手动删除，这没有任何问题。',' BOLD[  第4步： ]BOLD 在Samba服务程序的主配置文件中，根据上表所提到的格式写入共享信息。在原始的配置文件中，[homes]参数为来访用户的家目录共享信息，[printers]参数为共享的打印机设备。这两项如果在今后的工作中不需要，可以像刘遄老师一样手动删除，这没有任何问题。',0,'alvin',curdate());
insert into Content values(910,9,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/samba/smb.conf 
[global]
 workgroup = MYGROUP
 server string = Samba Server Version %v
 log file = /var/log/samba/log.%m
 max log size = 50
 security = user
 passdb backend = tdbsam
 load printers = yes
 cups options = raw
[database]
 comment = Do not arbitrarily modify the database file
 path = /home/database
 public = no
 writable = yes
 ','[root@linuxprobe ~]# vim /etc/samba/smb.conf 
[global]
 workgroup = MYGROUP
 server string = Samba Server Version %v
 log file = /var/log/samba/log.%m
 max log size = 50
 security = user
 passdb backend = tdbsam
 load printers = yes
 cups options = raw
[database]
 comment = Do not arbitrarily modify the database file
 path = /home/database
 public = no
 writable = yes
 ',0,'alvin',curdate());
insert into Content values(911,9,'p',27,'{}',' BOLD[  第5步： ]BOLD Samba服务程序的配置工作基本完毕。接下来重启smb服务（Samba服务程序在Linux系统中的名字为smb）并清空iptables防火墙，然后就可以检验配置效果了。',' BOLD[  第5步： ]BOLD Samba服务程序的配置工作基本完毕。接下来重启smb服务（Samba服务程序在Linux系统中的名字为smb）并清空iptables防火墙，然后就可以检验配置效果了。',0,'alvin',curdate());
insert into Content values(912,9,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart smb
[root@linuxprobe ~]# systemctl enable smb
 ln -s \'/usr/lib/systemd/system/smb.service\' \'/etc/systemd/system/multi-user.target.wants/smb.service\'
[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
','[root@linuxprobe ~]# systemctl restart smb
[root@linuxprobe ~]# systemctl enable smb
 ln -s \'/usr/lib/systemd/system/smb.service\' \'/etc/systemd/system/multi-user.target.wants/smb.service\'
[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
',0,'alvin',curdate());
insert into Content values(913,9,'h3',29,'{}','Windows挂载共享','Windows挂载共享',0,'alvin',curdate());
insert into Content values(914,9,'p',30,'{}','        无论Samba共享服务是部署Windows系统上还是部署在Linux系统上，通过Windows系统进行访问时，其步骤和方法都是一样的。下面假设Samba共享服务部署在Linux系统上，并通过Windows系统来访问Samba服务。Samba共享服务器和Windows客户端的IP地址可以根据下表来设置。','        无论Samba共享服务是部署Windows系统上还是部署在Linux系统上，通过Windows系统进行访问时，其步骤和方法都是一样的。下面假设Samba共享服务部署在Linux系统上，并通过Windows系统来访问Samba服务。Samba共享服务器和Windows客户端的IP地址可以根据下表来设置。',0,'alvin',curdate());
insert into Content values(915,9,'table',31,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
Samba共享服务器	RHEL 7	192.168.10.10
Linux客户端	RHEL 7	192.168.10.20
Windows客户端	Windows 7	192.168.10.30','主机名称	操作系统	IP地址
Samba共享服务器	RHEL 7	192.168.10.10
Linux客户端	RHEL 7	192.168.10.20
Windows客户端	Windows 7	192.168.10.30',0,'alvin',curdate());
insert into Content values(916,9,'image',32,'{"alt": "windows_samba", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_windows_samba.png", "width": "476"}','/static/img/linux/linux_windows_samba.png','/static/img/linux/linux_windows_samba.png',0,'alvin',curdate());
insert into Content values(917,9,'p',33,'{}','        如果已经清空了Linux系统上iptables防火墙的默认策略（即执行iptables -F命令），现在就应该能看到Samba共享服务的登录界面了。在这里先使用linuxprobe账户的系统本地密码尝试登录，结果出现了如下图所示的报错信息。由此可以验证，在RHEL 7系统中，Samba服务程序使用的果然是独立的账户信息数据库。所以，即便在Linux系统中有一个linuxprobe账户，Samba服务程序使用的账户信息数据库中也有一个同名的linuxprobe账户，大家也一定要弄清楚它们各自所对应的密码。','        如果已经清空了Linux系统上iptables防火墙的默认策略（即执行iptables -F命令），现在就应该能看到Samba共享服务的登录界面了。在这里先使用linuxprobe账户的系统本地密码尝试登录，结果出现了如下图所示的报错信息。由此可以验证，在RHEL 7系统中，Samba服务程序使用的果然是独立的账户信息数据库。所以，即便在Linux系统中有一个linuxprobe账户，Samba服务程序使用的账户信息数据库中也有一个同名的linuxprobe账户，大家也一定要弄清楚它们各自所对应的密码。',0,'alvin',curdate());
insert into Content values(918,9,'image',34,'{"alt": "samba_auth", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_samba_auth.jpg", "width": "476"}','/static/img/linux/linux_samba_auth.jpg','/static/img/linux/linux_samba_auth.jpg',0,'alvin',curdate());
insert into Content values(919,9,'p',35,'{}','        正确输入linuxprobe账户名以及使用pdbedit命令设置的密码后，就可以登录到共享界面中了，如下图所示。此时，我们可以尝试执行查看、写入、更名、删除文件等操作。','        正确输入linuxprobe账户名以及使用pdbedit命令设置的密码后，就可以登录到共享界面中了，如下图所示。此时，我们可以尝试执行查看、写入、更名、删除文件等操作。',0,'alvin',curdate());
insert into Content values(920,9,'image',36,'{"alt": "samba_use", "class": ["attachment-full"], "height": "472", "src": "/static/img/linux/linux_samba_use.jpg", "width": "476"}','/static/img/linux/linux_samba_use.jpg','/static/img/linux/linux_samba_use.jpg',0,'alvin',curdate());
insert into Content values(921,9,'p',37,'{}','        由于Windows系统的缓存原因，有可能您在第二次登录时提供了正确的账户和密码，依然会报错，这时只需要重新启动一下Windows客户端就没问题了（如果Windows系统依然报错，请检查上述步骤是否有做错的地方）。','        由于Windows系统的缓存原因，有可能您在第二次登录时提供了正确的账户和密码，依然会报错，这时只需要重新启动一下Windows客户端就没问题了（如果Windows系统依然报错，请检查上述步骤是否有做错的地方）。',0,'alvin',curdate());
insert into Content values(922,9,'h3',38,'{}','Linux挂载共享','Linux挂载共享',0,'alvin',curdate());
insert into Content values(923,9,'p',39,'{}','        上面的实验操作可能会让各位读者误以为Samba服务程序只是为了解决Linux系统和Windows系统的资源共享问题而设计的。其实，Samba服务程序还可以实现Linux系统之间的文件共享。请各位读者按照表12-5来设置Samba服务程序所在主机（即Samba共享服务器）和Linux客户端使用的IP地址，然后在客户端安装支持文件共享服务的软件包（cifs-utils）。','        上面的实验操作可能会让各位读者误以为Samba服务程序只是为了解决Linux系统和Windows系统的资源共享问题而设计的。其实，Samba服务程序还可以实现Linux系统之间的文件共享。请各位读者按照表12-5来设置Samba服务程序所在主机（即Samba共享服务器）和Linux客户端使用的IP地址，然后在客户端安装支持文件共享服务的软件包（cifs-utils）。',0,'alvin',curdate());
insert into Content values(924,9,'table',40,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
Samba共享服务器	RHEL 7	192.168.10.10
Linux客户端	RHEL 7	192.168.10.20
Windows客户端	Windows 7	192.168.10.30','主机名称	操作系统	IP地址
Samba共享服务器	RHEL 7	192.168.10.10
Linux客户端	RHEL 7	192.168.10.20
Windows客户端	Windows 7	192.168.10.30',0,'alvin',curdate());
insert into Content values(925,9,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install cifs-utils
Loaded plugins: langpacks, product-id, subscription-manager
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package cifs-utils.x86_64 0:6.2-6.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 cifs-utils x86_64 6.2-6.el7 rhel 83 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 83 k
Installed size: 174 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : cifs-utils-6.2-6.el7.x86_64 1/1 
 Verifying : cifs-utils-6.2-6.el7.x86_64 1/1 
Installed:
 cifs-utils.x86_64 0:6.2-6.el7 
Complete!
','[root@linuxprobe ~]# yum install cifs-utils
Loaded plugins: langpacks, product-id, subscription-manager
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package cifs-utils.x86_64 0:6.2-6.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 cifs-utils x86_64 6.2-6.el7 rhel 83 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 83 k
Installed size: 174 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : cifs-utils-6.2-6.el7.x86_64 1/1 
 Verifying : cifs-utils-6.2-6.el7.x86_64 1/1 
Installed:
 cifs-utils.x86_64 0:6.2-6.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(926,9,'p',42,'{}','        在Linux客户端，按照Samba服务的用户名、密码、共享域的顺序将相关信息写入到一个认证文件中。为了保证不被其他人随意看到，最后把这个认证文件的权限修改为仅root管理员才能够读写：','        在Linux客户端，按照Samba服务的用户名、密码、共享域的顺序将相关信息写入到一个认证文件中。为了保证不被其他人随意看到，最后把这个认证文件的权限修改为仅root管理员才能够读写：',0,'alvin',curdate());
insert into Content values(927,9,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim auth.smb
username=linuxprobe
password=redhat
domain=MYGROUP
[root@linuxprobe ~]# chmod -Rf 600 auth.smb
','[root@linuxprobe ~]# vim auth.smb
username=linuxprobe
password=redhat
domain=MYGROUP
[root@linuxprobe ~]# chmod -Rf 600 auth.smb
',0,'alvin',curdate());
insert into Content values(928,9,'p',44,'{}','        现在，在Linux客户端上创建一个用于挂载Samba服务共享资源的目录，并把挂载信息写入到/etc/fstab文件中，以确保共享挂载信息在服务器重启后依然生效：','        现在，在Linux客户端上创建一个用于挂载Samba服务共享资源的目录，并把挂载信息写入到/etc/fstab文件中，以确保共享挂载信息在服务器重启后依然生效：',0,'alvin',curdate());
insert into Content values(929,9,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /database
[root@linuxprobe ~]# vim /etc/fstab
#
# /etc/fstab
# Created by anaconda on Wed May 4 19:26:23 2017
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root / xfs defaults 1 1
UUID=812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot xfs defaults 1 2
/dev/mapper/rhel-swap swap swap defaults 0 0
/dev/cdrom /media/cdrom iso9660 defaults 0 0 
//192.168.10.10/database /database cifs credentials=/root/auth.smb 0 0
[root@linuxprobe ~]# mount -a
','[root@linuxprobe ~]# mkdir /database
[root@linuxprobe ~]# vim /etc/fstab
#
# /etc/fstab
# Created by anaconda on Wed May 4 19:26:23 2017
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root / xfs defaults 1 1
UUID=812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot xfs defaults 1 2
/dev/mapper/rhel-swap swap swap defaults 0 0
/dev/cdrom /media/cdrom iso9660 defaults 0 0 
//192.168.10.10/database /database cifs credentials=/root/auth.smb 0 0
[root@linuxprobe ~]# mount -a
',0,'alvin',curdate());
insert into Content values(930,9,'p',46,'{}','        Linux客户端成功地挂载了Samba服务的共享资源。进入到挂载目录/database后就可以看到Windows系统访问Samba服务程序时留下来的文件了（即文件Memo.txt）。当然，我们也可以对该文件进行读写操作并保存。','        Linux客户端成功地挂载了Samba服务的共享资源。进入到挂载目录/database后就可以看到Windows系统访问Samba服务程序时留下来的文件了（即文件Memo.txt）。当然，我们也可以对该文件进行读写操作并保存。',0,'alvin',curdate());
insert into Content values(931,9,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /database/Memo.txt
i can edit it .
','[root@linuxprobe ~]# cat /database/Memo.txt
i can edit it .
',0,'alvin',curdate());
insert into Content values(932,9,'h2',48,'{}','NFS网络文件系统','NFS网络文件系统',0,'alvin',curdate());
insert into Content values(933,9,'p',49,'{}','        如果大家觉得Samba服务程序的配置太麻烦，而且恰巧需要共享文件的主机都是Linux系统，刘遄老师非常推荐大家在客户端部署NFS服务来共享文件。NFS（网络文件系统）服务可以将远程Linux系统上的文件共享资源挂载到本地主机的目录上，从而使得本地主机（Linux客户端）基于TCP/IP协议，像使用本地主机上的资源那样读写远程Linux系统上的共享文件。','        如果大家觉得Samba服务程序的配置太麻烦，而且恰巧需要共享文件的主机都是Linux系统，刘遄老师非常推荐大家在客户端部署NFS服务来共享文件。NFS（网络文件系统）服务可以将远程Linux系统上的文件共享资源挂载到本地主机的目录上，从而使得本地主机（Linux客户端）基于TCP/IP协议，像使用本地主机上的资源那样读写远程Linux系统上的共享文件。',0,'alvin',curdate());
insert into Content values(934,9,'p',50,'{}','        由于RHEL 7系统中默认已经安装了NFS服务，外加NFS服务的配置步骤也很简单，因此刘遄老师在授课时会将NFS戏谑为Need For Speed。接下来，我们准备配置NFS服务。首先请使用Yum软件仓库检查自己的RHEL 7系统中是否已经安装了NFS软件包：','        由于RHEL 7系统中默认已经安装了NFS服务，外加NFS服务的配置步骤也很简单，因此刘遄老师在授课时会将NFS戏谑为Need For Speed。接下来，我们准备配置NFS服务。首先请使用Yum软件仓库检查自己的RHEL 7系统中是否已经安装了NFS软件包：',0,'alvin',curdate());
insert into Content values(935,9,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install nfs-utils
Loaded plugins: langpacks, product-id, subscription-manager
(1/2): rhel7/group_gz | 134 kB 00:00
(2/2): rhel7/primary_db | 3.4 MB 00:00
Package 1:nfs-utils-1.3.0-0.el7.x86_64 already installed and latest version
Nothing to do
','[root@linuxprobe ~]# yum install nfs-utils
Loaded plugins: langpacks, product-id, subscription-manager
(1/2): rhel7/group_gz | 134 kB 00:00
(2/2): rhel7/primary_db | 3.4 MB 00:00
Package 1:nfs-utils-1.3.0-0.el7.x86_64 already installed and latest version
Nothing to do
',0,'alvin',curdate());
insert into Content values(936,9,'p',52,'{}',' BOLD[  第1步： ]BOLD 为了检验NFS服务配置的效果，我们需要使用两台Linux主机（一台充当NFS服务器，一台充当NFS客户端），并按照下表来设置它们所使用的IP地址。',' BOLD[  第1步： ]BOLD 为了检验NFS服务配置的效果，我们需要使用两台Linux主机（一台充当NFS服务器，一台充当NFS客户端），并按照下表来设置它们所使用的IP地址。',0,'alvin',curdate());
insert into Content values(937,9,'table',53,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
NFS服务端	RHEL 7	192.168.10.10
NFS客户端	RHEL 7	192.168.10.20','主机名称	操作系统	IP地址
NFS服务端	RHEL 7	192.168.10.10
NFS客户端	RHEL 7	192.168.10.20',0,'alvin',curdate());
insert into Content values(938,9,'p',54,'{}','        另外，不要忘记清空NFS服务器上面iptables防火墙的默认策略，以免默认的防火墙策略禁止正常的NFS共享服务。','        另外，不要忘记清空NFS服务器上面iptables防火墙的默认策略，以免默认的防火墙策略禁止正常的NFS共享服务。',0,'alvin',curdate());
insert into Content values(939,9,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
','[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
',0,'alvin',curdate());
insert into Content values(940,9,'p',56,'{}',' BOLD[  第2步： ]BOLD 在NFS服务器上建立用于NFS文件共享的目录，并设置足够的权限确保其他人也有写入权限。',' BOLD[  第2步： ]BOLD 在NFS服务器上建立用于NFS文件共享的目录，并设置足够的权限确保其他人也有写入权限。',0,'alvin',curdate());
insert into Content values(941,9,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /nfsfile
[root@linuxprobe ~]# chmod -Rf 777 /nfsfile
[root@linuxprobe ~]# echo "welcome to linuxprobe.com" > /nfsfile/readme
','[root@linuxprobe ~]# mkdir /nfsfile
[root@linuxprobe ~]# chmod -Rf 777 /nfsfile
[root@linuxprobe ~]# echo "welcome to linuxprobe.com" > /nfsfile/readme
',0,'alvin',curdate());
insert into Content values(942,9,'p',58,'{}',' BOLD[  第3步： ]BOLD NFS服务程序的配置文件为/etc/exports，默认情况下里面没有任何内容。我们可以按照“共享目录的路径 允许访问的NFS客户端（共享权限参数）”的格式，定义要共享的目录与相应的权限。',' BOLD[  第3步： ]BOLD NFS服务程序的配置文件为/etc/exports，默认情况下里面没有任何内容。我们可以按照“共享目录的路径 允许访问的NFS客户端（共享权限参数）”的格式，定义要共享的目录与相应的权限。',0,'alvin',curdate());
insert into Content values(943,9,'p',59,'{}','        例如，如果想要把/nfsfile目录共享给192.168.10.0/24网段内的所有主机，让这些主机都拥有读写权限，在将数据写入到NFS服务器的硬盘中后才会结束操作，最大限度保证数据不丢失，以及把来访客户端root管理员映射为本地的匿名用户等，则可以按照下面命令中的格式，将下表中的参数写到NFS服务程序的配置文件中。','        例如，如果想要把/nfsfile目录共享给192.168.10.0/24网段内的所有主机，让这些主机都拥有读写权限，在将数据写入到NFS服务器的硬盘中后才会结束操作，最大限度保证数据不丢失，以及把来访客户端root管理员映射为本地的匿名用户等，则可以按照下面命令中的格式，将下表中的参数写到NFS服务程序的配置文件中。',0,'alvin',curdate());
insert into Content values(944,9,'table',60,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
ro	只读
rw	读写
root_squash	当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户
no_root_squash	当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员
all_squash	无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户
sync	同时将数据写入到内存与硬盘中，保证不丢失数据
async	优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据','参数	作用
ro	只读
rw	读写
root_squash	当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户
no_root_squash	当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员
all_squash	无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户
sync	同时将数据写入到内存与硬盘中，保证不丢失数据
async	优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据',0,'alvin',curdate());
insert into Content values(945,9,'p',61,'{}','        请注意，NFS客户端地址与权限之间没有空格。','        请注意，NFS客户端地址与权限之间没有空格。',0,'alvin',curdate());
insert into Content values(946,9,'pre',62,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/exports
/nfsfile 192.168.10.*(rw,sync,root_squash)
','[root@linuxprobe ~]# vim /etc/exports
/nfsfile 192.168.10.*(rw,sync,root_squash)
',0,'alvin',curdate());
insert into Content values(947,9,'p',63,'{}',' BOLD[  第4步： ]BOLD 启动和启用NFS服务程序。由于在使用NFS服务进行文件共享之前，需要使用RPC（Remote Procedure Call，远程过程调用）服务将NFS服务器的IP地址和端口号等信息发送给客户端。因此，在启动NFS服务之前，还需要顺带重启并启用rpcbind服务程序，并将这两个服务一并加入开机启动项中。',' BOLD[  第4步： ]BOLD 启动和启用NFS服务程序。由于在使用NFS服务进行文件共享之前，需要使用RPC（Remote Procedure Call，远程过程调用）服务将NFS服务器的IP地址和端口号等信息发送给客户端。因此，在启动NFS服务之前，还需要顺带重启并启用rpcbind服务程序，并将这两个服务一并加入开机启动项中。',0,'alvin',curdate());
insert into Content values(948,9,'pre',64,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart rpcbind
[root@linuxprobe ~]# systemctl enable rpcbind
[root@linuxprobe ~]# systemctl start nfs-server
[root@linuxprobe ~]# systemctl enable nfs-server
ln -s \'/usr/lib/systemd/system/nfs-server.service\' \'/etc/systemd/system/nfs.target.wants/nfs-server.service\'
','[root@linuxprobe ~]# systemctl restart rpcbind
[root@linuxprobe ~]# systemctl enable rpcbind
[root@linuxprobe ~]# systemctl start nfs-server
[root@linuxprobe ~]# systemctl enable nfs-server
ln -s \'/usr/lib/systemd/system/nfs-server.service\' \'/etc/systemd/system/nfs.target.wants/nfs-server.service\'
',0,'alvin',curdate());
insert into Content values(949,9,'p',65,'{}','        NFS客户端的配置步骤也十分简单。先使用showmount命令（以及必要的参数，见下表）查询NFS服务器的远程共享信息，其输出格式为“共享的目录名称 允许使用客户端地址”。','        NFS客户端的配置步骤也十分简单。先使用showmount命令（以及必要的参数，见下表）查询NFS服务器的远程共享信息，其输出格式为“共享的目录名称 允许使用客户端地址”。',0,'alvin',curdate());
insert into Content values(950,9,'table',66,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-e	显示NFS服务器的共享列表
-a	显示本机挂载的文件资源的情况NFS资源的情况
-v	显示版本号','参数	作用
-e	显示NFS服务器的共享列表
-a	显示本机挂载的文件资源的情况NFS资源的情况
-v	显示版本号',0,'alvin',curdate());
insert into Content values(951,9,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# showmount -e 192.168.10.10
Export list for 192.168.10.10:
/nfsfile 192.168.10.*
','[root@linuxprobe ~]# showmount -e 192.168.10.10
Export list for 192.168.10.10:
/nfsfile 192.168.10.*
',0,'alvin',curdate());
insert into Content values(952,9,'p',68,'{}','        然后在NFS客户端创建一个挂载目录。使用mount命令并结合-t参数，指定要挂载的文件系统的类型，并在命令后面写上服务器的IP地址、服务器上的共享目录以及要挂载到本地系统（即客户端）的目录。','        然后在NFS客户端创建一个挂载目录。使用mount命令并结合-t参数，指定要挂载的文件系统的类型，并在命令后面写上服务器的IP地址、服务器上的共享目录以及要挂载到本地系统（即客户端）的目录。',0,'alvin',curdate());
insert into Content values(953,9,'pre',69,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /nfsfile
[root@linuxprobe ~]# mount -t nfs 192.168.10.10:/nfsfile /nfsfile
','[root@linuxprobe ~]# mkdir /nfsfile
[root@linuxprobe ~]# mount -t nfs 192.168.10.10:/nfsfile /nfsfile
',0,'alvin',curdate());
insert into Content values(954,9,'p',70,'{}','        挂载成功后就应该能够顺利地看到在执行前面的操作时写入的文件内容了。如果希望NFS文件共享服务能一直有效，则需要将其写入到fstab文件中：','        挂载成功后就应该能够顺利地看到在执行前面的操作时写入的文件内容了。如果希望NFS文件共享服务能一直有效，则需要将其写入到fstab文件中：',0,'alvin',curdate());
insert into Content values(955,9,'pre',71,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /nfsfile/readme
welcome to linuxprobe.com
[root@linuxprobe ~]# vim /etc/fstab 
#
# /etc/fstab
# Created by anaconda on Wed May 4 19:26:23 2017
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root / xfs defaults 1 1
UUID=812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot xfs defaults 1 2
/dev/mapper/rhel-swap swap swap defaults 0 0
/dev/cdrom /media/cdrom iso9660 defaults 0 0 
192.168.10.10:/nfsfile /nfsfile nfs defaults 0 0
','[root@linuxprobe ~]# cat /nfsfile/readme
welcome to linuxprobe.com
[root@linuxprobe ~]# vim /etc/fstab 
#
# /etc/fstab
# Created by anaconda on Wed May 4 19:26:23 2017
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root / xfs defaults 1 1
UUID=812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot xfs defaults 1 2
/dev/mapper/rhel-swap swap swap defaults 0 0
/dev/cdrom /media/cdrom iso9660 defaults 0 0 
192.168.10.10:/nfsfile /nfsfile nfs defaults 0 0
',0,'alvin',curdate());
insert into Content values(956,9,'h2',72,'{}','AutoFs自动挂载服务','AutoFs自动挂载服务',0,'alvin',curdate());
insert into Content values(957,9,'p',73,'{}','        无论是Samba服务还是NFS服务，都要把挂载信息写入到/etc/fstab中，这样远程共享资源就会自动随服务器开机而进行挂载。虽然这很方便，但是如果挂载的远程资源太多，则会给网络带宽和服务器的硬件资源带来很大负载。如果在资源挂载后长期不使用，也会造成服务器硬件资源的浪费。可能会有读者说，“可以在每次使用之前执行mount命令进行手动挂载”。这是一个不错的选择，但是每次都需要先挂载再使用，您不觉得麻烦吗？','        无论是Samba服务还是NFS服务，都要把挂载信息写入到/etc/fstab中，这样远程共享资源就会自动随服务器开机而进行挂载。虽然这很方便，但是如果挂载的远程资源太多，则会给网络带宽和服务器的硬件资源带来很大负载。如果在资源挂载后长期不使用，也会造成服务器硬件资源的浪费。可能会有读者说，“可以在每次使用之前执行mount命令进行手动挂载”。这是一个不错的选择，但是每次都需要先挂载再使用，您不觉得麻烦吗？',0,'alvin',curdate());
insert into Content values(958,9,'p',74,'{}','        autofs自动挂载服务可以帮我们解决这一问题。与mount命令不同，autofs服务程序是一种Linux系统守护进程，当检测到用户试图访问一个尚未挂载的文件系统时，将自动挂载该文件系统。换句话说，我们将挂载信息填入/etc/fstab文件后，系统在每次开机时都自动将其挂载，而autofs服务程序则是在用户需要使用该文件系统时才去动态挂载，从而节约了网络资源和服务器的硬件资源。','        autofs自动挂载服务可以帮我们解决这一问题。与mount命令不同，autofs服务程序是一种Linux系统守护进程，当检测到用户试图访问一个尚未挂载的文件系统时，将自动挂载该文件系统。换句话说，我们将挂载信息填入/etc/fstab文件后，系统在每次开机时都自动将其挂载，而autofs服务程序则是在用户需要使用该文件系统时才去动态挂载，从而节约了网络资源和服务器的硬件资源。',0,'alvin',curdate());
insert into Content values(959,9,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install autofs
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package autofs.x86_64 1:5.0.7-40.el7 will be installed
--> Processing Dependency: libhesiod.so.0()(64bit) for package: 1:autofs-5.0.7-40.el7.x86_64
--> Running transaction check
---> Package hesiod.x86_64 0:3.2.1-3.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 autofs x86_64 1:5.0.7-40.el7 rhel 550 k
Installing for dependencies:
 hesiod x86_64 3.2.1-3.el7 rhel 30 k
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 579 k
Installed size: 3.6 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 9.4 MB/s | 579 kB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : hesiod-3.2.1-3.el7.x86_64 1/2 
 Installing : 1:autofs-5.0.7-40.el7.x86_64 2/2 
 Verifying : hesiod-3.2.1-3.el7.x86_64 1/2 
 Verifying : 1:autofs-5.0.7-40.el7.x86_64 2/2 
Installed:
 autofs.x86_64 1:5.0.7-40.el7 
Dependency Installed:
 hesiod.x86_64 0:3.2.1-3.el7 
Complete!
','[root@linuxprobe ~]# yum install autofs
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package autofs.x86_64 1:5.0.7-40.el7 will be installed
--> Processing Dependency: libhesiod.so.0()(64bit) for package: 1:autofs-5.0.7-40.el7.x86_64
--> Running transaction check
---> Package hesiod.x86_64 0:3.2.1-3.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 autofs x86_64 1:5.0.7-40.el7 rhel 550 k
Installing for dependencies:
 hesiod x86_64 3.2.1-3.el7 rhel 30 k
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 579 k
Installed size: 3.6 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 9.4 MB/s | 579 kB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : hesiod-3.2.1-3.el7.x86_64 1/2 
 Installing : 1:autofs-5.0.7-40.el7.x86_64 2/2 
 Verifying : hesiod-3.2.1-3.el7.x86_64 1/2 
 Verifying : 1:autofs-5.0.7-40.el7.x86_64 2/2 
Installed:
 autofs.x86_64 1:5.0.7-40.el7 
Dependency Installed:
 hesiod.x86_64 0:3.2.1-3.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(960,9,'p',76,'{}','        处于生产环境中的Linux服务器，一般会同时管理许多设备的挂载操作。如果把这些设备挂载信息都写入到autofs服务的主配置文件中，无疑会让主配置文件臃肿不堪，不利于服务执行效率，也不利于日后修改里面的配置内容，因此在autofs服务程序的主配置文件中需要按照“挂载目录 子配置文件”的格式进行填写。挂载目录是设备挂载位置的上一级目录。例如，光盘设备一般挂载到/media/cdrom目录中，那么挂载目录写成/media即可。对应的子配置文件则是对这个挂载目录内的挂载设备信息作进一步的说明。子配置文件需要用户自行定义，文件名字没有严格要求，但后缀建议以.misc结束。具体的配置参数如第7行的加粗字所示。','        处于生产环境中的Linux服务器，一般会同时管理许多设备的挂载操作。如果把这些设备挂载信息都写入到autofs服务的主配置文件中，无疑会让主配置文件臃肿不堪，不利于服务执行效率，也不利于日后修改里面的配置内容，因此在autofs服务程序的主配置文件中需要按照“挂载目录 子配置文件”的格式进行填写。挂载目录是设备挂载位置的上一级目录。例如，光盘设备一般挂载到/media/cdrom目录中，那么挂载目录写成/media即可。对应的子配置文件则是对这个挂载目录内的挂载设备信息作进一步的说明。子配置文件需要用户自行定义，文件名字没有严格要求，但后缀建议以.misc结束。具体的配置参数如第7行的加粗字所示。',0,'alvin',curdate());
insert into Content values(961,9,'pre',77,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/auto.master
#
# Sample auto.master file
# This is an automounter map and it has the following format
# key [ -mount-options-separated-by-comma ] location
# For details of the format look at autofs(5).
#
/media /etc/iso.misc
/misc /etc/auto.misc
#
# NOTE: mounts done from a hosts map will be mounted with the
# "nosuid" and "nodev" options unless the "suid" and "dev"
# options are explicitly given.
#
/net -hosts
#
# Include /etc/auto.master.d/*.autofs
#
+dir:/etc/auto.master.d
#
# Include central master map if it can be found using
# nsswitch sources.
#
# Note that if there are entries for /net or /misc (as
# above) in the included master map any keys that are the
# same will not be seen as the first read key seen takes
# precedence.
#
+auto.master
','[root@linuxprobe ~]# vim /etc/auto.master
#
# Sample auto.master file
# This is an automounter map and it has the following format
# key [ -mount-options-separated-by-comma ] location
# For details of the format look at autofs(5).
#
/media /etc/iso.misc
/misc /etc/auto.misc
#
# NOTE: mounts done from a hosts map will be mounted with the
# "nosuid" and "nodev" options unless the "suid" and "dev"
# options are explicitly given.
#
/net -hosts
#
# Include /etc/auto.master.d/*.autofs
#
+dir:/etc/auto.master.d
#
# Include central master map if it can be found using
# nsswitch sources.
#
# Note that if there are entries for /net or /misc (as
# above) in the included master map any keys that are the
# same will not be seen as the first read key seen takes
# precedence.
#
+auto.master
',0,'alvin',curdate());
insert into Content values(962,9,'p',78,'{}','        在子配置文件中，应按照“挂载目录 挂载文件类型及权限 :设备名称”的格式进行填写。例如，要把光盘设备挂载到/media/iso目录中，可将挂载目录写为iso，而-fstype为文件系统格式参数，iso9660为光盘设备格式，ro、nosuid及nodev为光盘设备具体的权限参数，/dev/cdrom则是定义要挂载的设备名称。配置完成后再顺手将autofs服务程序启动并加入到系统启动项中：','        在子配置文件中，应按照“挂载目录 挂载文件类型及权限 :设备名称”的格式进行填写。例如，要把光盘设备挂载到/media/iso目录中，可将挂载目录写为iso，而-fstype为文件系统格式参数，iso9660为光盘设备格式，ro、nosuid及nodev为光盘设备具体的权限参数，/dev/cdrom则是定义要挂载的设备名称。配置完成后再顺手将autofs服务程序启动并加入到系统启动项中：',0,'alvin',curdate());
insert into Content values(963,9,'pre',79,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/iso.misc
iso   -fstype=iso9660,ro,nosuid,nodev :/dev/cdrom
[root@linuxprobe ~]# systemctl start autofs 
[root@linuxprobe ~]# systemctl enable autofs 
ln -s \'/usr/lib/systemd/system/autofs.service\' \'/etc/systemd/system/multi-user.target.wants/autofs.service\'
','[root@linuxprobe ~]# vim /etc/iso.misc
iso   -fstype=iso9660,ro,nosuid,nodev :/dev/cdrom
[root@linuxprobe ~]# systemctl start autofs 
[root@linuxprobe ~]# systemctl enable autofs 
ln -s \'/usr/lib/systemd/system/autofs.service\' \'/etc/systemd/system/multi-user.target.wants/autofs.service\'
',0,'alvin',curdate());
insert into Content values(964,9,'p',80,'{}','        接下来将发生一件非常有趣的事情。我们先查看当前的光盘设备挂载情况，确认光盘设备没有被挂载上，而且/media目录中根本就没有iso子目录。但是，我们却可以使用cd命令切换到这个iso子目录中，而且光盘设备会被立即自动挂载上。我们也就能顺利查看光盘内的内容了。','        接下来将发生一件非常有趣的事情。我们先查看当前的光盘设备挂载情况，确认光盘设备没有被挂载上，而且/media目录中根本就没有iso子目录。但是，我们却可以使用cd命令切换到这个iso子目录中，而且光盘设备会被立即自动挂载上。我们也就能顺利查看光盘内的内容了。',0,'alvin',curdate());
insert into Content values(965,9,'pre',81,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# df -h
Filesystem Size Used Avail Use% Mounted on
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 905M 0 905M 0% /dev
tmpfs 914M 140K 914M 1% /dev/shm
tmpfs 914M 8.9M 905M 1% /run
tmpfs 914M 0 914M 0% /sys/fs/cgroup
/dev/sda1 497M 119M 379M 24% /boot
[root@linuxprobe ~]# cd /media
[root@linuxprobe media]# ls
[root@linuxprobe media]# cd iso
[root@linuxprobe iso]# ls -l
total 812
dr-xr-xr-x. 4 root root 2048 May 7 2017 addons
dr-xr-xr-x. 3 root root 2048 May 7 2017 EFI
-r--r--r--. 1 root root 8266 Apr 4 2017 EULA
-r--r--r--. 1 root root 18092 Mar 6 2012 GPL
dr-xr-xr-x. 3 root root 2048 May 7 2017 images
dr-xr-xr-x. 2 root root 2048 May 7 2017 isolinux
dr-xr-xr-x. 2 root root 2048 May 7 2017 LiveOS
-r--r--r--. 1 root root 108 May 7 2017 media.repo
dr-xr-xr-x. 2 root root 774144 May 7 2017 Packages
dr-xr-xr-x. 24 root root 6144 May 7 2017 release-notes
dr-xr-xr-x. 2 root root 4096 May 7 2017 repodata
-r--r--r--. 1 root root 3375 Apr 1 2017 RPM-GPG-KEY-redhat-beta
-r--r--r--. 1 root root 3211 Apr 1 2017 RPM-GPG-KEY-redhat-release
-r--r--r--. 1 root root 1568 May 7 2017 TRANS.TBL
[root@linuxprobe ~]# df -h
Filesystem Size Used Avail Use% Mounted on
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 905M 0 905M 0% /dev
tmpfs 914M 140K 914M 1% /dev/shm
tmpfs 914M 8.9M 905M 1% /run
tmpfs 914M 0 914M 0% /sys/fs/cgroup
/dev/cdrom 3.5G 3.5G 0 100% /media/iso
/dev/sda1 497M 119M 379M 24% /boot
','[root@linuxprobe ~]# df -h
Filesystem Size Used Avail Use% Mounted on
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 905M 0 905M 0% /dev
tmpfs 914M 140K 914M 1% /dev/shm
tmpfs 914M 8.9M 905M 1% /run
tmpfs 914M 0 914M 0% /sys/fs/cgroup
/dev/sda1 497M 119M 379M 24% /boot
[root@linuxprobe ~]# cd /media
[root@linuxprobe media]# ls
[root@linuxprobe media]# cd iso
[root@linuxprobe iso]# ls -l
total 812
dr-xr-xr-x. 4 root root 2048 May 7 2017 addons
dr-xr-xr-x. 3 root root 2048 May 7 2017 EFI
-r--r--r--. 1 root root 8266 Apr 4 2017 EULA
-r--r--r--. 1 root root 18092 Mar 6 2012 GPL
dr-xr-xr-x. 3 root root 2048 May 7 2017 images
dr-xr-xr-x. 2 root root 2048 May 7 2017 isolinux
dr-xr-xr-x. 2 root root 2048 May 7 2017 LiveOS
-r--r--r--. 1 root root 108 May 7 2017 media.repo
dr-xr-xr-x. 2 root root 774144 May 7 2017 Packages
dr-xr-xr-x. 24 root root 6144 May 7 2017 release-notes
dr-xr-xr-x. 2 root root 4096 May 7 2017 repodata
-r--r--r--. 1 root root 3375 Apr 1 2017 RPM-GPG-KEY-redhat-beta
-r--r--r--. 1 root root 3211 Apr 1 2017 RPM-GPG-KEY-redhat-release
-r--r--r--. 1 root root 1568 May 7 2017 TRANS.TBL
[root@linuxprobe ~]# df -h
Filesystem Size Used Avail Use% Mounted on
/dev/mapper/rhel-root 18G 3.0G 15G 17% /
devtmpfs 905M 0 905M 0% /dev
tmpfs 914M 140K 914M 1% /dev/shm
tmpfs 914M 8.9M 905M 1% /run
tmpfs 914M 0 914M 0% /sys/fs/cgroup
/dev/cdrom 3.5G 3.5G 0 100% /media/iso
/dev/sda1 497M 119M 379M 24% /boot
',0,'alvin',curdate());
insert into Content values(966,10,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用BIND提供域名解析服务',' <span class="color_h1">  Linux </span> 使用BIND提供域名解析服务',0,'alvin',curdate());
insert into Content values(967,10,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(968,10,'h2',3,'{}','DNS域名解析服务','DNS域名解析服务',0,'alvin',curdate());
insert into Content values(969,10,'p',4,'{}','        相较于由数字构成的IP地址，域名更容易被理解和记忆，所以我们通常更习惯通过域名的方式来访问网络中的资源。但是，网络中的计算机之间只能基于IP地址来相互识别对方的身份，而且要想在互联网中传输数据，也必须基于外网的IP地址来完成。','        相较于由数字构成的IP地址，域名更容易被理解和记忆，所以我们通常更习惯通过域名的方式来访问网络中的资源。但是，网络中的计算机之间只能基于IP地址来相互识别对方的身份，而且要想在互联网中传输数据，也必须基于外网的IP地址来完成。',0,'alvin',curdate());
insert into Content values(970,10,'p',5,'{}','        为了降低用户访问网络资源的门槛，DNS（Domain Name System，域名系统）技术应运而生。这是一项用于管理和解析域名与IP地址对应关系的技术，简单来说，就是能够接受用户输入的域名或IP地址，然后自动查找与之匹配（或者说具有映射关系）的IP地址或域名，即将域名解析为IP地址（正向解析），或将IP地址解析为域名（反向解析）。这样一来，我们只需要在浏览器中输入域名就能打开想要访问的网站了。DNS域名解析技术的正向解析也是我们最常使用的一种工作模式。','        为了降低用户访问网络资源的门槛，DNS（Domain Name System，域名系统）技术应运而生。这是一项用于管理和解析域名与IP地址对应关系的技术，简单来说，就是能够接受用户输入的域名或IP地址，然后自动查找与之匹配（或者说具有映射关系）的IP地址或域名，即将域名解析为IP地址（正向解析），或将IP地址解析为域名（反向解析）。这样一来，我们只需要在浏览器中输入域名就能打开想要访问的网站了。DNS域名解析技术的正向解析也是我们最常使用的一种工作模式。',0,'alvin',curdate());
insert into Content values(971,10,'p',6,'{}','        鉴于互联网中的域名和IP地址对应关系数据库太过庞大，DNS域名解析服务采用了类似目录树的层次结构来记录域名与IP地址之间的对应关系，从而形成了一个分布式的数据库系统，如下图所示。','        鉴于互联网中的域名和IP地址对应关系数据库太过庞大，DNS域名解析服务采用了类似目录树的层次结构来记录域名与IP地址之间的对应关系，从而形成了一个分布式的数据库系统，如下图所示。',0,'alvin',curdate());
insert into Content values(972,10,'image',7,'{"alt": "bind_structure", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_structure.jpg", "width": "776"}','/static/img/linux/linux_bind_structure.jpg','/static/img/linux/linux_bind_structure.jpg',0,'alvin',curdate());
insert into Content values(973,10,'p',8,'{}','        域名后缀一般分为国际域名和国内域名。原则上来讲，域名后缀都有严格的定义，但在实际使用时可以不必严格遵守。目前最常见的域名后缀有.com（商业组织）、.org（非营利组织）、.gov（政府部门）、.net（网络服务商）、.edu（教研机构）、.pub（公共大众）、.cn（中国国家顶级域名）等。','        域名后缀一般分为国际域名和国内域名。原则上来讲，域名后缀都有严格的定义，但在实际使用时可以不必严格遵守。目前最常见的域名后缀有.com（商业组织）、.org（非营利组织）、.gov（政府部门）、.net（网络服务商）、.edu（教研机构）、.pub（公共大众）、.cn（中国国家顶级域名）等。',0,'alvin',curdate());
insert into Content values(974,10,'p',9,'{}','        当今世界的信息化程度越来越高，大数据、云计算、物联网、人工智能等新技术不断涌现，全球网民的数量据说也超过了35亿，而且每年还在以10%的速度迅速增长。这些因素导致互联网中的域名数量进一步激增，被访问的频率也进一步加大。假设全球网民每人每天只访问一个网站域名，而且只访问一次，也会产生35亿次的查询请求，如此庞大的请求数量肯定无法被某一台服务器全部处理掉。DNS技术作为互联网基础设施中重要的一环，为了为网民提供不间断、稳定且快速的域名查询服务，保证互联网的正常运转，提供了下面三种类型的服务器。','        当今世界的信息化程度越来越高，大数据、云计算、物联网、人工智能等新技术不断涌现，全球网民的数量据说也超过了35亿，而且每年还在以10%的速度迅速增长。这些因素导致互联网中的域名数量进一步激增，被访问的频率也进一步加大。假设全球网民每人每天只访问一个网站域名，而且只访问一次，也会产生35亿次的查询请求，如此庞大的请求数量肯定无法被某一台服务器全部处理掉。DNS技术作为互联网基础设施中重要的一环，为了为网民提供不间断、稳定且快速的域名查询服务，保证互联网的正常运转，提供了下面三种类型的服务器。',0,'alvin',curdate());
insert into Content values(975,10,'ul',10,'{}',' BOLD[  主服务器： ]BOLD 在特定区域内具有唯一性，负责维护该区域内的域名与IP地址之间的对应关系。
 BOLD[  从服务器： ]BOLD 从主服务器中获得域名与IP地址的对应关系并进行维护，以防主服务器宕机等情况。
 BOLD[  缓存服务器： ]BOLD 通过向其他域名解析服务器查询获得域名与IP地址的对应关系，并将经常查询的域名信息保存到服务器本地，以此来提高重复查询时的效率。',' BOLD[  主服务器： ]BOLD 在特定区域内具有唯一性，负责维护该区域内的域名与IP地址之间的对应关系。
 BOLD[  从服务器： ]BOLD 从主服务器中获得域名与IP地址的对应关系并进行维护，以防主服务器宕机等情况。
 BOLD[  缓存服务器： ]BOLD 通过向其他域名解析服务器查询获得域名与IP地址的对应关系，并将经常查询的域名信息保存到服务器本地，以此来提高重复查询时的效率。',0,'alvin',curdate());
insert into Content values(976,10,'p',11,'{}','        简单来说，主服务器是用于管理域名和IP地址对应关系的真正服务器，从服务器帮助主服务器“打下手”，分散部署在各个国家、省市或地区，以便让用户就近查询域名，从而减轻主服务器的负载压力。缓存服务器不太常用，一般部署在企业内网的网关位置，用于加速用户的域名查询请求。','        简单来说，主服务器是用于管理域名和IP地址对应关系的真正服务器，从服务器帮助主服务器“打下手”，分散部署在各个国家、省市或地区，以便让用户就近查询域名，从而减轻主服务器的负载压力。缓存服务器不太常用，一般部署在企业内网的网关位置，用于加速用户的域名查询请求。',0,'alvin',curdate());
insert into Content values(977,10,'p',12,'{}','        DNS域名解析服务采用分布式的数据结构来存放海量的“区域数据”信息，在执行用户发起的域名查询请求时，具有递归查询和迭代查询两种方式。所谓递归查询，是指DNS服务器在收到用户发起的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结果提交给用户。而迭代查询则是指，DNS服务器在收到用户发起的请求时，并不直接回复查询结果，而是告诉另一台DNS服务器的地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。','        DNS域名解析服务采用分布式的数据结构来存放海量的“区域数据”信息，在执行用户发起的域名查询请求时，具有递归查询和迭代查询两种方式。所谓递归查询，是指DNS服务器在收到用户发起的请求时，必须向用户返回一个准确的查询结果。如果DNS服务器本地没有存储与之对应的信息，则该服务器需要询问其他服务器，并将返回的查询结果提交给用户。而迭代查询则是指，DNS服务器在收到用户发起的请求时，并不直接回复查询结果，而是告诉另一台DNS服务器的地址，用户再向这台DNS服务器提交请求，这样依次反复，直到返回查询结果。',0,'alvin',curdate());
insert into Content values(978,10,'p',13,'{}','        由此可见，当用户向就近的一台DNS服务器发起对某个域名的查询请求之后（这里以www.linuxprobe.com为例），其查询流程大致如下图所示。','        由此可见，当用户向就近的一台DNS服务器发起对某个域名的查询请求之后（这里以www.linuxprobe.com为例），其查询流程大致如下图所示。',0,'alvin',curdate());
insert into Content values(979,10,'image',14,'{"alt": "dns_struct", "class": ["attachment-full"], "height": "382", "src": "/static/img/linux/linux_bind_dns_struct.jpg", "width": "776"}','/static/img/linux/linux_bind_dns_struct.jpg','/static/img/linux/linux_bind_dns_struct.jpg',0,'alvin',curdate());
insert into Content values(980,10,'p',15,'{}','        当用户向网络指定的DNS服务器发起一个域名请求时，通常情况下会有本地由此DNS服务器向上级的DNS服务器发送迭代查询请求；如果该DNS服务器没有要查询的信息，则会进一步向上级DNS服务器发送迭代查询请求，直到获得准确的查询结果为止。其中最高级、最权威的根DNS服务器总共有13台，分布在世界各地，其管理单位、具体的地理位置，以及IP地址如下表所示。','        当用户向网络指定的DNS服务器发起一个域名请求时，通常情况下会有本地由此DNS服务器向上级的DNS服务器发送迭代查询请求；如果该DNS服务器没有要查询的信息，则会进一步向上级DNS服务器发送迭代查询请求，直到获得准确的查询结果为止。其中最高级、最权威的根DNS服务器总共有13台，分布在世界各地，其管理单位、具体的地理位置，以及IP地址如下表所示。',0,'alvin',curdate());
insert into Content values(981,10,'table',16,'{"class": ["table", "table-bordered", "table-striped"]}','名称	管理单位	地理位置	IP地址
A	INTERNIC.NET	美国-弗吉尼亚州	198.41.0.4
B	美国信息科学研究所	美国-加利弗尼亚州	128.9.0.107
C	PSINet公司	美国-弗吉尼亚州	192.33.4.12
D	马里兰大学	美国-马里兰州	128.8.10.90
E	美国航空航天管理局	美国加利弗尼亚州	192.203.230.10
F	因特网软件联盟	美国加利弗尼亚州	192.5.5.241
G	美国国防部网络信息中心	美国弗吉尼亚州	192.112.36.4
H	美国陆军研究所	美国-马里兰州	128.63.2.53
I	Autonomica公司	瑞典-斯德哥尔摩	192.36.148.17
J	VeriSign公司	美国-弗吉尼亚州	192.58.128.30
K	RIPE NCC	英国-伦敦	193.0.14.129
L	IANA	美国-弗吉尼亚州	199.7.83.42
M	WIDE Project	日本-东京	202.12.27.33','名称	管理单位	地理位置	IP地址
A	INTERNIC.NET	美国-弗吉尼亚州	198.41.0.4
B	美国信息科学研究所	美国-加利弗尼亚州	128.9.0.107
C	PSINet公司	美国-弗吉尼亚州	192.33.4.12
D	马里兰大学	美国-马里兰州	128.8.10.90
E	美国航空航天管理局	美国加利弗尼亚州	192.203.230.10
F	因特网软件联盟	美国加利弗尼亚州	192.5.5.241
G	美国国防部网络信息中心	美国弗吉尼亚州	192.112.36.4
H	美国陆军研究所	美国-马里兰州	128.63.2.53
I	Autonomica公司	瑞典-斯德哥尔摩	192.36.148.17
J	VeriSign公司	美国-弗吉尼亚州	192.58.128.30
K	RIPE NCC	英国-伦敦	193.0.14.129
L	IANA	美国-弗吉尼亚州	199.7.83.42
M	WIDE Project	日本-东京	202.12.27.33',0,'alvin',curdate());
insert into Content values(982,10,'h2',17,'{}','安装Bind服务程序','安装Bind服务程序',0,'alvin',curdate());
insert into Content values(983,10,'p',18,'{}','        BIND（Berkeley Internet Name Domain，伯克利因特网名称域）服务是全球范围内使用最广泛、最安全可靠且高效的域名解析服务程序。DNS域名解析服务作为互联网基础设施服务，其责任之重可想而知，因此建议大家在生产环境中安装部署bind服务程序时加上chroot（俗称牢笼机制）扩展包，以便有效地限制bind服务程序仅能对自身的配置文件进行操作，以确保整个服务器的安全。','        BIND（Berkeley Internet Name Domain，伯克利因特网名称域）服务是全球范围内使用最广泛、最安全可靠且高效的域名解析服务程序。DNS域名解析服务作为互联网基础设施服务，其责任之重可想而知，因此建议大家在生产环境中安装部署bind服务程序时加上chroot（俗称牢笼机制）扩展包，以便有效地限制bind服务程序仅能对自身的配置文件进行操作，以确保整个服务器的安全。',0,'alvin',curdate());
insert into Content values(984,10,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install bind-chroot
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 bind-chroot x86_64 32:9.9.4-14.el7 rhel 81 k
Installing for dependencies:
 bind x86_64 32:9.9.4-14.el7 rhel 1.8 M
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 1.8 M
Installed size: 4.3 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 28 MB/s | 1.8 MB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 32:bind-9.9.4-14.el7.x86_64 1/2 
 Installing : 32:bind-chroot-9.9.4-14.el7.x86_64 2/2 
 Verifying : 32:bind-9.9.4-14.el7.x86_64 1/2 
 Verifying : 32:bind-chroot-9.9.4-14.el7.x86_64 2/2 
Installed:
 bind-chroot.x86_64 32:9.9.4-14.el7 
Dependency Installed:
 bind.x86_64 32:9.9.4-14.el7 
Complete!
','[root@linuxprobe ~]# yum install bind-chroot
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 bind-chroot x86_64 32:9.9.4-14.el7 rhel 81 k
Installing for dependencies:
 bind x86_64 32:9.9.4-14.el7 rhel 1.8 M
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 1.8 M
Installed size: 4.3 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 28 MB/s | 1.8 MB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 32:bind-9.9.4-14.el7.x86_64 1/2 
 Installing : 32:bind-chroot-9.9.4-14.el7.x86_64 2/2 
 Verifying : 32:bind-9.9.4-14.el7.x86_64 1/2 
 Verifying : 32:bind-chroot-9.9.4-14.el7.x86_64 2/2 
Installed:
 bind-chroot.x86_64 32:9.9.4-14.el7 
Dependency Installed:
 bind.x86_64 32:9.9.4-14.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(985,10,'p',20,'{}','        bind服务程序的配置并不简单，因为要想为用户提供健全的DNS查询服务，要在本地保存相关的域名数据库，而如果把所有域名和IP地址的对应关系都写入到某个配置文件中，估计要有上千万条的参数，这样既不利于程序的执行效率，也不方便日后的修改和维护。因此在bind服务程序中有下面这三个比较关键的文件。','        bind服务程序的配置并不简单，因为要想为用户提供健全的DNS查询服务，要在本地保存相关的域名数据库，而如果把所有域名和IP地址的对应关系都写入到某个配置文件中，估计要有上千万条的参数，这样既不利于程序的执行效率，也不方便日后的修改和维护。因此在bind服务程序中有下面这三个比较关键的文件。',0,'alvin',curdate());
insert into Content values(986,10,'ul',21,'{}','主配置文件（/etc/named.conf）：只有58行，而且在去除注释信息和空行之后，实际有效的参数仅有30行左右，这些参数用来定义bind服务程序的运行。
区域配置文件（/etc/named.rfc1912.zones）：用来保存域名和IP地址对应关系的所在位置。类似于图书的目录，对应着每个域和相应IP地址所在的具体位置，当需要查看或修改时，可根据这个位置找到相关文件。
数据配置文件目录（/var/named）：该目录用来保存域名和IP地址真实对应关系的数据配置文件。','主配置文件（/etc/named.conf）：只有58行，而且在去除注释信息和空行之后，实际有效的参数仅有30行左右，这些参数用来定义bind服务程序的运行。
区域配置文件（/etc/named.rfc1912.zones）：用来保存域名和IP地址对应关系的所在位置。类似于图书的目录，对应着每个域和相应IP地址所在的具体位置，当需要查看或修改时，可根据这个位置找到相关文件。
数据配置文件目录（/var/named）：该目录用来保存域名和IP地址真实对应关系的数据配置文件。',0,'alvin',curdate());
insert into Content values(987,10,'p',22,'{}','        在Linux系统中，bind服务程序的名称为named。首先需要在/etc目录中找到该服务程序的主配置文件，然后把第11行和第17行的地址均修改为any，分别表示服务器上的所有IP地址均可提供DNS域名解析服务，以及允许所有人对本服务器发送DNS查询请求。这两个地方一定要修改准确。','        在Linux系统中，bind服务程序的名称为named。首先需要在/etc目录中找到该服务程序的主配置文件，然后把第11行和第17行的地址均修改为any，分别表示服务器上的所有IP地址均可提供DNS域名解析服务，以及允许所有人对本服务器发送DNS查询请求。这两个地方一定要修改准确。',0,'alvin',curdate());
insert into Content values(988,10,'pre',23,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 
 10 options {
 11 listen-on port 53 { any; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { any; };
 18 
 19 /* 
 20 - If you are building an AUTHORITATIVE DNS server, do NOT enable re cursion.
 1,1 Top
 21 - If you are building a RECURSIVE (caching) DNS server, you need to enable 
 22 recursion. 
 23 - If your recursive DNS server has a public IP address, you MUST en able access 
 24 control to limit queries to your legitimate users. Failing to do so will
 25 cause your server to become part of large scale DNS amplification 
 26 attacks. Implementing BCP38 within your network would greatly
 27 reduce such attack surface 
 28 */
 29 recursion yes;
 30 
 31 dnssec-enable yes;
 32 dnssec-validation yes;
 33 dnssec-lookaside auto;
 34 
 35 /* Path to ISC DLV key */
 36 bindkeys-file "/etc/named.iscdlv.key";
 37 
 38 managed-keys-directory "/var/named/dynamic";
 39 
 40 pid-file "/run/named/named.pid";
 41 session-keyfile "/run/named/session.key";
 42 };
 43 
 44 logging {
 45 channel default_debug {
 46 file "data/named.run";
 47 severity dynamic;
 48 };
 49 };
 50 
 51 zone "." IN {
 52 type hint;
 53 file "named.ca";
 54 };
 55 
 56 include "/etc/named.rfc1912.zones";
 57 include "/etc/named.root.key";
 58 
 ','[root@linuxprobe ~]# vim /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 
 10 options {
 11 listen-on port 53 { any; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { any; };
 18 
 19 /* 
 20 - If you are building an AUTHORITATIVE DNS server, do NOT enable re cursion.
 1,1 Top
 21 - If you are building a RECURSIVE (caching) DNS server, you need to enable 
 22 recursion. 
 23 - If your recursive DNS server has a public IP address, you MUST en able access 
 24 control to limit queries to your legitimate users. Failing to do so will
 25 cause your server to become part of large scale DNS amplification 
 26 attacks. Implementing BCP38 within your network would greatly
 27 reduce such attack surface 
 28 */
 29 recursion yes;
 30 
 31 dnssec-enable yes;
 32 dnssec-validation yes;
 33 dnssec-lookaside auto;
 34 
 35 /* Path to ISC DLV key */
 36 bindkeys-file "/etc/named.iscdlv.key";
 37 
 38 managed-keys-directory "/var/named/dynamic";
 39 
 40 pid-file "/run/named/named.pid";
 41 session-keyfile "/run/named/session.key";
 42 };
 43 
 44 logging {
 45 channel default_debug {
 46 file "data/named.run";
 47 severity dynamic;
 48 };
 49 };
 50 
 51 zone "." IN {
 52 type hint;
 53 file "named.ca";
 54 };
 55 
 56 include "/etc/named.rfc1912.zones";
 57 include "/etc/named.root.key";
 58 
 ',0,'alvin',curdate());
insert into Content values(989,10,'p',24,'{}','        如前所述，bind服务程序的区域配置文件（/etc/named.rfc1912.zones）用来保存域名和IP地址对应关系的所在位置。在这个文件中，定义了域名与IP地址解析规则保存的文件位置以及服务类型等内容，而没有包含具体的域名、IP地址对应关系等信息。服务类型有三种，分别为hint（根区域）、master（主区域）、slave（辅助区域），其中常用的master和slave指的就是主服务器和从服务器。将域名解析为IP地址的正向解析参数和将IP地址解析为域名的反向解析参数分别如下两图所示。','        如前所述，bind服务程序的区域配置文件（/etc/named.rfc1912.zones）用来保存域名和IP地址对应关系的所在位置。在这个文件中，定义了域名与IP地址解析规则保存的文件位置以及服务类型等内容，而没有包含具体的域名、IP地址对应关系等信息。服务类型有三种，分别为hint（根区域）、master（主区域）、slave（辅助区域），其中常用的master和slave指的就是主服务器和从服务器。将域名解析为IP地址的正向解析参数和将IP地址解析为域名的反向解析参数分别如下两图所示。',0,'alvin',curdate());
insert into Content values(990,10,'image',25,'{"alt": "dns_check_zone", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_bind_dns_check_zone.png", "width": "676"}','/static/img/linux/linux_bind_dns_check_zone.png','/static/img/linux/linux_bind_dns_check_zone.png',0,'alvin',curdate());
insert into Content values(991,10,'image',26,'{"alt": "dns_zone_check", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_bind_dns_zone_check.png", "width": "676"}','/static/img/linux/linux_bind_dns_zone_check.png','/static/img/linux/linux_bind_dns_zone_check.png',0,'alvin',curdate());
insert into Content values(992,10,'h3',27,'{}','正向解析实验','正向解析实验',0,'alvin',curdate());
insert into Content values(993,10,'p',28,'{}','        在DNS域名解析服务中，正向解析是指根据域名（主机名）查找到对应的IP地址。也就是说，当用户输入了一个域名后，bind服务程序会自动进行查找，并将匹配到的IP地址返给用户。这也是最常用的DNS工作模式。','        在DNS域名解析服务中，正向解析是指根据域名（主机名）查找到对应的IP地址。也就是说，当用户输入了一个域名后，bind服务程序会自动进行查找，并将匹配到的IP地址返给用户。这也是最常用的DNS工作模式。',0,'alvin',curdate());
insert into Content values(994,10,'p',29,'{}',' BOLD[  第1步： ]BOLD 编辑区域配置文件。该文件中默认已经有了一些无关紧要的解析参数，旨在让用户有一个参考。我们可以将下面的参数添加到区域配置文件的最下面，当然，也可以将该文件中的原有信息全部清空，而只保留自己的域名解析信息：',' BOLD[  第1步： ]BOLD 编辑区域配置文件。该文件中默认已经有了一些无关紧要的解析参数，旨在让用户有一个参考。我们可以将下面的参数添加到区域配置文件的最下面，当然，也可以将该文件中的原有信息全部清空，而只保留自己的域名解析信息：',0,'alvin',curdate());
insert into Content values(995,10,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update {none;};
};
','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update {none;};
};
',0,'alvin',curdate());
insert into Content values(996,10,'p',31,'{}',' BOLD[  第2步： ]BOLD 编辑数据配置文件。我们可以从/var/named目录中复制一份正向解析的模板文件（named.localhost），然后把域名和IP地址的对应数据填写数据配置文件中并保存。在复制时记得加上-a参数，这可以保留原始文件的所有者、所属组、权限属性等信息，以便让bind服务程序顺利读取文件内容：',' BOLD[  第2步： ]BOLD 编辑数据配置文件。我们可以从/var/named目录中复制一份正向解析的模板文件（named.localhost），然后把域名和IP地址的对应数据填写数据配置文件中并保存。在复制时记得加上-a参数，这可以保留原始文件的所有者、所属组、权限属性等信息，以便让bind服务程序顺利读取文件内容：',0,'alvin',curdate());
insert into Content values(997,10,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /var/named/
[root@linuxprobe named]# ls -al named.localhost
-rw-r-----. 1 root named 152 Jun 21 2007 named.localhost
[root@linuxprobe named]# cp -a named.localhost linuxprobe.com.zone
','[root@linuxprobe ~]# cd /var/named/
[root@linuxprobe named]# ls -al named.localhost
-rw-r-----. 1 root named 152 Jun 21 2007 named.localhost
[root@linuxprobe named]# cp -a named.localhost linuxprobe.com.zone
',0,'alvin',curdate());
insert into Content values(998,10,'p',33,'{}','        编辑数据配置文件。在保存并退出后文件后记得重启named服务程序，让新的解析数据生效。考虑到正向解析文件中的参数较多，而且相对都比较重要，老师在每个参数后面都作了简要的说明。','        编辑数据配置文件。在保存并退出后文件后记得重启named服务程序，让新的解析数据生效。考虑到正向解析文件中的参数较多，而且相对都比较重要，老师在每个参数后面都作了简要的说明。',0,'alvin',curdate());
insert into Content values(999,10,'pre',34,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe named]# vim linuxprobe.com.zone
[root@linuxprobe named]# systemctl restart named
','[root@linuxprobe named]# vim linuxprobe.com.zone
[root@linuxprobe named]# systemctl restart named
',0,'alvin',curdate());
insert into Content values(1000,10,'pre',35,'{}','$TTL 1D        #生存周期为1天                
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
        #授权信息开始:            #DNS区域的地址            #域名管理员的邮箱(不要用@符号)    
                                    0;serial    #更新序列号
                                    1D;refresh    #更新时间
                                    1H;retry    #重试延时
                                    1W;expire    #失效时间
                                    3H;)minimum    #无效解析记录的缓存时间
        NS                ns.linuxprobe.com.            #域名服务器记录
ns        IN A                192.168.10.10                #地址记录(ns.linuxprobe.com.)
        IN MX 10            mail.linuxprobe.com.            #邮箱交换记录
mail        IN A                192.168.10.10                #地址记录(mail.linuxprobe.com.)
www        IN A                192.168.10.10                #地址记录(www.linuxprobe.com.)
bbs        IN A                192.168.10.20                #地址记录(bbs.linuxprobe.com.)
','$TTL 1D        #生存周期为1天                
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
        #授权信息开始:            #DNS区域的地址            #域名管理员的邮箱(不要用@符号)    
                                    0;serial    #更新序列号
                                    1D;refresh    #更新时间
                                    1H;retry    #重试延时
                                    1W;expire    #失效时间
                                    3H;)minimum    #无效解析记录的缓存时间
        NS                ns.linuxprobe.com.            #域名服务器记录
ns        IN A                192.168.10.10                #地址记录(ns.linuxprobe.com.)
        IN MX 10            mail.linuxprobe.com.            #邮箱交换记录
mail        IN A                192.168.10.10                #地址记录(mail.linuxprobe.com.)
www        IN A                192.168.10.10                #地址记录(www.linuxprobe.com.)
bbs        IN A                192.168.10.20                #地址记录(bbs.linuxprobe.com.)
',0,'alvin',curdate());
insert into Content values(1001,10,'p',36,'{}',' BOLD[  第3步： ]BOLD 检验解析结果。为了检验解析结果，一定要先把Linux系统网卡中的DNS地址参数修改成本机IP地址，这样就可以使用由本机提供的DNS查询服务了。nslookup命令用于检测能否从DNS服务器中查询到域名与IP地址的解析记录，进而更准确地检验DNS服务器是否已经能够为用户提供服务。',' BOLD[  第3步： ]BOLD 检验解析结果。为了检验解析结果，一定要先把Linux系统网卡中的DNS地址参数修改成本机IP地址，这样就可以使用由本机提供的DNS查询服务了。nslookup命令用于检测能否从DNS服务器中查询到域名与IP地址的解析记录，进而更准确地检验DNS服务器是否已经能够为用户提供服务。',0,'alvin',curdate());
insert into Content values(1002,10,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart network
[root@linuxprobe ~]# nslookup
> www.linuxprobe.com
Server: 127.0.0.1
Address: 127.0.0.1#53
Name: www.linuxprobe.com
Address: 192.168.10.10
> bbs.linuxprobe.com
Server: 127.0.0.1
Address: 127.0.0.1#53
Name: bbs.linuxprobe.com
Address: 192.168.10.20
','[root@linuxprobe ~]# systemctl restart network
[root@linuxprobe ~]# nslookup
> www.linuxprobe.com
Server: 127.0.0.1
Address: 127.0.0.1#53
Name: www.linuxprobe.com
Address: 192.168.10.10
> bbs.linuxprobe.com
Server: 127.0.0.1
Address: 127.0.0.1#53
Name: bbs.linuxprobe.com
Address: 192.168.10.20
',0,'alvin',curdate());
insert into Content values(1003,10,'h3',38,'{}','反向解析实验','反向解析实验',0,'alvin',curdate());
insert into Content values(1004,10,'p',39,'{}','        在DNS域名解析服务中，反向解析的作用是将用户提交的IP地址解析为对应的域名信息，它一般用于对某个IP地址上绑定的所有域名进行整体屏蔽，屏蔽由某些域名发送的垃圾邮件。它也可以针对某个IP地址进行反向解析，大致判断出有多少个网站运行在上面。当购买虚拟主机时，可以使用这一功能验证虚拟主机提供商是否有严重的超售问题。','        在DNS域名解析服务中，反向解析的作用是将用户提交的IP地址解析为对应的域名信息，它一般用于对某个IP地址上绑定的所有域名进行整体屏蔽，屏蔽由某些域名发送的垃圾邮件。它也可以针对某个IP地址进行反向解析，大致判断出有多少个网站运行在上面。当购买虚拟主机时，可以使用这一功能验证虚拟主机提供商是否有严重的超售问题。',0,'alvin',curdate());
insert into Content values(1005,10,'p',40,'{}',' BOLD[  第1步： ]BOLD 编辑区域配置文件。在编辑该文件时，除了不要写错格式之外，还需要记住此处定义的数据配置文件名称，因为一会儿还需要在/var/named目录中建立与其对应的同名文件。反向解析是把IP地址解析成域名格式，因此在定义zone（区域）时应该要把IP地址反写，比如原来是192.168.10.0，反写后应该就是10.168.192，而且只需写出IP地址的网络位即可。把下列参数添加至正向解析参数的后面。',' BOLD[  第1步： ]BOLD 编辑区域配置文件。在编辑该文件时，除了不要写错格式之外，还需要记住此处定义的数据配置文件名称，因为一会儿还需要在/var/named目录中建立与其对应的同名文件。反向解析是把IP地址解析成域名格式，因此在定义zone（区域）时应该要把IP地址反写，比如原来是192.168.10.0，反写后应该就是10.168.192，而且只需写出IP地址的网络位即可。把下列参数添加至正向解析参数的后面。',0,'alvin',curdate());
insert into Content values(1006,10,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update {none;};
};
zone "10.168.192.in-addr.arpa" IN {
type master;
file "192.168.10.arpa";
};
','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update {none;};
};
zone "10.168.192.in-addr.arpa" IN {
type master;
file "192.168.10.arpa";
};
',0,'alvin',curdate());
insert into Content values(1007,10,'p',42,'{}',' BOLD[  第2步： ]BOLD 编辑数据配置文件。首先从/var/named目录中复制一份反向解析的模板文件（named.loopback），然后把下面的参数填写到文件中。其中，IP地址仅需要写主机位，如下图所示。',' BOLD[  第2步： ]BOLD 编辑数据配置文件。首先从/var/named目录中复制一份反向解析的模板文件（named.loopback），然后把下面的参数填写到文件中。其中，IP地址仅需要写主机位，如下图所示。',0,'alvin',curdate());
insert into Content values(1008,10,'image',43,'{"alt": "dns_arpa", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_bind_dns_arpa.png", "width": "676"}','/static/img/linux/linux_bind_dns_arpa.png','/static/img/linux/linux_bind_dns_arpa.png',0,'alvin',curdate());
insert into Content values(1009,10,'pre',44,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe named]# cp -a named.loopback 192.168.10.arpa
[root@linuxprobe named]# vim 192.168.10.arpa
[root@linuxprobe named]# systemctl restart named
','[root@linuxprobe named]# cp -a named.loopback 192.168.10.arpa
[root@linuxprobe named]# vim 192.168.10.arpa
[root@linuxprobe named]# systemctl restart named
',0,'alvin',curdate());
insert into Content values(1010,10,'pre',45,'{}','$TTL 1D                
@    IN SOA                linuxprobe.com.        root.linuxprobe.com.(
                                                0;serial
                                                1D;refresh
                                                1H;retry
                                                1W;expire
                                                3H);minimum
    NS                ns.linuxprobe.com.    
ns    A                192.168.10.10    
10    PTR                ns.linuxprobe.com.            #PTR为指针记录，仅用于反向解析中。
10    PTR                mail.linuxprobe.com.    
10    PTR                www.linuxprobe.com.    
20    PTR                bbs.linuxprobe.com.
','$TTL 1D                
@    IN SOA                linuxprobe.com.        root.linuxprobe.com.(
                                                0;serial
                                                1D;refresh
                                                1H;retry
                                                1W;expire
                                                3H);minimum
    NS                ns.linuxprobe.com.    
ns    A                192.168.10.10    
10    PTR                ns.linuxprobe.com.            #PTR为指针记录，仅用于反向解析中。
10    PTR                mail.linuxprobe.com.    
10    PTR                www.linuxprobe.com.    
20    PTR                bbs.linuxprobe.com.
',0,'alvin',curdate());
insert into Content values(1011,10,'p',46,'{}',' BOLD[  第3步： ]BOLD 检验解析结果。在前面的正向解析实验中，已经把系统网卡中的DNS地址参数修改成了本机IP地址，因此可以直接使用nslookup命令来检验解析结果，仅需输入IP地址即可查询到对应的域名信息。',' BOLD[  第3步： ]BOLD 检验解析结果。在前面的正向解析实验中，已经把系统网卡中的DNS地址参数修改成了本机IP地址，因此可以直接使用nslookup命令来检验解析结果，仅需输入IP地址即可查询到对应的域名信息。',0,'alvin',curdate());
insert into Content values(1012,10,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# nslookup
> 192.168.10.10
Server: 127.0.0.1
Address: 127.0.0.1#53
10.10.168.192.in-addr.arpa name = ns.linuxprobe.com.
10.10.168.192.in-addr.arpa name = www.linuxprobe.com.
10.10.168.192.in-addr.arpa name = mail.linuxprobe.com.
> 192.168.10.20
Server: 127.0.0.1
Address: 127.0.0.1#53
20.10.168.192.in-addr.arpa name = bbs.linuxprobe.com.
','[root@linuxprobe ~]# nslookup
> 192.168.10.10
Server: 127.0.0.1
Address: 127.0.0.1#53
10.10.168.192.in-addr.arpa name = ns.linuxprobe.com.
10.10.168.192.in-addr.arpa name = www.linuxprobe.com.
10.10.168.192.in-addr.arpa name = mail.linuxprobe.com.
> 192.168.10.20
Server: 127.0.0.1
Address: 127.0.0.1#53
20.10.168.192.in-addr.arpa name = bbs.linuxprobe.com.
',0,'alvin',curdate());
insert into Content values(1013,10,'h2',48,'{}','部署从服务器','部署从服务器',0,'alvin',curdate());
insert into Content values(1014,10,'p',49,'{}','        作为重要的互联网基础设施服务，保证DNS域名解析服务的正常运转至关重要，只有这样才能提供稳定、快速且不间断的域名查询服务。在DNS域名解析服务中，从服务器可以从主服务器上获取指定的区域数据文件，从而起到备份解析记录与负载均衡的作用，因此通过部署从服务器可以减轻主服务器的负载压力，还可以提升用户的查询效率。','        作为重要的互联网基础设施服务，保证DNS域名解析服务的正常运转至关重要，只有这样才能提供稳定、快速且不间断的域名查询服务。在DNS域名解析服务中，从服务器可以从主服务器上获取指定的区域数据文件，从而起到备份解析记录与负载均衡的作用，因此通过部署从服务器可以减轻主服务器的负载压力，还可以提升用户的查询效率。',0,'alvin',curdate());
insert into Content values(1015,10,'p',50,'{}','        在本实验中，主服务器与从服务器分别使用的操作系统和IP地址如表所示。','        在本实验中，主服务器与从服务器分别使用的操作系统和IP地址如表所示。',0,'alvin',curdate());
insert into Content values(1016,10,'table',51,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
主服务器	RHEL 7	192.168.10.10
从服务器	RHEL 7	192.168.10.20','主机名称	操作系统	IP地址
主服务器	RHEL 7	192.168.10.10
从服务器	RHEL 7	192.168.10.20',0,'alvin',curdate());
insert into Content values(1017,10,'p',52,'{}',' BOLD[  第1步： ]BOLD 在主服务器的区域配置文件中允许该从服务器的更新请求，即修改allow-update {允许更新区域信息的主机地址;};参数，然后重启主服务器的DNS服务程序。',' BOLD[  第1步： ]BOLD 在主服务器的区域配置文件中允许该从服务器的更新请求，即修改allow-update {允许更新区域信息的主机地址;};参数，然后重启主服务器的DNS服务程序。',0,'alvin',curdate());
insert into Content values(1018,10,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update { 192.168.10.20; };
};
zone "10.168.192.in-addr.arpa" IN {
type master;
file "192.168.10.arpa";
allow-update { 192.168.10.20; };
};
[root@linuxprobe ~]# systemctl restart named
','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update { 192.168.10.20; };
};
zone "10.168.192.in-addr.arpa" IN {
type master;
file "192.168.10.arpa";
allow-update { 192.168.10.20; };
};
[root@linuxprobe ~]# systemctl restart named
',0,'alvin',curdate());
insert into Content values(1019,10,'p',54,'{}',' BOLD[  第2步： ]BOLD 在从服务器中填写主服务器的IP地址与要抓取的区域信息，然后重启服务。注意此时的服务类型应该是slave（从），而不再是master（主）。masters参数后面应该为主服务器的IP地址，而且file参数后面定义的是同步数据配置文件后要保存到的位置，稍后可以在该目录内看到同步的文件。',' BOLD[  第2步： ]BOLD 在从服务器中填写主服务器的IP地址与要抓取的区域信息，然后重启服务。注意此时的服务类型应该是slave（从），而不再是master（主）。masters参数后面应该为主服务器的IP地址，而且file参数后面定义的是同步数据配置文件后要保存到的位置，稍后可以在该目录内看到同步的文件。',0,'alvin',curdate());
insert into Content values(1020,10,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type slave;
masters { 192.168.10.10; };
file "slaves/linuxprobe.com.zone";
};
zone "10.168.192.in-addr.arpa" IN {
type slave;
masters { 192.168.10.10; };
file "slaves/192.168.10.arpa";
};
[root@linuxprobe ~]# systemctl restart named
','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type slave;
masters { 192.168.10.10; };
file "slaves/linuxprobe.com.zone";
};
zone "10.168.192.in-addr.arpa" IN {
type slave;
masters { 192.168.10.10; };
file "slaves/192.168.10.arpa";
};
[root@linuxprobe ~]# systemctl restart named
',0,'alvin',curdate());
insert into Content values(1021,10,'p',56,'{}',' BOLD[  第3步： ]BOLD 检验解析结果。当从服务器的DNS服务程序在重启后，一般就已经自动从主服务器上同步了数据配置文件，而且该文件默认会放置在区域配置文件中所定义的目录位置中。随后修改从服务器的网络参数，把DNS地址参数修改成192.168.10.20，这样即可使用从服务器自身提供的DNS域名解析服务。最后就可以使用nslookup命令顺利看到解析结果了。',' BOLD[  第3步： ]BOLD 检验解析结果。当从服务器的DNS服务程序在重启后，一般就已经自动从主服务器上同步了数据配置文件，而且该文件默认会放置在区域配置文件中所定义的目录位置中。随后修改从服务器的网络参数，把DNS地址参数修改成192.168.10.20，这样即可使用从服务器自身提供的DNS域名解析服务。最后就可以使用nslookup命令顺利看到解析结果了。',0,'alvin',curdate());
insert into Content values(1022,10,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /var/named/slaves
[root@linuxprobe slaves]# ls 
192.168.10.arpa linuxprobe.com.zone
[root@linuxprobe slaves]# nslookup
> www.linuxprobe.com
Server: 192.168.10.20
Address: 192.168.10.20#53
Name: www.linuxprobe.com
Address: 192.168.10.10
> 192.168.10.10
Server: 192.168.10.20
Address: 192.168.10.20#53
10.10.168.192.in-addr.arpa name = www.linuxprobe.com.
10.10.168.192.in-addr.arpa name = ns.linuxprobe.com.
10.10.168.192.in-addr.arpa name = mail.linuxprobe.com.
','[root@linuxprobe ~]# cd /var/named/slaves
[root@linuxprobe slaves]# ls 
192.168.10.arpa linuxprobe.com.zone
[root@linuxprobe slaves]# nslookup
> www.linuxprobe.com
Server: 192.168.10.20
Address: 192.168.10.20#53
Name: www.linuxprobe.com
Address: 192.168.10.10
> 192.168.10.10
Server: 192.168.10.20
Address: 192.168.10.20#53
10.10.168.192.in-addr.arpa name = www.linuxprobe.com.
10.10.168.192.in-addr.arpa name = ns.linuxprobe.com.
10.10.168.192.in-addr.arpa name = mail.linuxprobe.com.
',0,'alvin',curdate());
insert into Content values(1023,10,'h2',58,'{}','安全的加密传输','安全的加密传输',0,'alvin',curdate());
insert into Content values(1024,10,'p',59,'{}','        前文反复提及，域名解析服务是互联网基础设施中重要的一环，几乎所有的网络应用都依赖于DNS才能正常运行。如果DNS服务发生故障，那么即便Web网站或电子邮件系统服务等都正常运行，用户也无法找到并使用它们了。','        前文反复提及，域名解析服务是互联网基础设施中重要的一环，几乎所有的网络应用都依赖于DNS才能正常运行。如果DNS服务发生故障，那么即便Web网站或电子邮件系统服务等都正常运行，用户也无法找到并使用它们了。',0,'alvin',curdate());
insert into Content values(1025,10,'p',60,'{}','        互联网中的绝大多数DNS服务器（超过95%）都是基于BIND域名解析服务搭建的，而bind服务程序为了提供安全的解析服务，已经对TSIG（RFC 2845）加密机制提供了支持。TSIG主要是利用了密码编码的方式来保护区域信息的传输（Zone Transfer），即TSIG加密机制保证了DNS服务器之间传输域名区域信息的安全性。','        互联网中的绝大多数DNS服务器（超过95%）都是基于BIND域名解析服务搭建的，而bind服务程序为了提供安全的解析服务，已经对TSIG（RFC 2845）加密机制提供了支持。TSIG主要是利用了密码编码的方式来保护区域信息的传输（Zone Transfer），即TSIG加密机制保证了DNS服务器之间传输域名区域信息的安全性。',0,'alvin',curdate());
insert into Content values(1026,10,'p',61,'{}','        接下来的实验依然使用了上表中的两台服务器。','        接下来的实验依然使用了上表中的两台服务器。',0,'alvin',curdate());
insert into Content values(1027,10,'p',62,'{}','        书接上回。前面在从服务器上配妥bind服务程序并重启后，即可看到从主服务器中获取到的数据配置文件。','        书接上回。前面在从服务器上配妥bind服务程序并重启后，即可看到从主服务器中获取到的数据配置文件。',0,'alvin',curdate());
insert into Content values(1028,10,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ls -al /var/named/slaves/
total 12
drwxrwx---. 2 named named 54 Jun 7 16:02 .
drwxr-x---. 6 root named 4096 Jun 7 15:58 ..
-rw-r--r--. 1 named named 432 Jun 7 16:02 192.168.10.arpa
-rw-r--r--. 1 named named 439 Jun 7 16:02 linuxprobe.com.zone
[root@linuxprobe ~]# rm -rf /var/named/slaves/*
','[root@linuxprobe ~]# ls -al /var/named/slaves/
total 12
drwxrwx---. 2 named named 54 Jun 7 16:02 .
drwxr-x---. 6 root named 4096 Jun 7 15:58 ..
-rw-r--r--. 1 named named 432 Jun 7 16:02 192.168.10.arpa
-rw-r--r--. 1 named named 439 Jun 7 16:02 linuxprobe.com.zone
[root@linuxprobe ~]# rm -rf /var/named/slaves/*
',0,'alvin',curdate());
insert into Content values(1029,10,'p',64,'{}',' BOLD[  第1步： ]BOLD 在主服务器中生成密钥。dnssec-keygen命令用于生成安全的DNS服务密钥，其格式为“dnssec-keygen [参数]”，常用的参数以及作用如下表所示。',' BOLD[  第1步： ]BOLD 在主服务器中生成密钥。dnssec-keygen命令用于生成安全的DNS服务密钥，其格式为“dnssec-keygen [参数]”，常用的参数以及作用如下表所示。',0,'alvin',curdate());
insert into Content values(1030,10,'table',65,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-a	指定加密算法，包括RSAMD5（RSA）、RSASHA1、DSA、NSEC3RSASHA1、NSEC3DSA等
-b	密钥长度（HMAC-MD5的密钥长度在1~512位之间）
-n	密钥的类型（HOST表示与主机相关）','参数	作用
-a	指定加密算法，包括RSAMD5（RSA）、RSASHA1、DSA、NSEC3RSASHA1、NSEC3DSA等
-b	密钥长度（HMAC-MD5的密钥长度在1~512位之间）
-n	密钥的类型（HOST表示与主机相关）',0,'alvin',curdate());
insert into Content values(1031,10,'p',66,'{}','        使用下述命令生成一个主机名称为master-slave的128位HMAC-MD5算法的密钥文件。在执行该命令后默认会在当前目录中生成公钥和私钥文件，我们需要把私钥文件中Key参数后面的值记录下来，一会儿要将其写入传输配置文件中。','        使用下述命令生成一个主机名称为master-slave的128位HMAC-MD5算法的密钥文件。在执行该命令后默认会在当前目录中生成公钥和私钥文件，我们需要把私钥文件中Key参数后面的值记录下来，一会儿要将其写入传输配置文件中。',0,'alvin',curdate());
insert into Content values(1032,10,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# dnssec-keygen -a HMAC-MD5 -b 128 -n HOST master-slave
Kmaster-slave.+157+46845
[root@linuxprobe ~]# ls -al Kmaster-slave.+157+46845.*
-rw-------. 1 root root 56 Jun 7 16:06 Kmaster-slave.+157+46845.key
-rw-------. 1 root root 165 Jun 7 16:06 Kmaster-slave.+157+46845.private
[root@linuxprobe ~]# cat Kmaster-slave.+157+46845.private
Private-key-format: v1.3
Algorithm: 157 (HMAC_MD5)
Key: 1XEEL3tG5DNLOw+1WHfE3Q==
Bits: AAA=
Created: 20170607080621
Publish: 20170607080621
Activate: 20170607080621
','[root@linuxprobe ~]# dnssec-keygen -a HMAC-MD5 -b 128 -n HOST master-slave
Kmaster-slave.+157+46845
[root@linuxprobe ~]# ls -al Kmaster-slave.+157+46845.*
-rw-------. 1 root root 56 Jun 7 16:06 Kmaster-slave.+157+46845.key
-rw-------. 1 root root 165 Jun 7 16:06 Kmaster-slave.+157+46845.private
[root@linuxprobe ~]# cat Kmaster-slave.+157+46845.private
Private-key-format: v1.3
Algorithm: 157 (HMAC_MD5)
Key: 1XEEL3tG5DNLOw+1WHfE3Q==
Bits: AAA=
Created: 20170607080621
Publish: 20170607080621
Activate: 20170607080621
',0,'alvin',curdate());
insert into Content values(1033,10,'p',68,'{}',' BOLD[  第2步： ]BOLD 在主服务器中创建密钥验证文件。进入bind服务程序用于保存配置文件的目录，把刚刚生成的密钥名称、加密算法和私钥加密字符串按照下面格式写入到tansfer.key传输配置文件中。为了安全起见，我们需要将文件的所属组修改成named，并将文件权限设置得要小一点，然后把该文件做一个硬链接到/etc目录中。',' BOLD[  第2步： ]BOLD 在主服务器中创建密钥验证文件。进入bind服务程序用于保存配置文件的目录，把刚刚生成的密钥名称、加密算法和私钥加密字符串按照下面格式写入到tansfer.key传输配置文件中。为了安全起见，我们需要将文件的所属组修改成named，并将文件权限设置得要小一点，然后把该文件做一个硬链接到/etc目录中。',0,'alvin',curdate());
insert into Content values(1034,10,'pre',69,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /var/named/chroot/etc/
[root@linuxprobe etc]# vim transfer.key
key "master-slave" {
algorithm hmac-md5;
secret "1XEEL3tG5DNLOw+1WHfE3Q==";
};
[root@linuxprobe etc]# chown root:named transfer.key
[root@linuxprobe etc]# chmod 640 transfer.key
[root@linuxprobe etc]# ln transfer.key /etc/transfer.key
','[root@linuxprobe ~]# cd /var/named/chroot/etc/
[root@linuxprobe etc]# vim transfer.key
key "master-slave" {
algorithm hmac-md5;
secret "1XEEL3tG5DNLOw+1WHfE3Q==";
};
[root@linuxprobe etc]# chown root:named transfer.key
[root@linuxprobe etc]# chmod 640 transfer.key
[root@linuxprobe etc]# ln transfer.key /etc/transfer.key
',0,'alvin',curdate());
insert into Content values(1035,10,'p',70,'{}',' BOLD[  第3步： ]BOLD 开启并加载Bind服务的密钥验证功能。首先需要在主服务器的主配置文件中加载密钥验证文件，然后进行设置，使得只允许带有master-slave密钥认证的DNS服务器同步数据配置文件：',' BOLD[  第3步： ]BOLD 开启并加载Bind服务的密钥验证功能。首先需要在主服务器的主配置文件中加载密钥验证文件，然后进行设置，使得只允许带有master-slave密钥认证的DNS服务器同步数据配置文件：',0,'alvin',curdate());
insert into Content values(1036,10,'pre',71,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 include "/etc/transfer.key";
 10 options {
 11 listen-on port 53 { any; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { any; };
 18 allow-transfer { key master-slave; };
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart named
','[root@linuxprobe ~]# vim /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 include "/etc/transfer.key";
 10 options {
 11 listen-on port 53 { any; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { any; };
 18 allow-transfer { key master-slave; };
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart named
',0,'alvin',curdate());
insert into Content values(1037,10,'p',72,'{}','        至此，DNS主服务器的TSIG密钥加密传输功能就已经配置完成。此时清空DNS从服务器同步目录中所有的数据配置文件，然后再次重启bind服务程序，这时就已经不能像刚才那样自动获取到数据配置文件了。','        至此，DNS主服务器的TSIG密钥加密传输功能就已经配置完成。此时清空DNS从服务器同步目录中所有的数据配置文件，然后再次重启bind服务程序，这时就已经不能像刚才那样自动获取到数据配置文件了。',0,'alvin',curdate());
insert into Content values(1038,10,'pre',73,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# rm -rf /var/named/slaves/*
[root@linuxprobe ~]# systemctl restart named
[root@linuxprobe ~]# ls  /var/named/slaves/
','[root@linuxprobe ~]# rm -rf /var/named/slaves/*
[root@linuxprobe ~]# systemctl restart named
[root@linuxprobe ~]# ls  /var/named/slaves/
',0,'alvin',curdate());
insert into Content values(1039,10,'p',74,'{}',' BOLD[  第4步： ]BOLD 配置从服务器，使其支持密钥验证。配置DNS从服务器和主服务器的方法大致相同，都需要在bind服务程序的配置文件目录中创建密钥认证文件，并设置相应的权限，然后把该文件做一个硬链接到/etc目录中。',' BOLD[  第4步： ]BOLD 配置从服务器，使其支持密钥验证。配置DNS从服务器和主服务器的方法大致相同，都需要在bind服务程序的配置文件目录中创建密钥认证文件，并设置相应的权限，然后把该文件做一个硬链接到/etc目录中。',0,'alvin',curdate());
insert into Content values(1040,10,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /var/named/chroot/etc
[root@linuxprobe etc]# vim transfer.key
key "master-slave" {
algorithm hmac-md5;
secret "1XEEL3tG5DNLOw+1WHfE3Q==";
};
[root@linuxprobe etc]# chown root:named transfer.key
[root@linuxprobe etc]# chmod 640 transfer.key
[root@linuxprobe etc]# ln transfer.key /etc/transfer.key
','[root@linuxprobe ~]# cd /var/named/chroot/etc
[root@linuxprobe etc]# vim transfer.key
key "master-slave" {
algorithm hmac-md5;
secret "1XEEL3tG5DNLOw+1WHfE3Q==";
};
[root@linuxprobe etc]# chown root:named transfer.key
[root@linuxprobe etc]# chmod 640 transfer.key
[root@linuxprobe etc]# ln transfer.key /etc/transfer.key
',0,'alvin',curdate());
insert into Content values(1041,10,'p',76,'{}',' BOLD[  第5步： ]BOLD 开启并加载从服务器的密钥验证功能。这一步的操作步骤也同样是在主配置文件中加载密钥认证文件，然后按照指定格式写上主服务器的IP地址和密钥名称。注意，密钥名称等参数位置不要太靠前，大约在第43行比较合适，否则bind服务程序会因为没有加载完预设参数而报错：',' BOLD[  第5步： ]BOLD 开启并加载从服务器的密钥验证功能。这一步的操作步骤也同样是在主配置文件中加载密钥认证文件，然后按照指定格式写上主服务器的IP地址和密钥名称。注意，密钥名称等参数位置不要太靠前，大约在第43行比较合适，否则bind服务程序会因为没有加载完预设参数而报错：',0,'alvin',curdate());
insert into Content values(1042,10,'pre',77,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe etc]# vim /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 include "/etc/transfer.key";
 10 options {
 11 listen-on port 53 { 127.0.0.1; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { localhost; };
 18 
 19 /* 
 20 - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
 21 - If you are building a RECURSIVE (caching) DNS server, you need to enable 
 22 recursion. 
 23 - If your recursive DNS server has a public IP address, you MUST enable access 
 24 control to limit queries to your legitimate users. Failing to do so will
 25 cause your server to become part of large scale DNS amplification 
 26 attacks. Implementing BCP38 within your network would greatly
 27 reduce such attack surface 
 28 */
 29 recursion yes;
 30 
 31 dnssec-enable yes;
 32 dnssec-validation yes;
 33 dnssec-lookaside auto;
 34 
 35 /* Path to ISC DLV key */
 36 bindkeys-file "/etc/named.iscdlv.key";
 37 
 38 managed-keys-directory "/var/named/dynamic";
 39 
 40 pid-file "/run/named/named.pid";
 41 session-keyfile "/run/named/session.key";
 42 };
 43 server 192.168.10.10
 44 {
 45 keys { master-slave; };
 46 }; 
 47 logging {
 48 channel default_debug {
 49 file "data/named.run";
 50 severity dynamic;
 51 };
 52 };
 53 
 54 zone "." IN {
 55 type hint;
 56 file "named.ca";
 57 };
 58 
 59 include "/etc/named.rfc1912.zones";
 60 include "/etc/named.root.key";
 61
','[root@linuxprobe etc]# vim /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 include "/etc/transfer.key";
 10 options {
 11 listen-on port 53 { 127.0.0.1; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { localhost; };
 18 
 19 /* 
 20 - If you are building an AUTHORITATIVE DNS server, do NOT enable recursion.
 21 - If you are building a RECURSIVE (caching) DNS server, you need to enable 
 22 recursion. 
 23 - If your recursive DNS server has a public IP address, you MUST enable access 
 24 control to limit queries to your legitimate users. Failing to do so will
 25 cause your server to become part of large scale DNS amplification 
 26 attacks. Implementing BCP38 within your network would greatly
 27 reduce such attack surface 
 28 */
 29 recursion yes;
 30 
 31 dnssec-enable yes;
 32 dnssec-validation yes;
 33 dnssec-lookaside auto;
 34 
 35 /* Path to ISC DLV key */
 36 bindkeys-file "/etc/named.iscdlv.key";
 37 
 38 managed-keys-directory "/var/named/dynamic";
 39 
 40 pid-file "/run/named/named.pid";
 41 session-keyfile "/run/named/session.key";
 42 };
 43 server 192.168.10.10
 44 {
 45 keys { master-slave; };
 46 }; 
 47 logging {
 48 channel default_debug {
 49 file "data/named.run";
 50 severity dynamic;
 51 };
 52 };
 53 
 54 zone "." IN {
 55 type hint;
 56 file "named.ca";
 57 };
 58 
 59 include "/etc/named.rfc1912.zones";
 60 include "/etc/named.root.key";
 61
',0,'alvin',curdate());
insert into Content values(1043,10,'p',78,'{}',' BOLD[  第6步： ]BOLD DNS从服务器同步域名区域数据。现在，两台服务器的bind服务程序都已经配置妥当，并匹配到了相同的密钥认证文件。接下来在从服务器上重启bind服务程序，可以发现又能顺利地同步到数据配置文件了。',' BOLD[  第6步： ]BOLD DNS从服务器同步域名区域数据。现在，两台服务器的bind服务程序都已经配置妥当，并匹配到了相同的密钥认证文件。接下来在从服务器上重启bind服务程序，可以发现又能顺利地同步到数据配置文件了。',0,'alvin',curdate());
insert into Content values(1044,10,'pre',79,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart named
[root@linuxprobe ~]# ls /var/named/slaves/
 192.168.10.arpa  linuxprobe.com.zone
','[root@linuxprobe ~]# systemctl restart named
[root@linuxprobe ~]# ls /var/named/slaves/
 192.168.10.arpa  linuxprobe.com.zone
',0,'alvin',curdate());
insert into Content values(1045,10,'h2',80,'{}','部署缓存服务器','部署缓存服务器',0,'alvin',curdate());
insert into Content values(1046,10,'p',81,'{}','        DNS缓存服务器（Caching DNS Server）是一种不负责域名数据维护的DNS服务器。简单来说，缓存服务器就是把用户经常使用到的域名与IP地址的解析记录保存在主机本地，从而提升下次解析的效率。DNS缓存服务器一般用于经常访问某些固定站点而且对这些网站的访问速度有较高要求的企业内网中，但实际的应用并不广泛。而且，缓存服务器是否可以成功解析还与指定的上级DNS服务器的允许策略有关，因此当前仅需了解即可。','        DNS缓存服务器（Caching DNS Server）是一种不负责域名数据维护的DNS服务器。简单来说，缓存服务器就是把用户经常使用到的域名与IP地址的解析记录保存在主机本地，从而提升下次解析的效率。DNS缓存服务器一般用于经常访问某些固定站点而且对这些网站的访问速度有较高要求的企业内网中，但实际的应用并不广泛。而且，缓存服务器是否可以成功解析还与指定的上级DNS服务器的允许策略有关，因此当前仅需了解即可。',0,'alvin',curdate());
insert into Content values(1047,10,'p',82,'{}',' BOLD[  第1步： ]BOLD 配置系统的双网卡参数。前面讲到，缓存服务器一般用于企业内网，旨在降低内网用户查询DNS的时间消耗。因此，为了更加贴近真实的网络环境，实现外网查询功能，我们需要在缓存服务器中再添加一块网卡，并按照表13-4所示的信息来配置出两台Linux虚拟机系统。而且，还需要在虚拟机软件中将新添加的网卡设置为“桥接模式”，然后设置成与物理设备相同的网络参数（此处需要大家按照物理设备真实的网络参数来配置，图13-6所示为以DHCP方式获取IP地址与网关等信息，重启网络服务后的效果如下图所示）。',' BOLD[  第1步： ]BOLD 配置系统的双网卡参数。前面讲到，缓存服务器一般用于企业内网，旨在降低内网用户查询DNS的时间消耗。因此，为了更加贴近真实的网络环境，实现外网查询功能，我们需要在缓存服务器中再添加一块网卡，并按照表13-4所示的信息来配置出两台Linux虚拟机系统。而且，还需要在虚拟机软件中将新添加的网卡设置为“桥接模式”，然后设置成与物理设备相同的网络参数（此处需要大家按照物理设备真实的网络参数来配置，图13-6所示为以DHCP方式获取IP地址与网关等信息，重启网络服务后的效果如下图所示）。',0,'alvin',curdate());
insert into Content values(1048,10,'table',83,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
缓存服务器	RHEL 7	网卡（外网）：根据物理设备的网络参数进行配置（通过DHCP或手动方式指定IP地址与网关等信息）<ul>网卡（内网）：192.168.10.10
客户端	RHEL 7	192.168.10.20','主机名称	操作系统	IP地址
缓存服务器	RHEL 7	网卡（外网）：根据物理设备的网络参数进行配置（通过DHCP或手动方式指定IP地址与网关等信息）<ul>网卡（内网）：192.168.10.10
客户端	RHEL 7	192.168.10.20',0,'alvin',curdate());
insert into Content values(1049,10,'image',84,'{"alt": "dns_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_dns_setting.jpg", "width": "676"}','/static/img/linux/linux_bind_dns_setting.jpg','/static/img/linux/linux_bind_dns_setting.jpg',0,'alvin',curdate());
insert into Content values(1050,10,'image',85,'{"alt": "check_dns_status", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_check_dns_status.jpg", "width": "676"}','/static/img/linux/linux_bind_check_dns_status.jpg','/static/img/linux/linux_bind_check_dns_status.jpg',0,'alvin',curdate());
insert into Content values(1051,10,'p',86,'{}',' BOLD[  第2步： ]BOLD 在bind服务程序的主配置文件中添加缓存转发参数。在大约第17行处添加一行参数“forwarders { 上级DNS服务器地址; };”，上级DNS服务器地址指的是获取数据配置文件的服务器。考虑到查询速度、稳定性、安全性等因素，刘遄老师在这里使用的是北京市公共DNS服务器的地址210.73.64.1。如果大家也使用该地址，请先测试是否可以ping通，以免导致DNS域名解析失败。',' BOLD[  第2步： ]BOLD 在bind服务程序的主配置文件中添加缓存转发参数。在大约第17行处添加一行参数“forwarders { 上级DNS服务器地址; };”，上级DNS服务器地址指的是获取数据配置文件的服务器。考虑到查询速度、稳定性、安全性等因素，刘遄老师在这里使用的是北京市公共DNS服务器的地址210.73.64.1。如果大家也使用该地址，请先测试是否可以ping通，以免导致DNS域名解析失败。',0,'alvin',curdate());
insert into Content values(1052,10,'pre',87,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.conf
1 //
2 // named.conf
3 //
4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
5 // server as a caching only nameserver (as a localhost DNS resolver only).
6 //
7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
8 //
9 options {
10 listen-on port 53 { any; };
11 listen-on-v6 port 53 { ::1; };
12 directory "/var/named";
13 dump-file "/var/named/data/cache_dump.db";
14 statistics-file "/var/named/data/named_stats.txt";
15 memstatistics-file "/var/named/data/named_mem_stats.txt";
16 allow-query { any; };
17 forwarders { 210.73.64.1; };
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart named
','[root@linuxprobe ~]# vim /etc/named.conf
1 //
2 // named.conf
3 //
4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
5 // server as a caching only nameserver (as a localhost DNS resolver only).
6 //
7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
8 //
9 options {
10 listen-on port 53 { any; };
11 listen-on-v6 port 53 { ::1; };
12 directory "/var/named";
13 dump-file "/var/named/data/cache_dump.db";
14 statistics-file "/var/named/data/named_stats.txt";
15 memstatistics-file "/var/named/data/named_mem_stats.txt";
16 allow-query { any; };
17 forwarders { 210.73.64.1; };
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart named
',0,'alvin',curdate());
insert into Content values(1053,10,'p',88,'{}',' BOLD[  第3步： ]BOLD 重启DNS服务，验证成果。把客户端主机的DNS服务器地址参数修改为DNS缓存服务器的IP地址192.168.10.10，如图13-8所示。这样即可让客户端使用本地DNS缓存服务器提供的域名查询解析服务。',' BOLD[  第3步： ]BOLD 重启DNS服务，验证成果。把客户端主机的DNS服务器地址参数修改为DNS缓存服务器的IP地址192.168.10.10，如图13-8所示。这样即可让客户端使用本地DNS缓存服务器提供的域名查询解析服务。',0,'alvin',curdate());
insert into Content values(1054,10,'image',89,'{"alt": "client_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_dns_client.jpg", "width": "676"}','/static/img/linux/linux_bind_dns_client.jpg','/static/img/linux/linux_bind_dns_client.jpg',0,'alvin',curdate());
insert into Content values(1055,10,'p',90,'{}','        在将客户端主机的网络参数设置妥当后重启网络服务，即可使用nslookup命令来验证实验结果（如果解析失败，请读者留意是否是上级DNS服务器选择的问题）。其中，Server参数为域名解析记录提供的服务器地址，因此可见是由本地DNS缓存服务器提供的解析内容。','        在将客户端主机的网络参数设置妥当后重启网络服务，即可使用nslookup命令来验证实验结果（如果解析失败，请读者留意是否是上级DNS服务器选择的问题）。其中，Server参数为域名解析记录提供的服务器地址，因此可见是由本地DNS缓存服务器提供的解析内容。',0,'alvin',curdate());
insert into Content values(1056,10,'pre',91,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# nslookup
> www.linuxprobe.com
Server: 192.168.10.10
Address: 192.168.10.10#53

Non-authoritative answer:
Name: www.linuxprobe.com
Address: 113.207.76.73
Name: www.linuxprobe.com
Address: 116.211.121.154
> 8.8.8.8
Server: 192.168.10.10
Address: 192.168.10.10#53

Non-authoritative answer:
8.8.8.8.in-addr.arpa name = google-public-dns-a.google.com.
Authoritative answers can be found from:
in-addr.arpa nameserver = f.in-addr-servers.arpa.
in-addr.arpa nameserver = b.in-addr-servers.arpa.
in-addr.arpa nameserver = a.in-addr-servers.arpa.
in-addr.arpa nameserver = e.in-addr-servers.arpa.
in-addr.arpa nameserver = d.in-addr-servers.arpa.
in-addr.arpa nameserver = c.in-addr-servers.arpa.
a.in-addr-servers.arpa internet address = 199.212.0.73
a.in-addr-servers.arpa has AAAA address 2001:500:13::73
b.in-addr-servers.arpa internet address = 199.253.183.183
b.in-addr-servers.arpa has AAAA address 2001:500:87::87
c.in-addr-servers.arpa internet address = 196.216.169.10
c.in-addr-servers.arpa has AAAA address 2001:43f8:110::10
d.in-addr-servers.arpa internet address = 200.10.60.53
d.in-addr-servers.arpa has AAAA address 2001:13c7:7010::53
e.in-addr-servers.arpa internet address = 203.119.86.101
e.in-addr-servers.arpa has AAAA address 2001:dd8:6::101
f.in-addr-servers.arpa internet address = 193.0.9.1
f.in-addr-servers.arpa has AAAA address 2001:67c:e0::1
','[root@linuxprobe ~]# nslookup
> www.linuxprobe.com
Server: 192.168.10.10
Address: 192.168.10.10#53

Non-authoritative answer:
Name: www.linuxprobe.com
Address: 113.207.76.73
Name: www.linuxprobe.com
Address: 116.211.121.154
> 8.8.8.8
Server: 192.168.10.10
Address: 192.168.10.10#53

Non-authoritative answer:
8.8.8.8.in-addr.arpa name = google-public-dns-a.google.com.
Authoritative answers can be found from:
in-addr.arpa nameserver = f.in-addr-servers.arpa.
in-addr.arpa nameserver = b.in-addr-servers.arpa.
in-addr.arpa nameserver = a.in-addr-servers.arpa.
in-addr.arpa nameserver = e.in-addr-servers.arpa.
in-addr.arpa nameserver = d.in-addr-servers.arpa.
in-addr.arpa nameserver = c.in-addr-servers.arpa.
a.in-addr-servers.arpa internet address = 199.212.0.73
a.in-addr-servers.arpa has AAAA address 2001:500:13::73
b.in-addr-servers.arpa internet address = 199.253.183.183
b.in-addr-servers.arpa has AAAA address 2001:500:87::87
c.in-addr-servers.arpa internet address = 196.216.169.10
c.in-addr-servers.arpa has AAAA address 2001:43f8:110::10
d.in-addr-servers.arpa internet address = 200.10.60.53
d.in-addr-servers.arpa has AAAA address 2001:13c7:7010::53
e.in-addr-servers.arpa internet address = 203.119.86.101
e.in-addr-servers.arpa has AAAA address 2001:dd8:6::101
f.in-addr-servers.arpa internet address = 193.0.9.1
f.in-addr-servers.arpa has AAAA address 2001:67c:e0::1
',0,'alvin',curdate());
insert into Content values(1057,10,'h2',92,'{}','分离解析技术','分离解析技术',0,'alvin',curdate());
insert into Content values(1058,10,'p',93,'{}','        现在，喜欢看我们这本《Linux就该这么学》的海外读者越来越多，如果继续把本书配套的网站服务器（https://www.linuxprobe.com）架设在北京市的机房内，则海外读者的访问速度势必会很慢。可如果把服务器架设在美国那边的机房，也将增大国内读者的访问难度。','        现在，喜欢看我们这本《Linux就该这么学》的海外读者越来越多，如果继续把本书配套的网站服务器（https://www.linuxprobe.com）架设在北京市的机房内，则海外读者的访问速度势必会很慢。可如果把服务器架设在美国那边的机房，也将增大国内读者的访问难度。',0,'alvin',curdate());
insert into Content values(1059,10,'p',94,'{}','        为了满足海内外读者的需求，外加刘遄老师不差钱，于是可以购买多台服务器并分别部署在全球各地，然后再使用DNS服务的分离解析功能，即可让位于不同地理范围内的读者通过访问相同的网址，而从不同的服务器获取到相同的数据。例如，我们可以按照表13-5所示，分别为处于北京的DNS服务器和处于美国的DNS服务器分配不同的IP地址，然后让国内读者在访问时自动匹配到北京的服务器，而让海外读者自动匹配到美国的服务器，如下图所示。','        为了满足海内外读者的需求，外加刘遄老师不差钱，于是可以购买多台服务器并分别部署在全球各地，然后再使用DNS服务的分离解析功能，即可让位于不同地理范围内的读者通过访问相同的网址，而从不同的服务器获取到相同的数据。例如，我们可以按照表13-5所示，分别为处于北京的DNS服务器和处于美国的DNS服务器分配不同的IP地址，然后让国内读者在访问时自动匹配到北京的服务器，而让海外读者自动匹配到美国的服务器，如下图所示。',0,'alvin',curdate());
insert into Content values(1060,10,'table',95,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
DNS服务器	RHEL 7	北京网络：122.71.115.10<ul>美国网络：106.185.25.10
北京用户	Windows 7	122.71.115.1
海外用户	Windows 7	106.185.25.1','主机名称	操作系统	IP地址
DNS服务器	RHEL 7	北京网络：122.71.115.10<ul>美国网络：106.185.25.10
北京用户	Windows 7	122.71.115.1
海外用户	Windows 7	106.185.25.1',0,'alvin',curdate());
insert into Content values(1061,10,'image',96,'{"alt": "dns_tabu", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_dns_tabu.png", "width": "676"}','/static/img/linux/linux_bind_dns_tabu.png','/static/img/linux/linux_bind_dns_tabu.png',0,'alvin',curdate());
insert into Content values(1062,10,'p',97,'{}','        为了解决海外读者访问https://www.linuxprobe.com时的速度问题，刘遄老师已经在美国机房购买并架设好了相应的网站服务器，接下来需要手动部署DNS服务器并实现分离解析功能，以便让不同地理区域的读者在访问相同的域名时，能解析出不同的IP地址。','        为了解决海外读者访问https://www.linuxprobe.com时的速度问题，刘遄老师已经在美国机房购买并架设好了相应的网站服务器，接下来需要手动部署DNS服务器并实现分离解析功能，以便让不同地理区域的读者在访问相同的域名时，能解析出不同的IP地址。',0,'alvin',curdate());
insert into Content values(1063,10,'p',98,'{}',' BOLD[  第1步： ]BOLD 修改bind服务程序的主配置文件，把第11行的监听端口与第17行的允许查询主机修改为any。由于配置的DNS分离解析功能与DNS根服务器配置参数有冲突，所以需要把第51~54行的根域信息删除。',' BOLD[  第1步： ]BOLD 修改bind服务程序的主配置文件，把第11行的监听端口与第17行的允许查询主机修改为any。由于配置的DNS分离解析功能与DNS根服务器配置参数有冲突，所以需要把第51~54行的根域信息删除。',0,'alvin',curdate());
insert into Content values(1064,10,'pre',99,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.conf
………………省略部分输出信息………………
 44 logging {
 45 channel default_debug {
 46 file "data/named.run";
 47 severity dynamic;
 48 };
 49 };
 50 
 51 #zone "." IN {
 52 #type hint;
 53 #file "named.ca";
 54 #};
 55 
 56 include "/etc/named.rfc1912.zones";
 57 include "/etc/named.root.key";
 58
………………省略部分输出信息………………
','[root@linuxprobe ~]# vim /etc/named.conf
………………省略部分输出信息………………
 44 logging {
 45 channel default_debug {
 46 file "data/named.run";
 47 severity dynamic;
 48 };
 49 };
 50 
 51 #zone "." IN {
 52 #type hint;
 53 #file "named.ca";
 54 #};
 55 
 56 include "/etc/named.rfc1912.zones";
 57 include "/etc/named.root.key";
 58
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1065,10,'p',100,'{}',' BOLD[  第2步： ]BOLD 编辑区域配置文件。把区域配置文件中原有的数据清空，然后按照以下格式写入参数。首先使用acl参数分别定义两个变量名称（china与american），当下面需要匹配IP地址时只需写入变量名称即可，这样不仅容易阅读识别，而且也利于修改维护。这里的难点是理解view参数的作用。它的作用是通过判断用户的IP地址是中国的还是美国的，然后去分别加载不同的数据配置文件（linuxprobe.com.china或linuxprobe.com.american）。这样，当把相应的IP地址分别写入到数据配置文件后，即可实现DNS的分离解析功能。这样一来，当中国的用户访问linuxprobe.com域名时，便会按照linuxprobe.com.china数据配置文件内的IP地址找到对应的服务器。',' BOLD[  第2步： ]BOLD 编辑区域配置文件。把区域配置文件中原有的数据清空，然后按照以下格式写入参数。首先使用acl参数分别定义两个变量名称（china与american），当下面需要匹配IP地址时只需写入变量名称即可，这样不仅容易阅读识别，而且也利于修改维护。这里的难点是理解view参数的作用。它的作用是通过判断用户的IP地址是中国的还是美国的，然后去分别加载不同的数据配置文件（linuxprobe.com.china或linuxprobe.com.american）。这样，当把相应的IP地址分别写入到数据配置文件后，即可实现DNS的分离解析功能。这样一来，当中国的用户访问linuxprobe.com域名时，便会按照linuxprobe.com.china数据配置文件内的IP地址找到对应的服务器。',0,'alvin',curdate());
insert into Content values(1066,10,'pre',101,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
1 acl "china" { 122.71.115.0/24; };
2 acl "american" { 106.185.25.0/24;};
3 view "china"{
4 match-clients { "china"; };
5 zone "linuxprobe.com" {
6 type master;
7 file "linuxprobe.com.china";
8 };
9 };
10 view "american" {
11 match-clients { "american"; };
12 zone "linuxprobe.com" {
13 type master;
14 file "linuxprobe.com.american";
15 };
16 };
','[root@linuxprobe ~]# vim /etc/named.rfc1912.zones
1 acl "china" { 122.71.115.0/24; };
2 acl "american" { 106.185.25.0/24;};
3 view "china"{
4 match-clients { "china"; };
5 zone "linuxprobe.com" {
6 type master;
7 file "linuxprobe.com.china";
8 };
9 };
10 view "american" {
11 match-clients { "american"; };
12 zone "linuxprobe.com" {
13 type master;
14 file "linuxprobe.com.american";
15 };
16 };
',0,'alvin',curdate());
insert into Content values(1067,10,'p',102,'{}',' BOLD[  第3步： ]BOLD 建立数据配置文件。分别通过模板文件创建出两份不同名称的区域数据文件，其名称应与上面区域配置文件中的参数相对应。',' BOLD[  第3步： ]BOLD 建立数据配置文件。分别通过模板文件创建出两份不同名称的区域数据文件，其名称应与上面区域配置文件中的参数相对应。',0,'alvin',curdate());
insert into Content values(1068,10,'pre',103,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /var/named
[root@linuxprobe named]# cp -a named.localhost linuxprobe.com.china
[root@linuxprobe named]# cp -a named.localhost linuxprobe.com.american
[root@linuxprobe named]# vim linuxprobe.com.china
','[root@linuxprobe ~]# cd /var/named
[root@linuxprobe named]# cp -a named.localhost linuxprobe.com.china
[root@linuxprobe named]# cp -a named.localhost linuxprobe.com.american
[root@linuxprobe named]# vim linuxprobe.com.china
',0,'alvin',curdate());
insert into Content values(1069,10,'pre',104,'{}','$TTL 1D        #生存周期为1天                
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
        #授权信息开始:            #DNS区域的地址            #域名管理员的邮箱(不要用@符号)    
                                    0;serial    #更新序列号
                                    1D;refresh    #更新时间
                                    1H;retry    #重试延时
                                    1W;expire    #失效时间
                                    3H;)minimum    #无效解析记录的缓存时间
        NS                ns.linuxprobe.com.            #域名服务器记录
ns        IN A                122.71.115.10                #地址记录(ns.linuxprobe.com.)
www        IN A                122.71.115.15                #地址记录(www.linuxprobe.com.)
','$TTL 1D        #生存周期为1天                
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
        #授权信息开始:            #DNS区域的地址            #域名管理员的邮箱(不要用@符号)    
                                    0;serial    #更新序列号
                                    1D;refresh    #更新时间
                                    1H;retry    #重试延时
                                    1W;expire    #失效时间
                                    3H;)minimum    #无效解析记录的缓存时间
        NS                ns.linuxprobe.com.            #域名服务器记录
ns        IN A                122.71.115.10                #地址记录(ns.linuxprobe.com.)
www        IN A                122.71.115.15                #地址记录(www.linuxprobe.com.)
',0,'alvin',curdate());
insert into Content values(1070,10,'pre',105,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe named]# vim linuxprobe.com.american
','[root@linuxprobe named]# vim linuxprobe.com.american
',0,'alvin',curdate());
insert into Content values(1071,10,'pre',106,'{}','$TTL 1D        #生存周期为1天                
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
        #授权信息开始:            #DNS区域的地址            #域名管理员的邮箱(不要用@符号)    
                                    0;serial    #更新序列号
                                    1D;refresh    #更新时间
                                    1H;retry    #重试延时
                                    1W;expire    #失效时间
                                    3H;)minimum    #无效解析记录的缓存时间
        NS                ns.linuxprobe.com.            #域名服务器记录
ns        IN A                106.185.25.10                #地址记录(ns.linuxprobe.com.)
www        IN A                106.185.25.15                #地址记录(www.linuxprobe.com.)
','$TTL 1D        #生存周期为1天                
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
        #授权信息开始:            #DNS区域的地址            #域名管理员的邮箱(不要用@符号)    
                                    0;serial    #更新序列号
                                    1D;refresh    #更新时间
                                    1H;retry    #重试延时
                                    1W;expire    #失效时间
                                    3H;)minimum    #无效解析记录的缓存时间
        NS                ns.linuxprobe.com.            #域名服务器记录
ns        IN A                106.185.25.10                #地址记录(ns.linuxprobe.com.)
www        IN A                106.185.25.15                #地址记录(www.linuxprobe.com.)
',0,'alvin',curdate());
insert into Content values(1072,10,'p',107,'{}',' BOLD[  第4步： ]BOLD 重新启动named服务程序，验证结果。将客户端主机（Windows系统或Linux系统均可）的IP地址分别设置为122.71.115.1与106.185.25.1，将DNS地址分别设置为服务器主机的两个IP地址。这样，当尝试使用nslookup命令解析域名时就能清晰地看到解析结果，分别如下两图所示。',' BOLD[  第4步： ]BOLD 重新启动named服务程序，验证结果。将客户端主机（Windows系统或Linux系统均可）的IP地址分别设置为122.71.115.1与106.185.25.1，将DNS地址分别设置为服务器主机的两个IP地址。这样，当尝试使用nslookup命令解析域名时就能清晰地看到解析结果，分别如下两图所示。',0,'alvin',curdate());
insert into Content values(1073,10,'image',108,'{"alt": "ch_client", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_dns_ch_client.png", "width": "876"}','/static/img/linux/linux_bind_dns_ch_client.png','/static/img/linux/linux_bind_dns_ch_client.png',0,'alvin',curdate());
insert into Content values(1074,10,'image',109,'{"alt": "us_client", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_bind_dns_us_client.png", "width": "876"}','/static/img/linux/linux_bind_dns_us_client.png','/static/img/linux/linux_bind_dns_us_client.png',0,'alvin',curdate());
insert into Content values(1075,11,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用DHCP动态管理主机地址',' <span class="color_h1">  Linux </span> 使用DHCP动态管理主机地址',0,'alvin',curdate());
insert into Content values(1076,11,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1077,11,'h2',3,'{}','动态主机地址管理协议','动态主机地址管理协议',0,'alvin',curdate());
insert into Content values(1078,11,'p',4,'{}','        动态主机配置协议（DHCP）是一种基于UDP协议且仅限于在局域网内部使用的网络协议，主要用于大型的局域网环境或者存在较多移动办公设备的局域网环境中，其主要用途是为局域网内部的设备或网络供应商自动分配IP地址等参数。','        动态主机配置协议（DHCP）是一种基于UDP协议且仅限于在局域网内部使用的网络协议，主要用于大型的局域网环境或者存在较多移动办公设备的局域网环境中，其主要用途是为局域网内部的设备或网络供应商自动分配IP地址等参数。',0,'alvin',curdate());
insert into Content values(1079,11,'p',5,'{}','        简单来说，DHCP协议就是让局域网中的主机自动获得网络参数的服务。在下图所示的拓扑图中存在多台主机，如果手动配置每台主机的网络参数会相当麻烦，日后维护起来也让人头大。而且当机房内的主机数量进一步增加时（比如有100台，甚至1000台），这个手动配置以及维护工作的工作量足以让运维人员崩溃。借助于DHCP协议，不仅可以为主机自动分配网络参数，还可以确保主机使用的IP地址是唯一的，更重要的是，还能为特定主机分配固定的IP地址。','        简单来说，DHCP协议就是让局域网中的主机自动获得网络参数的服务。在下图所示的拓扑图中存在多台主机，如果手动配置每台主机的网络参数会相当麻烦，日后维护起来也让人头大。而且当机房内的主机数量进一步增加时（比如有100台，甚至1000台），这个手动配置以及维护工作的工作量足以让运维人员崩溃。借助于DHCP协议，不仅可以为主机自动分配网络参数，还可以确保主机使用的IP地址是唯一的，更重要的是，还能为特定主机分配固定的IP地址。',0,'alvin',curdate());
insert into Content values(1080,11,'image',6,'{"alt": "dhcp_rule", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_dhcp_work_rule.png", "width": "776"}','/static/img/linux/linux_dhcp_work_rule.png','/static/img/linux/linux_dhcp_work_rule.png',0,'alvin',curdate());
insert into Content values(1081,11,'p',7,'{}','        DHCP协议的应用十分广泛，无论是服务器机房还是家庭、机场、咖啡馆，都会见到它的身影。比如，本书的某位读者开了一家咖啡厅，在为顾客提供咖啡的同时，还为顾客免费提供无线上网服务。这样一来，顾客就可以一边惬意地喝着咖啡，一边连着无线网络刷朋友圈了。但是，作为咖啡厅老板的您，肯定不希望（也没有时间）为每一位造访的顾客手动设置IP地址、子网掩码、网关地址等信息。另外，考虑到咖啡馆使用的内网网段一般为192.168.10.0/24（C类私有地址），最多能容纳的主机数为200多台。而咖啡厅一天的客流量肯定不止200人。如果采用手动方式为他们分配IP地址，则当他们在离开咖啡厅时并不会自动释放这个IP地址，这就可能出现IP地址不够用的情况。这一方面会造成IP地址的浪费，另外一方面也增加的IP地址的管理成本。而使用DHCP协议，这一切都迎刃而解—老板只需安心服务好顾客，为其提供美味的咖啡；顾客通过运行DHCP协议的服务器自动获得上网所需的IP地址，等离开咖啡厅时IP地址将被DHCP服务器收回，以备其他顾客使用。','        DHCP协议的应用十分广泛，无论是服务器机房还是家庭、机场、咖啡馆，都会见到它的身影。比如，本书的某位读者开了一家咖啡厅，在为顾客提供咖啡的同时，还为顾客免费提供无线上网服务。这样一来，顾客就可以一边惬意地喝着咖啡，一边连着无线网络刷朋友圈了。但是，作为咖啡厅老板的您，肯定不希望（也没有时间）为每一位造访的顾客手动设置IP地址、子网掩码、网关地址等信息。另外，考虑到咖啡馆使用的内网网段一般为192.168.10.0/24（C类私有地址），最多能容纳的主机数为200多台。而咖啡厅一天的客流量肯定不止200人。如果采用手动方式为他们分配IP地址，则当他们在离开咖啡厅时并不会自动释放这个IP地址，这就可能出现IP地址不够用的情况。这一方面会造成IP地址的浪费，另外一方面也增加的IP地址的管理成本。而使用DHCP协议，这一切都迎刃而解—老板只需安心服务好顾客，为其提供美味的咖啡；顾客通过运行DHCP协议的服务器自动获得上网所需的IP地址，等离开咖啡厅时IP地址将被DHCP服务器收回，以备其他顾客使用。',0,'alvin',curdate());
insert into Content values(1082,11,'p',8,'{}','        既然确定在今后的生产环境中肯定离不开DHCP了，那么也就有必要好好地熟悉一下DHCP涉及的常见术语了。','        既然确定在今后的生产环境中肯定离不开DHCP了，那么也就有必要好好地熟悉一下DHCP涉及的常见术语了。',0,'alvin',curdate());
insert into Content values(1083,11,'ul',9,'{}',' BOLD[  作用域： ]BOLD 一个完整的IP地址段，DHCP协议根据作用域来管理网络的分布、分配IP地址及其他配置参数。
 BOLD[  超级作用域： ]BOLD 用于管理处于同一个物理网络中的多个逻辑子网段。超级作用域中包含了可以统一管理的作用域列表。
 BOLD[  排除范围： ]BOLD 把作用域中的某些IP地址排除，确保这些IP地址不会分配给DHCP客户端。
 BOLD[  地址池： ]BOLD 在定义了DHCP的作用域并应用了排除范围后，剩余的用来动态分配给DHCP客户端的IP地址范围。
 BOLD[  租约： ]BOLD DHCP客户端能够使用动态分配的IP地址的时间。
 BOLD[  预约： ]BOLD 保证网络中的特定设备总是获取到相同的IP地址。',' BOLD[  作用域： ]BOLD 一个完整的IP地址段，DHCP协议根据作用域来管理网络的分布、分配IP地址及其他配置参数。
 BOLD[  超级作用域： ]BOLD 用于管理处于同一个物理网络中的多个逻辑子网段。超级作用域中包含了可以统一管理的作用域列表。
 BOLD[  排除范围： ]BOLD 把作用域中的某些IP地址排除，确保这些IP地址不会分配给DHCP客户端。
 BOLD[  地址池： ]BOLD 在定义了DHCP的作用域并应用了排除范围后，剩余的用来动态分配给DHCP客户端的IP地址范围。
 BOLD[  租约： ]BOLD DHCP客户端能够使用动态分配的IP地址的时间。
 BOLD[  预约： ]BOLD 保证网络中的特定设备总是获取到相同的IP地址。',0,'alvin',curdate());
insert into Content values(1084,11,'h2',10,'{}','部署dhcpd服务程序','部署dhcpd服务程序',0,'alvin',curdate());
insert into Content values(1085,11,'p',11,'{}','        dhcpd是Linux系统中用于提供DHCP协议的服务程序。尽管DHCP协议的功能十分强大，但是dhcpd服务程序的配置步骤却十分简单，这也在很大程度上降低了在Linux中实现动态主机管理服务的门槛。','        dhcpd是Linux系统中用于提供DHCP协议的服务程序。尽管DHCP协议的功能十分强大，但是dhcpd服务程序的配置步骤却十分简单，这也在很大程度上降低了在Linux中实现动态主机管理服务的门槛。',0,'alvin',curdate());
insert into Content values(1086,11,'p',12,'{}','        在确认Yum软件仓库配置妥当之后，安装dhcpd服务程序：','        在确认Yum软件仓库配置妥当之后，安装dhcpd服务程序：',0,'alvin',curdate());
insert into Content values(1087,11,'pre',13,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install dhcp
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package dhcp.x86_64 12:4.2.5-27.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 dhcp x86_64 12:4.2.5-27.el7 rhel 506 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 506 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
 Verifying : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
Installed:
 dhcp.x86_64 12:4.2.5-27.el7 
Complete!
','[root@linuxprobe ~]# yum install dhcp
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package dhcp.x86_64 12:4.2.5-27.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 dhcp x86_64 12:4.2.5-27.el7 rhel 506 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 506 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
 Verifying : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
Installed:
 dhcp.x86_64 12:4.2.5-27.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1088,11,'p',14,'{}','        查看dhcpd服务程序的配置文件内容。','        查看dhcpd服务程序的配置文件内容。',0,'alvin',curdate());
insert into Content values(1089,11,'pre',15,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/dhcp/dhcpd.conf
# DHCP Server Configuration file.
# see /usr/share/doc/dhcp*/dhcpd.conf.example
# see dhcpd.conf(5) man page
','[root@linuxprobe ~]# cat /etc/dhcp/dhcpd.conf
# DHCP Server Configuration file.
# see /usr/share/doc/dhcp*/dhcpd.conf.example
# see dhcpd.conf(5) man page
',0,'alvin',curdate());
insert into Content values(1090,11,'p',16,'{}','        是的，您没有看错！dhcp的服务程序的配置文件中只有3行注释语句，这意味着我们需要自行编写这个文件。如果读者不知道怎么编写，可以看一下配置文件中第2行的参考示例文件，其组成架构如下图所示。','        是的，您没有看错！dhcp的服务程序的配置文件中只有3行注释语句，这意味着我们需要自行编写这个文件。如果读者不知道怎么编写，可以看一下配置文件中第2行的参考示例文件，其组成架构如下图所示。',0,'alvin',curdate());
insert into Content values(1091,11,'image',17,'{"alt": "dhcp_config", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_dhcp_conf.png", "width": "676"}','/static/img/linux/linux_dhcp_conf.png','/static/img/linux/linux_dhcp_conf.png',0,'alvin',curdate());
insert into Content values(1092,11,'p',18,'{}','        一个标准的配置文件应该包括全局配置参数、子网网段声明、地址配置选项以及地址配置参数。其中，全局配置参数用于定义dhcpd服务程序的整体运行参数；子网网段声明用于配置整个子网段的地址属性。','        一个标准的配置文件应该包括全局配置参数、子网网段声明、地址配置选项以及地址配置参数。其中，全局配置参数用于定义dhcpd服务程序的整体运行参数；子网网段声明用于配置整个子网段的地址属性。',0,'alvin',curdate());
insert into Content values(1093,11,'p',19,'{}','        考虑到dhcpd服务程序配置文件的可用参数比较多，老师挑选了最常用的参数（见下表），并逐一进行了简单介绍，以便为接下来的实验打好基础。','        考虑到dhcpd服务程序配置文件的可用参数比较多，老师挑选了最常用的参数（见下表），并逐一进行了简单介绍，以便为接下来的实验打好基础。',0,'alvin',curdate());
insert into Content values(1094,11,'table',20,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
ddns-update-style 类型	定义DNS服务动态更新的类型，类型包括：none（不支持动态更新）、interim（互动更新模式）与ad-hoc（特殊更新模式）
allow/ignore client-updates	允许/忽略客户端更新DNS记录
default-lease-time 21600	默认超时时间
max-lease-time 43200	最大超时时间
option domain-name-servers 8.8.8.8	定义DNS服务器地址
option domain-name "domain.org"	定义DNS域名
range	定义用于分配的IP地址池
option subnet-mask	定义客户端的子网掩码
option routers	定义客户端的网关地址
broadcast-address 广播地址	定义客户端的广播地址
ntp-server IP地址	定义客户端的网络时间服务器（NTP）
nis-servers IP地址	定义客户端的NIS域服务器的地址
hardware 硬件类型 MAC地址	指定网卡接口的类型与MAC地址
server-name 主机名	向DHCP客户端通知DHCP服务器的主机名
fixed-address IP地址	将某个固定的IP地址分配给指定主机
time-offset 偏移差	指定客户端与格林尼治时间的偏移差','参数	作用
ddns-update-style 类型	定义DNS服务动态更新的类型，类型包括：none（不支持动态更新）、interim（互动更新模式）与ad-hoc（特殊更新模式）
allow/ignore client-updates	允许/忽略客户端更新DNS记录
default-lease-time 21600	默认超时时间
max-lease-time 43200	最大超时时间
option domain-name-servers 8.8.8.8	定义DNS服务器地址
option domain-name "domain.org"	定义DNS域名
range	定义用于分配的IP地址池
option subnet-mask	定义客户端的子网掩码
option routers	定义客户端的网关地址
broadcast-address 广播地址	定义客户端的广播地址
ntp-server IP地址	定义客户端的网络时间服务器（NTP）
nis-servers IP地址	定义客户端的NIS域服务器的地址
hardware 硬件类型 MAC地址	指定网卡接口的类型与MAC地址
server-name 主机名	向DHCP客户端通知DHCP服务器的主机名
fixed-address IP地址	将某个固定的IP地址分配给指定主机
time-offset 偏移差	指定客户端与格林尼治时间的偏移差',0,'alvin',curdate());
insert into Content values(1095,11,'h2',21,'{}','自动管理IP地址','自动管理IP地址',0,'alvin',curdate());
insert into Content values(1096,11,'p',22,'{}','        DHCP协议的设计初衷是为了更高效地集中管理局域网内的IP地址资源。DHCP服务器会自动把IP地址、子网掩码、网关、DNS地址等网络信息分配给有需要的客户端，而且当客户端的租约时间到期后还可以自动回收所分配的IP地址，以便交给新加入的客户端。','        DHCP协议的设计初衷是为了更高效地集中管理局域网内的IP地址资源。DHCP服务器会自动把IP地址、子网掩码、网关、DNS地址等网络信息分配给有需要的客户端，而且当客户端的租约时间到期后还可以自动回收所分配的IP地址，以便交给新加入的客户端。',0,'alvin',curdate());
insert into Content values(1097,11,'p',23,'{}','        为了让实验更有挑战性，模拟一个真实生产环境的需求：','        为了让实验更有挑战性，模拟一个真实生产环境的需求：',0,'alvin',curdate());
insert into Content values(1098,11,'p',24,'{}','        “机房运营部门：明天会有100名学员自带笔记本电脑来我司培训学习，请保证他们能够使用机房的本地DHCP服务器自动获取IP地址并正常上网”。','        “机房运营部门：明天会有100名学员自带笔记本电脑来我司培训学习，请保证他们能够使用机房的本地DHCP服务器自动获取IP地址并正常上网”。',0,'alvin',curdate());
insert into Content values(1099,11,'p',25,'{}','        机房所用的网络地址及参数信息如下表所示。','        机房所用的网络地址及参数信息如下表所示。',0,'alvin',curdate());
insert into Content values(1100,11,'table',26,'{"class": ["table", "table-bordered", "table-striped"]}','参数名称	值
默认租约时间	21600秒
最大租约时间	43200秒
IP地址范围	192.168.10.50~192.168.10.150
子网掩码	255.255.255.0
网关地址	192.168.10.1
DNS服务器地址	192.168.10.1
搜索域	linuxprobe.com','参数名称	值
默认租约时间	21600秒
最大租约时间	43200秒
IP地址范围	192.168.10.50~192.168.10.150
子网掩码	255.255.255.0
网关地址	192.168.10.1
DNS服务器地址	192.168.10.1
搜索域	linuxprobe.com',0,'alvin',curdate());
insert into Content values(1101,11,'table',27,'{"class": ["table", "table-bordered", "table-striped"]}','主机类型	操作系统	IP地址
DHCP服务器	RHEL 7	192.168.10.1
DHCP客户机	RHEL 7	DHCP自动获取地址','主机类型	操作系统	IP地址
DHCP服务器	RHEL 7	192.168.10.1
DHCP客户机	RHEL 7	DHCP自动获取地址',0,'alvin',curdate());
insert into Content values(1102,11,'p',28,'{}','        前文讲到，作用域一般是个完整的IP地址段，而地址池中的IP地址才是真正供客户端使用的，因此地址池应该小于或等于作用域的IP地址范围。另外，由于VMware Workstation虚拟机软件自带DHCP服务，为了避免与自己配置的dhcpd服务程序产生冲突，应该先按照下两图所示将虚拟机软件自带的DHCP功能关闭。','        前文讲到，作用域一般是个完整的IP地址段，而地址池中的IP地址才是真正供客户端使用的，因此地址池应该小于或等于作用域的IP地址范围。另外，由于VMware Workstation虚拟机软件自带DHCP服务，为了避免与自己配置的dhcpd服务程序产生冲突，应该先按照下两图所示将虚拟机软件自带的DHCP功能关闭。',0,'alvin',curdate());
insert into Content values(1103,11,'image',29,'{"alt": "dhcp_menu", "class": ["attachment-full"], "height": "162", "src": "/static/img/linux/linux_dhcp_click_menu.png", "width": "700"}','/static/img/linux/linux_dhcp_click_menu.png','/static/img/linux/linux_dhcp_click_menu.png',0,'alvin',curdate());
insert into Content values(1104,11,'image',30,'{"alt": "dhcp_unuse_func", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_dhcp_unuse_func.jpg", "width": "676"}','/static/img/linux/linux_dhcp_unuse_func.jpg','/static/img/linux/linux_dhcp_unuse_func.jpg',0,'alvin',curdate());
insert into Content values(1105,11,'p',31,'{}','        可随意开启几台客户端，准备进行验证。但是一定要注意，DHCP客户端与服务器需要处于同一种网络模式—仅主机模式（Hostonly），否则就会产生物理隔离，从而无法获取IP地址。刘遄老师建议开启1～3台客户端虚拟机验证一下效果就好，以免物理主机的CPU和内存的负载太高。','        可随意开启几台客户端，准备进行验证。但是一定要注意，DHCP客户端与服务器需要处于同一种网络模式—仅主机模式（Hostonly），否则就会产生物理隔离，从而无法获取IP地址。刘遄老师建议开启1～3台客户端虚拟机验证一下效果就好，以免物理主机的CPU和内存的负载太高。',0,'alvin',curdate());
insert into Content values(1106,11,'p',32,'{}','        在确认DHCP服务器的IP地址等网络信息配置妥当后就可以配置dhcpd服务程序了。请注意，在配置dhcpd服务程序时，配置文件中的每行参数后面都需要以分号（;）结尾，这是规定。另外，dhcpd服务程序配置文件内的参数都十分重要，因此刘遄老师在下表中罗列出了每一行参数，并对其用途进行了简单介绍。','        在确认DHCP服务器的IP地址等网络信息配置妥当后就可以配置dhcpd服务程序了。请注意，在配置dhcpd服务程序时，配置文件中的每行参数后面都需要以分号（;）结尾，这是规定。另外，dhcpd服务程序配置文件内的参数都十分重要，因此刘遄老师在下表中罗列出了每一行参数，并对其用途进行了简单介绍。',0,'alvin',curdate());
insert into Content values(1107,11,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/dhcp/dhcpd.conf
ddns-update-style none;
ignore client-updates;
subnet 192.168.10.0 netmask 255.255.255.0 {
range 192.168.10.50 192.168.10.150;
option subnet-mask 255.255.255.0;
option routers 192.168.10.1;
option domain-name "linuxprobe.com";
option domain-name-servers 192.168.10.1;
default-lease-time 21600;
max-lease-time 43200;
}
','[root@linuxprobe ~]# vim /etc/dhcp/dhcpd.conf
ddns-update-style none;
ignore client-updates;
subnet 192.168.10.0 netmask 255.255.255.0 {
range 192.168.10.50 192.168.10.150;
option subnet-mask 255.255.255.0;
option routers 192.168.10.1;
option domain-name "linuxprobe.com";
option domain-name-servers 192.168.10.1;
default-lease-time 21600;
max-lease-time 43200;
}
',0,'alvin',curdate());
insert into Content values(1108,11,'table',34,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
ddns-update-style none;	设置DNS服务不自动进行动态更新
ignore client-updates;	忽略客户端更新DNS记录
subnet 192.168.10.0 netmask 255.255.255.0 {	作用域为192.168.10.0/24网段
range 192.168.10.50 192.168.10.150;	IP地址池为192.168.10.50-150（约100个IP地址）
option subnet-mask 255.255.255.0;	定义客户端默认的子网掩码
option routers 192.168.10.1;	定义客户端的网关地址
option domain-name "linuxprobe.com";	定义默认的搜索域
option domain-name-servers 192.168.10.1;	定义客户端的DNS地址
default-lease-time 21600;	定义默认租约时间（单位：秒）
max-lease-time 43200;	定义最大预约时间（单位：秒）
}	结束符','参数	作用
ddns-update-style none;	设置DNS服务不自动进行动态更新
ignore client-updates;	忽略客户端更新DNS记录
subnet 192.168.10.0 netmask 255.255.255.0 {	作用域为192.168.10.0/24网段
range 192.168.10.50 192.168.10.150;	IP地址池为192.168.10.50-150（约100个IP地址）
option subnet-mask 255.255.255.0;	定义客户端默认的子网掩码
option routers 192.168.10.1;	定义客户端的网关地址
option domain-name "linuxprobe.com";	定义默认的搜索域
option domain-name-servers 192.168.10.1;	定义客户端的DNS地址
default-lease-time 21600;	定义默认租约时间（单位：秒）
max-lease-time 43200;	定义最大预约时间（单位：秒）
}	结束符',0,'alvin',curdate());
insert into Content values(1109,11,'p',35,'{}','        在红帽认证考试以及生产环境中，都需要把配置过的dhcpd服务加入到开机启动项中，以确保当服务器下次开机后dhcpd服务依然能自动启动，并顺利地为客户端分配IP地址等信息。刘遄老师真心建议大家能养成“配置好服务程序，顺手加入开机启动项”的好习惯：','        在红帽认证考试以及生产环境中，都需要把配置过的dhcpd服务加入到开机启动项中，以确保当服务器下次开机后dhcpd服务依然能自动启动，并顺利地为客户端分配IP地址等信息。刘遄老师真心建议大家能养成“配置好服务程序，顺手加入开机启动项”的好习惯：',0,'alvin',curdate());
insert into Content values(1110,11,'pre',36,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl start dhcpd
[root@linuxprobe ~]# systemctl enable dhcpd
 ln -s \'/usr/lib/systemd/system/dhcpd.service\' \'/etc/systemd/system/multi-user.target.wants/dhcpd.service\'
','[root@linuxprobe ~]# systemctl start dhcpd
[root@linuxprobe ~]# systemctl enable dhcpd
 ln -s \'/usr/lib/systemd/system/dhcpd.service\' \'/etc/systemd/system/multi-user.target.wants/dhcpd.service\'
',0,'alvin',curdate());
insert into Content values(1111,11,'p',37,'{}','        把dhcpd服务程序配置妥当之后就可以开启客户端来检验IP分配效果了。重启客户端的网卡服务后即可看到自动分配到的IP地址，如下图所示。','        把dhcpd服务程序配置妥当之后就可以开启客户端来检验IP分配效果了。重启客户端的网卡服务后即可看到自动分配到的IP地址，如下图所示。',0,'alvin',curdate());
insert into Content values(1112,11,'image',38,'{"alt": "auto_ip", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_dhcp_auto_ip.jpg", "width": "676"}','/static/img/linux/linux_dhcp_auto_ip.jpg','/static/img/linux/linux_dhcp_auto_ip.jpg',0,'alvin',curdate());
insert into Content values(1113,11,'p',39,'{}','        ','        ',0,'alvin',curdate());
insert into Content values(1114,11,'h2',40,'{}','分配固定IP地址','分配固定IP地址',0,'alvin',curdate());
insert into Content values(1115,11,'p',41,'{}','        在DHCP协议中有个术语是“预约”，它用来确保局域网中特定的设备总是获取到固定的IP地址。换句话说，就是dhcpd服务程序会把某个IP地址私藏下来，只将其用于相匹配的特定设备。','        在DHCP协议中有个术语是“预约”，它用来确保局域网中特定的设备总是获取到固定的IP地址。换句话说，就是dhcpd服务程序会把某个IP地址私藏下来，只将其用于相匹配的特定设备。',0,'alvin',curdate());
insert into Content values(1116,11,'p',42,'{}','        要想把某个IP地址与某台主机进行绑定，就需要用到这台主机的MAC地址。MAC地址是网卡上面的一串独立的标识符，具备唯一性，因此不会存在冲突的情况，如下图所示。','        要想把某个IP地址与某台主机进行绑定，就需要用到这台主机的MAC地址。MAC地址是网卡上面的一串独立的标识符，具备唯一性，因此不会存在冲突的情况，如下图所示。',0,'alvin',curdate());
insert into Content values(1117,11,'image',43,'{"alt": "get_mac1", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_dhcp_get_mac1.jpg", "width": "676"}','/static/img/linux/linux_dhcp_get_mac1.jpg','/static/img/linux/linux_dhcp_get_mac1.jpg',0,'alvin',curdate());
insert into Content values(1118,11,'p',44,'{}','        在Linux系统或Windows系统中，都可以通过查看网卡的状态来获知主机的MAC地址。在dhcpd服务程序的配置文件中，按照如下格式将IP地址与MAC地址进行绑定。','        在Linux系统或Windows系统中，都可以通过查看网卡的状态来获知主机的MAC地址。在dhcpd服务程序的配置文件中，按照如下格式将IP地址与MAC地址进行绑定。',0,'alvin',curdate());
insert into Content values(1119,11,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','host 主机名称 {                
hardware    ethernet    该主机的MAC地址;    
fixed-address    欲指定的IP地址;        
}
','host 主机名称 {                
hardware    ethernet    该主机的MAC地址;    
fixed-address    欲指定的IP地址;        
}
',0,'alvin',curdate());
insert into Content values(1120,11,'p',46,'{}','        如果不方便查看主机的MAC地址，该怎么办呢？比如，要给老板使用的主机绑定IP地址，总不能随便就去查看老板的主机信息吧。针对这种情况，老师告诉大家一个很好的办法。我们首先启动dhcpd服务程序，为老板的主机分配一个IP地址，这样就会在DHCP服务器本地的日志文件中保存这次的IP地址分配记录。然后查看日志文件，就可以获悉主机的MAC地址了（即下面加粗的内容）。','        如果不方便查看主机的MAC地址，该怎么办呢？比如，要给老板使用的主机绑定IP地址，总不能随便就去查看老板的主机信息吧。针对这种情况，老师告诉大家一个很好的办法。我们首先启动dhcpd服务程序，为老板的主机分配一个IP地址，这样就会在DHCP服务器本地的日志文件中保存这次的IP地址分配记录。然后查看日志文件，就可以获悉主机的MAC地址了（即下面加粗的内容）。',0,'alvin',curdate());
insert into Content values(1121,11,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# tail -f /var/log/messages 
Mar 30 05:33:17 localhost dhcpd: Copyright 2004-2013 Internet Systems Consortium.
Mar 30 05:33:17 localhost dhcpd: All rights reserved.
Mar 30 05:33:17 localhost dhcpd: For info, please visit https://www.isc.org/software/dhcp/
Mar 30 05:33:17 localhost dhcpd: Not searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified in the config file
Mar 30 05:33:17 localhost dhcpd: Wrote 0 leases to leases file.
Mar 30 05:33:17 localhost dhcpd: Listening on LPF/eno16777728/00:0c:29:c4:a4:09/192.168.10.0/24
Mar 30 05:33:17 localhost dhcpd: Sending on LPF/eno16777728/00:0c:29:c4:a4:09/192.168.10.0/24
Mar 30 05:33:17 localhost dhcpd: Sending on Socket/fallback/fallback-net
Mar 30 05:33:26 localhost dhcpd: DHCPDISCOVER from 00:0c:29:27:c6:12 via eno16777728
Mar 30 05:33:27 localhost dhcpd: DHCPOFFER on 192.168.10.50 to 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPDISCOVER from 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPOFFER on 192.168.10.50 to 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPREQUEST for 192.168.10.50 (192.168.10.10) from 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPACK on 192.168.10.50 to 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
','[root@linuxprobe ~]# tail -f /var/log/messages 
Mar 30 05:33:17 localhost dhcpd: Copyright 2004-2013 Internet Systems Consortium.
Mar 30 05:33:17 localhost dhcpd: All rights reserved.
Mar 30 05:33:17 localhost dhcpd: For info, please visit https://www.isc.org/software/dhcp/
Mar 30 05:33:17 localhost dhcpd: Not searching LDAP since ldap-server, ldap-port and ldap-base-dn were not specified in the config file
Mar 30 05:33:17 localhost dhcpd: Wrote 0 leases to leases file.
Mar 30 05:33:17 localhost dhcpd: Listening on LPF/eno16777728/00:0c:29:c4:a4:09/192.168.10.0/24
Mar 30 05:33:17 localhost dhcpd: Sending on LPF/eno16777728/00:0c:29:c4:a4:09/192.168.10.0/24
Mar 30 05:33:17 localhost dhcpd: Sending on Socket/fallback/fallback-net
Mar 30 05:33:26 localhost dhcpd: DHCPDISCOVER from 00:0c:29:27:c6:12 via eno16777728
Mar 30 05:33:27 localhost dhcpd: DHCPOFFER on 192.168.10.50 to 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPDISCOVER from 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPOFFER on 192.168.10.50 to 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPREQUEST for 192.168.10.50 (192.168.10.10) from 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
Mar 30 05:33:29 localhost dhcpd: DHCPACK on 192.168.10.50 to 00:0c:29:27:c6:12 (WIN-APSS1EANKLR) via eno16777728
',0,'alvin',curdate());
insert into Content values(1122,11,'p',48,'{}','        之前我在线下讲课时，讲完DHCP服务后总是看到有些学员在挠头。起初我很不理解，毕竟dhcpd服务程序是Linux系统中一个很简单的实验，总共就那么十几行的配置参数还能写错？后来发现了原因—有些学员是以Windows系统为对象做的IP与MAC地址的绑定实验。而在Windows系统中看到的MAC地址，其格式类似于00-0c-29-27-c6-12，间隔符为减号（-）。但是在Linux系统中，MAC地址的间隔符则变成了冒号（:）。','        之前我在线下讲课时，讲完DHCP服务后总是看到有些学员在挠头。起初我很不理解，毕竟dhcpd服务程序是Linux系统中一个很简单的实验，总共就那么十几行的配置参数还能写错？后来发现了原因—有些学员是以Windows系统为对象做的IP与MAC地址的绑定实验。而在Windows系统中看到的MAC地址，其格式类似于00-0c-29-27-c6-12，间隔符为减号（-）。但是在Linux系统中，MAC地址的间隔符则变成了冒号（:）。',0,'alvin',curdate());
insert into Content values(1123,11,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/dhcp/dhcpd.conf 
ddns-update-style none;
ignore client-updates;
subnet 192.168.10.0 netmask 255.255.255.0 {
range 192.168.10.50 192.168.10.150;
option subnet-mask 255.255.255.0;
option routers 192.168.10.1;
option domain-name "linuxprobe.com";
option domain-name-servers 192.168.10.1;
default-lease-time 21600;
max-lease-time 43200;
host linuxprobe {
hardware ethernet 00:0c:29:27:c6:12;
fixed-address 192.168.10.88;
}
}
','[root@linuxprobe ~]# vim /etc/dhcp/dhcpd.conf 
ddns-update-style none;
ignore client-updates;
subnet 192.168.10.0 netmask 255.255.255.0 {
range 192.168.10.50 192.168.10.150;
option subnet-mask 255.255.255.0;
option routers 192.168.10.1;
option domain-name "linuxprobe.com";
option domain-name-servers 192.168.10.1;
default-lease-time 21600;
max-lease-time 43200;
host linuxprobe {
hardware ethernet 00:0c:29:27:c6:12;
fixed-address 192.168.10.88;
}
}
',0,'alvin',curdate());
insert into Content values(1124,11,'p',50,'{}','        确认参数填写正确后就可以保存退出配置文件，然后就可以重启dhcpd服务程序了。','        确认参数填写正确后就可以保存退出配置文件，然后就可以重启dhcpd服务程序了。',0,'alvin',curdate());
insert into Content values(1125,11,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart dhcpd
','[root@linuxprobe ~]# systemctl restart dhcpd
',0,'alvin',curdate());
insert into Content values(1126,11,'p',52,'{}','        需要说明的是，如果您刚刚为这台主机分配了IP地址，则它的IP地址租约时间还没有到期，因此不会立即换成新绑定的IP地址。要想立即查看绑定效果，则需要重启一下客户端的网络服务，如下图所示。','        需要说明的是，如果您刚刚为这台主机分配了IP地址，则它的IP地址租约时间还没有到期，因此不会立即换成新绑定的IP地址。要想立即查看绑定效果，则需要重启一下客户端的网络服务，如下图所示。',0,'alvin',curdate());
insert into Content values(1127,11,'image',53,'{"alt": "bind_ip", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_dhcp_bind_ip.jpg", "width": "676"}','/static/img/linux/linux_dhcp_bind_ip.jpg','/static/img/linux/linux_dhcp_bind_ip.jpg',0,'alvin',curdate());
insert into Content values(1128,12,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用Postfix与Dovecot部署邮件系统',' <span class="color_h1">  Linux </span> 使用Postfix与Dovecot部署邮件系统',0,'alvin',curdate());
insert into Content values(1129,12,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1130,12,'p',3,'{}','        电子邮件系统是我们在日常工作、生活中最常用的一个网络服务，本章将首先介绍电子邮件系统的起源，然后介绍SMTP、POP3、IMAP4等常见的电子邮件协议，以及MUA、MTA、MDA这三种服务角色的作用。本章将完整地演示在Linux系统中使用Postfix和Dovecot服务程序配置电子邮件系统服务的方法，并重点讲解常用的配置参数，此外还将结合BIND服务程序提供的DNS域名解析服务来验证客户端主机与服务器之间的邮件收发功能。本章最后还介绍了如何在电子邮件系统中设置用户别名，以帮助大家在生产环境中更好地控制、管理电子邮件账户以及信箱地址。','        电子邮件系统是我们在日常工作、生活中最常用的一个网络服务，本章将首先介绍电子邮件系统的起源，然后介绍SMTP、POP3、IMAP4等常见的电子邮件协议，以及MUA、MTA、MDA这三种服务角色的作用。本章将完整地演示在Linux系统中使用Postfix和Dovecot服务程序配置电子邮件系统服务的方法，并重点讲解常用的配置参数，此外还将结合BIND服务程序提供的DNS域名解析服务来验证客户端主机与服务器之间的邮件收发功能。本章最后还介绍了如何在电子邮件系统中设置用户别名，以帮助大家在生产环境中更好地控制、管理电子邮件账户以及信箱地址。',0,'alvin',curdate());
insert into Content values(1131,12,'h2',4,'{}','电子邮件系统','电子邮件系统',0,'alvin',curdate());
insert into Content values(1132,12,'p',5,'{}','        20世纪60年代，美苏两国正处于冷战时期。美国军方认为应该在科学技术上保持其领先的地位，这样有助于在未来的战争中取得优势。美国国防部由此发起了一项名为ARPANET的科研项目，即大家现在所熟知的阿帕网计划。阿帕网是当今互联网的雏形，它也是世界上第一个运营的封包交换网络。但是很快在1971年阿帕网遇到了严峻的问题，如图15-1所示，参与阿帕网科研项目的科学家分布在美国不同的地区，甚至还会因为时差的影响而不能及时分享各自的研究成果，因此科学家们迫切需要一种能够借助于网络在计算机之间传输数据的方法。','        20世纪60年代，美苏两国正处于冷战时期。美国军方认为应该在科学技术上保持其领先的地位，这样有助于在未来的战争中取得优势。美国国防部由此发起了一项名为ARPANET的科研项目，即大家现在所熟知的阿帕网计划。阿帕网是当今互联网的雏形，它也是世界上第一个运营的封包交换网络。但是很快在1971年阿帕网遇到了严峻的问题，如图15-1所示，参与阿帕网科研项目的科学家分布在美国不同的地区，甚至还会因为时差的影响而不能及时分享各自的研究成果，因此科学家们迫切需要一种能够借助于网络在计算机之间传输数据的方法。',0,'alvin',curdate());
insert into Content values(1133,12,'p',6,'{}','        尽管本书介绍的Web服务和FTP文件传输服务也能实现数据交换，但是这些服务的数据传输方式就像“打电话”那样，需要双方同时在线才能完成传输工作。如果对方的主机宕机或者科研人员因故离开，就有可能错过某些科研成果了。好在当时麻省理工学院的Ray Tomlinson博士也参与到了阿帕网计划的科研项目中，他觉得有必要设计一种类似于“信件”的传输服务，并为信件准备一个“信箱”，这样即便对方临时离线也能完成数据的接收，等上线后再进行处理即可。于是，Ray Tomlinson博士用了近一年的时间完成了电子邮件（Email）的设计，并在1971年秋天使用SNDMSG软件向自己的另一台计算机发送出了人类历史上第一封电子邮件—电子邮件系统在互联网中由此诞生！','        尽管本书介绍的Web服务和FTP文件传输服务也能实现数据交换，但是这些服务的数据传输方式就像“打电话”那样，需要双方同时在线才能完成传输工作。如果对方的主机宕机或者科研人员因故离开，就有可能错过某些科研成果了。好在当时麻省理工学院的Ray Tomlinson博士也参与到了阿帕网计划的科研项目中，他觉得有必要设计一种类似于“信件”的传输服务，并为信件准备一个“信箱”，这样即便对方临时离线也能完成数据的接收，等上线后再进行处理即可。于是，Ray Tomlinson博士用了近一年的时间完成了电子邮件（Email）的设计，并在1971年秋天使用SNDMSG软件向自己的另一台计算机发送出了人类历史上第一封电子邮件—电子邮件系统在互联网中由此诞生！',0,'alvin',curdate());
insert into Content values(1134,12,'image',7,'{"alt": "mail_history", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_mail_history.gif", "width": "676"}','/static/img/linux/linux_mail_history.gif','/static/img/linux/linux_mail_history.gif',0,'alvin',curdate());
insert into Content values(1135,12,'p',8,'{}','        既然要在互联网中给他人发送电子邮件，那么对方用户用于接收电子邮件的名称必须是唯一的，否则电子邮件可能会同时发给多个重名的用户，也或者干脆大家都收不到邮件了。因此，Ray Tomlinson博士决定选择使用“姓名@计算机主机名称”的格式来规范电子信箱的名称。选择使用@符号作为间隔符的原因其实也很简单，因为Ray Tomlinson博士觉得人类的名字和计算机主机名称中应该不会有这么一个@符号，所以就选择了这个符号。','        既然要在互联网中给他人发送电子邮件，那么对方用户用于接收电子邮件的名称必须是唯一的，否则电子邮件可能会同时发给多个重名的用户，也或者干脆大家都收不到邮件了。因此，Ray Tomlinson博士决定选择使用“姓名@计算机主机名称”的格式来规范电子信箱的名称。选择使用@符号作为间隔符的原因其实也很简单，因为Ray Tomlinson博士觉得人类的名字和计算机主机名称中应该不会有这么一个@符号，所以就选择了这个符号。',0,'alvin',curdate());
insert into Content values(1136,12,'p',9,'{}','        电子邮件系统基于邮件协议来完成电子邮件的传输，常见的邮件协议有下面这些。','        电子邮件系统基于邮件协议来完成电子邮件的传输，常见的邮件协议有下面这些。',0,'alvin',curdate());
insert into Content values(1137,12,'ul',10,'{}',' BOLD[  简单邮件传输协议（Simple Mail Transfer Protocol，SMTP）： ]BOLD 用于发送和中转发出的电子邮件，占用服务器的25/TCP端口。
 BOLD[  邮局协议版本3（Post Office Protocol 3）： ]BOLD 用于将电子邮件存储到本地主机，占用服务器的110/TCP端口。
 BOLD[  Internet消息访问协议版本4（Internet Message Access Protocol 4）： ]BOLD 用于在本地主机上访问邮件，占用服务器的143/TCP端口。',' BOLD[  简单邮件传输协议（Simple Mail Transfer Protocol，SMTP）： ]BOLD 用于发送和中转发出的电子邮件，占用服务器的25/TCP端口。
 BOLD[  邮局协议版本3（Post Office Protocol 3）： ]BOLD 用于将电子邮件存储到本地主机，占用服务器的110/TCP端口。
 BOLD[  Internet消息访问协议版本4（Internet Message Access Protocol 4）： ]BOLD 用于在本地主机上访问邮件，占用服务器的143/TCP端口。',0,'alvin',curdate());
insert into Content values(1138,12,'p',11,'{}','        在电子邮件系统中，为用户收发邮件的服务器名为邮件用户代理（Mail User Agent，MUA）。另外，既然电子邮件系统能够让用户在离线的情况下依然可以完成数据的接收，肯定得有一个用于保存用户邮件的“信箱”服务器，这个服务器的名字为邮件投递代理（Mail Delivery Agent，MDA），其工作职责是把来自于邮件传输代理（Mail Transfer Agent，MTA）的邮件保存到本地的收件箱中。其中，这个MTA的工作职责是转发处理不同电子邮件服务供应商之间的邮件，把来自于MUA的邮件转发到合适的MTA服务器。例如，我们从新浪信箱向谷歌信箱发送一封电子邮件，这封电子邮件的传输过程如下图所示。','        在电子邮件系统中，为用户收发邮件的服务器名为邮件用户代理（Mail User Agent，MUA）。另外，既然电子邮件系统能够让用户在离线的情况下依然可以完成数据的接收，肯定得有一个用于保存用户邮件的“信箱”服务器，这个服务器的名字为邮件投递代理（Mail Delivery Agent，MDA），其工作职责是把来自于邮件传输代理（Mail Transfer Agent，MTA）的邮件保存到本地的收件箱中。其中，这个MTA的工作职责是转发处理不同电子邮件服务供应商之间的邮件，把来自于MUA的邮件转发到合适的MTA服务器。例如，我们从新浪信箱向谷歌信箱发送一封电子邮件，这封电子邮件的传输过程如下图所示。',0,'alvin',curdate());
insert into Content values(1139,12,'p',12,'{}','        总的来说，一般的网络服务程序在传输信息时就像拨打电话，需要双方同时保持在线，而在电子邮件系统中，当用户发送邮件后不必等待投递工作完成即可下线。如果对方邮件服务器（MTA）宕机或对方临时离线，则发件服务器（MTA）就会把要发送的内容自动的暂时保存到本地，等检测到对方邮件服务器恢复后会立即再次投递，期间一般无需运维人员维护处理，随后收信人（MUA）就能在自己的信箱中找到这封邮件了。','        总的来说，一般的网络服务程序在传输信息时就像拨打电话，需要双方同时保持在线，而在电子邮件系统中，当用户发送邮件后不必等待投递工作完成即可下线。如果对方邮件服务器（MTA）宕机或对方临时离线，则发件服务器（MTA）就会把要发送的内容自动的暂时保存到本地，等检测到对方邮件服务器恢复后会立即再次投递，期间一般无需运维人员维护处理，随后收信人（MUA）就能在自己的信箱中找到这封邮件了。',0,'alvin',curdate());
insert into Content values(1140,12,'image',13,'{"alt": "mail_process", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_mail_process.png", "width": "876"}','/static/img/linux/linux_mail_process.png','/static/img/linux/linux_mail_process.png',0,'alvin',curdate());
insert into Content values(1141,12,'p',14,'{}','        大家在生产环境中部署企业级的电子邮件系统时，有4个注意事项请留意。','        大家在生产环境中部署企业级的电子邮件系统时，有4个注意事项请留意。',0,'alvin',curdate());
insert into Content values(1142,12,'ol',15,'{}','添加反垃圾与反病毒模块：它能够很有效地阻止垃圾邮件或病毒邮件对企业信箱的干扰。
对邮件加密：可有效保护邮件内容不被黑客盗取和篡改。
添加邮件监控审核模块：可有效地监控企业全体员工的邮件中是否有敏感词、是否有透露企业资料等违规行为。
保障稳定性：电子邮件系统的稳定性至关重要，运维人员应做到保证电子邮件系统的稳定运行，并及时做好防范分布式拒绝服务（Distributed Denial of Service，DDoS）攻击的准备。','添加反垃圾与反病毒模块：它能够很有效地阻止垃圾邮件或病毒邮件对企业信箱的干扰。
对邮件加密：可有效保护邮件内容不被黑客盗取和篡改。
添加邮件监控审核模块：可有效地监控企业全体员工的邮件中是否有敏感词、是否有透露企业资料等违规行为。
保障稳定性：电子邮件系统的稳定性至关重要，运维人员应做到保证电子邮件系统的稳定运行，并及时做好防范分布式拒绝服务（Distributed Denial of Service，DDoS）攻击的准备。',0,'alvin',curdate());
insert into Content values(1143,12,'h2',16,'{}','部署基础的电子邮件系统','部署基础的电子邮件系统',0,'alvin',curdate());
insert into Content values(1144,12,'p',17,'{}','        一个最基础的电子邮件系统肯定要能提供发件服务和收件服务，为此需要使用基于SMTP协议的Postfix服务程序提供发件服务功能，并使用基于POP3协议的Dovecot服务程序提供收件服务功能。这样一来，用户就可以使用Outlook Express或Foxmail等客户端服务程序正常收发邮件了。电子邮件系统的工作流程如图所示。','        一个最基础的电子邮件系统肯定要能提供发件服务和收件服务，为此需要使用基于SMTP协议的Postfix服务程序提供发件服务功能，并使用基于POP3协议的Dovecot服务程序提供收件服务功能。这样一来，用户就可以使用Outlook Express或Foxmail等客户端服务程序正常收发邮件了。电子邮件系统的工作流程如图所示。',0,'alvin',curdate());
insert into Content values(1145,12,'image',18,'{"alt": "mail_system", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_mail_system.png", "width": "676"}','/static/img/linux/linux_mail_system.png','/static/img/linux/linux_mail_system.png',0,'alvin',curdate());
insert into Content values(1146,12,'p',19,'{}','        在RHEL 5、RHEL 6以及诸多早期的Linux系统中，默认使用的发件服务是由Sendmail服务程序提供的，而在RHEL 7系统中已经替换为Postfix服务程序。相较于Sendmail服务程序，Postfix服务程序减少了很多不必要的配置步骤，而且在稳定性、并发性方面也有很大改进。','        在RHEL 5、RHEL 6以及诸多早期的Linux系统中，默认使用的发件服务是由Sendmail服务程序提供的，而在RHEL 7系统中已经替换为Postfix服务程序。相较于Sendmail服务程序，Postfix服务程序减少了很多不必要的配置步骤，而且在稳定性、并发性方面也有很大改进。',0,'alvin',curdate());
insert into Content values(1147,12,'p',20,'{}','        一般而言，我们的信箱地址类似于“root@linuxprobe.com”这样，也就是按照“用户名@主机地址（域名）”格式来规范的。如果您给我一串“root@192.168.10.10”的信息，我可能猜不到这是一个信箱地址，没准会将它当作SSH协议的连接信息。因此，要想更好地检验电子邮件系统的配置效果，需要先部署bind服务程序，为电子邮件服务器和客户端提供DNS域名解析服务。','        一般而言，我们的信箱地址类似于“root@linuxprobe.com”这样，也就是按照“用户名@主机地址（域名）”格式来规范的。如果您给我一串“root@192.168.10.10”的信息，我可能猜不到这是一个信箱地址，没准会将它当作SSH协议的连接信息。因此，要想更好地检验电子邮件系统的配置效果，需要先部署bind服务程序，为电子邮件服务器和客户端提供DNS域名解析服务。',0,'alvin',curdate());
insert into Content values(1148,12,'p',21,'{}',' BOLD[  第1步： ]BOLD 配置服务器主机名称，需要保证服务器主机名称与发信域名保持一致：',' BOLD[  第1步： ]BOLD 配置服务器主机名称，需要保证服务器主机名称与发信域名保持一致：',0,'alvin',curdate());
insert into Content values(1149,12,'pre',22,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/hostname
mail.linuxprobe.com
[root@linuxprobe ~]# hostname
mail.linuxprobe.com
','[root@linuxprobe ~]# vim /etc/hostname
mail.linuxprobe.com
[root@linuxprobe ~]# hostname
mail.linuxprobe.com
',0,'alvin',curdate());
insert into Content values(1150,12,'p',23,'{}',' BOLD[  第2步： ]BOLD 清空iptables防火墙默认策略，并保存策略状态，避免因防火墙中默认存在的策略阻止了客户端DNS解析域名及收发邮件：',' BOLD[  第2步： ]BOLD 清空iptables防火墙默认策略，并保存策略状态，避免因防火墙中默认存在的策略阻止了客户端DNS解析域名及收发邮件：',0,'alvin',curdate());
insert into Content values(1151,12,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','[root@localhost ~]# iptables -F
[root@localhost ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
','[root@localhost ~]# iptables -F
[root@localhost ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[  OK  ]
',0,'alvin',curdate());
insert into Content values(1152,12,'p',25,'{}',' BOLD[  第3步： ]BOLD 为电子邮件系统提供域名解析。由于第13章已经讲解了bind-chroot服务程序的配置方法，因此这里只提供主配置文件、区域配置文件和域名数据文件的配置内容，其余配置步骤请大家自行完成。',' BOLD[  第3步： ]BOLD 为电子邮件系统提供域名解析。由于第13章已经讲解了bind-chroot服务程序的配置方法，因此这里只提供主配置文件、区域配置文件和域名数据文件的配置内容，其余配置步骤请大家自行完成。',0,'alvin',curdate());
insert into Content values(1153,12,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 
 10 options {
 11 listen-on port 53 { any; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { any; };
 18 
 ………………省略部分输出信息………………
','[root@linuxprobe ~]# cat /etc/named.conf
 1 //
 2 // named.conf
 3 //
 4 // Provided by Red Hat bind package to configure the ISC BIND named(8) DNS
 5 // server as a caching only nameserver (as a localhost DNS resolver only).
 6 //
 7 // See /usr/share/doc/bind*/sample/ for example named configuration files.
 8 //
 9 
 10 options {
 11 listen-on port 53 { any; };
 12 listen-on-v6 port 53 { ::1; };
 13 directory "/var/named";
 14 dump-file "/var/named/data/cache_dump.db";
 15 statistics-file "/var/named/data/named_stats.txt";
 16 memstatistics-file "/var/named/data/named_mem_stats.txt";
 17 allow-query { any; };
 18 
 ………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1154,12,'pre',27,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update {none;};
};
','[root@linuxprobe ~]# cat /etc/named.rfc1912.zones
zone "linuxprobe.com" IN {
type master;
file "linuxprobe.com.zone";
allow-update {none;};
};
',0,'alvin',curdate());
insert into Content values(1155,12,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /var/named/linuxprobe.com.zone
','[root@linuxprobe ~]# cat /var/named/linuxprobe.com.zone
',0,'alvin',curdate());
insert into Content values(1156,12,'pre',29,'{}','$TTL 1D
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
                                    0;serial
                                    1D;refresh
                                    1H;retry
                                    1W;expire
                                    3H;)minimum
        NS                ns.linuxprobe.com.
ns        IN A                192.168.10.10
@        IN MX 10            mail.linuxprobe.com.
mail        IN A                192.168.10.10
','$TTL 1D
@        IN SOA                linuxprobe.com.        root.linuxprobe.com.    (    
                                    0;serial
                                    1D;refresh
                                    1H;retry
                                    1W;expire
                                    3H;)minimum
        NS                ns.linuxprobe.com.
ns        IN A                192.168.10.10
@        IN MX 10            mail.linuxprobe.com.
mail        IN A                192.168.10.10
',0,'alvin',curdate());
insert into Content values(1157,12,'p',30,'{}','        修改好配置文件后记得重启bind服务程序，这样电子邮件系统所对应的服务器主机名即为mail.linuxprobe.com，而邮件域为@linuxprobe.com。把服务器的DNS地址修改成本地IP地址，如下图所示。','        修改好配置文件后记得重启bind服务程序，这样电子邮件系统所对应的服务器主机名即为mail.linuxprobe.com，而邮件域为@linuxprobe.com。把服务器的DNS地址修改成本地IP地址，如下图所示。',0,'alvin',curdate());
insert into Content values(1158,12,'image',31,'{"alt": "post_set_dns", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_post_set_dns.jpg", "width": "676"}','/static/img/linux/linux_post_set_dns.jpg','/static/img/linux/linux_post_set_dns.jpg',0,'alvin',curdate());
insert into Content values(1159,12,'h3',32,'{}','配置Postfix服务程序','配置Postfix服务程序',0,'alvin',curdate());
insert into Content values(1160,12,'p',33,'{}','        Postfix是一款由IBM资助研发的免费开源电子邮件服务程序，能够很好地兼容Sendmail服务程序，可以方便Sendmail用户迁移到Postfix服务上。Postfix服务程序的邮件收发能力强于Sendmail服务，而且能自动增加、减少进程的数量来保证电子邮件系统的高性能与稳定性。另外，Postfix服务程序由许多小模块组成，每个小模块都可以完成特定的功能，因此可在生产工作环境中根据需求灵活搭配它们。','        Postfix是一款由IBM资助研发的免费开源电子邮件服务程序，能够很好地兼容Sendmail服务程序，可以方便Sendmail用户迁移到Postfix服务上。Postfix服务程序的邮件收发能力强于Sendmail服务，而且能自动增加、减少进程的数量来保证电子邮件系统的高性能与稳定性。另外，Postfix服务程序由许多小模块组成，每个小模块都可以完成特定的功能，因此可在生产工作环境中根据需求灵活搭配它们。',0,'alvin',curdate());
insert into Content values(1161,12,'p',34,'{}',' BOLD[  第1步： ]BOLD 安装Postfix服务程序。这一步在RHEL7系统中是多余的。刘遄老师之所以还要写上这一步骤，其目的是让大家在学完本书之后不但能掌握RHEL系统，还能立即上手Fedora、CentOS等主流Linux系统。这样，既然这些系统没有默认安装Postfix服务程序，我们也可以自行搞定。在安装完Postfix服务程序后，需要禁用iptables防火墙，否则外部用户无法访问电子邮件系统。',' BOLD[  第1步： ]BOLD 安装Postfix服务程序。这一步在RHEL7系统中是多余的。刘遄老师之所以还要写上这一步骤，其目的是让大家在学完本书之后不但能掌握RHEL系统，还能立即上手Fedora、CentOS等主流Linux系统。这样，既然这些系统没有默认安装Postfix服务程序，我们也可以自行搞定。在安装完Postfix服务程序后，需要禁用iptables防火墙，否则外部用户无法访问电子邮件系统。',0,'alvin',curdate());
insert into Content values(1162,12,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install postfix
Loaded plugins: langpacks, product-id, subscription-manager
rhel7 | 4.1 kB 00:00
(1/2): rhel7/group_gz | 134 kB 00:00
(2/2): rhel7/primary_db | 3.4 MB 00:00
Package 2:postfix-2.10.1-6.el7.x86_64 already installed and latest version
Nothing to do
[root@linuxprobe ~]# systemctl disable iptables
','[root@linuxprobe ~]# yum install postfix
Loaded plugins: langpacks, product-id, subscription-manager
rhel7 | 4.1 kB 00:00
(1/2): rhel7/group_gz | 134 kB 00:00
(2/2): rhel7/primary_db | 3.4 MB 00:00
Package 2:postfix-2.10.1-6.el7.x86_64 already installed and latest version
Nothing to do
[root@linuxprobe ~]# systemctl disable iptables
',0,'alvin',curdate());
insert into Content values(1163,12,'p',36,'{}',' BOLD[  第2步： ]BOLD 配置Postfix服务程序。大家如果是首次看到Postfix服务程序主配置文件（/etc/ postfix/main.cf），估计会被679行左右的内容给吓到。其实不用担心，这里面绝大多数的内容依然是注释信息。刘遄老师在本书中一直强调正确学习Linux系统的方法，并坚信“负责任的好老师不应该是书本的搬运工，而应该一名优质内容的提炼者”，因此在翻遍了配置参数的介绍，以及结合多年的运维经验后，最终总结出了7个最应该掌握的参数，如下表所示。',' BOLD[  第2步： ]BOLD 配置Postfix服务程序。大家如果是首次看到Postfix服务程序主配置文件（/etc/ postfix/main.cf），估计会被679行左右的内容给吓到。其实不用担心，这里面绝大多数的内容依然是注释信息。刘遄老师在本书中一直强调正确学习Linux系统的方法，并坚信“负责任的好老师不应该是书本的搬运工，而应该一名优质内容的提炼者”，因此在翻遍了配置参数的介绍，以及结合多年的运维经验后，最终总结出了7个最应该掌握的参数，如下表所示。',0,'alvin',curdate());
insert into Content values(1164,12,'table',37,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
myhostname	邮局系统的主机名
mydomain	邮局系统的域名
myorigin	从本机发出邮件的域名名称
inet_interfaces	监听的网卡接口
mydestination	可接收邮件的主机名或域名
mynetworks	设置可转发哪些主机的邮件
relay_domains	设置可转发哪些网域的邮件','参数	作用
myhostname	邮局系统的主机名
mydomain	邮局系统的域名
myorigin	从本机发出邮件的域名名称
inet_interfaces	监听的网卡接口
mydestination	可接收邮件的主机名或域名
mynetworks	设置可转发哪些主机的邮件
relay_domains	设置可转发哪些网域的邮件',0,'alvin',curdate());
insert into Content values(1165,12,'p',38,'{}','        在Postfix服务程序的主配置文件中，总计需要修改5处。首先是在第76行定义一个名为myhostname的变量，用来保存服务器的主机名称。请大家记住这个变量的名称，下边的参数需要调用它：','        在Postfix服务程序的主配置文件中，总计需要修改5处。首先是在第76行定义一个名为myhostname的变量，用来保存服务器的主机名称。请大家记住这个变量的名称，下边的参数需要调用它：',0,'alvin',curdate());
insert into Content values(1166,12,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/postfix/main.cf
………………省略部分输出信息………………
68 # INTERNET HOST AND DOMAIN NAMES
69 # 
70 # The myhostname parameter specifies the internet hostname of this
71 # mail system. The default is to use the fully-qualified domain name
72 # from gethostname(). $myhostname is used as a default value for many
73 # other configuration parameters.
74 #
75 #myhostname = host.domain.tld
76 myhostname = mail.linuxprobe.com
………………省略部分输出信息………………
','[root@linuxprobe ~]# vim /etc/postfix/main.cf
………………省略部分输出信息………………
68 # INTERNET HOST AND DOMAIN NAMES
69 # 
70 # The myhostname parameter specifies the internet hostname of this
71 # mail system. The default is to use the fully-qualified domain name
72 # from gethostname(). $myhostname is used as a default value for many
73 # other configuration parameters.
74 #
75 #myhostname = host.domain.tld
76 myhostname = mail.linuxprobe.com
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1167,12,'p',40,'{}','        然后在第83行定义一个名为mydomain的变量，用来保存邮件域的名称。大家也要记住这个变量名称，下面将调用它：','        然后在第83行定义一个名为mydomain的变量，用来保存邮件域的名称。大家也要记住这个变量名称，下面将调用它：',0,'alvin',curdate());
insert into Content values(1168,12,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','78 # The mydomain parameter specifies the local internet domain name.
79 # The default is to use $myhostname minus the first component.
80 # $mydomain is used as a default value for many other configuration
81 # parameters.
82 #
83 mydomain = linuxprobe.com
','78 # The mydomain parameter specifies the local internet domain name.
79 # The default is to use $myhostname minus the first component.
80 # $mydomain is used as a default value for many other configuration
81 # parameters.
82 #
83 mydomain = linuxprobe.com
',0,'alvin',curdate());
insert into Content values(1169,12,'p',42,'{}','        在第99行调用前面的mydomain变量，用来定义发出邮件的域。调用变量的好处是避免重复写入信息，以及便于日后统一修改：','        在第99行调用前面的mydomain变量，用来定义发出邮件的域。调用变量的好处是避免重复写入信息，以及便于日后统一修改：',0,'alvin',curdate());
insert into Content values(1170,12,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','85 # SENDING MAIL
86 # 
87 # The myorigin parameter specifies the domain that locally-posted
88 # mail appears to come from. The default is to append $myhostname,
89 # which is fine for small sites. If you run a domain with multiple
90 # machines, you should (1) change this to $mydomain and (2) set up
91 # a domain-wide alias database that aliases each user to
92 # user@that.users.mailhost.
93 #
94 # For the sake of consistency between sender and recipient addresses,
95 # myorigin also specifies the default domain name that is appended
96 # to recipient addresses that have no @domain part.
97 #
98 #myorigin = $myhostname
99 myorigin = $mydomain
','85 # SENDING MAIL
86 # 
87 # The myorigin parameter specifies the domain that locally-posted
88 # mail appears to come from. The default is to append $myhostname,
89 # which is fine for small sites. If you run a domain with multiple
90 # machines, you should (1) change this to $mydomain and (2) set up
91 # a domain-wide alias database that aliases each user to
92 # user@that.users.mailhost.
93 #
94 # For the sake of consistency between sender and recipient addresses,
95 # myorigin also specifies the default domain name that is appended
96 # to recipient addresses that have no @domain part.
97 #
98 #myorigin = $myhostname
99 myorigin = $mydomain
',0,'alvin',curdate());
insert into Content values(1171,12,'p',44,'{}','        第4处修改是在第116行定义网卡监听地址。可以指定要使用服务器的哪些IP地址对外提供电子邮件服务；也可以干脆写成all，代表所有IP地址都能提供电子邮件服务：','        第4处修改是在第116行定义网卡监听地址。可以指定要使用服务器的哪些IP地址对外提供电子邮件服务；也可以干脆写成all，代表所有IP地址都能提供电子邮件服务：',0,'alvin',curdate());
insert into Content values(1172,12,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','103 # The inet_interfaces parameter specifies the network interface
104 # addresses that this mail system receives mail on. By default,
105 # the software claims all active interfaces on the machine. The
106 # parameter also controls delivery of mail to user@[ip.address].
107 #
108 # See also the proxy_interfaces parameter, for network addresses that
109 # are forwarded to us via a proxy or network address translator.
110 #
111 # Note: you need to stop/start Postfix when this parameter changes.
112 #
113 #inet_interfaces = all
114 #inet_interfaces = $myhostname
115 #inet_interfaces = $myhostname, localhost
116 inet_interfaces = all
','103 # The inet_interfaces parameter specifies the network interface
104 # addresses that this mail system receives mail on. By default,
105 # the software claims all active interfaces on the machine. The
106 # parameter also controls delivery of mail to user@[ip.address].
107 #
108 # See also the proxy_interfaces parameter, for network addresses that
109 # are forwarded to us via a proxy or network address translator.
110 #
111 # Note: you need to stop/start Postfix when this parameter changes.
112 #
113 #inet_interfaces = all
114 #inet_interfaces = $myhostname
115 #inet_interfaces = $myhostname, localhost
116 inet_interfaces = all
',0,'alvin',curdate());
insert into Content values(1173,12,'p',46,'{}','        最后一处修改是在第164行定义可接收邮件的主机名或域名列表。这里可以直接调用前面定义好的myhostname和mydomain变量（如果不想调用变量，也可以直接调用变量中的值）：','        最后一处修改是在第164行定义可接收邮件的主机名或域名列表。这里可以直接调用前面定义好的myhostname和mydomain变量（如果不想调用变量，也可以直接调用变量中的值）：',0,'alvin',curdate());
insert into Content values(1174,12,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','133 # The mydestination parameter specifies the list of domains that this
134 # machine considers itself the final destination for.
135 #
136 # These domains are routed to the delivery agent specified with the
137 # local_transport parameter setting. By default, that is the UNIX
138 # compatible delivery agent that lookups all recipients in /etc/passwd
139 # and /etc/aliases or their equivalent.
140 #
141 # The default is $myhostname + localhost.$mydomain. On a mail domain
142 # gateway, you should also include $mydomain.
143 #
144 # Do not specify the names of virtual domains - those domains are
145 # specified elsewhere (see VIRTUAL_README).
146 #
147 # Do not specify the names of domains that this machine is backup MX
148 # host for. Specify those names via the relay_domains settings for
149 # the SMTP server, or use permit_mx_backup if you are lazy (see
150 # STANDARD_CONFIGURATION_README).
151 #
152 # The local machine is always the final destination for mail addressed
153 # to user@[the.net.work.address] of an interface that the mail system
154 # receives mail on (see the inet_interfaces parameter).
155 #
156 # Specify a list of host or domain names, /file/name or type:table
157 # patterns, separated by commas and/or whitespace. A /file/name
158 # pattern is replaced by its contents; a type:table is matched when
159 # a name matches a lookup key (the right-hand side is ignored).
160 # Continue long lines by starting the next line with whitespace.
161 #
162 # See also below, section "REJECTING MAIL FOR UNKNOWN LOCAL USERS".
163 #
164 mydestination = $myhostname , $mydomain
165 #mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain
166 #mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain,
','133 # The mydestination parameter specifies the list of domains that this
134 # machine considers itself the final destination for.
135 #
136 # These domains are routed to the delivery agent specified with the
137 # local_transport parameter setting. By default, that is the UNIX
138 # compatible delivery agent that lookups all recipients in /etc/passwd
139 # and /etc/aliases or their equivalent.
140 #
141 # The default is $myhostname + localhost.$mydomain. On a mail domain
142 # gateway, you should also include $mydomain.
143 #
144 # Do not specify the names of virtual domains - those domains are
145 # specified elsewhere (see VIRTUAL_README).
146 #
147 # Do not specify the names of domains that this machine is backup MX
148 # host for. Specify those names via the relay_domains settings for
149 # the SMTP server, or use permit_mx_backup if you are lazy (see
150 # STANDARD_CONFIGURATION_README).
151 #
152 # The local machine is always the final destination for mail addressed
153 # to user@[the.net.work.address] of an interface that the mail system
154 # receives mail on (see the inet_interfaces parameter).
155 #
156 # Specify a list of host or domain names, /file/name or type:table
157 # patterns, separated by commas and/or whitespace. A /file/name
158 # pattern is replaced by its contents; a type:table is matched when
159 # a name matches a lookup key (the right-hand side is ignored).
160 # Continue long lines by starting the next line with whitespace.
161 #
162 # See also below, section "REJECTING MAIL FOR UNKNOWN LOCAL USERS".
163 #
164 mydestination = $myhostname , $mydomain
165 #mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain
166 #mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain,
',0,'alvin',curdate());
insert into Content values(1175,12,'p',48,'{}',' BOLD[  第3步： ]BOLD 创建电子邮件系统的登录账户。Postfix与vsftpd服务程序一样，都可以调用本地系统的账户和密码，因此在本地系统创建常规账户即可。最后重启配置妥当的postfix服务程序，并将其添加到开机启动项中。大功告成！',' BOLD[  第3步： ]BOLD 创建电子邮件系统的登录账户。Postfix与vsftpd服务程序一样，都可以调用本地系统的账户和密码，因此在本地系统创建常规账户即可。最后重启配置妥当的postfix服务程序，并将其添加到开机启动项中。大功告成！',0,'alvin',curdate());
insert into Content values(1176,12,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# useradd boss
[root@linuxprobe ~]# echo "linuxprobe" | passwd --stdin boss
Changing password for user boss. passwd: all authentication tokens updated successfully.
[root@linuxprobe ~]# systemctl restart postfix
[root@linuxprobe ~]# systemctl enable postfix
ln -s \'/usr/lib/systemd/system/postfix.service\' \'/etc/systemd/system/multi-user.target.wants/postfix.service\'
','[root@linuxprobe ~]# useradd boss
[root@linuxprobe ~]# echo "linuxprobe" | passwd --stdin boss
Changing password for user boss. passwd: all authentication tokens updated successfully.
[root@linuxprobe ~]# systemctl restart postfix
[root@linuxprobe ~]# systemctl enable postfix
ln -s \'/usr/lib/systemd/system/postfix.service\' \'/etc/systemd/system/multi-user.target.wants/postfix.service\'
',0,'alvin',curdate());
insert into Content values(1177,12,'h3',50,'{}','配置Dovecot服务程序','配置Dovecot服务程序',0,'alvin',curdate());
insert into Content values(1178,12,'p',51,'{}','        Dovecot是一款能够为Linux系统提供IMAP和POP3电子邮件服务的开源服务程序，安全性极高，配置简单，执行速度快，而且占用的服务器硬件资源也较少，因此是一款值得推荐的收件服务程序。','        Dovecot是一款能够为Linux系统提供IMAP和POP3电子邮件服务的开源服务程序，安全性极高，配置简单，执行速度快，而且占用的服务器硬件资源也较少，因此是一款值得推荐的收件服务程序。',0,'alvin',curdate());
insert into Content values(1179,12,'p',52,'{}',' BOLD[  第1步： ]BOLD 安装Dovecot服务程序软件包。大家可自行配置Yum软件仓库、挂载光盘镜像到指定目录，然后输入要安装的dovecot软件包名称即可：',' BOLD[  第1步： ]BOLD 安装Dovecot服务程序软件包。大家可自行配置Yum软件仓库、挂载光盘镜像到指定目录，然后输入要安装的dovecot软件包名称即可：',0,'alvin',curdate());
insert into Content values(1180,12,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install dovecot
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package dovecot.x86_64 1:2.2.10-4.el7 will be installed
--> Processing Dependency: libclucene-core.so.1()(64bit) for package: 1:dovecot-2.2.10-4.el7.x86_64
--> Processing Dependency: libclucene-shared.so.1()(64bit) for package: 1:dovecot-2.2.10-4.el7.x86_64
--> Running transaction check
---> Package clucene-core.x86_64 0:2.3.3.4-11.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 dovecot x86_64 1:2.2.10-4.el7 rhel 3.2 M
Installing for dependencies:
 clucene-core x86_64 2.3.3.4-11.el7 rhel 528 k
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 3.7 M
Installed size: 12 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 44 MB/s | 3.7 MB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : clucene-core-2.3.3.4-11.el7.x86_64 1/2 
 Installing : 1:dovecot-2.2.10-4.el7.x86_64 2/2 
 Verifying : 1:dovecot-2.2.10-4.el7.x86_64 1/2 
 Verifying : clucene-core-2.3.3.4-11.el7.x86_64 2/2 
Installed:
 dovecot.x86_64 1:2.2.10-4.el7 
Dependency Installed:
 clucene-core.x86_64 0:2.3.3.4-11.el7 
Complete!
','[root@linuxprobe ~]# yum install dovecot
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package dovecot.x86_64 1:2.2.10-4.el7 will be installed
--> Processing Dependency: libclucene-core.so.1()(64bit) for package: 1:dovecot-2.2.10-4.el7.x86_64
--> Processing Dependency: libclucene-shared.so.1()(64bit) for package: 1:dovecot-2.2.10-4.el7.x86_64
--> Running transaction check
---> Package clucene-core.x86_64 0:2.3.3.4-11.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 dovecot x86_64 1:2.2.10-4.el7 rhel 3.2 M
Installing for dependencies:
 clucene-core x86_64 2.3.3.4-11.el7 rhel 528 k
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 3.7 M
Installed size: 12 M
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 44 MB/s | 3.7 MB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : clucene-core-2.3.3.4-11.el7.x86_64 1/2 
 Installing : 1:dovecot-2.2.10-4.el7.x86_64 2/2 
 Verifying : 1:dovecot-2.2.10-4.el7.x86_64 1/2 
 Verifying : clucene-core-2.3.3.4-11.el7.x86_64 2/2 
Installed:
 dovecot.x86_64 1:2.2.10-4.el7 
Dependency Installed:
 clucene-core.x86_64 0:2.3.3.4-11.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1181,12,'p',54,'{}',' BOLD[  第2步： ]BOLD 配置部署Dovecot服务程序。在Dovecot服务程序的主配置文件中进行如下修改。首先是第24行，把Dovecot服务程序支持的电子邮件协议修改为imap、pop3和lmtp。然后在这一行下面添加一行参数，允许用户使用明文进行密码验证。之所以这样操作，是因为Dovecot服务程序为了保证电子邮件系统的安全而默认强制用户使用加密方式进行登录，而由于当前还没有加密系统，因此需要添加该参数来允许用户的明文登录。',' BOLD[  第2步： ]BOLD 配置部署Dovecot服务程序。在Dovecot服务程序的主配置文件中进行如下修改。首先是第24行，把Dovecot服务程序支持的电子邮件协议修改为imap、pop3和lmtp。然后在这一行下面添加一行参数，允许用户使用明文进行密码验证。之所以这样操作，是因为Dovecot服务程序为了保证电子邮件系统的安全而默认强制用户使用加密方式进行登录，而由于当前还没有加密系统，因此需要添加该参数来允许用户的明文登录。',0,'alvin',curdate());
insert into Content values(1182,12,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/dovecot/dovecot.conf
………………省略部分输出信息………………
23 # Protocols we want to be serving.
24 protocols = imap pop3 lmtp
25 disable_plaintext_auth = no
………………省略部分输出信息………………
','[root@linuxprobe ~]# vim /etc/dovecot/dovecot.conf
………………省略部分输出信息………………
23 # Protocols we want to be serving.
24 protocols = imap pop3 lmtp
25 disable_plaintext_auth = no
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1183,12,'p',56,'{}','        在主配置文件中的第48行，设置允许登录的网段地址，也就是说我们可以在这里限制只有来自于某个网段的用户才能使用电子邮件系统。如果想允许所有人都能使用，则不用修改本参数：','        在主配置文件中的第48行，设置允许登录的网段地址，也就是说我们可以在这里限制只有来自于某个网段的用户才能使用电子邮件系统。如果想允许所有人都能使用，则不用修改本参数：',0,'alvin',curdate());
insert into Content values(1184,12,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','44 # Space separated list of trusted network ranges. Connections from these
45 # IPs are allowed to override their IP addresses and ports (for logging and
46 # for authentication checks). disable_plaintext_auth is also ignored for
47 # these networks. Typically you\'d specify your IMAP proxy servers here.
48 login_trusted_networks = 192.168.10.0/24
','44 # Space separated list of trusted network ranges. Connections from these
45 # IPs are allowed to override their IP addresses and ports (for logging and
46 # for authentication checks). disable_plaintext_auth is also ignored for
47 # these networks. Typically you\'d specify your IMAP proxy servers here.
48 login_trusted_networks = 192.168.10.0/24
',0,'alvin',curdate());
insert into Content values(1185,12,'p',58,'{}',' BOLD[  第3步： ]BOLD 配置邮件格式与存储路径。在Dovecot服务程序单独的子配置文件中，定义一个路径，用于指定要将收到的邮件存放到服务器本地的哪个位置。这个路径默认已经定义好了，我们只需要将该配置文件中第24行前面的井号（#）删除即可。',' BOLD[  第3步： ]BOLD 配置邮件格式与存储路径。在Dovecot服务程序单独的子配置文件中，定义一个路径，用于指定要将收到的邮件存放到服务器本地的哪个位置。这个路径默认已经定义好了，我们只需要将该配置文件中第24行前面的井号（#）删除即可。',0,'alvin',curdate());
insert into Content values(1186,12,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/dovecot/conf.d/10-mail.conf
1 ##
2 ## Mailbox locations and namespaces
3 ##
4 # Location for users\' mailboxes. The default is empty, which means that Dovecot
5 # tries to find the mailboxes automatically. This won\'t work if the user
6 # doesn\'t yet have any mail, so you should explicitly tell Dovecot the full
7 # location.
8 #
9 # If you\'re using mbox, giving a path to the INBOX file (eg. /var/mail/%u)
10 # isn\'t enough. You\'ll also need to tell Dovecot where the other mailboxes are
11 # kept. This is called the "root mail directory", and it must be the first
12 # path given in the mail_location setting.
13 #
14 # There are a few special variables you can use, eg.:
15 #
16 # %u - username
17 # %n - user part in user@domain, same as %u if there\'s no domain
18 # %d - domain part in user@domain, empty if there\'s no domain
19 # %h - home directory
20 #
21 # See doc/wiki/Variables.txt for full list. Some examples:
22 #
23 # mail_location = maildir:~/Maildir
24 mail_location = mbox:~/mail:INBOX=/var/mail/%u
25 # mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n
………………省略部分输出信息………………
','[root@linuxprobe ~]# vim /etc/dovecot/conf.d/10-mail.conf
1 ##
2 ## Mailbox locations and namespaces
3 ##
4 # Location for users\' mailboxes. The default is empty, which means that Dovecot
5 # tries to find the mailboxes automatically. This won\'t work if the user
6 # doesn\'t yet have any mail, so you should explicitly tell Dovecot the full
7 # location.
8 #
9 # If you\'re using mbox, giving a path to the INBOX file (eg. /var/mail/%u)
10 # isn\'t enough. You\'ll also need to tell Dovecot where the other mailboxes are
11 # kept. This is called the "root mail directory", and it must be the first
12 # path given in the mail_location setting.
13 #
14 # There are a few special variables you can use, eg.:
15 #
16 # %u - username
17 # %n - user part in user@domain, same as %u if there\'s no domain
18 # %d - domain part in user@domain, empty if there\'s no domain
19 # %h - home directory
20 #
21 # See doc/wiki/Variables.txt for full list. Some examples:
22 #
23 # mail_location = maildir:~/Maildir
24 mail_location = mbox:~/mail:INBOX=/var/mail/%u
25 # mail_location = mbox:/var/mail/%d/%1n/%n:INDEX=/var/indexes/%d/%1n/%n
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1187,12,'p',60,'{}','        然后切换到配置Postfix服务程序时创建的boss账户，并在家目录中建立用于保存邮件的目录。记得要重启Dovecot服务并将其添加到开机启动项中。至此，对Dovecot服务程序的配置部署步骤全部结束。','        然后切换到配置Postfix服务程序时创建的boss账户，并在家目录中建立用于保存邮件的目录。记得要重启Dovecot服务并将其添加到开机启动项中。至此，对Dovecot服务程序的配置部署步骤全部结束。',0,'alvin',curdate());
insert into Content values(1188,12,'pre',61,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# su - boss
Last login: Sat Aug 15 16:15:58 CST 2017 on pts/1
[boss@mail ~]$ mkdir -p mail/.imap/INBOX
[boss@mail ~]$ exit
[root@linuxprobe ~]# systemctl restart dovecot 
[root@linuxprobe ~]# systemctl enable dovecot 
ln -s \'/usr/lib/systemd/system/dovecot.service\' \'/etc/systemd/system/multi-user.target.wants/dovecot.service\'
','[root@linuxprobe ~]# su - boss
Last login: Sat Aug 15 16:15:58 CST 2017 on pts/1
[boss@mail ~]$ mkdir -p mail/.imap/INBOX
[boss@mail ~]$ exit
[root@linuxprobe ~]# systemctl restart dovecot 
[root@linuxprobe ~]# systemctl enable dovecot 
ln -s \'/usr/lib/systemd/system/dovecot.service\' \'/etc/systemd/system/multi-user.target.wants/dovecot.service\'
',0,'alvin',curdate());
insert into Content values(1189,12,'h3',62,'{}','客户使用电子邮件系统','客户使用电子邮件系统',0,'alvin',curdate());
insert into Content values(1190,12,'p',63,'{}','        如何得知电子邮件系统已经能够正常收发邮件了呢？可以使用Windows操作系统中自带的Outlook软件来进行测试（也可以使用其他电子邮件客户端来测试，比如Foxmail）。请按照表15-2来设置电子邮件系统及DNS服务器和客户端主机的IP地址，以便能正常解析邮件域名。设置后的结果如下图所示。','        如何得知电子邮件系统已经能够正常收发邮件了呢？可以使用Windows操作系统中自带的Outlook软件来进行测试（也可以使用其他电子邮件客户端来测试，比如Foxmail）。请按照表15-2来设置电子邮件系统及DNS服务器和客户端主机的IP地址，以便能正常解析邮件域名。设置后的结果如下图所示。',0,'alvin',curdate());
insert into Content values(1191,12,'table',64,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
电子邮件系统及DNS服务器	RHEL 7	192.168.10.10
客户端主机	Windows 7	192.168.10.30','主机名称	操作系统	IP地址
电子邮件系统及DNS服务器	RHEL 7	192.168.10.10
客户端主机	Windows 7	192.168.10.30',0,'alvin',curdate());
insert into Content values(1192,12,'image',65,'{"alt": "set_win7_network", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_set_win7_network.png", "width": "676"}','/static/img/linux/linux_post_set_win7_network.png','/static/img/linux/linux_post_set_win7_network.png',0,'alvin',curdate());
insert into Content values(1193,12,'p',66,'{}',' BOLD[  第1步： ]BOLD 在Windows 7系统中运行Outlook软件程序。由于各位读者使用的Windows7系统版本不一定相同，因此刘遄老师决定采用Outlook 2007版本为对象进行实验。如果您想要与这里的实验环境尽量保持一致，可在本书配套站点的软件资源库页面（http://www. linuxprobe.com/ tools）下载并安装。在初次运行该软件时会出现一个“Outlook 2007启动”页面，引导大家完成该软件的配置过程，如下图所示。',' BOLD[  第1步： ]BOLD 在Windows 7系统中运行Outlook软件程序。由于各位读者使用的Windows7系统版本不一定相同，因此刘遄老师决定采用Outlook 2007版本为对象进行实验。如果您想要与这里的实验环境尽量保持一致，可在本书配套站点的软件资源库页面（http://www. linuxprobe.com/ tools）下载并安装。在初次运行该软件时会出现一个“Outlook 2007启动”页面，引导大家完成该软件的配置过程，如下图所示。',0,'alvin',curdate());
insert into Content values(1194,12,'image',67,'{"alt": "open_outlook", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_open_outlook.jpg", "width": "676"}','/static/img/linux/linux_post_open_outlook.jpg','/static/img/linux/linux_post_open_outlook.jpg',0,'alvin',curdate());
insert into Content values(1195,12,'p',68,'{}',' BOLD[  第2步： ]BOLD 配置电子邮件账户。在下图所示的“账户设置”页面中单击“是”单选按钮，然后单击“下一步”按钮。',' BOLD[  第2步： ]BOLD 配置电子邮件账户。在下图所示的“账户设置”页面中单击“是”单选按钮，然后单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(1196,12,'image',69,'{"alt": "set_account", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_set_outlook_account.jpg", "width": "676"}','/static/img/linux/linux_post_set_outlook_account.jpg','/static/img/linux/linux_post_set_outlook_account.jpg',0,'alvin',curdate());
insert into Content values(1197,12,'p',70,'{}',' BOLD[  第3步： ]BOLD 选择电子邮件服务的协议类型。在下图所示的页面中接受默认设置，然后单击“下一步”按钮。',' BOLD[  第3步： ]BOLD 选择电子邮件服务的协议类型。在下图所示的页面中接受默认设置，然后单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(1198,12,'image',71,'{"alt": "check_server_type", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_check_server_type.png", "width": "676"}','/static/img/linux/linux_post_check_server_type.png','/static/img/linux/linux_post_check_server_type.png',0,'alvin',curdate());
insert into Content values(1199,12,'p',72,'{}',' BOLD[  第4步： ]BOLD 填写电子邮件账户信息，在下图所示的页面中，“您的姓名”文本框中可以为自定义的任意名字，“电子邮件地址”文本框中则需要输入服务器系统内的账户名外加发件域，“密码”文本框中要输入该账户在服务器内的登录密码。在填写完毕之后，单击“下一步”按钮。',' BOLD[  第4步： ]BOLD 填写电子邮件账户信息，在下图所示的页面中，“您的姓名”文本框中可以为自定义的任意名字，“电子邮件地址”文本框中则需要输入服务器系统内的账户名外加发件域，“密码”文本框中要输入该账户在服务器内的登录密码。在填写完毕之后，单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(1200,12,'image',73,'{"alt": "write_account_info", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_write_account_info.jpg", "width": "676"}','/static/img/linux/linux_post_write_account_info.jpg','/static/img/linux/linux_post_write_account_info.jpg',0,'alvin',curdate());
insert into Content values(1201,12,'p',74,'{}',' BOLD[  第5步： ]BOLD 进行电子邮件服务登录验证。由于当前没有可用的SSL加密服务，因此在Dovecot服务程序的主配置文件中写入了一条参数，让客户可以使用明文登录到电子邮件服务。Outlook软件默认会通过SSL加密协议尝试登录电子邮件服务，所以在进行下图1所示的“搜索boss@linuxprobe.com服务器设置”大约30～60秒后，系统会出现登录失败的报错信息。此时只需再次单击“下一步”按钮，即可让Outlook软件通过非加密的方式验证登录，如下图2所示。',' BOLD[  第5步： ]BOLD 进行电子邮件服务登录验证。由于当前没有可用的SSL加密服务，因此在Dovecot服务程序的主配置文件中写入了一条参数，让客户可以使用明文登录到电子邮件服务。Outlook软件默认会通过SSL加密协议尝试登录电子邮件服务，所以在进行下图1所示的“搜索boss@linuxprobe.com服务器设置”大约30～60秒后，系统会出现登录失败的报错信息。此时只需再次单击“下一步”按钮，即可让Outlook软件通过非加密的方式验证登录，如下图2所示。',0,'alvin',curdate());
insert into Content values(1202,12,'image',75,'{"alt": "valid_ssl", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_valid_ssl.jpg", "width": "676"}','/static/img/linux/linux_post_valid_ssl.jpg','/static/img/linux/linux_post_valid_ssl.jpg',0,'alvin',curdate());
insert into Content values(1203,12,'image',76,'{"alt": "check_unauth_type", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_check_unauth_type.jpg", "width": "676"}','/static/img/linux/linux_post_check_unauth_type.jpg','/static/img/linux/linux_post_check_unauth_type.jpg',0,'alvin',curdate());
insert into Content values(1204,12,'p',77,'{}',' BOLD[  第6步： ]BOLD 向其他信箱发送邮件。在成功登录Outlook软件后即可尝试编写并发送新邮件了。只需在软件界面的空白处单击鼠标右键，在弹出的菜单中选择“新邮件”命令（见下图1），然后在邮件界面中填写收件人的信箱地址以及完整的邮件内容后单击“发送”按钮，如图下图2所示。',' BOLD[  第6步： ]BOLD 向其他信箱发送邮件。在成功登录Outlook软件后即可尝试编写并发送新邮件了。只需在软件界面的空白处单击鼠标右键，在弹出的菜单中选择“新邮件”命令（见下图1），然后在邮件界面中填写收件人的信箱地址以及完整的邮件内容后单击“发送”按钮，如图下图2所示。',0,'alvin',curdate());
insert into Content values(1205,12,'image',78,'{"alt": "create_new_mail", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_create_new_mail.png", "width": "676"}','/static/img/linux/linux_post_create_new_mail.png','/static/img/linux/linux_post_create_new_mail.png',0,'alvin',curdate());
insert into Content values(1206,12,'image',79,'{"alt": "write_mail_content", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_post_write_mail_content.png", "width": "676"}','/static/img/linux/linux_post_write_mail_content.png','/static/img/linux/linux_post_write_mail_content.png',0,'alvin',curdate());
insert into Content values(1207,12,'p',80,'{}','        当使用Outlook软件成功发送邮件后，便可以在电子邮件服务器上使用mail命令查看到新邮件提醒了。如果想查看邮件的完整内容，只需输入收件人姓名前面的编号即可。','        当使用Outlook软件成功发送邮件后，便可以在电子邮件服务器上使用mail命令查看到新邮件提醒了。如果想查看邮件的完整内容，只需输入收件人姓名前面的编号即可。',0,'alvin',curdate());
insert into Content values(1208,12,'pre',81,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mail
Heirloom Mail version 12.5 7/5/10.Type ? for help.
"/var/mail/root": 3 messages 3 unread >
U 1 user@localhost.com Fri Jul 10 09:58 1631/123113 "[abrt] full crash r" 
U 2 Anacron Sat Aug 15 13:33 18/624 "Anacron job \'cron.dai" 
U 3 boss Sat Aug 15 19:02 118/3604 "Hello~" 
&> 3
Message 3:
From boss@linuxprobe.com Sat Aug 15 19:02:06 2017 
Return-Path: 
X-Original-To: root@linuxprobe.com 
Delivered-To: root@linuxprobe.com 
From: "boss" 
To: 
Subject: Hello~
Date: Sat, 15 Aug 2017 19:02:06 +0800
Content-Type: text/plain; charset="gb2312" 
………………省略部分输出信息………………
当您收到这封邮件时，证明我的邮局系统实验已经成功！
> quit 
Held 3 messages in /var/mail/root
','[root@linuxprobe ~]# mail
Heirloom Mail version 12.5 7/5/10.Type ? for help.
"/var/mail/root": 3 messages 3 unread >
U 1 user@localhost.com Fri Jul 10 09:58 1631/123113 "[abrt] full crash r" 
U 2 Anacron Sat Aug 15 13:33 18/624 "Anacron job \'cron.dai" 
U 3 boss Sat Aug 15 19:02 118/3604 "Hello~" 
&> 3
Message 3:
From boss@linuxprobe.com Sat Aug 15 19:02:06 2017 
Return-Path: 
X-Original-To: root@linuxprobe.com 
Delivered-To: root@linuxprobe.com 
From: "boss" 
To: 
Subject: Hello~
Date: Sat, 15 Aug 2017 19:02:06 +0800
Content-Type: text/plain; charset="gb2312" 
………………省略部分输出信息………………
当您收到这封邮件时，证明我的邮局系统实验已经成功！
> quit 
Held 3 messages in /var/mail/root
',0,'alvin',curdate());
insert into Content values(1209,12,'h2',82,'{}','设置用户别名邮箱','设置用户别名邮箱',0,'alvin',curdate());
insert into Content values(1210,12,'p',83,'{}','        用户别名功能是一项简单实用的邮件账户伪装技术，可以用来设置多个虚拟信箱的账户以接受发送的邮件，从而保证自身的邮件地址不被泄露，还可以用来接收自己的多个信箱中的邮件。刚才我们已经顺利地向root账户送了邮件，下面再向bin账户发送一封邮件，如下图所示。','        用户别名功能是一项简单实用的邮件账户伪装技术，可以用来设置多个虚拟信箱的账户以接受发送的邮件，从而保证自身的邮件地址不被泄露，还可以用来接收自己的多个信箱中的邮件。刚才我们已经顺利地向root账户送了邮件，下面再向bin账户发送一封邮件，如下图所示。',0,'alvin',curdate());
insert into Content values(1211,12,'image',84,'{"alt": "sent_to_mailserver", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_post_sent_to_mailserver.png", "width": "676"}','/static/img/linux/linux_post_sent_to_mailserver.png','/static/img/linux/linux_post_sent_to_mailserver.png',0,'alvin',curdate());
insert into Content values(1212,12,'p',85,'{}','        在邮件发送后登录到服务器，然后尝试以bin账户的身份登录。由于bin账户在Linux系统中是系统账户，默认的Shell终端是/sbin/nologin，因此在以bin账户登录时，系统会提示当前账户不可用。但是，在电子邮件服务器上使用mail命令后，却看到这封原本要发送给bin账户的邮件已经被存放到了root账户的信箱中。','        在邮件发送后登录到服务器，然后尝试以bin账户的身份登录。由于bin账户在Linux系统中是系统账户，默认的Shell终端是/sbin/nologin，因此在以bin账户登录时，系统会提示当前账户不可用。但是，在电子邮件服务器上使用mail命令后，却看到这封原本要发送给bin账户的邮件已经被存放到了root账户的信箱中。',0,'alvin',curdate());
insert into Content values(1213,12,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# su - bin 
This account is currently not available. 
[root@linuxprobe ~]# mail
Heirloom Mail version 12.5 7/5/10. 
Type ? for help. 
"/var/mail/root": 4 messages 4 new > 
U 1 user@localhost.com Fri Jul 10 09:58 1630/123103 "[abrt] full crash r" 
U 2 Anacron Wed Aug 19 17:47 17/619 "Anacron job \'cron.dai" 
U 3 boss Sat Aug 15 19:02 118/3604 "Hello~" U 
4 boss Wed Aug 19 18:49 116/3231 "你好，用户Bin。" 
&> 4 
Message 4: 
From boss@linuxprobe.com Wed Aug 19 18:49:05 2017 
Return-Path: <boss@linuxprobe.com> 
X-Original-To: bin@linuxprobe.com 
Delivered-To: bin@linuxprobe.com 
From: "boss" <boss@linuxprobe.com> 
To: <bin@linuxprobe.com>
Subject: 你好，用户Bin。 
Date: Wed, 19 Aug 2017 18:49:05 +0800 
Content-Type: multipart/alternative; boundary="----=_NextPart_000_0006_01D0DAAF.
B9104E90" 
X-Mailer: Microsoft Office Outlook 12.0 Thread-Index: AdDabKrQzUHVBTgRQMaCtUs
VtqfL1Q== Content-Language: zh-cn Status: R Content-Type: text/plain; charset="gb2312"
………………省略部分输出信息………………
这是一封发给用户Bin的文件。
&> quit
Held 4 messages in /var/mail/root
','[root@linuxprobe ~]# su - bin 
This account is currently not available. 
[root@linuxprobe ~]# mail
Heirloom Mail version 12.5 7/5/10. 
Type ? for help. 
"/var/mail/root": 4 messages 4 new > 
U 1 user@localhost.com Fri Jul 10 09:58 1630/123103 "[abrt] full crash r" 
U 2 Anacron Wed Aug 19 17:47 17/619 "Anacron job \'cron.dai" 
U 3 boss Sat Aug 15 19:02 118/3604 "Hello~" U 
4 boss Wed Aug 19 18:49 116/3231 "你好，用户Bin。" 
&> 4 
Message 4: 
From boss@linuxprobe.com Wed Aug 19 18:49:05 2017 
Return-Path: <boss@linuxprobe.com> 
X-Original-To: bin@linuxprobe.com 
Delivered-To: bin@linuxprobe.com 
From: "boss" <boss@linuxprobe.com> 
To: <bin@linuxprobe.com>
Subject: 你好，用户Bin。 
Date: Wed, 19 Aug 2017 18:49:05 +0800 
Content-Type: multipart/alternative; boundary="----=_NextPart_000_0006_01D0DAAF.
B9104E90" 
X-Mailer: Microsoft Office Outlook 12.0 Thread-Index: AdDabKrQzUHVBTgRQMaCtUs
VtqfL1Q== Content-Language: zh-cn Status: R Content-Type: text/plain; charset="gb2312"
………………省略部分输出信息………………
这是一封发给用户Bin的文件。
&> quit
Held 4 messages in /var/mail/root
',0,'alvin',curdate());
insert into Content values(1214,12,'p',87,'{}','        太奇怪了！明明发送给bin账户的邮件怎么会被root账户收到了呢？其实，这就是使用用户别名技术来实现的。在aliases邮件别名服务的配置文件中可以看到，里面定义了大量的用户别名，这些用户别名大多数是Linux系统本地的系统账户，而在冒号（:）间隔符后面的root账户则是用来接收这些账户邮件的人。用户别名可以是Linux系统内的本地用户，也可以是完全虚构的用户名字。','        太奇怪了！明明发送给bin账户的邮件怎么会被root账户收到了呢？其实，这就是使用用户别名技术来实现的。在aliases邮件别名服务的配置文件中可以看到，里面定义了大量的用户别名，这些用户别名大多数是Linux系统本地的系统账户，而在冒号（:）间隔符后面的root账户则是用来接收这些账户邮件的人。用户别名可以是Linux系统内的本地用户，也可以是完全虚构的用户名字。',0,'alvin',curdate());
insert into Content values(1215,12,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/aliases
#
# Aliases in this file will NOT be expanded in the header from
# Mail, but WILL be visible over networks or from /bin/mail.
#
# >>>>>>>>>> The program "newaliases" must be run after
# >> NOTE >> this file is updated for any changes to
# >>>>>>>>>> show through to sendmail.
#
# Basic system aliases -- these MUST be present.
mailer-daemon: postmaster
postmaster: root
# General redirections for pseudo accounts.
bin: root
daemon: root
adm: root
lp: root
sync: root
shutdown: root
halt: root
mail: root
news: root
uucp: root
operator: root
games: root
gopher: root
ftp: root
nobody: root
radiusd: root
nut: root
dbus: root
vcsa: root
canna: root
wnn: root
rpm: root
nscd: root
pcap: root
apache: root
webalizer: root
dovecot: root
fax: root
quagga: root
radvd: root
pvm: root
amandabackup: root
privoxy: root
ident: root
named: root
xfs: root
gdm: root
mailnull: root
postgres: root
sshd: root
smmsp: root
postfix: root
netdump: root
ldap: root
squid: root
ntp: root
mysql: root
desktop: root
rpcuser: root
rpc: root
nfsnobody: root
ingres: root
system: root
toor: root
manager: root
dumper: root
abuse: root
newsadm: news
newsadmin: news
usenet: news
ftpadm: ftp
ftpadmin: ftp
ftp-adm: ftp
ftp-admin: ftp
www: webmaster
webmaster: root
noc: root
security: root
hostmaster: root
info: postmaster
marketing: postmaster
sales: postmaster
support: postmaster
# trap decode to catch security attacks
decode: root
# Person who should get root\'s mail
#root: marc
','[root@linuxprobe ~]# cat /etc/aliases
#
# Aliases in this file will NOT be expanded in the header from
# Mail, but WILL be visible over networks or from /bin/mail.
#
# >>>>>>>>>> The program "newaliases" must be run after
# >> NOTE >> this file is updated for any changes to
# >>>>>>>>>> show through to sendmail.
#
# Basic system aliases -- these MUST be present.
mailer-daemon: postmaster
postmaster: root
# General redirections for pseudo accounts.
bin: root
daemon: root
adm: root
lp: root
sync: root
shutdown: root
halt: root
mail: root
news: root
uucp: root
operator: root
games: root
gopher: root
ftp: root
nobody: root
radiusd: root
nut: root
dbus: root
vcsa: root
canna: root
wnn: root
rpm: root
nscd: root
pcap: root
apache: root
webalizer: root
dovecot: root
fax: root
quagga: root
radvd: root
pvm: root
amandabackup: root
privoxy: root
ident: root
named: root
xfs: root
gdm: root
mailnull: root
postgres: root
sshd: root
smmsp: root
postfix: root
netdump: root
ldap: root
squid: root
ntp: root
mysql: root
desktop: root
rpcuser: root
rpc: root
nfsnobody: root
ingres: root
system: root
toor: root
manager: root
dumper: root
abuse: root
newsadm: news
newsadmin: news
usenet: news
ftpadm: ftp
ftpadmin: ftp
ftp-adm: ftp
ftp-admin: ftp
www: webmaster
webmaster: root
noc: root
security: root
hostmaster: root
info: postmaster
marketing: postmaster
sales: postmaster
support: postmaster
# trap decode to catch security attacks
decode: root
# Person who should get root\'s mail
#root: marc
',0,'alvin',curdate());
insert into Content values(1216,12,'p',89,'{}','        现在大家能猜出是怎么一回事了吧。原来aliases邮件别名服务的配置文件是专门用来定义用户别名与邮件接收人的映射。除了使用本地系统中系统账户的名称外，我们还可以自行定义一些别名来接收邮件。例如，创建一个名为xxoo的账户，而真正接收该账户邮件的应该是root账户。','        现在大家能猜出是怎么一回事了吧。原来aliases邮件别名服务的配置文件是专门用来定义用户别名与邮件接收人的映射。除了使用本地系统中系统账户的名称外，我们还可以自行定义一些别名来接收邮件。例如，创建一个名为xxoo的账户，而真正接收该账户邮件的应该是root账户。',0,'alvin',curdate());
insert into Content values(1217,12,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cat /etc/aliases
#
# Aliases in this file will NOT be expanded in the header from
# Mail, but WILL be visible over networks or from /bin/mail.
#
# >>>>>>>>>> The program "newaliases" must be run after
# >> NOTE >> this file is updated for any changes to
# >>>>>>>>>> show through to sendmail.
#
# Basic system aliases -- these MUST be present.
mailer-daemon: postmaster
postmaster: root
# General redirections for pseudo accounts.
xxoo: root
bin: root
daemon: root
adm: root
lp: root
………………省略部分输出信息………………
','[root@linuxprobe ~]# cat /etc/aliases
#
# Aliases in this file will NOT be expanded in the header from
# Mail, but WILL be visible over networks or from /bin/mail.
#
# >>>>>>>>>> The program "newaliases" must be run after
# >> NOTE >> this file is updated for any changes to
# >>>>>>>>>> show through to sendmail.
#
# Basic system aliases -- these MUST be present.
mailer-daemon: postmaster
postmaster: root
# General redirections for pseudo accounts.
xxoo: root
bin: root
daemon: root
adm: root
lp: root
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1218,12,'p',91,'{}','        保存并退出aliases邮件别名服务的配置文件后，需要再执行一下newaliases命令，其目的是让新的用户别名配置文件立即生效。然后再次尝试发送邮件，如下图所示：','        保存并退出aliases邮件别名服务的配置文件后，需要再执行一下newaliases命令，其目的是让新的用户别名配置文件立即生效。然后再次尝试发送邮件，如下图所示：',0,'alvin',curdate());
insert into Content values(1219,12,'image',92,'{"alt": "sent_test_mail", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_post_sent_test_mail.png", "width": "676"}','/static/img/linux/linux_post_sent_test_mail.png','/static/img/linux/linux_post_sent_test_mail.png',0,'alvin',curdate());
insert into Content values(1220,12,'p',93,'{}','        这时，使用root账户在服务器上执行mail命令后，就能看到这封原本要发送给xxoo账户的邮件了。最后，老师再啰嗦一句，用户别名技术不仅应用广泛，而且配置也很简单。所以更要提醒大家的是，今后千万不要看到有些网站上提供了很多客服信箱就轻易相信别人，没准发往这些客服信箱的邮件会被同一个人收到。','        这时，使用root账户在服务器上执行mail命令后，就能看到这封原本要发送给xxoo账户的邮件了。最后，老师再啰嗦一句，用户别名技术不仅应用广泛，而且配置也很简单。所以更要提醒大家的是，今后千万不要看到有些网站上提供了很多客服信箱就轻易相信别人，没准发往这些客服信箱的邮件会被同一个人收到。',0,'alvin',curdate());
insert into Content values(1221,12,'pre',94,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mail
Heirloom Mail version 12.5 7/5/10. Type ? for help.
"/var/mail/root": 5 messages 1 new 4 unread
U 1 user@localhost.com Fri Jul 10 09:58 1631/123113 "[abrt] full crash report"
U 2 Anacron Wed Aug 19 17:47 18/629 "Anacron job \'cron.daily\' on mail.linuxprobe.com"
U 3 boss Wed Aug 19 18:44 114/2975 "hello"
4 boss Wed Aug 19 18:49 117/3242 "你好，用户Bin。"
>N 5 boss Wed Aug 19 19:18 115/3254 "这是一封发送给xxoo用户的邮件。"
','[root@linuxprobe ~]# mail
Heirloom Mail version 12.5 7/5/10. Type ? for help.
"/var/mail/root": 5 messages 1 new 4 unread
U 1 user@localhost.com Fri Jul 10 09:58 1631/123113 "[abrt] full crash report"
U 2 Anacron Wed Aug 19 17:47 18/629 "Anacron job \'cron.daily\' on mail.linuxprobe.com"
U 3 boss Wed Aug 19 18:44 114/2975 "hello"
4 boss Wed Aug 19 18:49 117/3242 "你好，用户Bin。"
>N 5 boss Wed Aug 19 19:18 115/3254 "这是一封发送给xxoo用户的邮件。"
',0,'alvin',curdate());
insert into Content values(1222,13,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用Squid部署代理缓存服务',' <span class="color_h1">  Linux </span> 使用Squid部署代理缓存服务',0,'alvin',curdate());
insert into Content values(1223,13,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1224,13,'p',3,'{}','        本章首先介绍代理服务的原理以及作用，然后介绍Squid服务程序正向解析和反向解析的理论以及配置方法。其中，正向代理模式不仅可以让用户使用Squid代理服务器上网，还可以基于指定的IP地址、域名关键词、网站地址或下载文件后缀等信息，实现类似于访问控制列表的功能。反向代理模式可以大幅提升网站的访问速度，还可以帮助网站服务器减轻负载压力。','        本章首先介绍代理服务的原理以及作用，然后介绍Squid服务程序正向解析和反向解析的理论以及配置方法。其中，正向代理模式不仅可以让用户使用Squid代理服务器上网，还可以基于指定的IP地址、域名关键词、网站地址或下载文件后缀等信息，实现类似于访问控制列表的功能。反向代理模式可以大幅提升网站的访问速度，还可以帮助网站服务器减轻负载压力。',0,'alvin',curdate());
insert into Content values(1225,13,'p',4,'{}','        在掌握了Squid服务程序的标准正向代理模式、透明正向代理模式、访问控制列表功能以及反向代理等实用功能之后，读者不但可以进一步理解代理服务，提升服务控制能力，而且在步入运维岗位后能够游刃有余地处理相关问题。','        在掌握了Squid服务程序的标准正向代理模式、透明正向代理模式、访问控制列表功能以及反向代理等实用功能之后，读者不但可以进一步理解代理服务，提升服务控制能力，而且在步入运维岗位后能够游刃有余地处理相关问题。',0,'alvin',curdate());
insert into Content values(1226,13,'h2',5,'{}','代理缓存服务','代理缓存服务',0,'alvin',curdate());
insert into Content values(1227,13,'p',6,'{}','        Squid是Linux系统中最为流行的一款高性能代理服务软件，通常用作Web网站的前置缓存服务，能够代替用户向网站服务器请求页面数据并进行缓存。简单来说，Squid服务程序会按照收到的用户请求向网站源服务器请求页面、图片等所需的数据，并将服务器返回的数据存储在运行Squid服务程序的服务器上。当有用户再请求相同的数据时，则可以直接将存储服务器本地的数据交付给用户，这样不仅减少了用户的等待时间，还缓解了网站服务器的负载压力。','        Squid是Linux系统中最为流行的一款高性能代理服务软件，通常用作Web网站的前置缓存服务，能够代替用户向网站服务器请求页面数据并进行缓存。简单来说，Squid服务程序会按照收到的用户请求向网站源服务器请求页面、图片等所需的数据，并将服务器返回的数据存储在运行Squid服务程序的服务器上。当有用户再请求相同的数据时，则可以直接将存储服务器本地的数据交付给用户，这样不仅减少了用户的等待时间，还缓解了网站服务器的负载压力。',0,'alvin',curdate());
insert into Content values(1228,13,'p',7,'{}','        Squid服务程序具有配置简单、效率高、功能丰富等特点，它能支持HTTP、FTP、SSL等多种协议的数据缓存，可以基于访问控制列表（ACL）和访问权限列表（ARL）执行内容过滤与权限管理功能，还可以基于多种条件禁止用户访问存在威胁或不适宜的网站资源，因此可以保护企业内网的安全，提升用户的网络体验，帮助节省网络带宽。','        Squid服务程序具有配置简单、效率高、功能丰富等特点，它能支持HTTP、FTP、SSL等多种协议的数据缓存，可以基于访问控制列表（ACL）和访问权限列表（ARL）执行内容过滤与权限管理功能，还可以基于多种条件禁止用户访问存在威胁或不适宜的网站资源，因此可以保护企业内网的安全，提升用户的网络体验，帮助节省网络带宽。',0,'alvin',curdate());
insert into Content values(1229,13,'p',8,'{}','        由于缓存代理服务不但会消耗服务器较多的CPU计算性能、内存以及硬盘等硬件资源，同时还需要较大的网络带宽来保障数据的传输效率，由此会造成较大的网络带宽开销。因此国内很多IDC或CDN服务提供商会将缓存代理节点服务器放置在二三线城市以降低运营成本。','        由于缓存代理服务不但会消耗服务器较多的CPU计算性能、内存以及硬盘等硬件资源，同时还需要较大的网络带宽来保障数据的传输效率，由此会造成较大的网络带宽开销。因此国内很多IDC或CDN服务提供商会将缓存代理节点服务器放置在二三线城市以降低运营成本。',0,'alvin',curdate());
insert into Content values(1230,13,'p',9,'{}','        在使用Squid服务程序为用户提供缓存代理服务时，具有正向代理模式和反向代理模式之分。','        在使用Squid服务程序为用户提供缓存代理服务时，具有正向代理模式和反向代理模式之分。',0,'alvin',curdate());
insert into Content values(1231,13,'p',10,'{}','        所谓正向代理模式，是指让用户通过Squid服务程序获取网站页面等资源，以及基于访问控制列表（ACL）功能对用户访问网站行为进行限制，在具体的服务方式上又分为标准代理模式与透明代理模式。标准正向代理模式是把网站数据缓存到服务器本地，提高数据资源被再次访问时的效率，但是用户在上网时必须在浏览器等软件中填写代理服务器的IP地址与端口号信息，否则默认不使用代理服务。而透明正向代理模式的作用与标准正向代理模式基本相同，区别是用户不需要手动指定代理服务器的IP地址与端口号，所以这种代理服务对于用户来讲是相对透明的。','        所谓正向代理模式，是指让用户通过Squid服务程序获取网站页面等资源，以及基于访问控制列表（ACL）功能对用户访问网站行为进行限制，在具体的服务方式上又分为标准代理模式与透明代理模式。标准正向代理模式是把网站数据缓存到服务器本地，提高数据资源被再次访问时的效率，但是用户在上网时必须在浏览器等软件中填写代理服务器的IP地址与端口号信息，否则默认不使用代理服务。而透明正向代理模式的作用与标准正向代理模式基本相同，区别是用户不需要手动指定代理服务器的IP地址与端口号，所以这种代理服务对于用户来讲是相对透明的。',0,'alvin',curdate());
insert into Content values(1232,13,'p',11,'{}','        使用Squid服务程序提供正向代理服务的拓扑如下图所示。局域网内的主机如果想要访问外网，则必须要通过Squid服务器提供的代理才行，这样当Squid服务器接收到用户的指令后会向外部发出请求，然后将接收到的数据交还给发出指令的那个用户，从而实现了用户的代理上网需求。另外，从拓扑图中也不难看出，企业中的主机要想上网，就必须要经过公司的网关服务器，既然这是一条流量的必经之路，因此企业一般还会把Squid服务程序部署到公司服务器位置，并通过稍后讲到的ACL（访问控制列表）功能对企业内员工进行上网审计及限制。','        使用Squid服务程序提供正向代理服务的拓扑如下图所示。局域网内的主机如果想要访问外网，则必须要通过Squid服务器提供的代理才行，这样当Squid服务器接收到用户的指令后会向外部发出请求，然后将接收到的数据交还给发出指令的那个用户，从而实现了用户的代理上网需求。另外，从拓扑图中也不难看出，企业中的主机要想上网，就必须要经过公司的网关服务器，既然这是一条流量的必经之路，因此企业一般还会把Squid服务程序部署到公司服务器位置，并通过稍后讲到的ACL（访问控制列表）功能对企业内员工进行上网审计及限制。',0,'alvin',curdate());
insert into Content values(1233,13,'image',12,'{"alt": "squid_tubo", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_squid_tubo.png", "width": "776"}','/static/img/linux/linux_squid_tubo.png','/static/img/linux/linux_squid_tubo.png',0,'alvin',curdate());
insert into Content values(1234,13,'p',13,'{}','        反向代理模式是指让多台节点主机反向缓存网站数据，从而加快用户访问速度。因为一般来讲，网站中会普遍加载大量的文字、图片等静态资源，而且它们相对来说都是比较稳定的数据信息，当用户发起网站页面中这些静态资源的访问请求时，我们可以使用Squid服务程序提供的反向代理模式来进行响应。而且，如果反向代理服务器中恰巧已经有了用户要访问的静态资源，则直接将缓存的这些静态资源发送给用户，这不仅可以加快用户的网站访问速度，还在一定程度上降低了网站服务器的负载压力。','        反向代理模式是指让多台节点主机反向缓存网站数据，从而加快用户访问速度。因为一般来讲，网站中会普遍加载大量的文字、图片等静态资源，而且它们相对来说都是比较稳定的数据信息，当用户发起网站页面中这些静态资源的访问请求时，我们可以使用Squid服务程序提供的反向代理模式来进行响应。而且，如果反向代理服务器中恰巧已经有了用户要访问的静态资源，则直接将缓存的这些静态资源发送给用户，这不仅可以加快用户的网站访问速度，还在一定程度上降低了网站服务器的负载压力。',0,'alvin',curdate());
insert into Content values(1235,13,'p',14,'{}','        使用Squid服务程序提供反向代理服务的拓扑如下图所示。当外网用户尝试访问某个网站时，实际请求是被Squid服务器所处理的。反向代理服务器会将缓存好的静态资源更快地交付给外网用户，从而加快了网站页面被用户访问的速度。并且由于网站页面数据中的静态资源请求已被Squid服务器处理，因此网站服务器负责动态数据查询就可以了，也进而降低了服务器机房中网站服务器的负载压力。','        使用Squid服务程序提供反向代理服务的拓扑如下图所示。当外网用户尝试访问某个网站时，实际请求是被Squid服务器所处理的。反向代理服务器会将缓存好的静态资源更快地交付给外网用户，从而加快了网站页面被用户访问的速度。并且由于网站页面数据中的静态资源请求已被Squid服务器处理，因此网站服务器负责动态数据查询就可以了，也进而降低了服务器机房中网站服务器的负载压力。',0,'alvin',curdate());
insert into Content values(1236,13,'image',15,'{"alt": "back_setting", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_squid_back_setting.png", "width": "776"}','/static/img/linux/linux_squid_back_setting.png','/static/img/linux/linux_squid_back_setting.png',0,'alvin',curdate());
insert into Content values(1237,13,'p',16,'{}','        总结来说，正向代理模式一般用于企业局域网之中，让企业用户统一地通过Squid服务访问互联网资源，这样不仅可以在一定程度上减少公网带宽的开销，而且还能对用户访问的网站内容进行监管限制，一旦内网用户访问的网站内容与禁止规则相匹配，就会自动屏蔽网站。反向代理模式一般是为大中型网站提供缓存服务的，它把网站中的静态资源保存在国内多个节点机房中，当有用户发起静态资源的访问请求时，可以就近为用户分配节点并传输资源，因此在大中型网站中得到了普遍应用。','        总结来说，正向代理模式一般用于企业局域网之中，让企业用户统一地通过Squid服务访问互联网资源，这样不仅可以在一定程度上减少公网带宽的开销，而且还能对用户访问的网站内容进行监管限制，一旦内网用户访问的网站内容与禁止规则相匹配，就会自动屏蔽网站。反向代理模式一般是为大中型网站提供缓存服务的，它把网站中的静态资源保存在国内多个节点机房中，当有用户发起静态资源的访问请求时，可以就近为用户分配节点并传输资源，因此在大中型网站中得到了普遍应用。',0,'alvin',curdate());
insert into Content values(1238,13,'h2',17,'{}','配置Squid服务程序','配置Squid服务程序',0,'alvin',curdate());
insert into Content values(1239,13,'p',18,'{}','        Squid服务程序的配置步骤虽然十分简单，但依然需要为大家交代一下实验所需的设备以及相应的设置。首先需要准备两台虚拟机，一台用作Squid服务器，另外一台用作Squid客户端，后者无论是Windows系统还是Linux系统皆可（本实验中使用的是Windows 7操作系统）。为了能够相互通信，需要将这两台虚拟机都设置为仅主机模式（Hostonly），然后关闭其中一台虚拟机的电源，在添加一块新的网卡后开启电源，如下图所示。','        Squid服务程序的配置步骤虽然十分简单，但依然需要为大家交代一下实验所需的设备以及相应的设置。首先需要准备两台虚拟机，一台用作Squid服务器，另外一台用作Squid客户端，后者无论是Windows系统还是Linux系统皆可（本实验中使用的是Windows 7操作系统）。为了能够相互通信，需要将这两台虚拟机都设置为仅主机模式（Hostonly），然后关闭其中一台虚拟机的电源，在添加一块新的网卡后开启电源，如下图所示。',0,'alvin',curdate());
insert into Content values(1240,13,'image',19,'{"alt": "add_new_net", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_add_new_net.png", "width": "776"}','/static/img/linux/linux_squid_add_new_net.png','/static/img/linux/linux_squid_add_new_net.png',0,'alvin',curdate());
insert into Content values(1241,13,'p',20,'{}','        需要注意的是，这块新添加的网卡设备必须选择为桥接模式，否则这两台虚拟机都无法访问外网。按照下表配置这两台虚拟机的IP地址。','        需要注意的是，这块新添加的网卡设备必须选择为桥接模式，否则这两台虚拟机都无法访问外网。按照下表配置这两台虚拟机的IP地址。',0,'alvin',curdate());
insert into Content values(1242,13,'table',21,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
Squid服务器	RHEL 7	外网卡：桥接DHCP模式<ul>内网卡：192.168.10.10
Squid客户端	Windows 7	192.168.10.20','主机名称	操作系统	IP地址
Squid服务器	RHEL 7	外网卡：桥接DHCP模式<ul>内网卡：192.168.10.10
Squid客户端	Windows 7	192.168.10.20',0,'alvin',curdate());
insert into Content values(1243,13,'p',22,'{}','        这样一来，我们就有了一台既能访问内网，又能访问外网的虚拟机了。一会儿需要把Squid服务程序部署在这台虚拟机上，然后让另外一台原本只能访问内网的虚拟机（即Squid客户端）通过Squid服务器进行代理上网，从而使得Squid客户端也能访问外部   网站。','        这样一来，我们就有了一台既能访问内网，又能访问外网的虚拟机了。一会儿需要把Squid服务程序部署在这台虚拟机上，然后让另外一台原本只能访问内网的虚拟机（即Squid客户端）通过Squid服务器进行代理上网，从而使得Squid客户端也能访问外部   网站。',0,'alvin',curdate());
insert into Content values(1244,13,'p',23,'{}','        另外，我们还需要检查Squid服务器是否已经可以成功访问外部网络。可以ping一个外网域名进行测试（手动按下Ctrl+c键停止）。','        另外，我们还需要检查Squid服务器是否已经可以成功访问外部网络。可以ping一个外网域名进行测试（手动按下Ctrl+c键停止）。',0,'alvin',curdate());
insert into Content values(1245,13,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ping www.linuxprobe.com
PING www.linuxprobe.com (162.159.211.33) 56(84) bytes of data.
64 bytes from 162.159.211.33: icmp_seq=1 ttl=45 time=166 ms
64 bytes from 162.159.211.33: icmp_seq=2 ttl=45 time=168 ms
64 bytes from 162.159.211.33: icmp_seq=3 ttl=45 time=167 ms
64 bytes from 162.159.211.33: icmp_seq=4 ttl=45 time=166 ms
^C
--- www.linuxprobe.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3006ms
rtt min/avg/max/mdev = 166.361/167.039/168.109/0.836 ms
','[root@linuxprobe ~]# ping www.linuxprobe.com
PING www.linuxprobe.com (162.159.211.33) 56(84) bytes of data.
64 bytes from 162.159.211.33: icmp_seq=1 ttl=45 time=166 ms
64 bytes from 162.159.211.33: icmp_seq=2 ttl=45 time=168 ms
64 bytes from 162.159.211.33: icmp_seq=3 ttl=45 time=167 ms
64 bytes from 162.159.211.33: icmp_seq=4 ttl=45 time=166 ms
^C
--- www.linuxprobe.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3006ms
rtt min/avg/max/mdev = 166.361/167.039/168.109/0.836 ms
',0,'alvin',curdate());
insert into Content values(1246,13,'p',25,'{}','        当配置好Yum软件仓库并挂载好设备镜像后，就可以安装Squid服务程序了。考虑到本书中大部分服务程序都是通过Yum软件仓库安装的，读者应该对此十分熟悉，因此这里不再赘述。当然，大家也不必担心自己过于依赖Yum软件仓库来管理软件程序包，第20章会讲解如何通过源码包的方式来安装服务程序。','        当配置好Yum软件仓库并挂载好设备镜像后，就可以安装Squid服务程序了。考虑到本书中大部分服务程序都是通过Yum软件仓库安装的，读者应该对此十分熟悉，因此这里不再赘述。当然，大家也不必担心自己过于依赖Yum软件仓库来管理软件程序包，第20章会讲解如何通过源码包的方式来安装服务程序。',0,'alvin',curdate());
insert into Content values(1247,13,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install squid
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package squid.x86_64 7:3.3.8-11.el7 will be installed
--> Processing Dependency: perl(DBI) for package: 7:squid-3.3.8-11.el7.x86_64
--> Processing Dependency: perl(Data::Dumper) for package: 7:squid-3.3.8-11.el7.x86_64
--> Processing Dependency: perl(Digest::MD5) for package: 7:squid-3.3.8-11.el7.x86_64
--> Processing Dependency: libecap.so.2()(64bit) for package: 7:squid-3.3.8-11.el7.x86_64
--> Running transaction check
………………省略部分输出信息………………
Installed:
 squid.x86_64 7:3.3.8-11.el7 
Dependency Installed:
 libecap.x86_64 0:0.2.0-8.el7 
 perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 
 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 
 perl-DBI.x86_64 0:1.627-4.el7 
 perl-Data-Dumper.x86_64 0:2.145-3.el7 
 perl-Digest.noarch 0:1.17-245.el7 
 perl-Digest-MD5.x86_64 0:2.52-3.el7 
 perl-IO-Compress.noarch 0:2.061-2.el7 
 perl-Net-Daemon.noarch 0:0.48-5.el7 
 perl-PlRPC.noarch 0:0.2020-14.el7 
Complete!
','[root@linuxprobe ~]# yum install squid
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package squid.x86_64 7:3.3.8-11.el7 will be installed
--> Processing Dependency: perl(DBI) for package: 7:squid-3.3.8-11.el7.x86_64
--> Processing Dependency: perl(Data::Dumper) for package: 7:squid-3.3.8-11.el7.x86_64
--> Processing Dependency: perl(Digest::MD5) for package: 7:squid-3.3.8-11.el7.x86_64
--> Processing Dependency: libecap.so.2()(64bit) for package: 7:squid-3.3.8-11.el7.x86_64
--> Running transaction check
………………省略部分输出信息………………
Installed:
 squid.x86_64 7:3.3.8-11.el7 
Dependency Installed:
 libecap.x86_64 0:0.2.0-8.el7 
 perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 
 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 
 perl-DBI.x86_64 0:1.627-4.el7 
 perl-Data-Dumper.x86_64 0:2.145-3.el7 
 perl-Digest.noarch 0:1.17-245.el7 
 perl-Digest-MD5.x86_64 0:2.52-3.el7 
 perl-IO-Compress.noarch 0:2.061-2.el7 
 perl-Net-Daemon.noarch 0:0.48-5.el7 
 perl-PlRPC.noarch 0:0.2020-14.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1248,13,'p',27,'{}','        与之前配置过的服务程序大致类似，Squid服务程序的配置文件也是存放在/etc目录下一个以服务名称命名的目录中。表16-2罗列了一些常用的Squid服务程序配置参数，大家可以预先浏览一下。','        与之前配置过的服务程序大致类似，Squid服务程序的配置文件也是存放在/etc目录下一个以服务名称命名的目录中。表16-2罗列了一些常用的Squid服务程序配置参数，大家可以预先浏览一下。',0,'alvin',curdate());
insert into Content values(1249,13,'table',28,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
http_port 3128	监听的端口号
cache_mem 64M	内存缓冲区的大小
cache_dir ufs /var/spool/squid 2000 16 256	硬盘缓冲区的大小
cache_effective_user squid	设置缓存的有效用户
cache_effective_group squid	设置缓存的有效用户组
dns_nameservers IP地址	一般不设置，而是用服务器默认的DNS地址
cache_access_log /var/log/squid/access.log	访问日志文件的保存路径
cache_log /var/log/squid/cache.log	缓存日志文件的保存路径
visible_hostname linuxprobe.com	设置Squid服务器的名称','参数	作用
http_port 3128	监听的端口号
cache_mem 64M	内存缓冲区的大小
cache_dir ufs /var/spool/squid 2000 16 256	硬盘缓冲区的大小
cache_effective_user squid	设置缓存的有效用户
cache_effective_group squid	设置缓存的有效用户组
dns_nameservers IP地址	一般不设置，而是用服务器默认的DNS地址
cache_access_log /var/log/squid/access.log	访问日志文件的保存路径
cache_log /var/log/squid/cache.log	缓存日志文件的保存路径
visible_hostname linuxprobe.com	设置Squid服务器的名称',0,'alvin',curdate());
insert into Content values(1250,13,'h2',29,'{}','正向代理','正向代理',0,'alvin',curdate());
insert into Content values(1251,13,'h3',30,'{}','标准正向代理','标准正向代理',0,'alvin',curdate());
insert into Content values(1252,13,'p',31,'{}','        Squid服务程序软件包在正确安装并启动后，默认就已经可以为用户提供标准正向代理模式服务了，而不再需要单独修改配置文件或者进行其他操作。接下来在运行Windows 7系统的客户端上面打开任意一款浏览器，然后单击“Internet选项”命令，如下图所示。','        Squid服务程序软件包在正确安装并启动后，默认就已经可以为用户提供标准正向代理模式服务了，而不再需要单独修改配置文件或者进行其他操作。接下来在运行Windows 7系统的客户端上面打开任意一款浏览器，然后单击“Internet选项”命令，如下图所示。',0,'alvin',curdate());
insert into Content values(1253,13,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart squid
[root@linuxprobe ~]# systemctl enable squid
ln -s \'/usr/lib/systemd/system/squid.service\' \'/etc/systemd/system/multi-user.target.wants/squid.service\'
','[root@linuxprobe ~]# systemctl restart squid
[root@linuxprobe ~]# systemctl enable squid
ln -s \'/usr/lib/systemd/system/squid.service\' \'/etc/systemd/system/multi-user.target.wants/squid.service\'
',0,'alvin',curdate());
insert into Content values(1254,13,'image',33,'{"alt": "explorer_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_explorer_setting.png", "width": "676"}','/static/img/linux/linux_squid_explorer_setting.png','/static/img/linux/linux_squid_explorer_setting.png',0,'alvin',curdate());
insert into Content values(1255,13,'p',34,'{}','        要想使用Squid服务程序提供的标准正向代理模式服务，就必须在浏览器中填写服务器的IP地址以及端口号信息。因此还需要在“连接”选项卡下单击“局域网设置”按钮（见下图1），并按照下图2所示填写代理服务器的信息，然后保存并退出配置向导。','        要想使用Squid服务程序提供的标准正向代理模式服务，就必须在浏览器中填写服务器的IP地址以及端口号信息。因此还需要在“连接”选项卡下单击“局域网设置”按钮（见下图1），并按照下图2所示填写代理服务器的信息，然后保存并退出配置向导。',0,'alvin',curdate());
insert into Content values(1256,13,'image',35,'{"alt": "net_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_net_setting.png", "width": "676"}','/static/img/linux/linux_squid_net_setting.png','/static/img/linux/linux_squid_net_setting.png',0,'alvin',curdate());
insert into Content values(1257,13,'image',36,'{"alt": "input_ip", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_input_ip.png", "width": "676"}','/static/img/linux/linux_squid_input_ip.png','/static/img/linux/linux_squid_input_ip.png',0,'alvin',curdate());
insert into Content values(1258,13,'p',37,'{}','        现在，用户可以使用Squid服务程序提供的代理服务了。托代理服务器转发的福，网卡被设置为仅主机模式（Hostonly）的虚拟机也能奇迹般地上网浏览了，如下图所示。','        现在，用户可以使用Squid服务程序提供的代理服务了。托代理服务器转发的福，网卡被设置为仅主机模式（Hostonly）的虚拟机也能奇迹般地上网浏览了，如下图所示。',0,'alvin',curdate());
insert into Content values(1259,13,'image',38,'{"alt": "can_connection", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_can_connection.png", "width": "676"}','/static/img/linux/linux_squid_can_connection.png','/static/img/linux/linux_squid_can_connection.png',0,'alvin',curdate());
insert into Content values(1260,13,'p',39,'{}','        如此公开而没有密码验证的代理服务终归让人觉得不放心，万一有人也来“蹭网”该怎么办呢？Squid服务程序默认使用3128、3401与4827等端口号，因此可以把默认使用的端口号修改为其他值，以便起到一定的保护作用。现在大家应该都知道，在Linux系统配置服务程序其实就是修改该服务的配置文件，因此直接在/etc目录下的Squid服务程序同名目录中找到配置文件，把http_port参数后面原有的3128修改为10000，即把Squid服务程序的代理服务端口修改成了新值。最后一定不要忘记重启服务程序。','        如此公开而没有密码验证的代理服务终归让人觉得不放心，万一有人也来“蹭网”该怎么办呢？Squid服务程序默认使用3128、3401与4827等端口号，因此可以把默认使用的端口号修改为其他值，以便起到一定的保护作用。现在大家应该都知道，在Linux系统配置服务程序其实就是修改该服务的配置文件，因此直接在/etc目录下的Squid服务程序同名目录中找到配置文件，把http_port参数后面原有的3128修改为10000，即把Squid服务程序的代理服务端口修改成了新值。最后一定不要忘记重启服务程序。',0,'alvin',curdate());
insert into Content values(1261,13,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
………………省略部分输出信息………………
45 #
46 # INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS
47 #
48 
49 # Example rule allowing access from your local networks.
50 # Adapt localnet in the ACL section to list your (internal) IP networks
51 # from where browsing should be allowed
52 http_access allow localnet
53 http_access allow localhost
54 
55 # And finally deny all other access to this proxy
56 http_access deny all
57 
58 # Squid normally listens to port 3128
59 http_port 10000
60 
http_port 10000
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart squid 
[root@linuxprobe ~]# systemctl enable squid 
 ln -s \'/usr/lib/systemd/system/squid.service\' \'/etc/systemd/system/multi-user.target.wants/squid.service\'
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
………………省略部分输出信息………………
45 #
46 # INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS
47 #
48 
49 # Example rule allowing access from your local networks.
50 # Adapt localnet in the ACL section to list your (internal) IP networks
51 # from where browsing should be allowed
52 http_access allow localnet
53 http_access allow localhost
54 
55 # And finally deny all other access to this proxy
56 http_access deny all
57 
58 # Squid normally listens to port 3128
59 http_port 10000
60 
http_port 10000
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart squid 
[root@linuxprobe ~]# systemctl enable squid 
 ln -s \'/usr/lib/systemd/system/squid.service\' \'/etc/systemd/system/multi-user.target.wants/squid.service\'
',0,'alvin',curdate());
insert into Content values(1262,13,'p',41,'{}','        有没有突然觉得这一幕似曾相识？在10.5.3节讲解基于端口号来部署httpd服务程序的虚拟主机功能时，我们在编辑完httpd服务程序的配置文件并重启服务程序后，被系统提示报错。尽管现在重启Squid服务程序后系统没有报错，但是用户还不能使用代理服务。SElinux安全子系统认为Squid服务程序使用3128端口号是理所当然的，因此在默认策略规则中也是允许的，但是现在Squid服务程序却尝试使用新的10000端口号，而该端口原本并不属于Squid服务程序应该使用的系统资源，因此还需要手动把新的端口号添加到Squid服务程序在SElinux域的允许列表中。','        有没有突然觉得这一幕似曾相识？在10.5.3节讲解基于端口号来部署httpd服务程序的虚拟主机功能时，我们在编辑完httpd服务程序的配置文件并重启服务程序后，被系统提示报错。尽管现在重启Squid服务程序后系统没有报错，但是用户还不能使用代理服务。SElinux安全子系统认为Squid服务程序使用3128端口号是理所当然的，因此在默认策略规则中也是允许的，但是现在Squid服务程序却尝试使用新的10000端口号，而该端口原本并不属于Squid服务程序应该使用的系统资源，因此还需要手动把新的端口号添加到Squid服务程序在SElinux域的允许列表中。',0,'alvin',curdate());
insert into Content values(1263,13,'pre',42,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# semanage port -l | grep squid_port_t
squid_port_t                   tcp      3128, 3401, 4827
squid_port_t                   udp      3401, 4827
[root@linuxprobe ~]# semanage port -a -t squid_port_t -p tcp 10000
[root@linuxprobe ~]# semanage port -l | grep squid_port_t
squid_port_t                   tcp      10000, 3128, 3401, 4827
squid_port_t                   udp      3401, 4827
','[root@linuxprobe ~]# semanage port -l | grep squid_port_t
squid_port_t                   tcp      3128, 3401, 4827
squid_port_t                   udp      3401, 4827
[root@linuxprobe ~]# semanage port -a -t squid_port_t -p tcp 10000
[root@linuxprobe ~]# semanage port -l | grep squid_port_t
squid_port_t                   tcp      10000, 3128, 3401, 4827
squid_port_t                   udp      3401, 4827
',0,'alvin',curdate());
insert into Content values(1264,13,'h3',43,'{}','ACL访问控制','ACL访问控制',0,'alvin',curdate());
insert into Content values(1265,13,'p',44,'{}','        在日常工作中，企业员工一般是通过公司内部的网关服务器来访问互联网，当将Squid服务程序部署为公司网络的网关服务器后，Squid服务程序的访问控制列表（ACL）功能将发挥它的用武之地。它可以根据指定的策略条件来缓存数据或限制用户的访问。比如很多公司会分时段地禁止员工逛淘宝、打网页游戏，这些禁止行为都可以通过Squid服务程序的ACL功能来实现。大家如果日后在人员流动较大的公司中从事运维工作，可以牢记本节内容，在公司网关服务器上部署的Squid服务程序中添加某些策略条件，禁止员工访问某些招聘网站或竞争对手的网站，没准还能有效降低员工的流失率。','        在日常工作中，企业员工一般是通过公司内部的网关服务器来访问互联网，当将Squid服务程序部署为公司网络的网关服务器后，Squid服务程序的访问控制列表（ACL）功能将发挥它的用武之地。它可以根据指定的策略条件来缓存数据或限制用户的访问。比如很多公司会分时段地禁止员工逛淘宝、打网页游戏，这些禁止行为都可以通过Squid服务程序的ACL功能来实现。大家如果日后在人员流动较大的公司中从事运维工作，可以牢记本节内容，在公司网关服务器上部署的Squid服务程序中添加某些策略条件，禁止员工访问某些招聘网站或竞争对手的网站，没准还能有效降低员工的流失率。',0,'alvin',curdate());
insert into Content values(1266,13,'p',45,'{}','        Squid服务程序的ACL是由多个策略规则组成的，它可以根据指定的策略规则来允许或限制访问请求，而且策略规则的匹配顺序与防火墙策略规则一样都是由上至下；在一旦形成匹配之后，则立即执行相应操作并结束匹配过程。为了避免ACL将所有流量全部禁止或全部放行，起不到预期的访问控制效果，运维人员通常会在ACL的最下面写上deny all或者allow all语句，以避免安全隐患。','        Squid服务程序的ACL是由多个策略规则组成的，它可以根据指定的策略规则来允许或限制访问请求，而且策略规则的匹配顺序与防火墙策略规则一样都是由上至下；在一旦形成匹配之后，则立即执行相应操作并结束匹配过程。为了避免ACL将所有流量全部禁止或全部放行，起不到预期的访问控制效果，运维人员通常会在ACL的最下面写上deny all或者allow all语句，以避免安全隐患。',0,'alvin',curdate());
insert into Content values(1267,13,'p',46,'{}','        老师将通过下面的4个实验向大家演示Squid服务程序的ACL功能有多么强大。','        老师将通过下面的4个实验向大家演示Squid服务程序的ACL功能有多么强大。',0,'alvin',curdate());
insert into Content values(1268,13,'p',47,'{}','实验1：只允许IP地址为192.168.10.20的客户端使用服务器上的Squid服务程序提供的代理服务，禁止其余所有的主机代理请求。','实验1：只允许IP地址为192.168.10.20的客户端使用服务器上的Squid服务程序提供的代理服务，禁止其余所有的主机代理请求。',0,'alvin',curdate());
insert into Content values(1269,13,'p',48,'{}','        下面的配置文件依然是Squid服务程序的配置文件，但是需要留心配置参数的填写位置。如果写的太靠前，则有些Squid服务程序自身的语句都没有加载完，也会导致策略无效。当然也不用太靠后，大约在26~32行的位置就可以，而且采用分行填写的方式也便于日后的修改。','        下面的配置文件依然是Squid服务程序的配置文件，但是需要留心配置参数的填写位置。如果写的太靠前，则有些Squid服务程序自身的语句都没有加载完，也会导致策略无效。当然也不用太靠后，大约在26~32行的位置就可以，而且采用分行填写的方式也便于日后的修改。',0,'alvin',curdate());
insert into Content values(1270,13,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 1 #
 2 # Recommended minimum configuration:
 3 #
 4 
 5 # Example rule allowing access from your local networks.
 6 # Adapt to list your (internal) IP networks from where browsing
 7 # should be allowed
 8 acl localnet src 10.0.0.0/8 # RFC1918 possible internal network
 9 acl localnet src 172.16.0.0/12 # RFC1918 possible internal network
 10 acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
 11 acl localnet src fc00::/7 # RFC 4193 local private network range
 12 acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) mac hines
 13 
 14 acl SSL_ports port 443
 15 acl Safe_ports port 80 # http
 16 acl Safe_ports port 21 # ftp
 17 acl Safe_ports port 443 # https
 18 acl Safe_ports port 70 # gopher
 19 acl Safe_ports port 210 # wais
 20 acl Safe_ports port 1025-65535 # unregistered ports
 21 acl Safe_ports port 280 # http-mgmt
 22 acl Safe_ports port 488 # gss-http
 23 acl Safe_ports port 591 # filemaker
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl client src 192.168.10.20
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access allow client
 32 http_access deny all
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 1 #
 2 # Recommended minimum configuration:
 3 #
 4 
 5 # Example rule allowing access from your local networks.
 6 # Adapt to list your (internal) IP networks from where browsing
 7 # should be allowed
 8 acl localnet src 10.0.0.0/8 # RFC1918 possible internal network
 9 acl localnet src 172.16.0.0/12 # RFC1918 possible internal network
 10 acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
 11 acl localnet src fc00::/7 # RFC 4193 local private network range
 12 acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) mac hines
 13 
 14 acl SSL_ports port 443
 15 acl Safe_ports port 80 # http
 16 acl Safe_ports port 21 # ftp
 17 acl Safe_ports port 443 # https
 18 acl Safe_ports port 70 # gopher
 19 acl Safe_ports port 210 # wais
 20 acl Safe_ports port 1025-65535 # unregistered ports
 21 acl Safe_ports port 280 # http-mgmt
 22 acl Safe_ports port 488 # gss-http
 23 acl Safe_ports port 591 # filemaker
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl client src 192.168.10.20
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access allow client
 32 http_access deny all
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
',0,'alvin',curdate());
insert into Content values(1271,13,'p',50,'{}','        上面的配置参数其实很容易理解。首先定义了一个名为client的别名。这其实类似于13.6节讲解的DNS分离解析技术，当时我们分别定义了两个名为china与american的别名变量，这样当再遇到这个别名时也就意味着与之定义的IP地址了。保存配置文件后重启Squid服务程序，这时由于客户端主机的IP地址不符合我们的允许策略而被禁止使用代理服务，如下图所示。','        上面的配置参数其实很容易理解。首先定义了一个名为client的别名。这其实类似于13.6节讲解的DNS分离解析技术，当时我们分别定义了两个名为china与american的别名变量，这样当再遇到这个别名时也就意味着与之定义的IP地址了。保存配置文件后重启Squid服务程序，这时由于客户端主机的IP地址不符合我们的允许策略而被禁止使用代理服务，如下图所示。',0,'alvin',curdate());
insert into Content values(1272,13,'image',51,'{"alt": "connect_refused", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_connect_refused.jpg", "width": "676"}','/static/img/linux/linux_squid_connect_refused.jpg','/static/img/linux/linux_squid_connect_refused.jpg',0,'alvin',curdate());
insert into Content values(1273,13,'p',52,'{}','实验2：禁止所有客户端访问网址中包含linux关键词的网站。','实验2：禁止所有客户端访问网址中包含linux关键词的网站。',0,'alvin',curdate());
insert into Content values(1274,13,'p',53,'{}','        Squid服务程序的这种ACL功能模式是比较粗犷暴力的，客户端访问的任何网址中只要包含了某个关键词就会被立即禁止访问，但是这并不影响访问其他网站。','        Squid服务程序的这种ACL功能模式是比较粗犷暴力的，客户端访问的任何网址中只要包含了某个关键词就会被立即禁止访问，但是这并不影响访问其他网站。',0,'alvin',curdate());
insert into Content values(1275,13,'pre',54,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 1 #
 2 # Recommended minimum configuration:
 3 #
 4 
 5 # Example rule allowing access from your local networks.
 6 # Adapt to list your (internal) IP networks from where browsing
 7 # should be allowed
 8 acl localnet src 10.0.0.0/8 # RFC1918 possible internal network
 9 acl localnet src 172.16.0.0/12 # RFC1918 possible internal network
 10 acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
 11 acl localnet src fc00::/7 # RFC 4193 local private network range
 12 acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) mac hines
 13 
 14 acl SSL_ports port 443
 15 acl Safe_ports port 80 # http
 16 acl Safe_ports port 21 # ftp
 17 acl Safe_ports port 443 # https
 18 acl Safe_ports port 70 # gopher
 19 acl Safe_ports port 210 # wais
 20 acl Safe_ports port 1025-65535 # unregistered ports
 21 acl Safe_ports port 280 # http-mgmt
 22 acl Safe_ports port 488 # gss-http
 23 acl Safe_ports port 591 # filemaker
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl deny_keyword url_regex -i linux
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access deny deny_keyword
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 1 #
 2 # Recommended minimum configuration:
 3 #
 4 
 5 # Example rule allowing access from your local networks.
 6 # Adapt to list your (internal) IP networks from where browsing
 7 # should be allowed
 8 acl localnet src 10.0.0.0/8 # RFC1918 possible internal network
 9 acl localnet src 172.16.0.0/12 # RFC1918 possible internal network
 10 acl localnet src 192.168.0.0/16 # RFC1918 possible internal network
 11 acl localnet src fc00::/7 # RFC 4193 local private network range
 12 acl localnet src fe80::/10 # RFC 4291 link-local (directly plugged) mac hines
 13 
 14 acl SSL_ports port 443
 15 acl Safe_ports port 80 # http
 16 acl Safe_ports port 21 # ftp
 17 acl Safe_ports port 443 # https
 18 acl Safe_ports port 70 # gopher
 19 acl Safe_ports port 210 # wais
 20 acl Safe_ports port 1025-65535 # unregistered ports
 21 acl Safe_ports port 280 # http-mgmt
 22 acl Safe_ports port 488 # gss-http
 23 acl Safe_ports port 591 # filemaker
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl deny_keyword url_regex -i linux
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access deny deny_keyword
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
',0,'alvin',curdate());
insert into Content values(1276,13,'p',55,'{}','        老师建议大家在进行实验之前，一定要先把前面实验中的代码清理干净，以免不同的实验之间产生冲突。在当前的实验中，我们直接定义了一个名为deny_keyword的别名，然后把所有网址带有linux关键词的网站请求统统拒绝掉。当客户端分别访问带有linux关键词和不带有linux关键词的网站时，其结果如下图所示。','        老师建议大家在进行实验之前，一定要先把前面实验中的代码清理干净，以免不同的实验之间产生冲突。在当前的实验中，我们直接定义了一个名为deny_keyword的别名，然后把所有网址带有linux关键词的网站请求统统拒绝掉。当客户端分别访问带有linux关键词和不带有linux关键词的网站时，其结果如下图所示。',0,'alvin',curdate());
insert into Content values(1277,13,'image',56,'{"alt": "refuse_twice", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_refuse_twice.jpg", "width": "676"}','/static/img/linux/linux_squid_refuse_twice.jpg','/static/img/linux/linux_squid_refuse_twice.jpg',0,'alvin',curdate());
insert into Content values(1278,13,'p',57,'{}','实验3：禁止所有客户端访问某个特定的网站。','实验3：禁止所有客户端访问某个特定的网站。',0,'alvin',curdate());
insert into Content values(1279,13,'p',58,'{}','        在实验2中，由于我们禁止所有客户端访问网址中包含linux关键词的网站，这将造成一大批网站被误封，从而影响同事们的正常工作。其实通过禁止客户端访问某个特定的网址，也就避免了误封的行为。下面按照如下所示的参数配置Squid服务程序并重启，然后进行测试，其测试结果如下图所示。','        在实验2中，由于我们禁止所有客户端访问网址中包含linux关键词的网站，这将造成一大批网站被误封，从而影响同事们的正常工作。其实通过禁止客户端访问某个特定的网址，也就避免了误封的行为。下面按照如下所示的参数配置Squid服务程序并重启，然后进行测试，其测试结果如下图所示。',0,'alvin',curdate());
insert into Content values(1280,13,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl deny_url url_regex http://www.linuxcool.com
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access deny deny_url
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl deny_url url_regex http://www.linuxcool.com
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access deny deny_url
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
',0,'alvin',curdate());
insert into Content values(1281,13,'image',60,'{"alt": "refuse_by_spec", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_refuse_by_spec.png", "width": "676"}','/static/img/linux/linux_squid_refuse_by_spec.png','/static/img/linux/linux_squid_refuse_by_spec.png',0,'alvin',curdate());
insert into Content values(1282,13,'p',61,'{}','实验4：禁止员工在企业网内部下载带有某些后缀的文件。','实验4：禁止员工在企业网内部下载带有某些后缀的文件。',0,'alvin',curdate());
insert into Content values(1283,13,'p',62,'{}','        在企业网络中，总会有一小部分人利用企业网络的高速带宽私自下载资源（比如游戏安装文件、电影文件等），从而对其他同事的工作效率造成影响。通过禁止所有用户访问.rar或.avi等后缀文件的请求，可以防止他们继续下载资源，让他们知难而退。下面按照如下所示的参数配置Squid服务程序并重启，然后进行测试，其测试结果如下图所示。','        在企业网络中，总会有一小部分人利用企业网络的高速带宽私自下载资源（比如游戏安装文件、电影文件等），从而对其他同事的工作效率造成影响。通过禁止所有用户访问.rar或.avi等后缀文件的请求，可以防止他们继续下载资源，让他们知难而退。下面按照如下所示的参数配置Squid服务程序并重启，然后进行测试，其测试结果如下图所示。',0,'alvin',curdate());
insert into Content values(1284,13,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl badfile urlpath_regex -i \.mp3$ \.rar$
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access deny badfile
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
 24 acl Safe_ports port 777 # multiling http
 25 acl CONNECT method CONNECT
 26 acl badfile urlpath_regex -i \.mp3$ \.rar$
 27 #
 28 # Recommended minimum Access Permission configuration:
 29 #
 30 # Deny requests to certain unsafe ports
 31 http_access deny badfile
 33 http_access deny !Safe_ports
 34
[root@linuxprobe ~]# systemctl restart squid
',0,'alvin',curdate());
insert into Content values(1285,13,'image',64,'{"alt": "refuse_by_suffix", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_refuse_by_suffix.png", "width": "676"}','/static/img/linux/linux_squid_refuse_by_suffix.png','/static/img/linux/linux_squid_refuse_by_suffix.png',0,'alvin',curdate());
insert into Content values(1286,13,'h3',65,'{}','透明正向代理','透明正向代理',0,'alvin',curdate());
insert into Content values(1287,13,'p',66,'{}','        正向代理服务一般是针对企业内部的所有员工设置的，鉴于每位员工所掌握的计算机知识不尽相同，如果您所在的公司不是IT行业的公司，想教会大家如何使用代理服务也不是一件容易的事情。再者，无论是什么行业的公司，公司领导都希望能采取某些措施限制员工在公司内的上网行为，这时就需要用到透明的正向代理模式了。','        正向代理服务一般是针对企业内部的所有员工设置的，鉴于每位员工所掌握的计算机知识不尽相同，如果您所在的公司不是IT行业的公司，想教会大家如何使用代理服务也不是一件容易的事情。再者，无论是什么行业的公司，公司领导都希望能采取某些措施限制员工在公司内的上网行为，这时就需要用到透明的正向代理模式了。',0,'alvin',curdate());
insert into Content values(1288,13,'p',67,'{}','        “透明”二字指的是让用户在没有感知的情况下使用代理服务，这样的好处是一方面不需要用户手动配置代理服务器的信息，进而降低了代理服务的使用门槛；另一方面也可以更隐秘地监督员工的上网行为。','        “透明”二字指的是让用户在没有感知的情况下使用代理服务，这样的好处是一方面不需要用户手动配置代理服务器的信息，进而降低了代理服务的使用门槛；另一方面也可以更隐秘地监督员工的上网行为。',0,'alvin',curdate());
insert into Content values(1289,13,'p',68,'{}','        在透明代理模式中，用户无须在浏览器或其他软件中配置代理服务器地址、端口号等信息，而是由DHCP服务器将网络配置信息分配给客户端主机。这样只要用户打开浏览器便会自动使用代理服务了。如果大家此时并没有配置DHCP服务器，可以像如下图所示来手动配置客户端主机的网卡参数。','        在透明代理模式中，用户无须在浏览器或其他软件中配置代理服务器地址、端口号等信息，而是由DHCP服务器将网络配置信息分配给客户端主机。这样只要用户打开浏览器便会自动使用代理服务了。如果大家此时并没有配置DHCP服务器，可以像如下图所示来手动配置客户端主机的网卡参数。',0,'alvin',curdate());
insert into Content values(1290,13,'image',69,'{"alt": "set_net_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_set_net_setting.png", "width": "676"}','/static/img/linux/linux_squid_set_net_setting.png','/static/img/linux/linux_squid_set_net_setting.png',0,'alvin',curdate());
insert into Content values(1291,13,'p',70,'{}','        为了避免实验之间互相影响，更好地体验透明代理技术的效果，我们需要把客户端浏览器的代理信息删除（即 标准正向代理 图3的操作），然后再刷新页面，就会看到访问任何网站都失败了，如下图所示。','        为了避免实验之间互相影响，更好地体验透明代理技术的效果，我们需要把客户端浏览器的代理信息删除（即 标准正向代理 图3的操作），然后再刷新页面，就会看到访问任何网站都失败了，如下图所示。',0,'alvin',curdate());
insert into Content values(1292,13,'image',71,'{"alt": "fail_connect", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_fail_connect.png", "width": "676"}','/static/img/linux/linux_squid_fail_connect.png','/static/img/linux/linux_squid_fail_connect.png',0,'alvin',curdate());
insert into Content values(1293,13,'p',72,'{}','        既然要让用户在无需过多配置系统的情况下就能使用代理服务，作为运维人员就必须提前将网络配置信息与数据转发功能配置好。前面已经配置好的网络参数，接下来要使用SNAT技术完成数据的转发，让客户端主机将数据交给Squid代理服务器，再由后者转发到外网中。简单来说，就是让Squid服务器作为一个中间人，实现内网客户端主机与外部网络之间的数据传输。','        既然要让用户在无需过多配置系统的情况下就能使用代理服务，作为运维人员就必须提前将网络配置信息与数据转发功能配置好。前面已经配置好的网络参数，接下来要使用SNAT技术完成数据的转发，让客户端主机将数据交给Squid代理服务器，再由后者转发到外网中。简单来说，就是让Squid服务器作为一个中间人，实现内网客户端主机与外部网络之间的数据传输。',0,'alvin',curdate());
insert into Content values(1294,13,'p',73,'{}','        由于当前还没有部署SNAT功能，因此当前内网中的客户端主机是不能访问外网的：','        由于当前还没有部署SNAT功能，因此当前内网中的客户端主机是不能访问外网的：',0,'alvin',curdate());
insert into Content values(1295,13,'pre',74,'{"class": ["prettyprint", "lang-bash"]}','C:\Users\linuxprobe>ping www.linuxprobe.com
Ping 请求找不到主机 www.linuxprobe.com。请检查该名称，然后重试。
','C:\Users\linuxprobe>ping www.linuxprobe.com
Ping 请求找不到主机 www.linuxprobe.com。请检查该名称，然后重试。
',0,'alvin',curdate());
insert into Content values(1296,13,'p',75,'{}','        前面已经介绍了iptables与firewalld防火墙理论知识以及策略规则的配置方法，大家可以任选其中一款完成接下来的实验。刘遄老师觉得firewalld防火墙实在太简单了，因此决定使用纯命令行的iptables防火墙管理工具来演示部署方法。','        前面已经介绍了iptables与firewalld防火墙理论知识以及策略规则的配置方法，大家可以任选其中一款完成接下来的实验。刘遄老师觉得firewalld防火墙实在太简单了，因此决定使用纯命令行的iptables防火墙管理工具来演示部署方法。',0,'alvin',curdate());
insert into Content values(1297,13,'p',76,'{}','        要想让内网中的客户端主机能够访问外网，客户端主机首先要能获取到DNS地址解析服务的数据，这样才能在互联网中找到对应网站的IP地址。下面通过iptables命令实现DNS地址解析服务53端口的数据转发功能，并且允许Squid服务器转发IPv4数据包。sysctl -p命令的作用是让转发参数立即生效：','        要想让内网中的客户端主机能够访问外网，客户端主机首先要能获取到DNS地址解析服务的数据，这样才能在互联网中找到对应网站的IP地址。下面通过iptables命令实现DNS地址解析服务53端口的数据转发功能，并且允许Squid服务器转发IPv4数据包。sysctl -p命令的作用是让转发参数立即生效：',0,'alvin',curdate());
insert into Content values(1298,13,'pre',77,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# iptables -t nat -A POSTROUTING -p udp --dport 53 -o eno33554968 -j MASQUERADE
[root@linuxprobe ~]# echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
[root@linuxprobe ~]# sysctl -p 
net.ipv4.ip_forward = 1
','[root@linuxprobe ~]# iptables -F
[root@linuxprobe ~]# iptables -t nat -A POSTROUTING -p udp --dport 53 -o eno33554968 -j MASQUERADE
[root@linuxprobe ~]# echo "net.ipv4.ip_forward=1" >> /etc/sysctl.conf
[root@linuxprobe ~]# sysctl -p 
net.ipv4.ip_forward = 1
',0,'alvin',curdate());
insert into Content values(1299,13,'p',78,'{}','        现在回到客户端主机，再次ping某个外网地址。此时可以发现，虽然不能连通网站，但是此时已经能够获取到外网DNS服务的域名解析数据。这个步骤非常重要，为接下来的SNAT技术打下了扎实的基础。','        现在回到客户端主机，再次ping某个外网地址。此时可以发现，虽然不能连通网站，但是此时已经能够获取到外网DNS服务的域名解析数据。这个步骤非常重要，为接下来的SNAT技术打下了扎实的基础。',0,'alvin',curdate());
insert into Content values(1300,13,'pre',79,'{"class": ["prettyprint", "lang-bash"]}','C:\Users\linuxprobe>ping www.linuxprobe.com
正在 Ping www.linuxprobe.com [116.31.127.233] 具有 32 字节的数据:
请求超时。
请求超时。
请求超时。
请求超时。
116.31.127.233 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)，
','C:\Users\linuxprobe>ping www.linuxprobe.com
正在 Ping www.linuxprobe.com [116.31.127.233] 具有 32 字节的数据:
请求超时。
请求超时。
请求超时。
请求超时。
116.31.127.233 的 Ping 统计信息:
    数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)，
',0,'alvin',curdate());
insert into Content values(1301,13,'p',80,'{}','        与配置DNS和SNAT技术转发相比，Squid服务程序透明代理模式的配置过程就十分简单了，只需要在主配置文件中服务器端口号后面追加上transparent单词（意思为“透明的”），然后把第62行的井号（#）注释符删除，设置缓存的保存路径就可以了。保存主配置文件并退出后再使用squid -k parse命令检查主配置文件是否有错误，以及使用squid -z命令对Squid服务程序的透明代理技术进行初始化。','        与配置DNS和SNAT技术转发相比，Squid服务程序透明代理模式的配置过程就十分简单了，只需要在主配置文件中服务器端口号后面追加上transparent单词（意思为“透明的”），然后把第62行的井号（#）注释符删除，设置缓存的保存路径就可以了。保存主配置文件并退出后再使用squid -k parse命令检查主配置文件是否有错误，以及使用squid -z命令对Squid服务程序的透明代理技术进行初始化。',0,'alvin',curdate());
insert into Content values(1302,13,'pre',81,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
………………省略部分输出信息………………
58 # Squid normally listens to port 3128
59 http_port 3128 transparent
60
61 # Uncomment and adjust the following to add a disk cache directory.
62 cache_dir ufs /var/spool/squid 100 16 256
63 
………………省略部分输出信息………………
[root@linuxprobe ~]# squid -k parse
2017/04/13 06:40:44| Startup: Initializing Authentication Schemes ...
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'basic\'
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'digest\'
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'negotiate\'
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'ntlm\'
2017/04/13 06:40:44| Startup: Initialized Authentication.
………………省略部分输出信息………………
[root@linuxprobe ~]# squid -z
2017/04/13 06:41:26 kid1| Creating missing swap directories
2017/04/13 06:41:26 kid1| /var/spool/squid exists
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/00
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/01
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/02
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/03
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/04
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/05
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/06
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/07
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/08
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/09
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0A
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0B
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0C
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0D
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0E
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0F
[root@linuxprobe ~]# systemctl restart squid
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
………………省略部分输出信息………………
58 # Squid normally listens to port 3128
59 http_port 3128 transparent
60
61 # Uncomment and adjust the following to add a disk cache directory.
62 cache_dir ufs /var/spool/squid 100 16 256
63 
………………省略部分输出信息………………
[root@linuxprobe ~]# squid -k parse
2017/04/13 06:40:44| Startup: Initializing Authentication Schemes ...
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'basic\'
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'digest\'
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'negotiate\'
2017/04/13 06:40:44| Startup: Initialized Authentication Scheme \'ntlm\'
2017/04/13 06:40:44| Startup: Initialized Authentication.
………………省略部分输出信息………………
[root@linuxprobe ~]# squid -z
2017/04/13 06:41:26 kid1| Creating missing swap directories
2017/04/13 06:41:26 kid1| /var/spool/squid exists
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/00
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/01
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/02
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/03
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/04
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/05
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/06
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/07
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/08
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/09
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0A
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0B
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0C
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0D
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0E
2017/04/13 06:41:26 kid1| Making directories in /var/spool/squid/0F
[root@linuxprobe ~]# systemctl restart squid
',0,'alvin',curdate());
insert into Content values(1303,13,'p',82,'{}','        在配置妥当并重启Squid服务程序且系统没有提示报错信息后，接下来就可以完成SNAT数据转发功能了。它的原理其实很简单，就是使用iptables防火墙管理命令把所有客户端主机对网站80端口的请求转发至Squid服务器本地的3128端口上。SNAT数据转发功能的具体配置参数如下。','        在配置妥当并重启Squid服务程序且系统没有提示报错信息后，接下来就可以完成SNAT数据转发功能了。它的原理其实很简单，就是使用iptables防火墙管理命令把所有客户端主机对网站80端口的请求转发至Squid服务器本地的3128端口上。SNAT数据转发功能的具体配置参数如下。',0,'alvin',curdate());
insert into Content values(1304,13,'pre',83,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iptables -t nat -A PREROUTING  -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 3128
[root@linuxprobe ~]# iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -o eno33554968 -j SNAT --to 您的桥接网卡IP地址
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
','[root@linuxprobe ~]# iptables -t nat -A PREROUTING  -p tcp -m tcp --dport 80 -j REDIRECT --to-ports 3128
[root@linuxprobe ~]# iptables -t nat -A POSTROUTING -s 192.168.10.0/24 -o eno33554968 -j SNAT --to 您的桥接网卡IP地址
[root@linuxprobe ~]# service iptables save
iptables: Saving firewall rules to /etc/sysconfig/iptables:[ OK ]
',0,'alvin',curdate());
insert into Content values(1305,13,'p',84,'{}','        这时客户端主机再刷新一下浏览器，就又能访问网络了，如下图所示。','        这时客户端主机再刷新一下浏览器，就又能访问网络了，如下图所示。',0,'alvin',curdate());
insert into Content values(1306,13,'image',85,'{"alt": "re_connect", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_re_connect.png", "width": "676"}','/static/img/linux/linux_squid_re_connect.png','/static/img/linux/linux_squid_re_connect.png',0,'alvin',curdate());
insert into Content values(1307,13,'p',86,'{}','        现在肯定有读者在想，如果开启了SNAT功能，数据不就直接被转发到外网了么？内网中的客户端主机是否还依然使用Squid服务程序提供的代理服务呢？其实，只要仔细看一下iptables防火墙命令就会发现，刘遄老师刚才并不是单纯地开启了SNAT功能，而是通过把客户端主机访问外网80端口的请求转发到Squid服务器的3128端口号上，从而还是强制客户端主机必须通过Squid服务程序来上网。为了验证这个说法，我们编辑Squid服务程序的配置文件，单独禁止本书的配套站点（https://www.linuxprobe.com/），然后再次刷新客户端主机的浏览器，发现网页又被禁止显示了，如下图所示。','        现在肯定有读者在想，如果开启了SNAT功能，数据不就直接被转发到外网了么？内网中的客户端主机是否还依然使用Squid服务程序提供的代理服务呢？其实，只要仔细看一下iptables防火墙命令就会发现，刘遄老师刚才并不是单纯地开启了SNAT功能，而是通过把客户端主机访问外网80端口的请求转发到Squid服务器的3128端口号上，从而还是强制客户端主机必须通过Squid服务程序来上网。为了验证这个说法，我们编辑Squid服务程序的配置文件，单独禁止本书的配套站点（https://www.linuxprobe.com/），然后再次刷新客户端主机的浏览器，发现网页又被禁止显示了，如下图所示。',0,'alvin',curdate());
insert into Content values(1308,13,'image',87,'{"alt": "add_spec_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_add_spec_setting.png", "width": "676"}','/static/img/linux/linux_squid_add_spec_setting.png','/static/img/linux/linux_squid_add_spec_setting.png',0,'alvin',curdate());
insert into Content values(1309,13,'h2',88,'{}','反向代理','反向代理',0,'alvin',curdate());
insert into Content values(1310,13,'p',89,'{}','        网站页面是由静态资源和动态资源一起组成的，其中静态资源包括网站架构CSS文件、大量的图片、视频等数据，这些数据相对于动态资源来说更加稳定，一般不会经常发生改变。但是，随着建站技术的更新换代，外加人们不断提升的审美能力，这些静态资源占据的网站空间越来越多。如果能够把这些静态资源从网站页面中抽离出去，然后在全国各地部署静态资源的缓存节点，这样不仅可以提升用户访问网站的速度，而且网站源服务器也会因为这些缓存节点的存在而降低负载。','        网站页面是由静态资源和动态资源一起组成的，其中静态资源包括网站架构CSS文件、大量的图片、视频等数据，这些数据相对于动态资源来说更加稳定，一般不会经常发生改变。但是，随着建站技术的更新换代，外加人们不断提升的审美能力，这些静态资源占据的网站空间越来越多。如果能够把这些静态资源从网站页面中抽离出去，然后在全国各地部署静态资源的缓存节点，这样不仅可以提升用户访问网站的速度，而且网站源服务器也会因为这些缓存节点的存在而降低负载。',0,'alvin',curdate());
insert into Content values(1311,13,'p',90,'{}','        反向代理是Squid服务程序的一种重要模式，其原理是把一部分原本向网站源服务器发起的用户请求交给Squid服务器缓存节点来处理。但是这种技术的弊端也很明显，如果有心怀不轨之徒将自己的域名和服务器反向代理到某个知名的网站上面，从理论上来讲，当用户访问到这个域名时，也会看到与那个知名网站一样的内容（有些诈骗网站就是这样骗取用户信任的）。因此，当前许多网站都默认禁止了反向代理功能。开启了CDN（内容分发网络）服务的网站也可以避免这种窃取行为。如果访问开启了防护功能的网站，一般会看到如图16-16所示的报错信息。','        反向代理是Squid服务程序的一种重要模式，其原理是把一部分原本向网站源服务器发起的用户请求交给Squid服务器缓存节点来处理。但是这种技术的弊端也很明显，如果有心怀不轨之徒将自己的域名和服务器反向代理到某个知名的网站上面，从理论上来讲，当用户访问到这个域名时，也会看到与那个知名网站一样的内容（有些诈骗网站就是这样骗取用户信任的）。因此，当前许多网站都默认禁止了反向代理功能。开启了CDN（内容分发网络）服务的网站也可以避免这种窃取行为。如果访问开启了防护功能的网站，一般会看到如图16-16所示的报错信息。',0,'alvin',curdate());
insert into Content values(1312,13,'image',91,'{"alt": "oposite_net", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_oposite_net.png", "width": "676"}','/static/img/linux/linux_squid_oposite_net.png','/static/img/linux/linux_squid_oposite_net.png',0,'alvin',curdate());
insert into Content values(1313,13,'p',92,'{}','        使用Squid服务程序来配置反向代理服务非常简单。首先找到一个网站源服务器的IP地址，然后编辑Squid服务程序的主配置文件，把端口号3128修改为网站源服务器的地址和端口号，此时正向解析服务会被暂停（它不能与反向代理服务同时使用）。然后按照下面的参数形式写入需要反向代理的网站源服务器的IP地址信息，保存退出后重启Squid服务程序。正常网站使用反向代理服务的效果如下图所示。','        使用Squid服务程序来配置反向代理服务非常简单。首先找到一个网站源服务器的IP地址，然后编辑Squid服务程序的主配置文件，把端口号3128修改为网站源服务器的地址和端口号，此时正向解析服务会被暂停（它不能与反向代理服务同时使用）。然后按照下面的参数形式写入需要反向代理的网站源服务器的IP地址信息，保存退出后重启Squid服务程序。正常网站使用反向代理服务的效果如下图所示。',0,'alvin',curdate());
insert into Content values(1314,13,'pre',93,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/squid/squid.conf
………………省略部分输出信息………………
57 
58 # Squid normally listens to port 3128
59 http_port 您的桥接网卡IP地址:80 vhost
60 cache_peer 网站源服务器IP地址 parent 80 0 originserver
61 
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart squid
','[root@linuxprobe ~]# vim /etc/squid/squid.conf
………………省略部分输出信息………………
57 
58 # Squid normally listens to port 3128
59 http_port 您的桥接网卡IP地址:80 vhost
60 cache_peer 网站源服务器IP地址 parent 80 0 originserver
61 
………………省略部分输出信息………………
[root@linuxprobe ~]# systemctl restart squid
',0,'alvin',curdate());
insert into Content values(1315,13,'image',94,'{"alt": "opos_connect_web", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_squid_opos_connect_web.png", "width": "676"}','/static/img/linux/linux_squid_opos_connect_web.png','/static/img/linux/linux_squid_opos_connect_web.png',0,'alvin',curdate());
insert into Content values(1316,14,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用iSCSI服务部署网络存储',' <span class="color_h1">  Linux </span> 使用iSCSI服务部署网络存储',0,'alvin',curdate());
insert into Content values(1317,14,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1318,14,'p',3,'{}','        iSCSI技术实现了物理硬盘设备与TCP/IP网络协议的相互结合，使得用户可以通过互联网方便地访问远程机房提供的共享存储资源。本章将带领大家在Linux系统上部署iSCSI服务端程序，并分别基于Linux系统和Windows系统来访问远程的存储资源。通过本章以及第6章、第7章的学习，读者将进一步理解和掌握如何在Linux系统中管理硬盘设备和存储资源，为今后走向运营岗位打下坚实的基础。','        iSCSI技术实现了物理硬盘设备与TCP/IP网络协议的相互结合，使得用户可以通过互联网方便地访问远程机房提供的共享存储资源。本章将带领大家在Linux系统上部署iSCSI服务端程序，并分别基于Linux系统和Windows系统来访问远程的存储资源。通过本章以及第6章、第7章的学习，读者将进一步理解和掌握如何在Linux系统中管理硬盘设备和存储资源，为今后走向运营岗位打下坚实的基础。',0,'alvin',curdate());
insert into Content values(1319,14,'h2',4,'{}','iSCSI技术介绍','iSCSI技术介绍',0,'alvin',curdate());
insert into Content values(1320,14,'p',5,'{}','        硬盘是计算机硬件设备中重要的组成部分之一，硬盘存储设备读写速度的快慢也会对服务器的整体性能造成影响。第6章、第7章讲解的硬盘存储结构、RAID磁盘阵列技术以及LVM技术等都是用于存储设备的技术，尽管这些技术有软件层面和硬件层面之分，但是它们都旨在解决硬盘存储设备的读写速度问题，或者竭力保障存储数据的安全。','        硬盘是计算机硬件设备中重要的组成部分之一，硬盘存储设备读写速度的快慢也会对服务器的整体性能造成影响。第6章、第7章讲解的硬盘存储结构、RAID磁盘阵列技术以及LVM技术等都是用于存储设备的技术，尽管这些技术有软件层面和硬件层面之分，但是它们都旨在解决硬盘存储设备的读写速度问题，或者竭力保障存储数据的安全。',0,'alvin',curdate());
insert into Content values(1321,14,'p',6,'{}','        为了进一步提升硬盘存储设备的读写速度和性能，人们一直在努力改进物理硬盘设备的接口协议。当前的硬盘接口类型主要有IDE、SCSI和SATA这3种。','        为了进一步提升硬盘存储设备的读写速度和性能，人们一直在努力改进物理硬盘设备的接口协议。当前的硬盘接口类型主要有IDE、SCSI和SATA这3种。',0,'alvin',curdate());
insert into Content values(1322,14,'ul',7,'{}','IDE是一种成熟稳定、价格便宜的并行传输接口。
SATA是一种传输速度更快、数据校验更完整的串行传输接口。
SCSI是一种用于计算机和硬盘、光驱等设备之间系统级接口的通用标准，具有系统资源占用率低、转速高、传输速度快等优点。','IDE是一种成熟稳定、价格便宜的并行传输接口。
SATA是一种传输速度更快、数据校验更完整的串行传输接口。
SCSI是一种用于计算机和硬盘、光驱等设备之间系统级接口的通用标准，具有系统资源占用率低、转速高、传输速度快等优点。',0,'alvin',curdate());
insert into Content values(1323,14,'p',8,'{}','        不论使用什么类型的硬盘接口，硬盘上的数据总是要通过计算机主板上的总线与CPU、内存设备进行数据交换，这种物理环境上的限制给硬盘资源的共享带来了各种不便。后来，IBM公司开始动手研发基于TCP/IP协议和SCSI接口协议的新型存储技术，这也就是我们目前能看到的互联网小型计算机系统接口（iSCSI，Internet Small Computer System Interface）。这是一种将SCSI接口与以太网技术相结合的新型存储技术，可以用来在网络中传输SCSI接口的命令和数据。这样，不仅克服了传统SCSI接口设备的物理局限性，实现了跨区域的存储资源共享，还可以在不停机的状态下扩展存储容量。','        不论使用什么类型的硬盘接口，硬盘上的数据总是要通过计算机主板上的总线与CPU、内存设备进行数据交换，这种物理环境上的限制给硬盘资源的共享带来了各种不便。后来，IBM公司开始动手研发基于TCP/IP协议和SCSI接口协议的新型存储技术，这也就是我们目前能看到的互联网小型计算机系统接口（iSCSI，Internet Small Computer System Interface）。这是一种将SCSI接口与以太网技术相结合的新型存储技术，可以用来在网络中传输SCSI接口的命令和数据。这样，不仅克服了传统SCSI接口设备的物理局限性，实现了跨区域的存储资源共享，还可以在不停机的状态下扩展存储容量。',0,'alvin',curdate());
insert into Content values(1324,14,'p',9,'{}','        为了让各位读者做到知其然，知其所以然，以便在工作中灵活使用这项技术，下面将讲解一下iSCSI技术在生产环境中的优势和劣势。首先，iSCSI存储技术非常便捷，在访问存储资源的形式上发生了很大变化，摆脱了物理环境的限制，同时还可以把存储资源分给多个服务器共同使用，因此是一种非常推荐使用的存储技术。但是，iSCSI存储技术受到了网速的制约。以往，硬盘设备直接通过主板上的总线进行数据传输，现在则需要让互联网作为数据传输的载体和通道，因此传输速率和稳定性是iSCSI技术的瓶颈。随着网络技术的持续发展，相信iSCSI技术也会随之得以改善。','        为了让各位读者做到知其然，知其所以然，以便在工作中灵活使用这项技术，下面将讲解一下iSCSI技术在生产环境中的优势和劣势。首先，iSCSI存储技术非常便捷，在访问存储资源的形式上发生了很大变化，摆脱了物理环境的限制，同时还可以把存储资源分给多个服务器共同使用，因此是一种非常推荐使用的存储技术。但是，iSCSI存储技术受到了网速的制约。以往，硬盘设备直接通过主板上的总线进行数据传输，现在则需要让互联网作为数据传输的载体和通道，因此传输速率和稳定性是iSCSI技术的瓶颈。随着网络技术的持续发展，相信iSCSI技术也会随之得以改善。',0,'alvin',curdate());
insert into Content values(1325,14,'p',10,'{}','        既然要通过以太网来传输硬盘设备上的数据，那么数据是通过网卡传入到计算机中的么？这就有必要向大家介绍iSCSI-HBA卡了（见下图）。与一般的网卡不同（连接网络总线和内存，供计算机上网使用），iSCSI-HBA卡连接的则是SCSI接口或FC（光纤通道）总线和内存，专门用于在主机之间交换存储数据，其使用的协议也与一般网卡有本质的不同。运行Linux系统的服务器会基于iSCSI协议把硬盘设备命令与数据打包成标准的TCP/IP数据包，然后通过以太网传输到目标存储设备，而当目标存储设备接收到这些数据包后，还需要基于iSCSI协议把TCP/IP数据包解压成硬盘设备命令与数据。','        既然要通过以太网来传输硬盘设备上的数据，那么数据是通过网卡传入到计算机中的么？这就有必要向大家介绍iSCSI-HBA卡了（见下图）。与一般的网卡不同（连接网络总线和内存，供计算机上网使用），iSCSI-HBA卡连接的则是SCSI接口或FC（光纤通道）总线和内存，专门用于在主机之间交换存储数据，其使用的协议也与一般网卡有本质的不同。运行Linux系统的服务器会基于iSCSI协议把硬盘设备命令与数据打包成标准的TCP/IP数据包，然后通过以太网传输到目标存储设备，而当目标存储设备接收到这些数据包后，还需要基于iSCSI协议把TCP/IP数据包解压成硬盘设备命令与数据。',0,'alvin',curdate());
insert into Content values(1326,14,'image',11,'{"alt": "iscsi_hba", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_iscsi_hba.jpg", "width": "676"}','/static/img/linux/linux_iscsi_hba.jpg','/static/img/linux/linux_iscsi_hba.jpg',0,'alvin',curdate());
insert into Content values(1327,14,'h2',12,'{}','创建RAID磁盘阵列','创建RAID磁盘阵列',0,'alvin',curdate());
insert into Content values(1328,14,'p',13,'{}','        然要使用iSCSI存储技术为远程用户提供共享存储资源，首先要保障用于存放资源的服务器的稳定性与可用性，否则一旦在使用过程中出现故障，则维护的难度相较于本地硬盘设备要更加复杂、困难。因此推荐各位读者按照本书第7章讲解的知识来部署RAID磁盘阵列组，确保数据的安全性。下面以配置RAID 5磁盘阵列组为例进行讲解。考虑到第7章已经事无巨细地讲解了RAID磁盘阵列技术和配置方法，因此本节不会再重复介绍相关参数的意义以及用途，忘记了的读者可以翻回去看一下。','        然要使用iSCSI存储技术为远程用户提供共享存储资源，首先要保障用于存放资源的服务器的稳定性与可用性，否则一旦在使用过程中出现故障，则维护的难度相较于本地硬盘设备要更加复杂、困难。因此推荐各位读者按照本书第7章讲解的知识来部署RAID磁盘阵列组，确保数据的安全性。下面以配置RAID 5磁盘阵列组为例进行讲解。考虑到第7章已经事无巨细地讲解了RAID磁盘阵列技术和配置方法，因此本节不会再重复介绍相关参数的意义以及用途，忘记了的读者可以翻回去看一下。',0,'alvin',curdate());
insert into Content values(1329,14,'p',14,'{}','        首先在虚拟机中添加4块新硬盘，用于创建RAID 5磁盘阵列和备份盘，如下图所示。','        首先在虚拟机中添加4块新硬盘，用于创建RAID 5磁盘阵列和备份盘，如下图所示。',0,'alvin',curdate());
insert into Content values(1330,14,'image',15,'{"alt": "add_raid", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_add_raid.jpg", "width": "676"}','/static/img/linux/linux_iscsi_add_raid.jpg','/static/img/linux/linux_iscsi_add_raid.jpg',0,'alvin',curdate());
insert into Content values(1331,14,'p',16,'{}','        启动虚拟机系统，使用mdadm命令创建RAID磁盘阵列。其中，-Cv参数为创建阵列并显示过程，/dev/md0为生成的阵列组名称，-n 3参数为创建RAID 5磁盘阵列所需的硬盘个数，-l 5参数为RAID磁盘阵列的级别，-x 1参数为磁盘阵列的备份盘个数。在命令后面要逐一写上使用的硬盘名称。另外，还可以使用第3章讲解的通配符来指定硬盘设备的名称，有兴趣的读者可以试一下。','        启动虚拟机系统，使用mdadm命令创建RAID磁盘阵列。其中，-Cv参数为创建阵列并显示过程，/dev/md0为生成的阵列组名称，-n 3参数为创建RAID 5磁盘阵列所需的硬盘个数，-l 5参数为RAID磁盘阵列的级别，-x 1参数为磁盘阵列的备份盘个数。在命令后面要逐一写上使用的硬盘名称。另外，还可以使用第3章讲解的通配符来指定硬盘设备的名称，有兴趣的读者可以试一下。',0,'alvin',curdate());
insert into Content values(1332,14,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde
mdadm: layout defaults to left-symmetric
mdadm: layout defaults to left-symmetric
mdadm: chunk size defaults to 512K
mdadm: size set to 20954624K
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md0 started.
','[root@linuxprobe ~]# mdadm -Cv /dev/md0 -n 3 -l 5 -x 1 /dev/sdb /dev/sdc /dev/sdd /dev/sde
mdadm: layout defaults to left-symmetric
mdadm: layout defaults to left-symmetric
mdadm: chunk size defaults to 512K
mdadm: size set to 20954624K
mdadm: Defaulting to version 1.2 metadata
mdadm: array /dev/md0 started.
',0,'alvin',curdate());
insert into Content values(1333,14,'p',18,'{}','        在上述命令成功执行之后，得到一块名称为/dev/md0的新设备，这是一块RAID 5级别的磁盘阵列，并且还有一块备份盘为硬盘数据保驾护航。大家可使用mdadm -D命令来查看设备的详细信息。另外，由于在使用远程设备时极有可能出现设备识别顺序发生变化的情况，因此，如果直接在fstab挂载配置文件中写入/dev/sdb、/dev/sdc等设备名称的话，就有可能在下一次挂载了错误的存储设备。而UUID值是设备的唯一标识符，可以用于精确地区分本地或远程设备。于是我们可以把这个值记录下来，一会儿准备填写到挂载配置文件中。','        在上述命令成功执行之后，得到一块名称为/dev/md0的新设备，这是一块RAID 5级别的磁盘阵列，并且还有一块备份盘为硬盘数据保驾护航。大家可使用mdadm -D命令来查看设备的详细信息。另外，由于在使用远程设备时极有可能出现设备识别顺序发生变化的情况，因此，如果直接在fstab挂载配置文件中写入/dev/sdb、/dev/sdc等设备名称的话，就有可能在下一次挂载了错误的存储设备。而UUID值是设备的唯一标识符，可以用于精确地区分本地或远程设备。于是我们可以把这个值记录下来，一会儿准备填写到挂载配置文件中。',0,'alvin',curdate());
insert into Content values(1334,14,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mdadm -D /dev/md0
/dev/md0:
        Version : 1.2
  Creation Time : Thu Sep 24 21:59:57 2017
     Raid Level : raid5
     Array Size : 41909248 (39.97 GiB 42.92 GB)
  Used Dev Size : 20954624 (19.98 GiB 21.46 GB)
   Raid Devices : 3
  Total Devices : 4
    Persistence : Superblock is persistent
    Update Time : Thu Sep 24 22:02:23 2017
          State : clean 
 Active Devices : 3
Working Devices : 4
 Failed Devices : 0
  Spare Devices : 1
         Layout : left-symmetric
     Chunk Size : 512K
           Name : linuxprobe.com:0  (local to host linuxprobe.com)
           UUID : 3370f643:c10efd6a:44e91f2a:20c71f3e
         Events : 26
    Number   Major   Minor   RaidDevice State
       0       8       16        0      active sync   /dev/sdb
       1       8       32        1      active sync   /dev/sdc
       4       8       48        2      active sync   /dev/sdd
       3       8       64        -      spare   /dev/sde
','[root@linuxprobe ~]# mdadm -D /dev/md0
/dev/md0:
        Version : 1.2
  Creation Time : Thu Sep 24 21:59:57 2017
     Raid Level : raid5
     Array Size : 41909248 (39.97 GiB 42.92 GB)
  Used Dev Size : 20954624 (19.98 GiB 21.46 GB)
   Raid Devices : 3
  Total Devices : 4
    Persistence : Superblock is persistent
    Update Time : Thu Sep 24 22:02:23 2017
          State : clean 
 Active Devices : 3
Working Devices : 4
 Failed Devices : 0
  Spare Devices : 1
         Layout : left-symmetric
     Chunk Size : 512K
           Name : linuxprobe.com:0  (local to host linuxprobe.com)
           UUID : 3370f643:c10efd6a:44e91f2a:20c71f3e
         Events : 26
    Number   Major   Minor   RaidDevice State
       0       8       16        0      active sync   /dev/sdb
       1       8       32        1      active sync   /dev/sdc
       4       8       48        2      active sync   /dev/sdd
       3       8       64        -      spare   /dev/sde
',0,'alvin',curdate());
insert into Content values(1335,14,'h2',20,'{}','配置iSCSI服务端','配置iSCSI服务端',0,'alvin',curdate());
insert into Content values(1336,14,'p',21,'{}','        iSCSI技术在工作形式上分为服务端（target）与客户端（initiator）。iSCSI服务端即用于存放硬盘存储资源的服务器，它作为前面创建的RAID磁盘阵列的存储端，能够为用户提供可用的存储资源。iSCSI客户端则是用户使用的软件，用于访问远程服务端的存储资源。下面按照下表来配置iSCSI服务端和客户端所用的IP地址。','        iSCSI技术在工作形式上分为服务端（target）与客户端（initiator）。iSCSI服务端即用于存放硬盘存储资源的服务器，它作为前面创建的RAID磁盘阵列的存储端，能够为用户提供可用的存储资源。iSCSI客户端则是用户使用的软件，用于访问远程服务端的存储资源。下面按照下表来配置iSCSI服务端和客户端所用的IP地址。',0,'alvin',curdate());
insert into Content values(1337,14,'table',22,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
iSCSI服务端	RHEL 7	192.168.10.10
iSCSI客户端	RHEL 7	192.168.10.20','主机名称	操作系统	IP地址
iSCSI服务端	RHEL 7	192.168.10.10
iSCSI客户端	RHEL 7	192.168.10.20',0,'alvin',curdate());
insert into Content values(1338,14,'p',23,'{}',' BOLD[  第1步： ]BOLD 配置好Yum软件仓库后安装iSCSI服务端程序以及配置命令工具。通过在yum命令的后面添加-y参数，在安装过程中就不需要再进行手动确认了：',' BOLD[  第1步： ]BOLD 配置好Yum软件仓库后安装iSCSI服务端程序以及配置命令工具。通过在yum命令的后面添加-y参数，在安装过程中就不需要再进行手动确认了：',0,'alvin',curdate());
insert into Content values(1339,14,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum -y install targetd targetcli
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 targetcli noarch 2.1.fb34-1.el7 rhel 55 k
 targetd noarch 0.7.1-1.el7 rhel 48 k
Installing for dependencies:
 PyYAML x86_64 3.10-11.el7 rhel 153 k
 libyaml x86_64 0.1.4-10.el7 rhel 55 k
 lvm2-python-libs x86_64 7:2.02.105-14.el7 rhel 153 k
 pyparsing noarch 1.5.6-9.el7 rhel 94 k
 python-configshell noarch 1:1.1.fb11-3.el7 rhel 64 k
 python-kmod x86_64 0.9-4.el7 rhel 57 k
 python-rtslib noarch 2.1.fb46-1.el7 rhel 75 k
 python-setproctitle x86_64 1.1.6-5.el7 rhel 15 k
 python-urwid x86_64 1.1.1-3.el7 rhel 654 k
………………省略部分输出信息………………
Installed:
 targetcli.noarch 0:2.1.fb34-1.el7 targetd.noarch 0:0.7.1-1.el7 
Dependency Installed:
 PyYAML.x86_64 0:3.10-11.el7 
 libyaml.x86_64 0:0.1.4-10.el7 
 lvm2-python-libs.x86_64 7:2.02.105-14.el7 
 pyparsing.noarch 0:1.5.6-9.el7 
 python-configshell.noarch 1:1.1.fb11-3.el7 
 python-kmod.x86_64 0:0.9-4.el7 
 python-rtslib.noarch 0:2.1.fb46-1.el7 
 python-setproctitle.x86_64 0:1.1.6-5.el7 
 python-urwid.x86_64 0:1.1.1-3.el7 
Complete!
','[root@linuxprobe ~]# yum -y install targetd targetcli
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 targetcli noarch 2.1.fb34-1.el7 rhel 55 k
 targetd noarch 0.7.1-1.el7 rhel 48 k
Installing for dependencies:
 PyYAML x86_64 3.10-11.el7 rhel 153 k
 libyaml x86_64 0.1.4-10.el7 rhel 55 k
 lvm2-python-libs x86_64 7:2.02.105-14.el7 rhel 153 k
 pyparsing noarch 1.5.6-9.el7 rhel 94 k
 python-configshell noarch 1:1.1.fb11-3.el7 rhel 64 k
 python-kmod x86_64 0.9-4.el7 rhel 57 k
 python-rtslib noarch 2.1.fb46-1.el7 rhel 75 k
 python-setproctitle x86_64 1.1.6-5.el7 rhel 15 k
 python-urwid x86_64 1.1.1-3.el7 rhel 654 k
………………省略部分输出信息………………
Installed:
 targetcli.noarch 0:2.1.fb34-1.el7 targetd.noarch 0:0.7.1-1.el7 
Dependency Installed:
 PyYAML.x86_64 0:3.10-11.el7 
 libyaml.x86_64 0:0.1.4-10.el7 
 lvm2-python-libs.x86_64 7:2.02.105-14.el7 
 pyparsing.noarch 0:1.5.6-9.el7 
 python-configshell.noarch 1:1.1.fb11-3.el7 
 python-kmod.x86_64 0:0.9-4.el7 
 python-rtslib.noarch 0:2.1.fb46-1.el7 
 python-setproctitle.x86_64 0:1.1.6-5.el7 
 python-urwid.x86_64 0:1.1.1-3.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1340,14,'p',25,'{}','        安装完成后启动iSCSI的服务端程序targetd，然后把这个服务程序加入到开机启动项中，以便下次在服务器重启后依然能够为用户提供iSCSI共享存储资源服务：','        安装完成后启动iSCSI的服务端程序targetd，然后把这个服务程序加入到开机启动项中，以便下次在服务器重启后依然能够为用户提供iSCSI共享存储资源服务：',0,'alvin',curdate());
insert into Content values(1341,14,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl start targetd
[root@linuxprobe ~]# systemctl enable targetd
 ln -s \'/usr/lib/systemd/system/targetd.service\' \'/etc/systemd/system/multi-user.target.wants/targetd.service\'
','[root@linuxprobe ~]# systemctl start targetd
[root@linuxprobe ~]# systemctl enable targetd
 ln -s \'/usr/lib/systemd/system/targetd.service\' \'/etc/systemd/system/multi-user.target.wants/targetd.service\'
',0,'alvin',curdate());
insert into Content values(1342,14,'p',27,'{}',' BOLD[  第2步： ]BOLD 配置iSCSI服务端共享资源。targetcli是用于管理iSCSI服务端存储资源的专用配置命令，它能够提供类似于fdisk命令的交互式配置功能，将iSCSI共享资源的配置内容抽象成“目录”的形式，我们只需将各类配置信息填入到相应的“目录”中即可。这里的难点主要在于认识每个“参数目录”的作用。当把配置参数正确地填写到“目录”中后，iSCSI服务端也可以提供共享资源服务了。',' BOLD[  第2步： ]BOLD 配置iSCSI服务端共享资源。targetcli是用于管理iSCSI服务端存储资源的专用配置命令，它能够提供类似于fdisk命令的交互式配置功能，将iSCSI共享资源的配置内容抽象成“目录”的形式，我们只需将各类配置信息填入到相应的“目录”中即可。这里的难点主要在于认识每个“参数目录”的作用。当把配置参数正确地填写到“目录”中后，iSCSI服务端也可以提供共享资源服务了。',0,'alvin',curdate());
insert into Content values(1343,14,'p',28,'{}','        在执行targetcli命令后就能看到交互式的配置界面了。在该界面中可以使用很多Linux命令，比如利用ls查看目录参数的结构，使用cd切换到不同的目录中。/backstores/block是iSCSI服务端配置共享设备的位置。我们需要把刚刚创建的RAID 5磁盘阵列md0文件加入到配置共享设备的“资源池”中，并将该文件重新命名为disk0，这样用户就不会知道是由服务器中的哪块硬盘来提供共享存储资源，而只会看到一个名为disk0的存储设备。','        在执行targetcli命令后就能看到交互式的配置界面了。在该界面中可以使用很多Linux命令，比如利用ls查看目录参数的结构，使用cd切换到不同的目录中。/backstores/block是iSCSI服务端配置共享设备的位置。我们需要把刚刚创建的RAID 5磁盘阵列md0文件加入到配置共享设备的“资源池”中，并将该文件重新命名为disk0，这样用户就不会知道是由服务器中的哪块硬盘来提供共享存储资源，而只会看到一个名为disk0的存储设备。',0,'alvin',curdate());
insert into Content values(1344,14,'pre',29,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# targetcli
Warning: Could not load preferences file /root/.targetcli/prefs.bin.
targetcli shell version 2.1.fb34
Copyright 2011-2013 by Datera, Inc and others.
For help on commands, type \'help\'.
/> ls
o- / ..................................................................... [...]
o- backstores .......................................................... [...]
| o- block .............................................. [Storage Objects: 0]
| o- fileio ............................................. [Storage Objects: 0]
| o- pscsi .............................................. [Storage Objects: 0]
| o- ramdisk ............................................ [Storage Objects: 0]
o- iscsi ........................................................ [Targets: 0]
o- loopback ..................................................... [Targets: 0
/> cd /backstores/block
/backstores/block> create disk0 /dev/md0
Created block storage object disk0 using /dev/md0.
/backstores/block> cd /
/> ls
o- / ..................................................................... [...]
  o- backstores .......................................................... [...]
  | o- block .............................................. [Storage Objects: 1]
  | | o- disk0 ..................... [/dev/md0 (40.0GiB) write-thru deactivated]
  | o- fileio ............................................. [Storage Objects: 0]
  | o- pscsi .............................................. [Storage Objects: 0]
  | o- ramdisk ............................................ [Storage Objects: 0]
  o- iscsi ........................................................ [Targets: 0]
  o- loopback ..................................................... [Targets: 0]
','[root@linuxprobe ~]# targetcli
Warning: Could not load preferences file /root/.targetcli/prefs.bin.
targetcli shell version 2.1.fb34
Copyright 2011-2013 by Datera, Inc and others.
For help on commands, type \'help\'.
/> ls
o- / ..................................................................... [...]
o- backstores .......................................................... [...]
| o- block .............................................. [Storage Objects: 0]
| o- fileio ............................................. [Storage Objects: 0]
| o- pscsi .............................................. [Storage Objects: 0]
| o- ramdisk ............................................ [Storage Objects: 0]
o- iscsi ........................................................ [Targets: 0]
o- loopback ..................................................... [Targets: 0
/> cd /backstores/block
/backstores/block> create disk0 /dev/md0
Created block storage object disk0 using /dev/md0.
/backstores/block> cd /
/> ls
o- / ..................................................................... [...]
  o- backstores .......................................................... [...]
  | o- block .............................................. [Storage Objects: 1]
  | | o- disk0 ..................... [/dev/md0 (40.0GiB) write-thru deactivated]
  | o- fileio ............................................. [Storage Objects: 0]
  | o- pscsi .............................................. [Storage Objects: 0]
  | o- ramdisk ............................................ [Storage Objects: 0]
  o- iscsi ........................................................ [Targets: 0]
  o- loopback ..................................................... [Targets: 0]
',0,'alvin',curdate());
insert into Content values(1345,14,'p',30,'{}',' BOLD[  第3步： ]BOLD 创建iSCSI target名称及配置共享资源。iSCSI target名称是由系统自动生成的，这是一串用于描述共享资源的唯一字符串。稍后用户在扫描iSCSI服务端时即可看到这个字符串，因此我们不需要记住它。系统在生成这个target名称后，还会在/iscsi参数目录中创建一个与其字符串同名的新“目录”用来存放共享资源。我们需要把前面加入到iSCSI共享资源池中的硬盘设备添加到这个新目录中，这样用户在登录iSCSI服务端后，即可默认使用这硬盘设备提供的共享存储资源了。',' BOLD[  第3步： ]BOLD 创建iSCSI target名称及配置共享资源。iSCSI target名称是由系统自动生成的，这是一串用于描述共享资源的唯一字符串。稍后用户在扫描iSCSI服务端时即可看到这个字符串，因此我们不需要记住它。系统在生成这个target名称后，还会在/iscsi参数目录中创建一个与其字符串同名的新“目录”用来存放共享资源。我们需要把前面加入到iSCSI共享资源池中的硬盘设备添加到这个新目录中，这样用户在登录iSCSI服务端后，即可默认使用这硬盘设备提供的共享存储资源了。',0,'alvin',curdate());
insert into Content values(1346,14,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','/> cd iscsi
/iscsi> 
/iscsi> create
Created target iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80.
Created TPG 1.
/iscsi> cd iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80/
/iscsi/iqn.20....d497c356ad80> ls
o- iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 ...... [TPGs: 1]
  o- tpg1 ............................................... [no-gen-acls, no-auth]
    o- acls .......................................................... [ACLs: 0]
    o- luns .......................................................... [LUNs: 0]
    o- portals .................................................... [Portals: 0]
/iscsi/iqn.20....d497c356ad80> cd tpg1/luns
/iscsi/iqn.20...d80/tpg1/luns> create /backstores/block/disk0 
Created LUN 0.
','/> cd iscsi
/iscsi> 
/iscsi> create
Created target iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80.
Created TPG 1.
/iscsi> cd iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80/
/iscsi/iqn.20....d497c356ad80> ls
o- iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 ...... [TPGs: 1]
  o- tpg1 ............................................... [no-gen-acls, no-auth]
    o- acls .......................................................... [ACLs: 0]
    o- luns .......................................................... [LUNs: 0]
    o- portals .................................................... [Portals: 0]
/iscsi/iqn.20....d497c356ad80> cd tpg1/luns
/iscsi/iqn.20...d80/tpg1/luns> create /backstores/block/disk0 
Created LUN 0.
',0,'alvin',curdate());
insert into Content values(1347,14,'p',32,'{}',' BOLD[  第4步： ]BOLD 设置访问控制列表（ACL）。iSCSI协议是通过客户端名称进行验证的，也就是说，用户在访问存储共享资源时不需要输入密码，只要iSCSI客户端的名称与服务端中设置的访问控制列表中某一名称条目一致即可，因此需要在iSCSI服务端的配置文件中写入一串能够验证用户信息的名称。acls参数目录用于存放能够访问iSCSI服务端共享存储资源的客户端名称。刘遄老师推荐在刚刚系统生成的iSCSI target后面追加上类似于:client的参数，这样既能保证客户端的名称具有唯一性，又非常便于管理和阅读：',' BOLD[  第4步： ]BOLD 设置访问控制列表（ACL）。iSCSI协议是通过客户端名称进行验证的，也就是说，用户在访问存储共享资源时不需要输入密码，只要iSCSI客户端的名称与服务端中设置的访问控制列表中某一名称条目一致即可，因此需要在iSCSI服务端的配置文件中写入一串能够验证用户信息的名称。acls参数目录用于存放能够访问iSCSI服务端共享存储资源的客户端名称。刘遄老师推荐在刚刚系统生成的iSCSI target后面追加上类似于:client的参数，这样既能保证客户端的名称具有唯一性，又非常便于管理和阅读：',0,'alvin',curdate());
insert into Content values(1348,14,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','/iscsi/iqn.20...d80/tpg1/luns> cd ..
/iscsi/iqn.20...c356ad80/tpg1> cd acls 
/iscsi/iqn.20...d80/tpg1/acls> create iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client
Created Node ACL for iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client
Created mapped LUN 0.
','/iscsi/iqn.20...d80/tpg1/luns> cd ..
/iscsi/iqn.20...c356ad80/tpg1> cd acls 
/iscsi/iqn.20...d80/tpg1/acls> create iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client
Created Node ACL for iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client
Created mapped LUN 0.
',0,'alvin',curdate());
insert into Content values(1349,14,'p',34,'{}',' BOLD[  第5步： ]BOLD 设置iSCSI服务端的监听IP地址和端口号。位于生产环境中的服务器上可能有多块网卡，那么到底是由哪个网卡或IP地址对外提供共享存储资源呢？这就需要我们在配置文件中手动定义iSCSI服务端的信息，即在portals参数目录中写上服务器的IP地址。接下来将由系统自动开启服务器192.168.10.10的3260端口将向外提供iSCSI共享存储资源服务：',' BOLD[  第5步： ]BOLD 设置iSCSI服务端的监听IP地址和端口号。位于生产环境中的服务器上可能有多块网卡，那么到底是由哪个网卡或IP地址对外提供共享存储资源呢？这就需要我们在配置文件中手动定义iSCSI服务端的信息，即在portals参数目录中写上服务器的IP地址。接下来将由系统自动开启服务器192.168.10.10的3260端口将向外提供iSCSI共享存储资源服务：',0,'alvin',curdate());
insert into Content values(1350,14,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','/iscsi/iqn.20...d80/tpg1/acls> cd ..
/iscsi/iqn.20...c356ad80/tpg1> cd portals 
/iscsi/iqn.20.../tpg1/portals> create 192.168.10.10
Using default IP port 3260
Created network portal 192.168.10.10:3260.
','/iscsi/iqn.20...d80/tpg1/acls> cd ..
/iscsi/iqn.20...c356ad80/tpg1> cd portals 
/iscsi/iqn.20.../tpg1/portals> create 192.168.10.10
Using default IP port 3260
Created network portal 192.168.10.10:3260.
',0,'alvin',curdate());
insert into Content values(1351,14,'p',36,'{}',' BOLD[  第6步： ]BOLD 配置妥当后检查配置信息，重启iSCSI服务端程序并配置防火墙策略。在参数文件配置妥当后，可以浏览刚刚配置的信息，确保与下面的信息基本一致。在确认信息无误后输入exit命令来退出配置。注意，千万不要习惯性地按Ctrl + C组合键结束进程，这样不会保存配置文件，我们的工作也就白费了。最后重启iSCSI服务端程序，再设置firewalld防火墙策略，使其放行3260/tcp端口号的流量。',' BOLD[  第6步： ]BOLD 配置妥当后检查配置信息，重启iSCSI服务端程序并配置防火墙策略。在参数文件配置妥当后，可以浏览刚刚配置的信息，确保与下面的信息基本一致。在确认信息无误后输入exit命令来退出配置。注意，千万不要习惯性地按Ctrl + C组合键结束进程，这样不会保存配置文件，我们的工作也就白费了。最后重启iSCSI服务端程序，再设置firewalld防火墙策略，使其放行3260/tcp端口号的流量。',0,'alvin',curdate());
insert into Content values(1352,14,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','/iscsi/iqn.20.../tpg1/portals> ls /
o- / ........................... [...]
  o- backstores................. [...]
  | o- block ................... [Storage Objects: 1]
  | | o- disk0 ................. [/dev/md0 (40.0GiB) write-thru activated]
  | o- fileio .................. [Storage Objects: 0]
  | o- pscsi ................... [Storage Objects: 0]
  | o- ramdisk ................. [Storage Objects: 0]
  o- iscsi ..................... [Targets: 1]
  | o- iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 .... [TPGs: 1]
  |   o- tpg1 .................. [no-gen-acls, no-auth]
  |     o- acls ........................................................ [ACLs: 1]
  |     | o- iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client [Mapped LUNs: 1]
  |     |   o- mapped_lun0 ............................................. [lun0 block/disk0 (rw)]  
    o- luns .................... [LUNs: 1]
  |     | o- lun0 .............. [block/disk0 (/dev/md0)]
  |     o- portals ............. [Portals: 1]
  |       o- 192.168.10.10:3260  [OK]
  o- loopback .................. [Targets: 0]
/> exit
Global pref auto_save_on_exit=true
Last 10 configs saved in /etc/target/backup.
Configuration saved to /etc/target/saveconfig.json
[root@linuxprobe ~]# systemctl restart targetd
[root@linuxprobe ~]# firewall-cmd --permanent --add-port=3260/tcp 
success 
[root@linuxprobe ~]# firewall-cmd --reload 
success
','/iscsi/iqn.20.../tpg1/portals> ls /
o- / ........................... [...]
  o- backstores................. [...]
  | o- block ................... [Storage Objects: 1]
  | | o- disk0 ................. [/dev/md0 (40.0GiB) write-thru activated]
  | o- fileio .................. [Storage Objects: 0]
  | o- pscsi ................... [Storage Objects: 0]
  | o- ramdisk ................. [Storage Objects: 0]
  o- iscsi ..................... [Targets: 1]
  | o- iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 .... [TPGs: 1]
  |   o- tpg1 .................. [no-gen-acls, no-auth]
  |     o- acls ........................................................ [ACLs: 1]
  |     | o- iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client [Mapped LUNs: 1]
  |     |   o- mapped_lun0 ............................................. [lun0 block/disk0 (rw)]  
    o- luns .................... [LUNs: 1]
  |     | o- lun0 .............. [block/disk0 (/dev/md0)]
  |     o- portals ............. [Portals: 1]
  |       o- 192.168.10.10:3260  [OK]
  o- loopback .................. [Targets: 0]
/> exit
Global pref auto_save_on_exit=true
Last 10 configs saved in /etc/target/backup.
Configuration saved to /etc/target/saveconfig.json
[root@linuxprobe ~]# systemctl restart targetd
[root@linuxprobe ~]# firewall-cmd --permanent --add-port=3260/tcp 
success 
[root@linuxprobe ~]# firewall-cmd --reload 
success
',0,'alvin',curdate());
insert into Content values(1353,14,'h2',38,'{}','配置Linux客户端','配置Linux客户端',0,'alvin',curdate());
insert into Content values(1354,14,'p',39,'{}','        我们在前面的章节中已经配置了很多Linux服务，基本上可以说，无论是什么服务，客户端的配置步骤都要比服务端的配置步骤简单一些。在RHEL 7系统中，已经默认安装了iSCSI客户端服务程序initiator。如果您的系统没有安装的话，可以使用Yum软件仓库手动安装。','        我们在前面的章节中已经配置了很多Linux服务，基本上可以说，无论是什么服务，客户端的配置步骤都要比服务端的配置步骤简单一些。在RHEL 7系统中，已经默认安装了iSCSI客户端服务程序initiator。如果您的系统没有安装的话，可以使用Yum软件仓库手动安装。',0,'alvin',curdate());
insert into Content values(1355,14,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install iscsi-initiator-utils 
Loaded plugins: langpacks, product-id, subscription-manager 
Package iscsi-initiator-utils-6.2.0.873-21.el7.x86_64 already installed and latest version 
Nothing to do
','[root@linuxprobe ~]# yum install iscsi-initiator-utils 
Loaded plugins: langpacks, product-id, subscription-manager 
Package iscsi-initiator-utils-6.2.0.873-21.el7.x86_64 already installed and latest version 
Nothing to do
',0,'alvin',curdate());
insert into Content values(1356,14,'p',41,'{}','        前面讲到，iSCSI协议是通过客户端的名称来进行验证，而该名称也是iSCSI客户端的唯一标识，而且必须与服务端配置文件中访问控制列表中的信息一致，否则客户端在尝试访问存储共享设备时，系统会弹出验证失败的保存信息。','        前面讲到，iSCSI协议是通过客户端的名称来进行验证，而该名称也是iSCSI客户端的唯一标识，而且必须与服务端配置文件中访问控制列表中的信息一致，否则客户端在尝试访问存储共享设备时，系统会弹出验证失败的保存信息。',0,'alvin',curdate());
insert into Content values(1357,14,'p',42,'{}','        下面我们编辑iSCSI客户端中的initiator名称文件，把服务端的访问控制列表名称填写进来，然后重启客户端iscsid服务程序并将其加入到开机启动项中：','        下面我们编辑iSCSI客户端中的initiator名称文件，把服务端的访问控制列表名称填写进来，然后重启客户端iscsid服务程序并将其加入到开机启动项中：',0,'alvin',curdate());
insert into Content values(1358,14,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/iscsi/initiatorname.iscsi
InitiatorName=iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client
[root@linuxprobe ~]# systemctl restart iscsid
[root@linuxprobe ~]# systemctl enable iscsid
 ln -s \'/usr/lib/systemd/system/iscsid.service\' \'/etc/systemd/system/multi-user.target.wants/iscsid.service\'
','[root@linuxprobe ~]# vim /etc/iscsi/initiatorname.iscsi
InitiatorName=iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80:client
[root@linuxprobe ~]# systemctl restart iscsid
[root@linuxprobe ~]# systemctl enable iscsid
 ln -s \'/usr/lib/systemd/system/iscsid.service\' \'/etc/systemd/system/multi-user.target.wants/iscsid.service\'
',0,'alvin',curdate());
insert into Content values(1359,14,'p',44,'{}','        iSCSI客户端访问并使用共享存储资源的步骤很简单，只需要记住刘遄老师的一个小口诀“先发现，再登录，最后挂载并使用”。iscsiadm是用于管理、查询、插入、更新或删除iSCSI数据库配置文件的命令行工具，用户需要先使用这个工具扫描发现远程iSCSI服务端，然后查看找到的服务端上有哪些可用的共享存储资源。其中，-m discovery参数的目的是扫描并发现可用的存储资源，-t st参数为执行扫描操作的类型，-p 192.168.10.10参数为iSCSI服务端的IP地址：','        iSCSI客户端访问并使用共享存储资源的步骤很简单，只需要记住刘遄老师的一个小口诀“先发现，再登录，最后挂载并使用”。iscsiadm是用于管理、查询、插入、更新或删除iSCSI数据库配置文件的命令行工具，用户需要先使用这个工具扫描发现远程iSCSI服务端，然后查看找到的服务端上有哪些可用的共享存储资源。其中，-m discovery参数的目的是扫描并发现可用的存储资源，-t st参数为执行扫描操作的类型，-p 192.168.10.10参数为iSCSI服务端的IP地址：',0,'alvin',curdate());
insert into Content values(1360,14,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iscsiadm -m discovery -t st -p 192.168.10.10
192.168.10.10:3260,1 iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80
','[root@linuxprobe ~]# iscsiadm -m discovery -t st -p 192.168.10.10
192.168.10.10:3260,1 iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80
',0,'alvin',curdate());
insert into Content values(1361,14,'p',46,'{}','        在使用iscsiadm命令发现了远程服务器上可用的存储资源后，接下来准备登录iSCSI服务端。其中，-m node参数为将客户端所在主机作为一台节点服务器，-T  iqn.2003-01. org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80参数为要使用的存储资源（大家可以直接复制前面命令中扫描发现的结果，以免录入错误），-p 192.168.10.10参数依然为对方iSCSI服务端的IP地址。最后使用--login或-l参数进行登录验证。','        在使用iscsiadm命令发现了远程服务器上可用的存储资源后，接下来准备登录iSCSI服务端。其中，-m node参数为将客户端所在主机作为一台节点服务器，-T  iqn.2003-01. org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80参数为要使用的存储资源（大家可以直接复制前面命令中扫描发现的结果，以免录入错误），-p 192.168.10.10参数依然为对方iSCSI服务端的IP地址。最后使用--login或-l参数进行登录验证。',0,'alvin',curdate());
insert into Content values(1362,14,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 -p 192.168.10.10 --login
Logging in to [iface: default, target: iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80, portal: 192.168.10.10,3260] (multiple)
Login to [iface: default, target: iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80, portal: 192.168.10.10,3260] successful.
','[root@linuxprobe ~]# iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 -p 192.168.10.10 --login
Logging in to [iface: default, target: iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80, portal: 192.168.10.10,3260] (multiple)
Login to [iface: default, target: iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80, portal: 192.168.10.10,3260] successful.
',0,'alvin',curdate());
insert into Content values(1363,14,'p',48,'{}','        在iSCSI客户端成功登录之后，会在客户端主机上多出一块名为/dev/sdb的设备文件。第6章曾经讲过，udev服务在命名硬盘名称时，与硬盘插槽是没有关系的。接下来可以像使用本地主机上的硬盘那样来操作这个设备文件了。','        在iSCSI客户端成功登录之后，会在客户端主机上多出一块名为/dev/sdb的设备文件。第6章曾经讲过，udev服务在命名硬盘名称时，与硬盘插槽是没有关系的。接下来可以像使用本地主机上的硬盘那样来操作这个设备文件了。',0,'alvin',curdate());
insert into Content values(1364,14,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# file /dev/sdb 
/dev/sdb: block special
','[root@linuxprobe ~]# file /dev/sdb 
/dev/sdb: block special
',0,'alvin',curdate());
insert into Content values(1365,14,'p',50,'{}','        下面进入标准的磁盘操作流程。考虑到大家已经在第6章学习了这部分内容，外加这个设备文件本身只有40GB的容量，因此我们不再进行分区，而是直接格式化并挂载使用。','        下面进入标准的磁盘操作流程。考虑到大家已经在第6章学习了这部分内容，外加这个设备文件本身只有40GB的容量，因此我们不再进行分区，而是直接格式化并挂载使用。',0,'alvin',curdate());
insert into Content values(1366,14,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkfs.xfs /dev/sdb
log stripe unit (524288 bytes) is too large (maximum is 256KiB)
log stripe unit adjusted to 32KiB
meta-data=/dev/sdb               isize=256    agcount=16, agsize=654720 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=0
data     =                       bsize=4096   blocks=10475520, imaxpct=25
         =                       sunit=128    swidth=256 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=0
log      =internal log           bsize=4096   blocks=5120, version=2
         =                       sectsz=512   sunit=8 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@linuxprobe ~]# mkdir /iscsi
[root@linuxprobe ~]# mount /dev/sdb /iscsi
[root@linuxprobe ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/rhel-root   18G  3.4G   15G  20% /
devtmpfs               734M     0  734M   0% /dev
tmpfs                  742M  176K  742M   1% /dev/shm
tmpfs                  742M  8.8M  734M   2% /run
tmpfs                  742M     0  742M   0% /sys/fs/cgroup
/dev/sr0               3.5G  3.5G     0 100% /media/cdrom
/dev/sda1              497M  119M  379M  24% /boot
/dev/sdb                40G   33M   40G   1% /iscsi
','[root@linuxprobe ~]# mkfs.xfs /dev/sdb
log stripe unit (524288 bytes) is too large (maximum is 256KiB)
log stripe unit adjusted to 32KiB
meta-data=/dev/sdb               isize=256    agcount=16, agsize=654720 blks
         =                       sectsz=512   attr=2, projid32bit=1
         =                       crc=0
data     =                       bsize=4096   blocks=10475520, imaxpct=25
         =                       sunit=128    swidth=256 blks
naming   =version 2              bsize=4096   ascii-ci=0 ftype=0
log      =internal log           bsize=4096   blocks=5120, version=2
         =                       sectsz=512   sunit=8 blks, lazy-count=1
realtime =none                   extsz=4096   blocks=0, rtextents=0
[root@linuxprobe ~]# mkdir /iscsi
[root@linuxprobe ~]# mount /dev/sdb /iscsi
[root@linuxprobe ~]# df -h
Filesystem             Size  Used Avail Use% Mounted on
/dev/mapper/rhel-root   18G  3.4G   15G  20% /
devtmpfs               734M     0  734M   0% /dev
tmpfs                  742M  176K  742M   1% /dev/shm
tmpfs                  742M  8.8M  734M   2% /run
tmpfs                  742M     0  742M   0% /sys/fs/cgroup
/dev/sr0               3.5G  3.5G     0 100% /media/cdrom
/dev/sda1              497M  119M  379M  24% /boot
/dev/sdb                40G   33M   40G   1% /iscsi
',0,'alvin',curdate());
insert into Content values(1367,14,'p',52,'{}','        从此以后，这个设备文件就如同是客户端本机主机上的硬盘那样工作。需要提醒大家的是，由于udev服务是按照系统识别硬盘设备的顺序来命名硬盘设备的，当客户端主机同时使用多个远程存储资源时，如果下一次识别远程设备的顺序发生了变化，则客户端挂载目录中的文件也将随之混乱。为了防止发生这样的问题，我们应该在/etc/fstab配置文件中使用设备的UUID唯一标识符进行挂载，这样，不论远程设备资源的识别顺序再怎么变化，系统也能正确找到设备所对应的目录。','        从此以后，这个设备文件就如同是客户端本机主机上的硬盘那样工作。需要提醒大家的是，由于udev服务是按照系统识别硬盘设备的顺序来命名硬盘设备的，当客户端主机同时使用多个远程存储资源时，如果下一次识别远程设备的顺序发生了变化，则客户端挂载目录中的文件也将随之混乱。为了防止发生这样的问题，我们应该在/etc/fstab配置文件中使用设备的UUID唯一标识符进行挂载，这样，不论远程设备资源的识别顺序再怎么变化，系统也能正确找到设备所对应的目录。',0,'alvin',curdate());
insert into Content values(1368,14,'p',53,'{}','        blkid命令用于查看设备的名称、文件系统及UUID。可以使用管道符（详见第3章）进行过滤，只显示与/dev/sdb设备相关的信息：','        blkid命令用于查看设备的名称、文件系统及UUID。可以使用管道符（详见第3章）进行过滤，只显示与/dev/sdb设备相关的信息：',0,'alvin',curdate());
insert into Content values(1369,14,'pre',54,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# blkid | grep /dev/sdb
/dev/sdb: UUID="eb9cbf2f-fce8-413a-b770-8b0f243e8ad6" TYPE="xfs" 
','[root@linuxprobe ~]# blkid | grep /dev/sdb
/dev/sdb: UUID="eb9cbf2f-fce8-413a-b770-8b0f243e8ad6" TYPE="xfs" 
',0,'alvin',curdate());
insert into Content values(1370,14,'p',55,'{}','        老师还要再啰嗦一句，由于/dev/sdb是一块网络存储设备，而iSCSI协议是基于TCP/IP网络传输数据的，因此必须在/etc/fstab配置文件中添加上_netdev参数，表示当系统联网后再进行挂载操作，以免系统开机时间过长或开机失败：','        老师还要再啰嗦一句，由于/dev/sdb是一块网络存储设备，而iSCSI协议是基于TCP/IP网络传输数据的，因此必须在/etc/fstab配置文件中添加上_netdev参数，表示当系统联网后再进行挂载操作，以免系统开机时间过长或开机失败：',0,'alvin',curdate());
insert into Content values(1371,14,'pre',56,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/fstab
#
# /etc/fstab
# Created by anaconda on Wed May 4 19:26:23 2017
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root / xfs defaults 1 1
UUID=812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot xfs defaults 1 2
/dev/mapper/rhel-swap swap swap defaults 0 0
/dev/cdrom /media/cdrom iso9660 defaults 0 0 
UUID=eb9cbf2f-fce8-413a-b770-8b0f243e8ad6 /iscsi xfs defaults,_netdev 0 0
','[root@linuxprobe ~]# vim /etc/fstab
#
# /etc/fstab
# Created by anaconda on Wed May 4 19:26:23 2017
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root / xfs defaults 1 1
UUID=812b1f7c-8b5b-43da-8c06-b9999e0fe48b /boot xfs defaults 1 2
/dev/mapper/rhel-swap swap swap defaults 0 0
/dev/cdrom /media/cdrom iso9660 defaults 0 0 
UUID=eb9cbf2f-fce8-413a-b770-8b0f243e8ad6 /iscsi xfs defaults,_netdev 0 0
',0,'alvin',curdate());
insert into Content values(1372,14,'p',57,'{}','        如果我们不再需要使用iSCSI共享设备资源了，可以用iscsiadm命令的-u参数将其设备卸载：','        如果我们不再需要使用iSCSI共享设备资源了，可以用iscsiadm命令的-u参数将其设备卸载：',0,'alvin',curdate());
insert into Content values(1373,14,'pre',58,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 -u

Logging out of session [sid: 7, target : iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80, portal: 192.168.10.10,3260]

Logout of [sid: 7, target: iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80,portal:192.168.10.10,3260] successful.
','[root@linuxprobe ~]# iscsiadm -m node -T iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80 -u

Logging out of session [sid: 7, target : iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80, portal: 192.168.10.10,3260]

Logout of [sid: 7, target: iqn.2003-01.org.linux-iscsi.linuxprobe.x8664:sn.d497c356ad80,portal:192.168.10.10,3260] successful.
',0,'alvin',curdate());
insert into Content values(1374,14,'h2',59,'{}','配置Windows客户端','配置Windows客户端',0,'alvin',curdate());
insert into Content values(1375,14,'p',60,'{}','        使用Windows系统的客户端也可以正常访问iSCSI服务器上的共享存储资源，而且操作原理及步骤与Linux系统的客户端基本相同。在进行下面的实验之前，请先关闭Linux系统客户端，以免这两台客户端主机同时使用iSCSI共享存储资源而产生潜在问题。下面按照下表来配置iSCSI服务器和Windows客户端所用的IP地址。','        使用Windows系统的客户端也可以正常访问iSCSI服务器上的共享存储资源，而且操作原理及步骤与Linux系统的客户端基本相同。在进行下面的实验之前，请先关闭Linux系统客户端，以免这两台客户端主机同时使用iSCSI共享存储资源而产生潜在问题。下面按照下表来配置iSCSI服务器和Windows客户端所用的IP地址。',0,'alvin',curdate());
insert into Content values(1376,14,'table',61,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
iSCSI服务端	RHEL 7	192.168.10.10
Windows客户端	Windows 7	192.168.10.30','主机名称	操作系统	IP地址
iSCSI服务端	RHEL 7	192.168.10.10
Windows客户端	Windows 7	192.168.10.30',0,'alvin',curdate());
insert into Content values(1377,14,'p',62,'{}',' BOLD[  第1步： ]BOLD 运行iSCSI发起程序。在Windows 7操作系统中已经默认安装了iSCSI客户端程序，我们只需在控制面板中找到“系统和安全”标签，然后单击“管理工具”（见下图1），进入到“管理工具”页面后即可看到“iSCSI发起程序”图标。双击该图标。在第一次运行iSCSI发起程序时，系统会提示“Microsoft iSCSI服务端未运行”，单击“是”按钮即可自动启动并运行iSCSI发起程序，如下图2所示。',' BOLD[  第1步： ]BOLD 运行iSCSI发起程序。在Windows 7操作系统中已经默认安装了iSCSI客户端程序，我们只需在控制面板中找到“系统和安全”标签，然后单击“管理工具”（见下图1），进入到“管理工具”页面后即可看到“iSCSI发起程序”图标。双击该图标。在第一次运行iSCSI发起程序时，系统会提示“Microsoft iSCSI服务端未运行”，单击“是”按钮即可自动启动并运行iSCSI发起程序，如下图2所示。',0,'alvin',curdate());
insert into Content values(1378,14,'image',63,'{"alt": "set_windows", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_set_windows.png", "width": "676"}','/static/img/linux/linux_iscsi_set_windows.png','/static/img/linux/linux_iscsi_set_windows.png',0,'alvin',curdate());
insert into Content values(1379,14,'image',64,'{"alt": "click_icon", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_click_icon.png", "width": "676"}','/static/img/linux/linux_iscsi_click_icon.png','/static/img/linux/linux_iscsi_click_icon.png',0,'alvin',curdate());
insert into Content values(1380,14,'p',65,'{}',' BOLD[  第2步： ]BOLD 扫描发现iSCSI服务端上可用的存储资源。不论是Windows系统还是Linux系统，要想使用iSCSI共享存储资源都必须先进行扫描发现操作。运行iSCSI发起程序后在“目标”选项卡的“目标”文本框中写入iSCSI服务端的IP地址，然后单击“快速连接”按钮，如下图所示。',' BOLD[  第2步： ]BOLD 扫描发现iSCSI服务端上可用的存储资源。不论是Windows系统还是Linux系统，要想使用iSCSI共享存储资源都必须先进行扫描发现操作。运行iSCSI发起程序后在“目标”选项卡的“目标”文本框中写入iSCSI服务端的IP地址，然后单击“快速连接”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1381,14,'image',66,'{"alt": "input_details", "class": ["attachment-full"], "height": "632", "src": "/static/img/linux/linux_iscsi_input_details.png", "width": "676"}','/static/img/linux/linux_iscsi_input_details.png','/static/img/linux/linux_iscsi_input_details.png',0,'alvin',curdate());
insert into Content values(1382,14,'p',67,'{}','        在弹出的“快速连接”提示框中可看到共享的硬盘存储资源，单击“完成”按钮即可，如下图所示。','        在弹出的“快速连接”提示框中可看到共享的硬盘存储资源，单击“完成”按钮即可，如下图所示。',0,'alvin',curdate());
insert into Content values(1383,14,'image',68,'{"alt": "view_raid", "class": ["attachment-full"], "height": "652", "src": "/static/img/linux/linux_iscsi_view_raid.png", "width": "676"}','/static/img/linux/linux_iscsi_view_raid.png','/static/img/linux/linux_iscsi_view_raid.png',0,'alvin',curdate());
insert into Content values(1384,14,'p',69,'{}','        回到“目标”选项卡页面，可以看到共享存储资源的名称已经出现，如下图所示。','        回到“目标”选项卡页面，可以看到共享存储资源的名称已经出现，如下图所示。',0,'alvin',curdate());
insert into Content values(1385,14,'p',70,'{}',' BOLD[  第3步： ]BOLD 准备连接iSCSI服务端的共享存储资源。由于在iSCSI服务端程序上设置了ACL，使得只有客户端名称与ACL策略中的名称保持一致时才能使用远程存储资源，因此需要在“配置”选项卡中单击“更改”按钮，把iSCSI发起程序的名称修改为服务端',' BOLD[  第3步： ]BOLD 准备连接iSCSI服务端的共享存储资源。由于在iSCSI服务端程序上设置了ACL，使得只有客户端名称与ACL策略中的名称保持一致时才能使用远程存储资源，因此需要在“配置”选项卡中单击“更改”按钮，把iSCSI发起程序的名称修改为服务端',0,'alvin',curdate());
insert into Content values(1386,14,'image',71,'{"alt": "view_iscsi", "class": ["attachment-full"], "height": "652", "src": "/static/img/linux/linux_iscsi_view_iscsi.png", "width": "676"}','/static/img/linux/linux_iscsi_view_iscsi.png','/static/img/linux/linux_iscsi_view_iscsi.png',0,'alvin',curdate());
insert into Content values(1387,14,'image',72,'{"alt": "modify_client", "class": ["attachment-full"], "height": "652", "src": "/static/img/linux/linux_iscsi_modify_client.png", "width": "676"}','/static/img/linux/linux_iscsi_modify_client.png','/static/img/linux/linux_iscsi_modify_client.png',0,'alvin',curdate());
insert into Content values(1388,14,'p',73,'{}','        在确认客户端发起程序的名称修改正确后即可返回到“目标”选项卡页面中，然后单击“连接”按钮进行连接请求，成功连接到远程共享存储资源的页面如下图所示。','        在确认客户端发起程序的名称修改正确后即可返回到“目标”选项卡页面中，然后单击“连接”按钮进行连接请求，成功连接到远程共享存储资源的页面如下图所示。',0,'alvin',curdate());
insert into Content values(1389,14,'image',74,'{"alt": "succeed_connect", "class": ["attachment-full"], "height": "652", "src": "/static/img/linux/linux_iscsi_succeed_connect.png", "width": "676"}','/static/img/linux/linux_iscsi_succeed_connect.png','/static/img/linux/linux_iscsi_succeed_connect.png',0,'alvin',curdate());
insert into Content values(1390,14,'p',75,'{}',' BOLD[  第4步： ]BOLD 访问iSCSI远程共享存储资源。右键单击桌面上的“计算机”图标，打开计算机管理程序，如下图所示。',' BOLD[  第4步： ]BOLD 访问iSCSI远程共享存储资源。右键单击桌面上的“计算机”图标，打开计算机管理程序，如下图所示。',0,'alvin',curdate());
insert into Content values(1391,14,'image',76,'{"alt": "admin_setting", "class": ["attachment-full"], "height": "632", "src": "/static/img/linux/linux_iscsi_admin_setting.png", "width": "676"}','/static/img/linux/linux_iscsi_admin_setting.png','/static/img/linux/linux_iscsi_admin_setting.png',0,'alvin',curdate());
insert into Content values(1392,14,'p',77,'{}','        开始对磁盘进行初始化操作，如下图0所示。Windows系统用来初始化磁盘设备的步骤十分简单，各位读者都可以玩得转Linux系统，相信Windows系统就更不在话下了。Windows系统的初始化过程步骤如图1至图7所示。','        开始对磁盘进行初始化操作，如下图0所示。Windows系统用来初始化磁盘设备的步骤十分简单，各位读者都可以玩得转Linux系统，相信Windows系统就更不在话下了。Windows系统的初始化过程步骤如图1至图7所示。',0,'alvin',curdate());
insert into Content values(1393,14,'image',78,'{"alt": "init_0", "class": ["attachment-full"], "height": "632", "src": "/static/img/linux/linux_iscsi_init_0.png", "width": "676"}','/static/img/linux/linux_iscsi_init_0.png','/static/img/linux/linux_iscsi_init_0.png',0,'alvin',curdate());
insert into Content values(1394,14,'image',79,'{"alt": "init_1", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_1.png", "width": "676"}','/static/img/linux/linux_iscsi_init_1.png','/static/img/linux/linux_iscsi_init_1.png',0,'alvin',curdate());
insert into Content values(1395,14,'image',80,'{"alt": "init_2", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_2.png", "width": "676"}','/static/img/linux/linux_iscsi_init_2.png','/static/img/linux/linux_iscsi_init_2.png',0,'alvin',curdate());
insert into Content values(1396,14,'image',81,'{"alt": "init_3", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_3.png", "width": "676"}','/static/img/linux/linux_iscsi_init_3.png','/static/img/linux/linux_iscsi_init_3.png',0,'alvin',curdate());
insert into Content values(1397,14,'image',82,'{"alt": "init_4", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_4.png", "width": "676"}','/static/img/linux/linux_iscsi_init_4.png','/static/img/linux/linux_iscsi_init_4.png',0,'alvin',curdate());
insert into Content values(1398,14,'image',83,'{"alt": "init_5", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_5.png", "width": "676"}','/static/img/linux/linux_iscsi_init_5.png','/static/img/linux/linux_iscsi_init_5.png',0,'alvin',curdate());
insert into Content values(1399,14,'image',84,'{"alt": "init_6", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_6.png", "width": "676"}','/static/img/linux/linux_iscsi_init_6.png','/static/img/linux/linux_iscsi_init_6.png',0,'alvin',curdate());
insert into Content values(1400,14,'image',85,'{"alt": "init_7", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_iscsi_init_7.png", "width": "676"}','/static/img/linux/linux_iscsi_init_7.png','/static/img/linux/linux_iscsi_init_7.png',0,'alvin',curdate());
insert into Content values(1401,15,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用MariaDB数据库管理系统',' <span class="color_h1">  Linux </span> 使用MariaDB数据库管理系统',0,'alvin',curdate());
insert into Content values(1402,15,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1403,15,'p',3,'{}','        MySQL数据库项目自从被Oracle公司收购之后，从开源软件转变成为了“闭源”软件，这导致IT行业中的很多企业以及厂商纷纷选择使用了数据库软件的后起之秀—MariaDB数据库管理系统。MariaDB数据库管理系统也因此快速占据了市场。','        MySQL数据库项目自从被Oracle公司收购之后，从开源软件转变成为了“闭源”软件，这导致IT行业中的很多企业以及厂商纷纷选择使用了数据库软件的后起之秀—MariaDB数据库管理系统。MariaDB数据库管理系统也因此快速占据了市场。',0,'alvin',curdate());
insert into Content values(1404,15,'p',4,'{}','        本章将介绍数据库以及数据库管理系统的理论知识，然后再介绍MariaDB数据库管理系统的内容，最后将通过动手实验的方式，帮助各位读者掌握MariaDB数据库管理系统的一些常规操作。比如，账户的创建与管理、账户权限的授权；新建数据库、新建数据库表单；对数据库执行新建、删除、修改和查询等操作。本章最后还介绍了数据库的备份与恢复方法。','        本章将介绍数据库以及数据库管理系统的理论知识，然后再介绍MariaDB数据库管理系统的内容，最后将通过动手实验的方式，帮助各位读者掌握MariaDB数据库管理系统的一些常规操作。比如，账户的创建与管理、账户权限的授权；新建数据库、新建数据库表单；对数据库执行新建、删除、修改和查询等操作。本章最后还介绍了数据库的备份与恢复方法。',0,'alvin',curdate());
insert into Content values(1405,15,'h2',5,'{}','数据库管理系统','数据库管理系统',0,'alvin',curdate());
insert into Content values(1406,15,'p',6,'{}','        数据库是指按照某些特定结构来存储数据资料的数据仓库。在当今这个大数据技术迅速崛起的年代，互联网上每天都会生成海量的数据信息，数据库技术也从最初只能存储简单的表格数据的单一集中存储模式，发展到了现如今存储海量数据的大型分布式模式。在信息化社会中，能够充分有效地管理和利用各种数据，挖掘其中的价值，是进行科学研究与决策管理的重要前提。同时，数据库技术也是管理信息系统、办公自动化系统、决策支持系统等各类信息系统的核心组成部分，是进行科学研究和决策管理的重要技术手段。','        数据库是指按照某些特定结构来存储数据资料的数据仓库。在当今这个大数据技术迅速崛起的年代，互联网上每天都会生成海量的数据信息，数据库技术也从最初只能存储简单的表格数据的单一集中存储模式，发展到了现如今存储海量数据的大型分布式模式。在信息化社会中，能够充分有效地管理和利用各种数据，挖掘其中的价值，是进行科学研究与决策管理的重要前提。同时，数据库技术也是管理信息系统、办公自动化系统、决策支持系统等各类信息系统的核心组成部分，是进行科学研究和决策管理的重要技术手段。',0,'alvin',curdate());
insert into Content values(1407,15,'p',7,'{}','        数据库管理系统是一种能够对数据库中存放的数据进行建立、修改、删除、查找、维护等操作的软件程序。它通过把计算机中具体的物理数据转换成适合用户理解的抽象逻辑数据，有效地降低数据库管理的技术门槛，因此即便是从事Linux运维工作的工程师也可以对数据库进行基本的管理操作。但是，刘遄老师有必要提醒各位读者，本书的技术主线依然是Linux系统的运维，而数据库管理系统只不过是在此主线上的一个内容不断横向扩展、纵向加深的分支，不能指望在一两天之内就可以精通数据库管理技术。如果有读者在学完本章内容之后对数据库管理技术产生了浓厚兴趣，并希望谋得一份相关的工作，那么就需要额外为自己定制一个学习规划了。','        数据库管理系统是一种能够对数据库中存放的数据进行建立、修改、删除、查找、维护等操作的软件程序。它通过把计算机中具体的物理数据转换成适合用户理解的抽象逻辑数据，有效地降低数据库管理的技术门槛，因此即便是从事Linux运维工作的工程师也可以对数据库进行基本的管理操作。但是，刘遄老师有必要提醒各位读者，本书的技术主线依然是Linux系统的运维，而数据库管理系统只不过是在此主线上的一个内容不断横向扩展、纵向加深的分支，不能指望在一两天之内就可以精通数据库管理技术。如果有读者在学完本章内容之后对数据库管理技术产生了浓厚兴趣，并希望谋得一份相关的工作，那么就需要额外为自己定制一个学习规划了。',0,'alvin',curdate());
insert into Content values(1408,15,'image',8,'{"alt": "mariadb_logo", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_mariadb_logo.png", "width": "676"}','/static/img/linux/linux_mariadb_logo.png','/static/img/linux/linux_mariadb_logo.png',0,'alvin',curdate());
insert into Content values(1409,15,'p',9,'{}','        既然是讲解数据库管理技术，就肯定绕不开MySQL。MySQL是一款市场占有率非常高的数据库管理系统，技术成熟、配置步骤相对简单，而且具有良好的可扩展性。但是，由于Oracle公司在2009年收购了MySQL的母公司Sun，因此MySQL数据库项目也随之纳入Oracle麾下，逐步演变为保持着开源软件的身份，但又申请了多项商业专利的软件系统。开源软件是全球黑客、极客、程序员等技术高手在开源社区的大旗下的公共智慧结晶，自己的劳动成果被其他公司商业化自然也伤了一大批开源工作者的心，因此由MySQL项目创始者重新研发了一款名为MariaDB的全新数据库管理系统。该软件当前由开源社区进行维护，是MySQL的分支产品，而且几乎完全兼容MySQL。','        既然是讲解数据库管理技术，就肯定绕不开MySQL。MySQL是一款市场占有率非常高的数据库管理系统，技术成熟、配置步骤相对简单，而且具有良好的可扩展性。但是，由于Oracle公司在2009年收购了MySQL的母公司Sun，因此MySQL数据库项目也随之纳入Oracle麾下，逐步演变为保持着开源软件的身份，但又申请了多项商业专利的软件系统。开源软件是全球黑客、极客、程序员等技术高手在开源社区的大旗下的公共智慧结晶，自己的劳动成果被其他公司商业化自然也伤了一大批开源工作者的心，因此由MySQL项目创始者重新研发了一款名为MariaDB的全新数据库管理系统。该软件当前由开源社区进行维护，是MySQL的分支产品，而且几乎完全兼容MySQL。',0,'alvin',curdate());
insert into Content values(1410,15,'p',10,'{}','        与此同时，由于各大公司之间存在着竞争关系或利益关系，外加MySQL在被收购之后逐渐由开源向闭源软件转变，很多公司抛弃了MySQL。当前，谷歌、维基百科等技术领域决定将MySQL数据库上的业务转移到MariaDB数据库，Linux开源系统的领袖红帽公司也决定在RHEL 7、CentOS 7以及最新的Fedora系统中，将MariaDB作为默认的数据库管理系统，而且红帽公司更是首次将数据库知识加入到了RHCE认证的考试内容中。随后，还有数十个常见的Linux系统（如openSUSE、Slackware等）也作出了同样的表态。','        与此同时，由于各大公司之间存在着竞争关系或利益关系，外加MySQL在被收购之后逐渐由开源向闭源软件转变，很多公司抛弃了MySQL。当前，谷歌、维基百科等技术领域决定将MySQL数据库上的业务转移到MariaDB数据库，Linux开源系统的领袖红帽公司也决定在RHEL 7、CentOS 7以及最新的Fedora系统中，将MariaDB作为默认的数据库管理系统，而且红帽公司更是首次将数据库知识加入到了RHCE认证的考试内容中。随后，还有数十个常见的Linux系统（如openSUSE、Slackware等）也作出了同样的表态。',0,'alvin',curdate());
insert into Content values(1411,15,'p',11,'{}','        但是，坦白来讲，虽然IT行业巨头都决定采用MariaDB数据库管系统，这并不意味着MariaDB较之于MySQL有明显的优势。老师用了近两周的时间测试了MariaDB与MySQL的区别，并进行了多项性能测试，并没有发现媒体所说的那种明显的优势。可以说，MariaDB和MySQL在性能上基本保持一致，两者的操作命令也十分相似。从务实的角度来讲，在掌握了MariaDB数据库的命令和基本操作之后，在今后的工作中即使遇到MySQL数据库，也可以快速上手。所以，这两个数据库系统无论选择哪一个来学习都悉听君便，而本书之所以选择以MariaDB数据库进行讲解，主要是从RHCE认证考试和技术垄断的角度作的决定。','        但是，坦白来讲，虽然IT行业巨头都决定采用MariaDB数据库管系统，这并不意味着MariaDB较之于MySQL有明显的优势。老师用了近两周的时间测试了MariaDB与MySQL的区别，并进行了多项性能测试，并没有发现媒体所说的那种明显的优势。可以说，MariaDB和MySQL在性能上基本保持一致，两者的操作命令也十分相似。从务实的角度来讲，在掌握了MariaDB数据库的命令和基本操作之后，在今后的工作中即使遇到MySQL数据库，也可以快速上手。所以，这两个数据库系统无论选择哪一个来学习都悉听君便，而本书之所以选择以MariaDB数据库进行讲解，主要是从RHCE认证考试和技术垄断的角度作的决定。',0,'alvin',curdate());
insert into Content values(1412,15,'h2',12,'{}','初始化mariaDB服务','初始化mariaDB服务',0,'alvin',curdate());
insert into Content values(1413,15,'p',13,'{}','        相较于MySQL，MariaDB数据库管理系统有了很多新鲜的扩展特性，例如对微秒级别的支持、线程池、子查询优化、进程报告等。在配置妥当Yum软件仓库后，即可安装部署MariaDB数据库主程序及服务端程序了。','        相较于MySQL，MariaDB数据库管理系统有了很多新鲜的扩展特性，例如对微秒级别的支持、线程池、子查询优化、进程报告等。在配置妥当Yum软件仓库后，即可安装部署MariaDB数据库主程序及服务端程序了。',0,'alvin',curdate());
insert into Content values(1414,15,'p',14,'{}','        在安装完毕后，记得启动服务程序，并将其加入到开机启动项中。','        在安装完毕后，记得启动服务程序，并将其加入到开机启动项中。',0,'alvin',curdate());
insert into Content values(1415,15,'pre',15,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install mariadb mariadb-server
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 mariadb x86_64 1:5.5.35-3.el7 rhel 8.9 M
 mariadb-server x86_64 1:5.5.35-3.el7 rhel 11 M
Installing for dependencies:
 perl-Compress-Raw-Bzip2 x86_64 2.061-3.el7 rhel 32 k
 perl-Compress-Raw-Zlib x86_64 1:2.061-4.el7 rhel 57 k
 perl-DBD-MySQL x86_64 4.023-5.el7 rhel 140 k
 perl-DBI x86_64 1.627-4.el7 rhel 802 k
 perl-Data-Dumper x86_64 2.145-3.el7 rhel 47 k
 perl-IO-Compress noarch 2.061-2.el7 rhel 260 k
 perl-Net-Daemon noarch 0.48-5.el7 rhel 51 k
 perl-PlRPC noarch 0.2020-14.el7 rhel 36 k
Transaction Summary
================================================================================
Install 2 Packages (+8 Dependent packages)
Total download size: 21 M
Installed size: 107 M
Is this ok [y/d/N]: y 
Downloading packages:
--------------------------------------------------------------------------------
Total 82 MB/s | 21 MB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
………………省略部分输出信息………………
Installed:
 mariadb.x86_64 1:5.5.35-3.el7 mariadb-server.x86_64 1:5.5.35-3.el7 
Dependency Installed:
 perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 
 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 
 perl-DBD-MySQL.x86_64 0:4.023-5.el7 
 perl-DBI.x86_64 0:1.627-4.el7 
 perl-Data-Dumper.x86_64 0:2.145-3.el7 
 perl-IO-Compress.noarch 0:2.061-2.el7 
 perl-Net-Daemon.noarch 0:0.48-5.el7 
 perl-PlRPC.noarch 0:0.2020-14.el7
Complete!
[root@linuxprobe ~]# systemctl start mariadb 
[root@linuxprobe ~]# systemctl enable mariadb 
ln -s \'/usr/lib/systemd/system/mariadb.service\' \'/etc/systemd/system/multi-user.target.wants/mariadb.service\'
','[root@linuxprobe ~]# yum install mariadb mariadb-server
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分输出信息………………
Installing:
 mariadb x86_64 1:5.5.35-3.el7 rhel 8.9 M
 mariadb-server x86_64 1:5.5.35-3.el7 rhel 11 M
Installing for dependencies:
 perl-Compress-Raw-Bzip2 x86_64 2.061-3.el7 rhel 32 k
 perl-Compress-Raw-Zlib x86_64 1:2.061-4.el7 rhel 57 k
 perl-DBD-MySQL x86_64 4.023-5.el7 rhel 140 k
 perl-DBI x86_64 1.627-4.el7 rhel 802 k
 perl-Data-Dumper x86_64 2.145-3.el7 rhel 47 k
 perl-IO-Compress noarch 2.061-2.el7 rhel 260 k
 perl-Net-Daemon noarch 0.48-5.el7 rhel 51 k
 perl-PlRPC noarch 0.2020-14.el7 rhel 36 k
Transaction Summary
================================================================================
Install 2 Packages (+8 Dependent packages)
Total download size: 21 M
Installed size: 107 M
Is this ok [y/d/N]: y 
Downloading packages:
--------------------------------------------------------------------------------
Total 82 MB/s | 21 MB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
………………省略部分输出信息………………
Installed:
 mariadb.x86_64 1:5.5.35-3.el7 mariadb-server.x86_64 1:5.5.35-3.el7 
Dependency Installed:
 perl-Compress-Raw-Bzip2.x86_64 0:2.061-3.el7 
 perl-Compress-Raw-Zlib.x86_64 1:2.061-4.el7 
 perl-DBD-MySQL.x86_64 0:4.023-5.el7 
 perl-DBI.x86_64 0:1.627-4.el7 
 perl-Data-Dumper.x86_64 0:2.145-3.el7 
 perl-IO-Compress.noarch 0:2.061-2.el7 
 perl-Net-Daemon.noarch 0:0.48-5.el7 
 perl-PlRPC.noarch 0:0.2020-14.el7
Complete!
[root@linuxprobe ~]# systemctl start mariadb 
[root@linuxprobe ~]# systemctl enable mariadb 
ln -s \'/usr/lib/systemd/system/mariadb.service\' \'/etc/systemd/system/multi-user.target.wants/mariadb.service\'
',0,'alvin',curdate());
insert into Content values(1416,15,'p',16,'{}','        在确认MariaDB数据库软件程序安装完毕并成功启动后请不要立即使用。为了确保数据库的安全性和正常运转，需要先对数据库程序进行初始化操作。这个初始化操作涉及下面5个步骤。','        在确认MariaDB数据库软件程序安装完毕并成功启动后请不要立即使用。为了确保数据库的安全性和正常运转，需要先对数据库程序进行初始化操作。这个初始化操作涉及下面5个步骤。',0,'alvin',curdate());
insert into Content values(1417,15,'ol',17,'{}','设置root管理员在数据库中的密码值（注意，该密码并非root管理员在系统中的密码，这里的密码值默认应该为空，可直接按回车键）。
设置root管理员在数据库中的专有密码。
随后删除匿名账户，并使用root管理员从远程登录数据库，以确保数据库上运行的业务的安全性。
删除默认的测试数据库，取消测试数据库的一系列访问权限。
刷新授权列表，让初始化的设定立即生效。','设置root管理员在数据库中的密码值（注意，该密码并非root管理员在系统中的密码，这里的密码值默认应该为空，可直接按回车键）。
设置root管理员在数据库中的专有密码。
随后删除匿名账户，并使用root管理员从远程登录数据库，以确保数据库上运行的业务的安全性。
删除默认的测试数据库，取消测试数据库的一系列访问权限。
刷新授权列表，让初始化的设定立即生效。',0,'alvin',curdate());
insert into Content values(1418,15,'p',18,'{}','        对于上述数据库初始化的操作步骤，刘遄老师已经在下面的输出信息旁边进行了简单注释，确保各位读者更直观地了解要输入的内容：','        对于上述数据库初始化的操作步骤，刘遄老师已经在下面的输出信息旁边进行了简单注释，确保各位读者更直观地了解要输入的内容：',0,'alvin',curdate());
insert into Content values(1419,15,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysql_secure_installation 
/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found
NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!
In order to log into MariaDB to secure it, we\'ll need the current
password for the root user.  If you\'ve just installed MariaDB, and
you haven\'t set the root password yet, the password will be blank,
so you should just press enter here.
Enter current password for root (enter for none):  当前数据库密码为空，直接按回车键
OK, successfully used password, moving on...
Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.
Set root password? [Y/n] y
New password:输入要为root管理员设置的数据库密码
Re-enter new password:再次输入密码
Password updated successfully!
Reloading privilege tables..
 ... Success!
By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
Remove anonymous users? [Y/n] y（删除匿名账户）
... Success!
Normally, root should only be allowed to connect from \'localhost\'.  This
ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? [Y/n] y（禁止root管理员从远程登录）
 ... Success!
By default, MariaDB comes with a database named \'test\' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
Remove test database and access to it? [Y/n] y（删除test数据库并取消对它的访问权限）
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
Reload privilege tables now? [Y/n] y（刷新授权表，让初始化后的设定立即生效）
 ... Success!
Cleaning up...
All done!  If you\'ve completed all of the above steps, your MariaDB
installation should now be secure.
Thanks for using MariaDB!
','[root@linuxprobe ~]# mysql_secure_installation 
/usr/bin/mysql_secure_installation: line 379: find_mysql_client: command not found
NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!
In order to log into MariaDB to secure it, we\'ll need the current
password for the root user.  If you\'ve just installed MariaDB, and
you haven\'t set the root password yet, the password will be blank,
so you should just press enter here.
Enter current password for root (enter for none):  当前数据库密码为空，直接按回车键
OK, successfully used password, moving on...
Setting the root password ensures that nobody can log into the MariaDB
root user without the proper authorisation.
Set root password? [Y/n] y
New password:输入要为root管理员设置的数据库密码
Re-enter new password:再次输入密码
Password updated successfully!
Reloading privilege tables..
 ... Success!
By default, a MariaDB installation has an anonymous user, allowing anyone
to log into MariaDB without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
Remove anonymous users? [Y/n] y（删除匿名账户）
... Success!
Normally, root should only be allowed to connect from \'localhost\'.  This
ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? [Y/n] y（禁止root管理员从远程登录）
 ... Success!
By default, MariaDB comes with a database named \'test\' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
Remove test database and access to it? [Y/n] y（删除test数据库并取消对它的访问权限）
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
Reload privilege tables now? [Y/n] y（刷新授权表，让初始化后的设定立即生效）
 ... Success!
Cleaning up...
All done!  If you\'ve completed all of the above steps, your MariaDB
installation should now be secure.
Thanks for using MariaDB!
',0,'alvin',curdate());
insert into Content values(1420,15,'p',20,'{}','        在很多生产环境中都需要使用站库分离的技术（即网站和数据库不在同一个服务器上），如果需要让root管理员远程访问数据库，可在上面的初始化操作中设置策略，以允许root管理员从远程访问。然后还需要设置防火墙，使其放行对数据库服务程序的访问请求，数据库服务程序默认会占用3306端口，在防火墙策略中服务名称统一叫作mysql：','        在很多生产环境中都需要使用站库分离的技术（即网站和数据库不在同一个服务器上），如果需要让root管理员远程访问数据库，可在上面的初始化操作中设置策略，以允许root管理员从远程访问。然后还需要设置防火墙，使其放行对数据库服务程序的访问请求，数据库服务程序默认会占用3306端口，在防火墙策略中服务名称统一叫作mysql：',0,'alvin',curdate());
insert into Content values(1421,15,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# firewall-cmd --permanent --add-service=mysql
success
[root@linuxprobe ~]# firewall-cmd --reload
success
','[root@linuxprobe ~]# firewall-cmd --permanent --add-service=mysql
success
[root@linuxprobe ~]# firewall-cmd --reload
success
',0,'alvin',curdate());
insert into Content values(1422,15,'p',22,'{}','        一切准备就绪。现在我们将首次登录MariaDB数据库。其中，-u参数用来指定以root管理员的身份登录，而-p参数用来验证该用户在数据库中的密码值。','        一切准备就绪。现在我们将首次登录MariaDB数据库。其中，-u参数用来指定以root管理员的身份登录，而-p参数用来验证该用户在数据库中的密码值。',0,'alvin',curdate());
insert into Content values(1423,15,'pre',23,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysql -u root -p
Enter password: 此处输入root管理员在数据库中的密码
Welcome to the MariaDB monitor. Commands end with ; or \g.
Your MariaDB connection id is 5
Server version: 5.5.35-MariaDB MariaDB Server
Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.
Type \'help;\' or \'\h\' for help. Type \'\c\' to clear the current input statement.
MariaDB [(none)]>
','[root@linuxprobe ~]# mysql -u root -p
Enter password: 此处输入root管理员在数据库中的密码
Welcome to the MariaDB monitor. Commands end with ; or \g.
Your MariaDB connection id is 5
Server version: 5.5.35-MariaDB MariaDB Server
Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.
Type \'help;\' or \'\h\' for help. Type \'\c\' to clear the current input statement.
MariaDB [(none)]>
',0,'alvin',curdate());
insert into Content values(1424,15,'p',24,'{}','        在登录MariaDB数据库后执行数据库命令时，都需要在命令后面用分号（;）结尾，这也是与Linux命令最显著的区别。大家需要慢慢习惯数据库命令的这种设定。下面执行如下命令查看数据库管理系统中当前都有哪些数据库：','        在登录MariaDB数据库后执行数据库命令时，都需要在命令后面用分号（;）结尾，这也是与Linux命令最显著的区别。大家需要慢慢习惯数据库命令的这种设定。下面执行如下命令查看数据库管理系统中当前都有哪些数据库：',0,'alvin',curdate());
insert into Content values(1425,15,'pre',25,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> SHOW databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.01 sec)
','MariaDB [(none)]> SHOW databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.01 sec)
',0,'alvin',curdate());
insert into Content values(1426,15,'p',26,'{}','        小试牛刀过后，接下来使用数据库命令将root管理员在数据库管理系统中的密码值修改为linuxprobe。这样退出后再尝试登录，如果还坚持输入原先的密码，则将提示访问失败。','        小试牛刀过后，接下来使用数据库命令将root管理员在数据库管理系统中的密码值修改为linuxprobe。这样退出后再尝试登录，如果还坚持输入原先的密码，则将提示访问失败。',0,'alvin',curdate());
insert into Content values(1427,15,'pre',27,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> SET password = PASSWORD(\'linuxprobe\');
Query OK, 0 rows affected (0.00 sec)
MariaDB [(none)]> exit
Bye
[root@linuxprobe ~]# mysql -u root -p
Enter password:此处输入root管理员在数据库中的新密码
ERROR 1045 (28000): Access denied for user \'root\'@\'localhost\' (using password: YES)
','MariaDB [(none)]> SET password = PASSWORD(\'linuxprobe\');
Query OK, 0 rows affected (0.00 sec)
MariaDB [(none)]> exit
Bye
[root@linuxprobe ~]# mysql -u root -p
Enter password:此处输入root管理员在数据库中的新密码
ERROR 1045 (28000): Access denied for user \'root\'@\'localhost\' (using password: YES)
',0,'alvin',curdate());
insert into Content values(1428,15,'h2',28,'{}','管理用户以及授权','管理用户以及授权',0,'alvin',curdate());
insert into Content values(1429,15,'p',29,'{}','        在生产环境中总不能一直“死啃”root管理员。为了保障数据库系统的安全性，以及让其他用户协同管理数据库，我们可以在MariaDB数据库管理系统中为他们创建多个专用的数据库管理账户，然后再分配合理的权限，以满足他们的工作需求。为此，可使用root管理员登录数据库管理系统，然后按照“CREATE USER 用户名@主机名 IDENTIFIED BY \'密码\'; ”的格式创建数据库管理账户。再次提醒大家，一定不要忘记每条数据库命令后面的分号（;）。','        在生产环境中总不能一直“死啃”root管理员。为了保障数据库系统的安全性，以及让其他用户协同管理数据库，我们可以在MariaDB数据库管理系统中为他们创建多个专用的数据库管理账户，然后再分配合理的权限，以满足他们的工作需求。为此，可使用root管理员登录数据库管理系统，然后按照“CREATE USER 用户名@主机名 IDENTIFIED BY \'密码\'; ”的格式创建数据库管理账户。再次提醒大家，一定不要忘记每条数据库命令后面的分号（;）。',0,'alvin',curdate());
insert into Content values(1430,15,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> CREATE USER luke@localhost IDENTIFIED BY \'linuxprobe\';
Query OK, 0 rows affected (0.00 sec)
','MariaDB [(none)]> CREATE USER luke@localhost IDENTIFIED BY \'linuxprobe\';
Query OK, 0 rows affected (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1431,15,'p',31,'{}','        创建的账户信息可以使用select命令语句来查询。下面命令查询的是账户luke的主机名称、账户名称以及经过加密的密码值信息：','        创建的账户信息可以使用select命令语句来查询。下面命令查询的是账户luke的主机名称、账户名称以及经过加密的密码值信息：',0,'alvin',curdate());
insert into Content values(1432,15,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> use mysql
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [mysql]> SELECT HOST,USER,PASSWORD FROM user WHERE USER="luke";
+-----------+------+-------------------------------------------+
| host      | user | password                                  |
+-----------+------+-------------------------------------------+
| localhost | luke | *55D9962586BE75F4B7D421E6655973DB07D6869F |
+-----------+------+-------------------------------------------+
','MariaDB [(none)]> use mysql
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [mysql]> SELECT HOST,USER,PASSWORD FROM user WHERE USER="luke";
+-----------+------+-------------------------------------------+
| host      | user | password                                  |
+-----------+------+-------------------------------------------+
| localhost | luke | *55D9962586BE75F4B7D421E6655973DB07D6869F |
+-----------+------+-------------------------------------------+
',0,'alvin',curdate());
insert into Content values(1433,15,'p',33,'{}','        不过，用户luke仅仅是一个普通账户，没有数据库的任何操作权限。不信的话，可以切换到luke账户来查询数据库管理系统中当前都有哪些数据库。可以发现，该账户甚至没法查看完整的数据库列表（刚才使用root账户时可以查看到3个数据库列表）：','        不过，用户luke仅仅是一个普通账户，没有数据库的任何操作权限。不信的话，可以切换到luke账户来查询数据库管理系统中当前都有哪些数据库。可以发现，该账户甚至没法查看完整的数据库列表（刚才使用root账户时可以查看到3个数据库列表）：',0,'alvin',curdate());
insert into Content values(1434,15,'pre',34,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [mysql]> exit
Bye
[root@linuxprobe ~]# mysql -u luke -p
Enter password: 此处输入luke账户的数据库密码
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 6
Server version: 5.5.35-MariaDB MariaDB Server
Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.
Type \'help;\' or \'\h\' for help. Type \'\c\' to clear the current input statement.
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
+--------------------+
1 row in set (0.03 sec)
','MariaDB [mysql]> exit
Bye
[root@linuxprobe ~]# mysql -u luke -p
Enter password: 此处输入luke账户的数据库密码
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 6
Server version: 5.5.35-MariaDB MariaDB Server
Copyright (c) 2000, 2013, Oracle, Monty Program Ab and others.
Type \'help;\' or \'\h\' for help. Type \'\c\' to clear the current input statement.
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
+--------------------+
1 row in set (0.03 sec)
',0,'alvin',curdate());
insert into Content values(1435,15,'p',35,'{}','        数据库管理系统所使用的命令一般都比较复杂。我们以grant命令为例进行说明。grant命令用于为账户进行授权，其常见格式如下表所示。在使用grant命令时需要写上要赋予的权限、数据库及表单名称，以及对应的账户及主机信息。其实，只要理解了命令中每个字段的功能含义，也就不觉得命令复杂难懂了。','        数据库管理系统所使用的命令一般都比较复杂。我们以grant命令为例进行说明。grant命令用于为账户进行授权，其常见格式如下表所示。在使用grant命令时需要写上要赋予的权限、数据库及表单名称，以及对应的账户及主机信息。其实，只要理解了命令中每个字段的功能含义，也就不觉得命令复杂难懂了。',0,'alvin',curdate());
insert into Content values(1436,15,'table',36,'{"class": ["table", "table-bordered", "table-striped"]}','命令	作用
GRANT 权限 ON 数据库.表单名称 TO 用户名@主机名	对某个特定数据库中的特定表单给予授权
GRANT 权限 ON 数据库.* TO 用户名@主机名	对某个特定数据库中的所有表单给予授权
GRANT 权限 ON *.* TO 用户名@主机名	对所有数据库及所有表单给予授权
GRANT 权限1,权限2 ON 数据库.* TO 用户名@主机名	对某个数据库中的所有表单给予多个授权
GRANT ALL PRIVILEGES ON *.* TO 用户名@主机名	对所有数据库及所有表单给予全部授权（需谨慎操作）','命令	作用
GRANT 权限 ON 数据库.表单名称 TO 用户名@主机名	对某个特定数据库中的特定表单给予授权
GRANT 权限 ON 数据库.* TO 用户名@主机名	对某个特定数据库中的所有表单给予授权
GRANT 权限 ON *.* TO 用户名@主机名	对所有数据库及所有表单给予授权
GRANT 权限1,权限2 ON 数据库.* TO 用户名@主机名	对某个数据库中的所有表单给予多个授权
GRANT ALL PRIVILEGES ON *.* TO 用户名@主机名	对所有数据库及所有表单给予全部授权（需谨慎操作）',0,'alvin',curdate());
insert into Content values(1437,15,'p',37,'{}','        当然，账户的授权工作肯定是需要数据库管理员来执行的。下面以root管理员的身份登录到数据库管理系统中，针对mysql数据库中的user表单向账户luke授予查询、更新、删除以及插入等权限。','        当然，账户的授权工作肯定是需要数据库管理员来执行的。下面以root管理员的身份登录到数据库管理系统中，针对mysql数据库中的user表单向账户luke授予查询、更新、删除以及插入等权限。',0,'alvin',curdate());
insert into Content values(1438,15,'p',38,'{}','        老师特别懂同学们现在心里想的是什么~哈哈，我起初也觉得在每条数据库命令后都要加上;（分号）来结束特别的不方便，时常还会忘记，但敲的命令多了也就自然习惯了。授权操作执行后来查看下luke用户的权限吧：','        老师特别懂同学们现在心里想的是什么~哈哈，我起初也觉得在每条数据库命令后都要加上;（分号）来结束特别的不方便，时常还会忘记，但敲的命令多了也就自然习惯了。授权操作执行后来查看下luke用户的权限吧：',0,'alvin',curdate());
insert into Content values(1439,15,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysql -u root -p
Enter password:此处输入root管理员在数据库中的密码
MariaDB [(none)]> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [mysql]> GRANT SELECT,UPDATE,DELETE,INSERT ON mysql.user TO luke@localhost;
Query OK, 0 rows affected (0.00 sec)
','[root@linuxprobe ~]# mysql -u root -p
Enter password:此处输入root管理员在数据库中的密码
MariaDB [(none)]> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [mysql]> GRANT SELECT,UPDATE,DELETE,INSERT ON mysql.user TO luke@localhost;
Query OK, 0 rows affected (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1440,15,'p',40,'{}','        在执行完上述授权操作之后，我们再查看一下账户luke的权限：','        在执行完上述授权操作之后，我们再查看一下账户luke的权限：',0,'alvin',curdate());
insert into Content values(1441,15,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]>  SHOW GRANTS FOR luke@localhost;
+-------------------------------------------------------------------------------------------------------------+
| Grants for luke@localhost |
+-------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO \'luke\'@\'localhost\' IDENTIFIED BY PASSWORD \'*55D9962586BE75F4B7D421E6655973DB07D6869F\' |
| GRANT SELECT, INSERT, UPDATE, DELETE ON `mysql`.`user` TO \'luke\'@\'localhost\' |
+-------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
','MariaDB [(none)]>  SHOW GRANTS FOR luke@localhost;
+-------------------------------------------------------------------------------------------------------------+
| Grants for luke@localhost |
+-------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO \'luke\'@\'localhost\' IDENTIFIED BY PASSWORD \'*55D9962586BE75F4B7D421E6655973DB07D6869F\' |
| GRANT SELECT, INSERT, UPDATE, DELETE ON `mysql`.`user` TO \'luke\'@\'localhost\' |
+-------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1442,15,'p',42,'{}','        上面输出信息中显示账户luke已经拥有了针对mysql数据库中user表单的一系列权限了。这时我们再切换到账户luke，此时就能够看到mysql数据库了，而且还能看到表单user（其余表单会因无权限而被继续隐藏）：','        上面输出信息中显示账户luke已经拥有了针对mysql数据库中user表单的一系列权限了。这时我们再切换到账户luke，此时就能够看到mysql数据库了，而且还能看到表单user（其余表单会因无权限而被继续隐藏）：',0,'alvin',curdate());
insert into Content values(1443,15,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysql -u luke -p
Enter password:此处输入luke用户在数据库中的密码
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
2 rows in set (0.01 sec)
MariaDB [(none)]> use mysql
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [mysql]> SHOW TABLES;
+-----------------+
| Tables_in_mysql |
+-----------------+
| user            |
+-----------------+
1 row in set (0.01 sec)
MariaDB [mysql]> exit
Bye
','[root@linuxprobe ~]# mysql -u luke -p
Enter password:此处输入luke用户在数据库中的密码
MariaDB [(none)]> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
+--------------------+
2 rows in set (0.01 sec)
MariaDB [(none)]> use mysql
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [mysql]> SHOW TABLES;
+-----------------+
| Tables_in_mysql |
+-----------------+
| user            |
+-----------------+
1 row in set (0.01 sec)
MariaDB [mysql]> exit
Bye
',0,'alvin',curdate());
insert into Content values(1444,15,'p',44,'{}','        大家不要心急，我们接下来会慢慢学习数据库内容的修改方法。当前，先切换回root账户，移除刚才的授权。','        大家不要心急，我们接下来会慢慢学习数据库内容的修改方法。当前，先切换回root账户，移除刚才的授权。',0,'alvin',curdate());
insert into Content values(1445,15,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysql -u root -p
Enter password:此处输入root管理员在数据库中的密码
MariaDB [(none)]> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [(none)]> REVOKE SELECT,UPDATE,DELETE,INSERT ON mysql.user FROM luke@localhost;
Query OK, 0 rows affected (0.00 sec)
','[root@linuxprobe ~]# mysql -u root -p
Enter password:此处输入root管理员在数据库中的密码
MariaDB [(none)]> use mysql;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [(none)]> REVOKE SELECT,UPDATE,DELETE,INSERT ON mysql.user FROM luke@localhost;
Query OK, 0 rows affected (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1446,15,'p',46,'{}','        可以看到，除了移除授权的命令（revoke）与授权命令（grant）不同之外，其余部分都是一致的。这不仅好记而且也容易理解。执行移除授权命令后，再来查看账户luke的信息：','        可以看到，除了移除授权的命令（revoke）与授权命令（grant）不同之外，其余部分都是一致的。这不仅好记而且也容易理解。执行移除授权命令后，再来查看账户luke的信息：',0,'alvin',curdate());
insert into Content values(1447,15,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> SHOW GRANTS FOR luke@localhost;
+-------------------------------------------------------------------------------------------------------------+
| Grants for luke@localhost |
+-------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO \'luke\'@\'localhost\' IDENTIFIED BY PASSWORD \'*55D9962586BE75F4B7D421E6655973DB07D6869F\' |
+-------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)
','MariaDB [(none)]> SHOW GRANTS FOR luke@localhost;
+-------------------------------------------------------------------------------------------------------------+
| Grants for luke@localhost |
+-------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO \'luke\'@\'localhost\' IDENTIFIED BY PASSWORD \'*55D9962586BE75F4B7D421E6655973DB07D6869F\' |
+-------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1448,15,'h2',48,'{}','创建数据库与表单','创建数据库与表单',0,'alvin',curdate());
insert into Content values(1449,15,'p',49,'{}','        在MariaDB数据库管理系统中，一个数据库可以存放多个数据表，数据表单是数据库中最重要最核心的内容。我们可以根据自己的需求自定义数据库表结构，然后在其中合理地存放数据，以便后期轻松地维护和修改。下表罗列了后文中将使用到的数据库命令以及对应的作用。','        在MariaDB数据库管理系统中，一个数据库可以存放多个数据表，数据表单是数据库中最重要最核心的内容。我们可以根据自己的需求自定义数据库表结构，然后在其中合理地存放数据，以便后期轻松地维护和修改。下表罗列了后文中将使用到的数据库命令以及对应的作用。',0,'alvin',curdate());
insert into Content values(1450,15,'table',50,'{"class": ["table", "table-bordered", "table-striped"]}','用法	作用
CREATE database 数据库名称。	创建新的数据库
DESCRIBE 表单名称;	描述表单
UPDATE 表单名称 SET attribute=新值 WHERE attribute > 原始值;	更新表单中的数据
USE 数据库名称;	指定使用的数据库
SHOW databases;	显示当前已有的数据库
SHOW tables;	显示当前数据库中的表单
SELECT * FROM 表单名称;	从表单中选中某个记录值
DELETE FROM 表单名 WHERE attribute=值;	从表单中删除某个记录值','用法	作用
CREATE database 数据库名称。	创建新的数据库
DESCRIBE 表单名称;	描述表单
UPDATE 表单名称 SET attribute=新值 WHERE attribute > 原始值;	更新表单中的数据
USE 数据库名称;	指定使用的数据库
SHOW databases;	显示当前已有的数据库
SHOW tables;	显示当前数据库中的表单
SELECT * FROM 表单名称;	从表单中选中某个记录值
DELETE FROM 表单名 WHERE attribute=值;	从表单中删除某个记录值',0,'alvin',curdate());
insert into Content values(1451,15,'p',51,'{}','        建立数据库是管理数据的起点。现在尝试创建一个名为linuxprobe的数据库，然后再查看数据库列表，此时就能看到它了：','        建立数据库是管理数据的起点。现在尝试创建一个名为linuxprobe的数据库，然后再查看数据库列表，此时就能看到它了：',0,'alvin',curdate());
insert into Content values(1452,15,'pre',52,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> CREATE DATABASE linuxprobe;
Query OK, 1 row affected (0.00 sec)
MariaDB [(none)]> SHOW databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| linuxprobe         |
| mysql              |
| performance_schema |
+--------------------+
4 rows in set (0.04 sec)
','MariaDB [(none)]> CREATE DATABASE linuxprobe;
Query OK, 1 row affected (0.00 sec)
MariaDB [(none)]> SHOW databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| linuxprobe         |
| mysql              |
| performance_schema |
+--------------------+
4 rows in set (0.04 sec)
',0,'alvin',curdate());
insert into Content values(1453,15,'p',53,'{}','        要想创建数据表单，需要先切换到某个指定的数据库中。比如在新建的linuxprobe数据库中创建表单mybook，然后进行表单的初始化，即定义存储数据内容的结构。我们分别定义3个字段项，其中，长度为15个字符的字符型字段name用来存放图书名称，整型字段price和pages分别存储图书的价格和页数。当执行完下述命令之后，就可以看到表单的结构信息了：','        要想创建数据表单，需要先切换到某个指定的数据库中。比如在新建的linuxprobe数据库中创建表单mybook，然后进行表单的初始化，即定义存储数据内容的结构。我们分别定义3个字段项，其中，长度为15个字符的字符型字段name用来存放图书名称，整型字段price和pages分别存储图书的价格和页数。当执行完下述命令之后，就可以看到表单的结构信息了：',0,'alvin',curdate());
insert into Content values(1454,15,'pre',54,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> use linuxprobe;
Database changed
MariaDB [linuxprobe]> CREATE TABLE mybook (name char(15),price int,pages int);
Query OK, 0 rows affected (0.16 sec)
MariaDB [linuxprobe]> DESCRIBE mybook;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| name  | char(15) | YES  |     | NULL    |       |
| price | int(11)  | YES  |     | NULL    |       |
| pages | int(11)  | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.02 sec)
','MariaDB [(none)]> use linuxprobe;
Database changed
MariaDB [linuxprobe]> CREATE TABLE mybook (name char(15),price int,pages int);
Query OK, 0 rows affected (0.16 sec)
MariaDB [linuxprobe]> DESCRIBE mybook;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| name  | char(15) | YES  |     | NULL    |       |
| price | int(11)  | YES  |     | NULL    |       |
| pages | int(11)  | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.02 sec)
',0,'alvin',curdate());
insert into Content values(1455,15,'h2',55,'{}','管理表单及数据','管理表单及数据',0,'alvin',curdate());
insert into Content values(1456,15,'p',56,'{}','        接下来向mybook数据表单中插一条图书信息。为此需要使用INSERT命令，并在命令中写清表单名称以及对应的字段项。执行该命令之后即可完成图书写入信息。下面我们使用该命令插入一条图书信息，其中书名为linuxprobe，价格和页数分别是60元和518页。在命令执行后也就意味着图书信息已经成功写入到数据表单中，然后就可以查询表单中的内容了。我们在使用select命令查询表单内容时，需要加上想要查询的字段；如果想查看表单中的所有内容，则可以使用星号（*）通配符来显示：','        接下来向mybook数据表单中插一条图书信息。为此需要使用INSERT命令，并在命令中写清表单名称以及对应的字段项。执行该命令之后即可完成图书写入信息。下面我们使用该命令插入一条图书信息，其中书名为linuxprobe，价格和页数分别是60元和518页。在命令执行后也就意味着图书信息已经成功写入到数据表单中，然后就可以查询表单中的内容了。我们在使用select命令查询表单内容时，需要加上想要查询的字段；如果想查看表单中的所有内容，则可以使用星号（*）通配符来显示：',0,'alvin',curdate());
insert into Content values(1457,15,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe\',\'60\', \'518\');
Query OK, 1 row affected (0.00 sec)
MariaDB [linuxprobe]> select * from mybook;
+------------+-------+-------+
| name       | price | pages |
+------------+-------+-------+
| linuxprobe |    60 |   518 |
+------------+-------+-------+
1 rows in set (0.01 sec)
','MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe\',\'60\', \'518\');
Query OK, 1 row affected (0.00 sec)
MariaDB [linuxprobe]> select * from mybook;
+------------+-------+-------+
| name       | price | pages |
+------------+-------+-------+
| linuxprobe |    60 |   518 |
+------------+-------+-------+
1 rows in set (0.01 sec)
',0,'alvin',curdate());
insert into Content values(1458,15,'p',58,'{}','        对数据库运维人员来讲，需要做好四门功课—增、删、改、查。这意味着创建数据表单并在其中插入内容仅仅是第一步，还需要掌握数据表单内容的修改方法。例如，我们可以使用update命令将刚才插入的linuxprobe图书信息的价格修改为55元，然后在使用select命令查看该图书的名称和定价信息。注意，因为这里只查看图书的名称和定价，而不涉及页码，所以无须再用星号通配符来显示所有内容。','        对数据库运维人员来讲，需要做好四门功课—增、删、改、查。这意味着创建数据表单并在其中插入内容仅仅是第一步，还需要掌握数据表单内容的修改方法。例如，我们可以使用update命令将刚才插入的linuxprobe图书信息的价格修改为55元，然后在使用select命令查看该图书的名称和定价信息。注意，因为这里只查看图书的名称和定价，而不涉及页码，所以无须再用星号通配符来显示所有内容。',0,'alvin',curdate());
insert into Content values(1459,15,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [linuxprobe]> UPDATE mybook SET price=55 ;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0
MariaDB [linuxprobe]> SELECT name,price FROM mybook;
+------------+-------+
| name       | price |
+------------+-------+
| linuxprobe |    55 |
+------------+-------+
1 row in set (0.00 sec)
','MariaDB [linuxprobe]> UPDATE mybook SET price=55 ;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0
MariaDB [linuxprobe]> SELECT name,price FROM mybook;
+------------+-------+
| name       | price |
+------------+-------+
| linuxprobe |    55 |
+------------+-------+
1 row in set (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1460,15,'p',60,'{}','        我们还可以使用delete命令删除某个数据表单中的内容。下面我们使用delete命令删除数据表单mybook中的所有内容，然后再查看该表单中的内容，可以发现该表单内容为空了。','        我们还可以使用delete命令删除某个数据表单中的内容。下面我们使用delete命令删除数据表单mybook中的所有内容，然后再查看该表单中的内容，可以发现该表单内容为空了。',0,'alvin',curdate());
insert into Content values(1461,15,'pre',61,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [linuxprobe]> DELETE FROM mybook;
Query OK, 1 row affected (0.01 sec)
MariaDB [linuxprobe]> SELECT * FROM mybook;
Empty set (0.00 sec)
','MariaDB [linuxprobe]> DELETE FROM mybook;
Query OK, 1 row affected (0.01 sec)
MariaDB [linuxprobe]> SELECT * FROM mybook;
Empty set (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1462,15,'p',62,'{}','        一般来讲，数据表单中会存放成千上万条数据信息。比如我们刚刚创建的用于保存图书信息的mybook表单，随着时间的推移，里面的图书信息也会越来越多。在这样的情况下，如果我们只想查看其价格大于某个数值的图书时，又该如何定义查询语句呢？','        一般来讲，数据表单中会存放成千上万条数据信息。比如我们刚刚创建的用于保存图书信息的mybook表单，随着时间的推移，里面的图书信息也会越来越多。在这样的情况下，如果我们只想查看其价格大于某个数值的图书时，又该如何定义查询语句呢？',0,'alvin',curdate());
insert into Content values(1463,15,'p',63,'{}','        下面先使用insert插入命令依次插入4条图书信息：','        下面先使用insert插入命令依次插入4条图书信息：',0,'alvin',curdate());
insert into Content values(1464,15,'pre',64,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe1\',\'30\',\'518\');
Query OK, 1 row affected (0.05 sec)
MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe2\',\'50\',\'518\');
Query OK, 1 row affected (0.05 sec)
MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe3\',\'80\',\'518\');
Query OK, 1 row affected (0.01 sec)
MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe4\',\'100\',\'518\');
Query OK, 1 row affected (0.00 sec)
','MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe1\',\'30\',\'518\');
Query OK, 1 row affected (0.05 sec)
MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe2\',\'50\',\'518\');
Query OK, 1 row affected (0.05 sec)
MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe3\',\'80\',\'518\');
Query OK, 1 row affected (0.01 sec)
MariaDB [linuxprobe]> INSERT INTO mybook(name,price,pages) VALUES(\'linuxprobe4\',\'100\',\'518\');
Query OK, 1 row affected (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1465,15,'p',65,'{}','        要想让查询结果更加精准，就需要结合使用select与where命令了。其中，where命令是在数据库中进行匹配查询的条件命令。通过设置查询条件，就可以仅查找出符合该条件的数据。下表列出了where命令中常用的查询参数以及作用。','        要想让查询结果更加精准，就需要结合使用select与where命令了。其中，where命令是在数据库中进行匹配查询的条件命令。通过设置查询条件，就可以仅查找出符合该条件的数据。下表列出了where命令中常用的查询参数以及作用。',0,'alvin',curdate());
insert into Content values(1466,15,'table',66,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
=	相等
<>或!=	不相等
>	大于
<	小于
>=	大于或等于
<=	小于或等于
BETWEEN	在某个范围内
LIKE	搜索一个例子
IN	在列中搜索多个值','参数	作用
=	相等
<>或!=	不相等
>	大于
<	小于
>=	大于或等于
<=	小于或等于
BETWEEN	在某个范围内
LIKE	搜索一个例子
IN	在列中搜索多个值',0,'alvin',curdate());
insert into Content values(1467,15,'p',67,'{}','        现在进入动手环节。分别在mybook表单中查找出价格大于75元或价格不等于80元的图书，其对应的命令如下所示。在熟悉了这两个查询条件之后，大家可以自行尝试精确查找图书名为linuxprobe2的图书信息。','        现在进入动手环节。分别在mybook表单中查找出价格大于75元或价格不等于80元的图书，其对应的命令如下所示。在熟悉了这两个查询条件之后，大家可以自行尝试精确查找图书名为linuxprobe2的图书信息。',0,'alvin',curdate());
insert into Content values(1468,15,'pre',68,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [linuxprobe]> SELECT * FROM mybook WHERE price>75;
+-------------+-------+-------+
| name        | price | pages |
+-------------+-------+-------+
| linuxprobe3 |    80 |   518 |
| linuxprobe4 |   100 |   518 |
+-------------+-------+-------+
2 rows in set (0.06 sec)
MariaDB [linuxprobe]> SELECT * FROM mybook WHERE price!=80;
+-------------+-------+-------+
| name | price | pages        |
+-------------+-------+-------+
| linuxprobe1  | 30  | 518    |
| linuxprobe2  | 50  | 518    |
| linuxprobe4  | 100 | 518    |
+-------------+-------+-------+
3 rows in set (0.01 sec)
MariaDB [mysql]> exit
Bye
','MariaDB [linuxprobe]> SELECT * FROM mybook WHERE price>75;
+-------------+-------+-------+
| name        | price | pages |
+-------------+-------+-------+
| linuxprobe3 |    80 |   518 |
| linuxprobe4 |   100 |   518 |
+-------------+-------+-------+
2 rows in set (0.06 sec)
MariaDB [linuxprobe]> SELECT * FROM mybook WHERE price!=80;
+-------------+-------+-------+
| name | price | pages        |
+-------------+-------+-------+
| linuxprobe1  | 30  | 518    |
| linuxprobe2  | 50  | 518    |
| linuxprobe4  | 100 | 518    |
+-------------+-------+-------+
3 rows in set (0.01 sec)
MariaDB [mysql]> exit
Bye
',0,'alvin',curdate());
insert into Content values(1469,15,'h2',69,'{}','数据库的备份及恢复','数据库的备份及恢复',0,'alvin',curdate());
insert into Content values(1470,15,'p',70,'{}','        前文提到，本书的技术主线是Linux系统的运维方向，不会对数据库管理系统的操作进行深入的讲解，因此大家掌握了上面这些基本的数据库操作命令之后就足够了。下面要讲解的是数据库的备份以及恢复，这些知识比较实用，希望大家能够掌握。','        前文提到，本书的技术主线是Linux系统的运维方向，不会对数据库管理系统的操作进行深入的讲解，因此大家掌握了上面这些基本的数据库操作命令之后就足够了。下面要讲解的是数据库的备份以及恢复，这些知识比较实用，希望大家能够掌握。',0,'alvin',curdate());
insert into Content values(1471,15,'p',71,'{}','        mysqldump命令用于备份数据库数据，格式为“mysqldump [参数] [数据库名称]”。其中参数与mysql命令大致相同，-u参数用于定义登录数据库的账户名称，-p参数代表密码提示符。下面将linuxprobe数据库中的内容导出成一个文件，并保存到root管理员的家目录中：','        mysqldump命令用于备份数据库数据，格式为“mysqldump [参数] [数据库名称]”。其中参数与mysql命令大致相同，-u参数用于定义登录数据库的账户名称，-p参数代表密码提示符。下面将linuxprobe数据库中的内容导出成一个文件，并保存到root管理员的家目录中：',0,'alvin',curdate());
insert into Content values(1472,15,'pre',72,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysqldump -u root -p linuxprobe > /root/linuxprobeDB.dump
Enter password:此处输入root管理员在数据库中的密码
','[root@linuxprobe ~]# mysqldump -u root -p linuxprobe > /root/linuxprobeDB.dump
Enter password:此处输入root管理员在数据库中的密码
',0,'alvin',curdate());
insert into Content values(1473,15,'p',73,'{}','        然后进入MariaDB数据库管理系统，彻底删除linuxprobe数据库，这样mybook数据表单也将被彻底删除。然后重新建立linuxprobe数据库：','        然后进入MariaDB数据库管理系统，彻底删除linuxprobe数据库，这样mybook数据表单也将被彻底删除。然后重新建立linuxprobe数据库：',0,'alvin',curdate());
insert into Content values(1474,15,'pre',74,'{"class": ["prettyprint", "lang-bash"]}','MariaDB [(none)]> DROP DATABASE linuxprobe;
Query OK, 1 row affected (0.04 sec)
MariaDB [(none)]> SHOW databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.02 sec)
MariaDB [(none)]> CREATE DATABASE linuxprobe;
Query OK, 1 row affected (0.00 sec)
','MariaDB [(none)]> DROP DATABASE linuxprobe;
Query OK, 1 row affected (0.04 sec)
MariaDB [(none)]> SHOW databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
+--------------------+
3 rows in set (0.02 sec)
MariaDB [(none)]> CREATE DATABASE linuxprobe;
Query OK, 1 row affected (0.00 sec)
',0,'alvin',curdate());
insert into Content values(1475,15,'p',75,'{}','        接下来是见证数据恢复效果的时刻！使用输入重定向符把刚刚备份的数据库文件导入到mysql命令中，然后执行该命令。接下来登录到MariaDB数据库，就又能看到linuxprobe数据库以及mybook数据表单了。数据库恢复成功！','        接下来是见证数据恢复效果的时刻！使用输入重定向符把刚刚备份的数据库文件导入到mysql命令中，然后执行该命令。接下来登录到MariaDB数据库，就又能看到linuxprobe数据库以及mybook数据表单了。数据库恢复成功！',0,'alvin',curdate());
insert into Content values(1476,15,'pre',76,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mysql -u root -p linuxprobe < /root/linuxprobeDB.dump 
Enter password: 此处输入root管理员在数据库中的密码值
[root@linuxprobe ~]# mysql -u root -p
Enter password: 此处输入root管理员在数据库中的密码值
MariaDB [(none)]> use linuxprobe;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [linuxprobe]> SHOW tables;
+----------------------+
| Tables_in_linuxprobe |
+----------------------+
| mybook               |
+----------------------+
1 row in set (0.05 sec)
MariaDB [linuxprobe]> DESCRIBE mybook;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| name  | char(15) | YES  |     | NULL    |       |
| price | int(11)  | YES  |     | NULL    |       |
| pages | int(11)  | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.02 sec)
','[root@linuxprobe ~]# mysql -u root -p linuxprobe < /root/linuxprobeDB.dump 
Enter password: 此处输入root管理员在数据库中的密码值
[root@linuxprobe ~]# mysql -u root -p
Enter password: 此处输入root管理员在数据库中的密码值
MariaDB [(none)]> use linuxprobe;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A
Database changed
MariaDB [linuxprobe]> SHOW tables;
+----------------------+
| Tables_in_linuxprobe |
+----------------------+
| mybook               |
+----------------------+
1 row in set (0.05 sec)
MariaDB [linuxprobe]> DESCRIBE mybook;
+-------+----------+------+-----+---------+-------+
| Field | Type     | Null | Key | Default | Extra |
+-------+----------+------+-----+---------+-------+
| name  | char(15) | YES  |     | NULL    |       |
| price | int(11)  | YES  |     | NULL    |       |
| pages | int(11)  | YES  |     | NULL    |       |
+-------+----------+------+-----+---------+-------+
3 rows in set (0.02 sec)
',0,'alvin',curdate());
insert into Content values(1477,16,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用PXE+Kickstart无人值守安装服务',' <span class="color_h1">  Linux </span> 使用PXE+Kickstart无人值守安装服务',0,'alvin',curdate());
insert into Content values(1478,16,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1479,16,'p',3,'{}','        刚入职的运维新手经常会被要求去做一些安装操作系统的工作。如果按照第1章讲解的用光盘镜像来安装操作系统，其效率会相当低下。本章将介绍可以实现无人值守安装服务的PXE+Kickstart服务程序，并带领大家动手安装部署PXE + TFTP + FTP + DHCP + Kickstart等服务程序，从而搭建出一套可批量安装Linux系统的无人值守安装系统。在学完本章内容之后，运维新手就可以避免枯燥乏味的重复性工作，大大提供系统安装的效率。','        刚入职的运维新手经常会被要求去做一些安装操作系统的工作。如果按照第1章讲解的用光盘镜像来安装操作系统，其效率会相当低下。本章将介绍可以实现无人值守安装服务的PXE+Kickstart服务程序，并带领大家动手安装部署PXE + TFTP + FTP + DHCP + Kickstart等服务程序，从而搭建出一套可批量安装Linux系统的无人值守安装系统。在学完本章内容之后，运维新手就可以避免枯燥乏味的重复性工作，大大提供系统安装的效率。',0,'alvin',curdate());
insert into Content values(1480,16,'h2',4,'{}','无人值守系统','无人值守系统',0,'alvin',curdate());
insert into Content values(1481,16,'p',5,'{}','        本书在第1章讲解了使用光盘镜像来安装Linux系统的方法，坦白讲，该方法适用于只安装少量Linux系统的情况。如果生产环境中有数百台服务器都需要安装系统，这种方式就不合时宜了。这时，我们就需要使用PXE + TFTP +FTP + DHCP + Kickstart服务搭建出一个无人值守安装系统。这种无人值守安装系统可以自动地为数十台服务器安装系统，这一方面将运维人员从重复性的工作中解救出来，也大大提升了系统安装的效率。','        本书在第1章讲解了使用光盘镜像来安装Linux系统的方法，坦白讲，该方法适用于只安装少量Linux系统的情况。如果生产环境中有数百台服务器都需要安装系统，这种方式就不合时宜了。这时，我们就需要使用PXE + TFTP +FTP + DHCP + Kickstart服务搭建出一个无人值守安装系统。这种无人值守安装系统可以自动地为数十台服务器安装系统，这一方面将运维人员从重复性的工作中解救出来，也大大提升了系统安装的效率。',0,'alvin',curdate());
insert into Content values(1482,16,'p',6,'{}','        无人值守安装系统的工作流程如下图所示。','        无人值守安装系统的工作流程如下图所示。',0,'alvin',curdate());
insert into Content values(1483,16,'image',7,'{"alt": "pxe_process", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_pxe_process.png", "width": "676"}','/static/img/linux/linux_pxe_process.png','/static/img/linux/linux_pxe_process.png',0,'alvin',curdate());
insert into Content values(1484,16,'p',8,'{}','        PXE（Preboot eXecute Environment，预启动执行环境）是由Intel公司开发的技术，可以让计算机通过网络来启动操作系统（前提是计算机上安装的网卡支持PXE技术），主要用于在无人值守安装系统中引导客户端主机安装Linux操作系统。Kickstart是一种无人值守的安装方式，其工作原理是预先把原本需要运维人员手工填写的参数保存成一个ks.cfg文件，当安装过程中需要填写参数时则自动匹配Kickstart生成的文件。所以只要Kickstart文件包含了安装过程中需要人工填写的所有参数，那么从理论上来讲完全不需要运维人员的干预，就可以自动完成安装工作。TFTP、FTP以及DHCP服务程序的配置与部署已经在第11章和第14章进行了详细讲解，这里不再赘述。','        PXE（Preboot eXecute Environment，预启动执行环境）是由Intel公司开发的技术，可以让计算机通过网络来启动操作系统（前提是计算机上安装的网卡支持PXE技术），主要用于在无人值守安装系统中引导客户端主机安装Linux操作系统。Kickstart是一种无人值守的安装方式，其工作原理是预先把原本需要运维人员手工填写的参数保存成一个ks.cfg文件，当安装过程中需要填写参数时则自动匹配Kickstart生成的文件。所以只要Kickstart文件包含了安装过程中需要人工填写的所有参数，那么从理论上来讲完全不需要运维人员的干预，就可以自动完成安装工作。TFTP、FTP以及DHCP服务程序的配置与部署已经在第11章和第14章进行了详细讲解，这里不再赘述。',0,'alvin',curdate());
insert into Content values(1485,16,'p',9,'{}','        由于当前的客户端主机并没有完整的操作系统，也就不能完成FTP协议的验证了，所以需要使用TFTP协议帮助客户端获取引导及驱动文件。vsftpd服务程序用于将完整的系统安装镜像通过网络传输给客户端。当然，只要能将系统安装镜像成功传输给客户端即可，因此也可以使用httpd来替代vsftpd服务程序。','        由于当前的客户端主机并没有完整的操作系统，也就不能完成FTP协议的验证了，所以需要使用TFTP协议帮助客户端获取引导及驱动文件。vsftpd服务程序用于将完整的系统安装镜像通过网络传输给客户端。当然，只要能将系统安装镜像成功传输给客户端即可，因此也可以使用httpd来替代vsftpd服务程序。',0,'alvin',curdate());
insert into Content values(1486,16,'h2',10,'{}','部署相关服务程序','部署相关服务程序',0,'alvin',curdate());
insert into Content values(1487,16,'h3',11,'{}','配置DHCP服务程序','配置DHCP服务程序',0,'alvin',curdate());
insert into Content values(1488,16,'p',12,'{}','        DHCP服务程序用于为客户端主机分配可用的IP地址，而且这是服务器与客户端主机进行文件传输的基础，因此我们先行配置DHCP服务程序。首先按照表19-1为无人值守系统设置IP地址，然后按照图19-2和图19-3在虚拟机的虚拟网络编辑器中关闭自身的DHCP服务。','        DHCP服务程序用于为客户端主机分配可用的IP地址，而且这是服务器与客户端主机进行文件传输的基础，因此我们先行配置DHCP服务程序。首先按照表19-1为无人值守系统设置IP地址，然后按照图19-2和图19-3在虚拟机的虚拟网络编辑器中关闭自身的DHCP服务。',0,'alvin',curdate());
insert into Content values(1489,16,'table',13,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
无人值守系统	RHEL 7	192.168.10.10
客户端	未安装操作系统	','主机名称	操作系统	IP地址
无人值守系统	RHEL 7	192.168.10.10
客户端	未安装操作系统	',0,'alvin',curdate());
insert into Content values(1490,16,'image',14,'{"alt": "open_net_setmenu", "class": ["attachment-full"], "height": "132", "src": "/static/img/linux/linux_pxe_open_net_setmenu.png", "width": "676"}','/static/img/linux/linux_pxe_open_net_setmenu.png','/static/img/linux/linux_pxe_open_net_setmenu.png',0,'alvin',curdate());
insert into Content values(1491,16,'image',15,'{"alt": "disable_dhcp", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_disable_dhcp.jpg", "width": "676"}','/static/img/linux/linux_pxe_disable_dhcp.jpg','/static/img/linux/linux_pxe_disable_dhcp.jpg',0,'alvin',curdate());
insert into Content values(1492,16,'p',16,'{}','        当挂载好光盘镜像并把Yum仓库文件配置妥当后，就可以安装DHCP服务程序软件包了。','        当挂载好光盘镜像并把Yum仓库文件配置妥当后，就可以安装DHCP服务程序软件包了。',0,'alvin',curdate());
insert into Content values(1493,16,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install dhcp
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package dhcp.x86_64 12:4.2.5-27.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 dhcp x86_64 12:4.2.5-27.el7 rhel 506 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 506 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
 Verifying : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
Installed:
 dhcp.x86_64 12:4.2.5-27.el7 
Complete!
','[root@linuxprobe ~]# yum install dhcp
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
rhel | 4.1 kB 00:00 
Resolving Dependencies
--> Running transaction check
---> Package dhcp.x86_64 12:4.2.5-27.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 dhcp x86_64 12:4.2.5-27.el7 rhel 506 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 506 k
Installed size: 1.4 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
 Verifying : 12:dhcp-4.2.5-27.el7.x86_64 1/1 
Installed:
 dhcp.x86_64 12:4.2.5-27.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1494,16,'p',18,'{}','        第14章已经详细讲解了DHCP服务程序的配置以及部署方法，相信各位读者对相关的配置参数还有一些印象。但是，我们在这里使用的配置文件与第14章中的配置文件有两个主要区别：允许了BOOTP引导程序协议，旨在让局域网内暂时没有操作系统的主机也能获取静态IP地址；在配置文件的最下面加载了引导驱动文件pxelinux.0（这个文件会在下面的步骤中创建），其目的是让客户端主机获取到IP地址后主动获取引导驱动文件，自行进入下一步的安装过程。','        第14章已经详细讲解了DHCP服务程序的配置以及部署方法，相信各位读者对相关的配置参数还有一些印象。但是，我们在这里使用的配置文件与第14章中的配置文件有两个主要区别：允许了BOOTP引导程序协议，旨在让局域网内暂时没有操作系统的主机也能获取静态IP地址；在配置文件的最下面加载了引导驱动文件pxelinux.0（这个文件会在下面的步骤中创建），其目的是让客户端主机获取到IP地址后主动获取引导驱动文件，自行进入下一步的安装过程。',0,'alvin',curdate());
insert into Content values(1495,16,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/dhcp/dhcpd.conf
allow booting;
allow bootp;
ddns-update-style interim;
ignore client-updates;
subnet 192.168.10.0 netmask 255.255.255.0 {
        option subnet-mask      255.255.255.0;
        option domain-name-servers  192.168.10.10;
        range dynamic-bootp 192.168.10.100 192.168.10.200;
        default-lease-time      21600;
        max-lease-time          43200;
        next-server             192.168.10.10;
        filename                "pxelinux.0";
}
','[root@linuxprobe ~]# vim /etc/dhcp/dhcpd.conf
allow booting;
allow bootp;
ddns-update-style interim;
ignore client-updates;
subnet 192.168.10.0 netmask 255.255.255.0 {
        option subnet-mask      255.255.255.0;
        option domain-name-servers  192.168.10.10;
        range dynamic-bootp 192.168.10.100 192.168.10.200;
        default-lease-time      21600;
        max-lease-time          43200;
        next-server             192.168.10.10;
        filename                "pxelinux.0";
}
',0,'alvin',curdate());
insert into Content values(1496,16,'p',20,'{}','        在确认DHCP服务程序的参数都填写正确后，重新启动该服务程序，并将其添加到开机启动项中。这样在设备下一次重启之后，在无须人工干预的情况下，自动为客户端主机安装系统。','        在确认DHCP服务程序的参数都填写正确后，重新启动该服务程序，并将其添加到开机启动项中。这样在设备下一次重启之后，在无须人工干预的情况下，自动为客户端主机安装系统。',0,'alvin',curdate());
insert into Content values(1497,16,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart dhcpd
[root@linuxprobe ~]# systemctl enable dhcpd
ln -s \'/usr/lib/systemd/system/dhcpd.service\' \'/etc/systemd/system/multi-user.target.wants/dhcpd.service\'
','[root@linuxprobe ~]# systemctl restart dhcpd
[root@linuxprobe ~]# systemctl enable dhcpd
ln -s \'/usr/lib/systemd/system/dhcpd.service\' \'/etc/systemd/system/multi-user.target.wants/dhcpd.service\'
',0,'alvin',curdate());
insert into Content values(1498,16,'h3',22,'{}','配置TFTP服务程序','配置TFTP服务程序',0,'alvin',curdate());
insert into Content values(1499,16,'p',23,'{}','        我们曾经在第11章中学习过vsftpd服务与TFTP服务。vsftpd是一款功能丰富的文件传输服务程序，允许用户以匿名开放模式、本地用户模式、虚拟用户模式来进行访问认证。但是，当前的客户端主机还没有安装操作系统，该如何进行登录认证呢？而TFTP作为一种基于UDP协议的简单文件传输协议，不需要进行用户认证即可获取到所需的文件资源。因此接下来配置TFTP服务程序，为客户端主机提供引导及驱动文件。当客户端主机有了基本的驱动程序之后，再通过vsftpd服务程序将完整的光盘镜像文件传输过去。','        我们曾经在第11章中学习过vsftpd服务与TFTP服务。vsftpd是一款功能丰富的文件传输服务程序，允许用户以匿名开放模式、本地用户模式、虚拟用户模式来进行访问认证。但是，当前的客户端主机还没有安装操作系统，该如何进行登录认证呢？而TFTP作为一种基于UDP协议的简单文件传输协议，不需要进行用户认证即可获取到所需的文件资源。因此接下来配置TFTP服务程序，为客户端主机提供引导及驱动文件。当客户端主机有了基本的驱动程序之后，再通过vsftpd服务程序将完整的光盘镜像文件传输过去。',0,'alvin',curdate());
insert into Content values(1500,16,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install tftp-server
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Resolving Dependencies
--> Running transaction check
---> Package tftp-server.x86_64 0:5.2-11.el7 will be installed
--> Processing Dependency: xinetd for package: tftp-server-5.2-11.el7.x86_64
--> Running transaction check
---> Package xinetd.x86_64 2:2.3.15-12.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 tftp-server x86_64 5.2-11.el7 rhel 44 k
Installing for dependencies:
 xinetd x86_64 2:2.3.15-12.el7 rhel 128 k
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 172 k
Installed size: 325 k
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 1.7 MB/s | 172 kB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 2:xinetd-2.3.15-12.el7.x86_64 1/2 
 Installing : tftp-server-5.2-11.el7.x86_64 2/2 
 Verifying : 2:xinetd-2.3.15-12.el7.x86_64 1/2 
 Verifying : tftp-server-5.2-11.el7.x86_64 2/2 
Installed:
 tftp-server.x86_64 0:5.2-11.el7 
Dependency Installed:
 xinetd.x86_64 2:2.3.15-12.el7 
Complete!
','[root@linuxprobe ~]# yum install tftp-server
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Resolving Dependencies
--> Running transaction check
---> Package tftp-server.x86_64 0:5.2-11.el7 will be installed
--> Processing Dependency: xinetd for package: tftp-server-5.2-11.el7.x86_64
--> Running transaction check
---> Package xinetd.x86_64 2:2.3.15-12.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 tftp-server x86_64 5.2-11.el7 rhel 44 k
Installing for dependencies:
 xinetd x86_64 2:2.3.15-12.el7 rhel 128 k
Transaction Summary
================================================================================
Install 1 Package (+1 Dependent package)
Total download size: 172 k
Installed size: 325 k
Is this ok [y/d/N]: y
Downloading packages:
--------------------------------------------------------------------------------
Total 1.7 MB/s | 172 kB 00:00 
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : 2:xinetd-2.3.15-12.el7.x86_64 1/2 
 Installing : tftp-server-5.2-11.el7.x86_64 2/2 
 Verifying : 2:xinetd-2.3.15-12.el7.x86_64 1/2 
 Verifying : tftp-server-5.2-11.el7.x86_64 2/2 
Installed:
 tftp-server.x86_64 0:5.2-11.el7 
Dependency Installed:
 xinetd.x86_64 2:2.3.15-12.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1501,16,'p',25,'{}','        TFTP是一种非常精简的文件传输服务程序，它的运行和关闭是由xinetd网络守护进程服务来管理的。xinetd服务程序会同时监听系统的多个端口，然后根据用户请求的端口号调取相应的服务程序来响应用户的请求。需要开启TFTP服务程序，只需在xinetd服务程序的配置文件中把disable参数改成no就可以了。保存配置文件并退出，然后重启xinetd服务程序，并将其加入到开机启动项中（在RHEL 7系统中，已经默认启用了xinetd服务程序，因此在将其添加到开机启动项中的时候没有输出信息属于正常情况）。','        TFTP是一种非常精简的文件传输服务程序，它的运行和关闭是由xinetd网络守护进程服务来管理的。xinetd服务程序会同时监听系统的多个端口，然后根据用户请求的端口号调取相应的服务程序来响应用户的请求。需要开启TFTP服务程序，只需在xinetd服务程序的配置文件中把disable参数改成no就可以了。保存配置文件并退出，然后重启xinetd服务程序，并将其加入到开机启动项中（在RHEL 7系统中，已经默认启用了xinetd服务程序，因此在将其添加到开机启动项中的时候没有输出信息属于正常情况）。',0,'alvin',curdate());
insert into Content values(1502,16,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~.d]# vim /etc/xinetd.d/tftp
service tftp
{
        socket_type             = dgram
        protocol                = udp
        wait                    = yes
        user                    = root
        server                  = /usr/sbin/in.tftpd
        server_args             = -s /var/lib/tftpboot
        disable                 = no
        per_source              = 11
        cps                     = 100 2
        flags                   = IPv4
[root@linuxprobe xinetd.d]# systemctl restart xinetd
[root@linuxprobe xinetd.d]# systemctl enable xinetd
','[root@linuxprobe ~.d]# vim /etc/xinetd.d/tftp
service tftp
{
        socket_type             = dgram
        protocol                = udp
        wait                    = yes
        user                    = root
        server                  = /usr/sbin/in.tftpd
        server_args             = -s /var/lib/tftpboot
        disable                 = no
        per_source              = 11
        cps                     = 100 2
        flags                   = IPv4
[root@linuxprobe xinetd.d]# systemctl restart xinetd
[root@linuxprobe xinetd.d]# systemctl enable xinetd
',0,'alvin',curdate());
insert into Content values(1503,16,'p',27,'{}','        TFTP服务程序默认使用的是UDP协议，占用的端口号为69，所以在生产环境中还需要在firewalld防火墙管理工具中写入使其永久生效的允许策略，以便让客户端主机顺利获取到引导文件。','        TFTP服务程序默认使用的是UDP协议，占用的端口号为69，所以在生产环境中还需要在firewalld防火墙管理工具中写入使其永久生效的允许策略，以便让客户端主机顺利获取到引导文件。',0,'alvin',curdate());
insert into Content values(1504,16,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# firewall-cmd --permanent --add-port=69/udp
success
[root@linuxprobe ~]# firewall-cmd --reload 
success
','[root@linuxprobe ~]# firewall-cmd --permanent --add-port=69/udp
success
[root@linuxprobe ~]# firewall-cmd --reload 
success
',0,'alvin',curdate());
insert into Content values(1505,16,'h3',29,'{}','配置SYSLinux服务程序','配置SYSLinux服务程序',0,'alvin',curdate());
insert into Content values(1506,16,'p',30,'{}','        SYSLinux是一个用于提供引导加载的服务程序。与其说SYSLinux是一个服务程序，不如说更需要里面的引导文件，在安装好SYSLinux服务程序软件包后，/usr/share/syslinux目录中会出现很多引导文件。','        SYSLinux是一个用于提供引导加载的服务程序。与其说SYSLinux是一个服务程序，不如说更需要里面的引导文件，在安装好SYSLinux服务程序软件包后，/usr/share/syslinux目录中会出现很多引导文件。',0,'alvin',curdate());
insert into Content values(1507,16,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install syslinux
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Resolving Dependencies
--> Running transaction check
---> Package syslinux.x86_64 0:4.05-8.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 syslinux x86_64 4.05-8.el7 rhel 1.0 M
Transaction Summary
================================================================================
Install 1 Package
Total download size: 1.0 M
Installed size: 2.3 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : syslinux-4.05-8.el7.x86_64 1/1 
 Verifying : syslinux-4.05-8.el7.x86_64 1/1 
Installed:
 syslinux.x86_64 0:4.05-8.el7 
Complete!
','[root@linuxprobe ~]# yum install syslinux
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Resolving Dependencies
--> Running transaction check
---> Package syslinux.x86_64 0:4.05-8.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 syslinux x86_64 4.05-8.el7 rhel 1.0 M
Transaction Summary
================================================================================
Install 1 Package
Total download size: 1.0 M
Installed size: 2.3 M
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : syslinux-4.05-8.el7.x86_64 1/1 
 Verifying : syslinux-4.05-8.el7.x86_64 1/1 
Installed:
 syslinux.x86_64 0:4.05-8.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1508,16,'p',32,'{}','        我们首先需要把SYSLinux提供的引导文件复制到TFTP服务程序的默认目录中，也就是前文提到的文件pxelinux.0，这样客户端主机就能够顺利地获取到引导文件了。另外在RHEL 7系统光盘镜像中也有一些我们需要调取的引导文件。确认光盘镜像已经被挂载到/media/cdrom目录后，使用复制命令将光盘镜像中自带的一些引导文件也复制到TFTP服务程序的默认目录中。','        我们首先需要把SYSLinux提供的引导文件复制到TFTP服务程序的默认目录中，也就是前文提到的文件pxelinux.0，这样客户端主机就能够顺利地获取到引导文件了。另外在RHEL 7系统光盘镜像中也有一些我们需要调取的引导文件。确认光盘镜像已经被挂载到/media/cdrom目录后，使用复制命令将光盘镜像中自带的一些引导文件也复制到TFTP服务程序的默认目录中。',0,'alvin',curdate());
insert into Content values(1509,16,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /var/lib/tftpboot
[root@linuxprobe tftpboot]# cp /usr/share/syslinux/pxelinux.0 .
[root@linuxprobe tftpboot]# cp /media/cdrom/images/pxeboot/{vmlinuz,initrd.img} .
[root@linuxprobe tftpboot]# cp /media/cdrom/isolinux/{vesamenu.c32,boot.msg} .
','[root@linuxprobe ~]# cd /var/lib/tftpboot
[root@linuxprobe tftpboot]# cp /usr/share/syslinux/pxelinux.0 .
[root@linuxprobe tftpboot]# cp /media/cdrom/images/pxeboot/{vmlinuz,initrd.img} .
[root@linuxprobe tftpboot]# cp /media/cdrom/isolinux/{vesamenu.c32,boot.msg} .
',0,'alvin',curdate());
insert into Content values(1510,16,'p',34,'{}','        然后在TFTP服务程序的目录中新建pxelinux.cfg目录，虽然该目录的名字带有后缀，但依然也是目录，而非文件！将系统光盘中的开机选项菜单复制到该目录中，并命名为default。这个default文件就是开机时的选项菜单，如下图所示。','        然后在TFTP服务程序的目录中新建pxelinux.cfg目录，虽然该目录的名字带有后缀，但依然也是目录，而非文件！将系统光盘中的开机选项菜单复制到该目录中，并命名为default。这个default文件就是开机时的选项菜单，如下图所示。',0,'alvin',curdate());
insert into Content values(1511,16,'image',35,'{"alt": "mail_system", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_step_one.png", "width": "676"}','/static/img/linux/linux_pxe_step_one.png','/static/img/linux/linux_pxe_step_one.png',0,'alvin',curdate());
insert into Content values(1512,16,'pre',36,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe tftpboot]# mkdir pxelinux.cfg
[root@linuxprobe tftpboot]# cp /media/cdrom/isolinux/isolinux.cfg pxelinux.cfg/default
','[root@linuxprobe tftpboot]# mkdir pxelinux.cfg
[root@linuxprobe tftpboot]# cp /media/cdrom/isolinux/isolinux.cfg pxelinux.cfg/default
',0,'alvin',curdate());
insert into Content values(1513,16,'p',37,'{}','        默认的开机菜单中有两个选项，要么是安装系统，要么是对安装介质进行检验。既然我们已经确定采用无人值守的方式安装系统，还需要为每台主机手动选择相应的选项，未免与我们的主旨（无人值守安装）相悖。现在我们编辑这个default文件，把第1行的default参数修改为linux，这样系统在开机时就会默认执行那个名称为linux的选项了。对应的linux选项大约在64行，我们将默认的光盘镜像安装方式修改成FTP文件传输方式，并指定好光盘镜像的获取网址以及Kickstart应答文件的获取路径：','        默认的开机菜单中有两个选项，要么是安装系统，要么是对安装介质进行检验。既然我们已经确定采用无人值守的方式安装系统，还需要为每台主机手动选择相应的选项，未免与我们的主旨（无人值守安装）相悖。现在我们编辑这个default文件，把第1行的default参数修改为linux，这样系统在开机时就会默认执行那个名称为linux的选项了。对应的linux选项大约在64行，我们将默认的光盘镜像安装方式修改成FTP文件传输方式，并指定好光盘镜像的获取网址以及Kickstart应答文件的获取路径：',0,'alvin',curdate());
insert into Content values(1514,16,'pre',38,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe tftpboot]# vim pxelinux.cfg/default
 1 default linux
 2 timeout 600
 3
 4 display boot.msg
 5
 6 # Clear the screen when exiting the menu, instead of leaving the menu displa yed.
 7 # For vesamenu, this means the graphical background is still displayed witho ut
 8 # the menu itself for as long as the screen remains in graphics mode.
 9 menu clear
 10 menu background splash.png
 11 menu title Red Hat Enterprise Linux 7.0
 12 menu vshift 8
 13 menu rows 18
 14 menu margin 8
 15 #menu hidden
 16 menu helpmsgrow 15
 17 menu tabmsgrow 13
 18
 19 # Border Area
 20 menu color border * #00000000 #00000000 none
 21
 22 # Selected item
 23 menu color sel 0 #ffffffff #00000000 none
 24
 25 # Title bar
 26 menu color title 0 #ff7ba3d0 #00000000 none
 27
 28 # Press [Tab] message
 29 menu color tabmsg 0 #ff3a6496 #00000000 none
 30
 31 # Unselected menu item
 32 menu color unsel 0 #84b8ffff #00000000 none
 33
 34 # Selected hotkey
 35 menu color hotsel 0 #84b8ffff #00000000 none
 36
 37 # Unselected hotkey
 38 menu color hotkey 0 #ffffffff #00000000 none
 39
 40 # Help text
 41 menu color help 0 #ffffffff #00000000 none
 42 
 43 # A scrollbar of some type? Not sure.
 44 menu color scrollbar 0 #ffffffff #ff355594 none
 45 
 46 # Timeout msg
 47 menu color timeout 0 #ffffffff #00000000 none
 48 menu color timeout_msg 0 #ffffffff #00000000 none
 49 
 50 # Command prompt text
 51 menu color cmdmark 0 #84b8ffff #00000000 none
 52 menu color cmdline 0 #ffffffff #00000000 none
 53 
 54 # Do not display the actual menu unless the user presses a key. All that is displayed is a timeout message.
 55 
 56 menu tabmsg Press Tab for full configuration options on menu items.
 57 
 58 menu separator # insert an empty line
 59 menu separator # insert an empty line
 59 menu separator # insert an empty line
 60 
 61 label linux
 62 menu label ^Install Red Hat Enterprise Linux 7.0
 63 kernel vmlinuz
 64 append initrd=initrd.img inst.stage2=ftp://192.168.10.10 ks=ftp://192.168.10.10/pub/ks.cfg quiet
 65
………………省略部分输出信息………………
','[root@linuxprobe tftpboot]# vim pxelinux.cfg/default
 1 default linux
 2 timeout 600
 3
 4 display boot.msg
 5
 6 # Clear the screen when exiting the menu, instead of leaving the menu displa yed.
 7 # For vesamenu, this means the graphical background is still displayed witho ut
 8 # the menu itself for as long as the screen remains in graphics mode.
 9 menu clear
 10 menu background splash.png
 11 menu title Red Hat Enterprise Linux 7.0
 12 menu vshift 8
 13 menu rows 18
 14 menu margin 8
 15 #menu hidden
 16 menu helpmsgrow 15
 17 menu tabmsgrow 13
 18
 19 # Border Area
 20 menu color border * #00000000 #00000000 none
 21
 22 # Selected item
 23 menu color sel 0 #ffffffff #00000000 none
 24
 25 # Title bar
 26 menu color title 0 #ff7ba3d0 #00000000 none
 27
 28 # Press [Tab] message
 29 menu color tabmsg 0 #ff3a6496 #00000000 none
 30
 31 # Unselected menu item
 32 menu color unsel 0 #84b8ffff #00000000 none
 33
 34 # Selected hotkey
 35 menu color hotsel 0 #84b8ffff #00000000 none
 36
 37 # Unselected hotkey
 38 menu color hotkey 0 #ffffffff #00000000 none
 39
 40 # Help text
 41 menu color help 0 #ffffffff #00000000 none
 42 
 43 # A scrollbar of some type? Not sure.
 44 menu color scrollbar 0 #ffffffff #ff355594 none
 45 
 46 # Timeout msg
 47 menu color timeout 0 #ffffffff #00000000 none
 48 menu color timeout_msg 0 #ffffffff #00000000 none
 49 
 50 # Command prompt text
 51 menu color cmdmark 0 #84b8ffff #00000000 none
 52 menu color cmdline 0 #ffffffff #00000000 none
 53 
 54 # Do not display the actual menu unless the user presses a key. All that is displayed is a timeout message.
 55 
 56 menu tabmsg Press Tab for full configuration options on menu items.
 57 
 58 menu separator # insert an empty line
 59 menu separator # insert an empty line
 59 menu separator # insert an empty line
 60 
 61 label linux
 62 menu label ^Install Red Hat Enterprise Linux 7.0
 63 kernel vmlinuz
 64 append initrd=initrd.img inst.stage2=ftp://192.168.10.10 ks=ftp://192.168.10.10/pub/ks.cfg quiet
 65
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1515,16,'h3',39,'{}','配置VSFtpd服务程序','配置VSFtpd服务程序',0,'alvin',curdate());
insert into Content values(1516,16,'p',40,'{}','        在我们这套无人值守安装系统的服务中，光盘镜像是通过FTP协议传输的，因此势必要用到vsftpd服务程序。当然，也可以使用httpd服务程序来提供Web网站访问的方式，只要能确保将光盘镜像顺利传输给客户端主机即可。如果打算使用Web网站服务来提供光盘镜像，一定记得将上面配置文件中的光盘镜像获取网址和Kickstart应答文件获取网址修改一下。','        在我们这套无人值守安装系统的服务中，光盘镜像是通过FTP协议传输的，因此势必要用到vsftpd服务程序。当然，也可以使用httpd服务程序来提供Web网站访问的方式，只要能确保将光盘镜像顺利传输给客户端主机即可。如果打算使用Web网站服务来提供光盘镜像，一定记得将上面配置文件中的光盘镜像获取网址和Kickstart应答文件获取网址修改一下。',0,'alvin',curdate());
insert into Content values(1517,16,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install vsftpd
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Resolving Dependencies
--> Running transaction check
---> Package vsftpd.x86_64 0:3.0.2-9.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 vsftpd x86_64 3.0.2-9.el7 rhel 166 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 166 k
Installed size: 343 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : vsftpd-3.0.2-9.el7.x86_64 1/1 
 Verifying : vsftpd-3.0.2-9.el7.x86_64 1/1 
Installed:
 vsftpd.x86_64 0:3.0.2-9.el7 
Complete!
','[root@linuxprobe ~]# yum install vsftpd
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Resolving Dependencies
--> Running transaction check
---> Package vsftpd.x86_64 0:3.0.2-9.el7 will be installed
--> Finished Dependency Resolution
Dependencies Resolved
================================================================================
 Package Arch Version Repository Size
================================================================================
Installing:
 vsftpd x86_64 3.0.2-9.el7 rhel 166 k
Transaction Summary
================================================================================
Install 1 Package
Total download size: 166 k
Installed size: 343 k
Is this ok [y/d/N]: y
Downloading packages:
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
 Installing : vsftpd-3.0.2-9.el7.x86_64 1/1 
 Verifying : vsftpd-3.0.2-9.el7.x86_64 1/1 
Installed:
 vsftpd.x86_64 0:3.0.2-9.el7 
Complete!
',0,'alvin',curdate());
insert into Content values(1518,16,'p',42,'{}','        老师再啰嗦一句，在配置文件修改正确之后，一定将相应的服务程序添加到开机启动项中，这样无论是在生产环境中还是在红帽认证考试中，都可以在设备重启之后依然能提供相应的服务。希望各位读者一定养成这个好习惯。','        老师再啰嗦一句，在配置文件修改正确之后，一定将相应的服务程序添加到开机启动项中，这样无论是在生产环境中还是在红帽认证考试中，都可以在设备重启之后依然能提供相应的服务。希望各位读者一定养成这个好习惯。',0,'alvin',curdate());
insert into Content values(1519,16,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service\'
','[root@linuxprobe ~]# systemctl restart vsftpd
[root@linuxprobe ~]# systemctl enable vsftpd
ln -s \'/usr/lib/systemd/system/vsftpd.service\' \'/etc/systemd/system/multi-user.target.wants/vsftpd.service\'
',0,'alvin',curdate());
insert into Content values(1520,16,'p',44,'{}','        在确认系统光盘镜像已经正常挂载到/media/cdrom目录后，把目录中的光盘镜像文件全部复制到vsftpd服务程序的工作目录中。','        在确认系统光盘镜像已经正常挂载到/media/cdrom目录后，把目录中的光盘镜像文件全部复制到vsftpd服务程序的工作目录中。',0,'alvin',curdate());
insert into Content values(1521,16,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cp -r /media/cdrom/* /var/ftp
','[root@linuxprobe ~]# cp -r /media/cdrom/* /var/ftp
',0,'alvin',curdate());
insert into Content values(1522,16,'p',46,'{}','        这个过程大约需要3～5分钟。在此期间，我们也别闲着，在firewalld防火墙管理工具中写入使FTP协议永久生效的允许策略，然后在SELinux中放行FTP传输：','        这个过程大约需要3～5分钟。在此期间，我们也别闲着，在firewalld防火墙管理工具中写入使FTP协议永久生效的允许策略，然后在SELinux中放行FTP传输：',0,'alvin',curdate());
insert into Content values(1523,16,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# firewall-cmd --permanent --add-service=ftp
success
[root@linuxprobe ~]# firewall-cmd --reload 
success
[root@linuxprobe ~]# setsebool -P ftpd_connect_all_unreserved=on
','[root@linuxprobe ~]# firewall-cmd --permanent --add-service=ftp
success
[root@linuxprobe ~]# firewall-cmd --reload 
success
[root@linuxprobe ~]# setsebool -P ftpd_connect_all_unreserved=on
',0,'alvin',curdate());
insert into Content values(1524,16,'h3',48,'{}','创建KickStart应答文件','创建KickStart应答文件',0,'alvin',curdate());
insert into Content values(1525,16,'p',49,'{}','        毕竟，我们使用PXE + Kickstart部署的是一套“无人值守安装系统服务”，而不是“无人值守传输系统光盘镜像服务”，因此还需要让客户端主机能够一边获取光盘镜像，还能够一边自动帮我们填写好安装过程中出现的选项。简单来说，如果生产环境中有100台服务器，它们需要安装相同的系统环境，那么在安装过程中单击的按钮和填写的信息也应该都是相同的。那么，为什么不创建一个类似于备忘录的需求清单呢？这样，在无人值守安装系统时，可以从这个需求清单中找到相应的选项值，从而免去了手动输入之苦，更重要的是，也彻底解放了人的干预，彻底实现无人值守自动安装系统，而不是单纯地传输系统光盘镜像。','        毕竟，我们使用PXE + Kickstart部署的是一套“无人值守安装系统服务”，而不是“无人值守传输系统光盘镜像服务”，因此还需要让客户端主机能够一边获取光盘镜像，还能够一边自动帮我们填写好安装过程中出现的选项。简单来说，如果生产环境中有100台服务器，它们需要安装相同的系统环境，那么在安装过程中单击的按钮和填写的信息也应该都是相同的。那么，为什么不创建一个类似于备忘录的需求清单呢？这样，在无人值守安装系统时，可以从这个需求清单中找到相应的选项值，从而免去了手动输入之苦，更重要的是，也彻底解放了人的干预，彻底实现无人值守自动安装系统，而不是单纯地传输系统光盘镜像。',0,'alvin',curdate());
insert into Content values(1526,16,'p',50,'{}','        有了上文做铺垫，相信大家现在应该可以猜到Kickstart其实并不是一个服务程序，而是一个应答文件了。是的！Kickstart应答文件中包含了系统安装过程中需要使用的选项和参数信息，系统可以自动调取这个应答文件的内容，从而彻底实现了无人值守安装系统。那么，既然这个文件如此重要，该去哪里找呢？其实在root管理员的家目录中有一个名为anaconda-ks.cfg的文件，它就是应答文件。下面将这个文件复制到vsftpd服务程序的工作目录中（在开机选项菜单的配置文件中已经定义了该文件的获取路径，也就是vsftpd服务程序数据目录中的pub子目录中）。使用chmod命令设置该文件的权限，确保所有人都有可读的权限，以保证客户端主机可以顺利获取到应答文件及里面的内容：','        有了上文做铺垫，相信大家现在应该可以猜到Kickstart其实并不是一个服务程序，而是一个应答文件了。是的！Kickstart应答文件中包含了系统安装过程中需要使用的选项和参数信息，系统可以自动调取这个应答文件的内容，从而彻底实现了无人值守安装系统。那么，既然这个文件如此重要，该去哪里找呢？其实在root管理员的家目录中有一个名为anaconda-ks.cfg的文件，它就是应答文件。下面将这个文件复制到vsftpd服务程序的工作目录中（在开机选项菜单的配置文件中已经定义了该文件的获取路径，也就是vsftpd服务程序数据目录中的pub子目录中）。使用chmod命令设置该文件的权限，确保所有人都有可读的权限，以保证客户端主机可以顺利获取到应答文件及里面的内容：',0,'alvin',curdate());
insert into Content values(1527,16,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cp ~/anaconda-ks.cfg /var/ftp/pub/ks.cfg
[root@linuxprobe ~]# chmod +r /var/ftp/pub/ks.cfg
','[root@linuxprobe ~]# cp ~/anaconda-ks.cfg /var/ftp/pub/ks.cfg
[root@linuxprobe ~]# chmod +r /var/ftp/pub/ks.cfg
',0,'alvin',curdate());
insert into Content values(1528,16,'p',52,'{}','        Kickstart应答文件并没有想象中的那么复杂，它总共只有46行左右的参数和注释内容，大家完全可以通过参数的名称及介绍来快速了解每个参数的作用。刘遄老师在这里挑选几个比较有代表性的参数进行讲解，其他参数建议大家自行修改测试。','        Kickstart应答文件并没有想象中的那么复杂，它总共只有46行左右的参数和注释内容，大家完全可以通过参数的名称及介绍来快速了解每个参数的作用。刘遄老师在这里挑选几个比较有代表性的参数进行讲解，其他参数建议大家自行修改测试。',0,'alvin',curdate());
insert into Content values(1529,16,'p',53,'{}','        首先把第6行的光盘镜像安装方式修改成FTP协议，仔细填写好FTP服务器的IP地址，并用本地浏览器尝试打开下检查有没有报错。然后把第21行的时区修改成上海(Asia/Shanghai)，最后再把29行的磁盘选项设置为清空所有磁盘内容并初始化磁盘：','        首先把第6行的光盘镜像安装方式修改成FTP协议，仔细填写好FTP服务器的IP地址，并用本地浏览器尝试打开下检查有没有报错。然后把第21行的时区修改成上海(Asia/Shanghai)，最后再把29行的磁盘选项设置为清空所有磁盘内容并初始化磁盘：',0,'alvin',curdate());
insert into Content values(1530,16,'pre',54,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /var/ftp/pub/ks.cfg 
 1 #version=RHEL7
 2 # System authorization information
 3 auth --enableshadow --passalgo=sha512
 4 
 5 # Use CDROM installation media
 6 url --url=ftp://192.168.10.10
 7 # Run the Setup Agent on first boot
 8 firstboot --enable
 9 ignoredisk --only-use=sda
 10 # Keyboard layouts
 11 keyboard --vckeymap=us --xlayouts=\'us\'
 12 # System language
 13 lang en_US.UTF-8
 14 
 15 # Network information
 16 network --bootproto=dhcp --device=eno16777728 --onboot=off --ipv6=auto
 17 network --hostname=localhost.localdomain
 18 # Root password
 19 rootpw --iscrypted $6$pDjJf42g8C6pL069$iI.PX/yFaqpo0ENw2pa7MomkjLyoae2zjMz2UZJ7b H3UO4oWtR1.Wk/hxZ3XIGmzGJPcs/MgpYssoi8hPCt8b/
 20 # System timezone
 21 timezone Asia/Shanghai --isUtc
 22 user --name=linuxprobe --password=$6$a9v3InSTNbweIR7D$JegfYWbCdoOokj9sodEccdO.zL F4oSH2AZ2ss2R05B6Lz2A0v2K.RjwsBALL2FeKQVgf640oa/tok6J.7GUtO/ --iscrypted --gecos ="linuxprobe"
 23 # X Window System configuration information
 24 xconfig --startxonboot
 25 # System bootloader configuration
 26 bootloader --location=mbr --boot-drive=sda
 27 autopart --type=lvm
 28 # Partition clearing information
 29 clearpart --all --initlabel
 30 
 31 %packages
 32 @base
 33 @core
 34 @desktop-debugging
 35 @dial-up
 36 @fonts
 37 @gnome-desktop
 38 @guest-agents
 39 @guest-desktop-agents
 40 @input-methods
 41 @internet-browser
 42 @multimedia
 43 @print-client
 44 @x11
 45 
 46 %end
','[root@linuxprobe ~]# vim /var/ftp/pub/ks.cfg 
 1 #version=RHEL7
 2 # System authorization information
 3 auth --enableshadow --passalgo=sha512
 4 
 5 # Use CDROM installation media
 6 url --url=ftp://192.168.10.10
 7 # Run the Setup Agent on first boot
 8 firstboot --enable
 9 ignoredisk --only-use=sda
 10 # Keyboard layouts
 11 keyboard --vckeymap=us --xlayouts=\'us\'
 12 # System language
 13 lang en_US.UTF-8
 14 
 15 # Network information
 16 network --bootproto=dhcp --device=eno16777728 --onboot=off --ipv6=auto
 17 network --hostname=localhost.localdomain
 18 # Root password
 19 rootpw --iscrypted $6$pDjJf42g8C6pL069$iI.PX/yFaqpo0ENw2pa7MomkjLyoae2zjMz2UZJ7b H3UO4oWtR1.Wk/hxZ3XIGmzGJPcs/MgpYssoi8hPCt8b/
 20 # System timezone
 21 timezone Asia/Shanghai --isUtc
 22 user --name=linuxprobe --password=$6$a9v3InSTNbweIR7D$JegfYWbCdoOokj9sodEccdO.zL F4oSH2AZ2ss2R05B6Lz2A0v2K.RjwsBALL2FeKQVgf640oa/tok6J.7GUtO/ --iscrypted --gecos ="linuxprobe"
 23 # X Window System configuration information
 24 xconfig --startxonboot
 25 # System bootloader configuration
 26 bootloader --location=mbr --boot-drive=sda
 27 autopart --type=lvm
 28 # Partition clearing information
 29 clearpart --all --initlabel
 30 
 31 %packages
 32 @base
 33 @core
 34 @desktop-debugging
 35 @dial-up
 36 @fonts
 37 @gnome-desktop
 38 @guest-agents
 39 @guest-desktop-agents
 40 @input-methods
 41 @internet-browser
 42 @multimedia
 43 @print-client
 44 @x11
 45 
 46 %end
',0,'alvin',curdate());
insert into Content values(1531,16,'p',55,'{}','        如果觉得系统默认自带的应答文件参数较少，不能满足生产环境的需求，则可以通过Yum软件仓库来安装system-config-kickstart软件包。这是一款图形化的Kickstart应答文件生成工具，可以根据自己的需求生成自定义的应答文件，然后将生成的文件放到/var/ftp/pub目录中并将名字修改为ks.cfg即可。','        如果觉得系统默认自带的应答文件参数较少，不能满足生产环境的需求，则可以通过Yum软件仓库来安装system-config-kickstart软件包。这是一款图形化的Kickstart应答文件生成工具，可以根据自己的需求生成自定义的应答文件，然后将生成的文件放到/var/ftp/pub目录中并将名字修改为ks.cfg即可。',0,'alvin',curdate());
insert into Content values(1532,16,'h2',56,'{}','自动部署客户机','自动部署客户机',0,'alvin',curdate());
insert into Content values(1533,16,'p',57,'{}','        在按照上文讲解的方法成功部署各个相关的服务程序后，就可以使用PXE + Kickstart无人值守安装系统了。在采用下面的步骤建立虚拟主机时，一定要把客户端的网卡模式设定成与服务端一致的“仅主机模式”，否则两台设备无法进行通信，也就更别提自动安装系统了。其余硬件配置选项并没有强制性要求，大家可参考这里的配置选项来设定。','        在按照上文讲解的方法成功部署各个相关的服务程序后，就可以使用PXE + Kickstart无人值守安装系统了。在采用下面的步骤建立虚拟主机时，一定要把客户端的网卡模式设定成与服务端一致的“仅主机模式”，否则两台设备无法进行通信，也就更别提自动安装系统了。其余硬件配置选项并没有强制性要求，大家可参考这里的配置选项来设定。',0,'alvin',curdate());
insert into Content values(1534,16,'p',58,'{}',' BOLD[  第1步： ]BOLD 打开“新建虚拟机向导”程序，选择“典型（推荐） ”配置类型，然后单击“下一步”按钮，如下图所示。',' BOLD[  第1步： ]BOLD 打开“新建虚拟机向导”程序，选择“典型（推荐） ”配置类型，然后单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1535,16,'image',59,'{"alt": "pick_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_pick_setting.png", "width": "676"}','/static/img/linux/linux_pxe_pick_setting.png','/static/img/linux/linux_pxe_pick_setting.png',0,'alvin',curdate());
insert into Content values(1536,16,'p',60,'{}',' BOLD[  第2步： ]BOLD 将虚拟机操作系统的安装来源设置为“稍后安装操作系统”。这样做的目的是让虚拟机真正从网络中获取系统安装镜像，同时也可避免VMware Workstation虚拟机软件按照内设的方法自行安装系统。单击“下一步”按钮，如下图所示。',' BOLD[  第2步： ]BOLD 将虚拟机操作系统的安装来源设置为“稍后安装操作系统”。这样做的目的是让虚拟机真正从网络中获取系统安装镜像，同时也可避免VMware Workstation虚拟机软件按照内设的方法自行安装系统。单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1537,16,'image',61,'{"alt": "install_vm", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_install_vm.png", "width": "676"}','/static/img/linux/linux_pxe_install_vm.png','/static/img/linux/linux_pxe_install_vm.png',0,'alvin',curdate());
insert into Content values(1538,16,'p',62,'{}',' BOLD[  第3步： ]BOLD 将“客户机操作系统”设置为“Red Hat Enterprise Linux 7 64位”，然后单击“下一步”按钮，如下图所示。',' BOLD[  第3步： ]BOLD 将“客户机操作系统”设置为“Red Hat Enterprise Linux 7 64位”，然后单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1539,16,'image',63,'{"alt": "check_system", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_check_system.png", "width": "676"}','/static/img/linux/linux_pxe_check_system.png','/static/img/linux/linux_pxe_check_system.png',0,'alvin',curdate());
insert into Content values(1540,16,'p',64,'{}',' BOLD[  第4步： ]BOLD 对虚拟机进行命名并设置安装位置。大家可自行定义虚拟机的名称，而安装位置则尽量选择磁盘空间较大的分区。然后单击“下一步”按钮，如下图所示。',' BOLD[  第4步： ]BOLD 对虚拟机进行命名并设置安装位置。大家可自行定义虚拟机的名称，而安装位置则尽量选择磁盘空间较大的分区。然后单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1541,16,'image',65,'{"alt": "set_install_dir", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_set_install_dir.png", "width": "676"}','/static/img/linux/linux_pxe_set_install_dir.png','/static/img/linux/linux_pxe_set_install_dir.png',0,'alvin',curdate());
insert into Content values(1542,16,'p',66,'{}',' BOLD[  第5步： ]BOLD 指定磁盘容量。这里将“最大磁盘大小”设置为20GB，指的是虚拟机系统能够使用的最大上限，而不是会被立即占满，因此设置得稍微大一些也没有关系。然后单击“下一步”按钮，如下图所示。',' BOLD[  第5步： ]BOLD 指定磁盘容量。这里将“最大磁盘大小”设置为20GB，指的是虚拟机系统能够使用的最大上限，而不是会被立即占满，因此设置得稍微大一些也没有关系。然后单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1543,16,'image',67,'{"alt": "set_neicun", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_set_neicun.png", "width": "676"}','/static/img/linux/linux_pxe_set_neicun.png','/static/img/linux/linux_pxe_set_neicun.png',0,'alvin',curdate());
insert into Content values(1544,16,'p',68,'{}',' BOLD[  第1步： ]BOLD 结束“新建虚拟机向导程序”后，先不要着急打开虚拟机系统。大家还需要单击下图1中的“自定义硬件”按钮，在弹出的如下图2所示的界面中，把“网络适配器”设备同样也设置为“仅主机模式”（这个步骤非常重要），然后单击“确定”按钮。',' BOLD[  第1步： ]BOLD 结束“新建虚拟机向导程序”后，先不要着急打开虚拟机系统。大家还需要单击下图1中的“自定义硬件”按钮，在弹出的如下图2所示的界面中，把“网络适配器”设备同样也设置为“仅主机模式”（这个步骤非常重要），然后单击“确定”按钮。',0,'alvin',curdate());
insert into Content values(1545,16,'image',69,'{"alt": "install_step_one", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_install_step_one.png", "width": "676"}','/static/img/linux/linux_pxe_install_step_one.png','/static/img/linux/linux_pxe_install_step_one.png',0,'alvin',curdate());
insert into Content values(1546,16,'image',70,'{"alt": "install_step_two", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_install_step_two.png", "width": "676"}','/static/img/linux/linux_pxe_install_step_two.png','/static/img/linux/linux_pxe_install_step_two.png',0,'alvin',curdate());
insert into Content values(1547,16,'p',71,'{}','        现在，我们就同时准备好了PXE + Kickstart无人值守安装系统与虚拟主机。在生产环境中，大家只需要将配置妥当的服务器上架，接通服务器和客户端主机之间的网线，然后启动客户端主机即可。接下来就会按照图19-12和图19-13那样，开始传输光盘镜像文件并进行自动安装了—期间完全无须人工干预，直到安装完毕时才需要运维人员进行简单的初始化工作。','        现在，我们就同时准备好了PXE + Kickstart无人值守安装系统与虚拟主机。在生产环境中，大家只需要将配置妥当的服务器上架，接通服务器和客户端主机之间的网线，然后启动客户端主机即可。接下来就会按照图19-12和图19-13那样，开始传输光盘镜像文件并进行自动安装了—期间完全无须人工干预，直到安装完毕时才需要运维人员进行简单的初始化工作。',0,'alvin',curdate());
insert into Content values(1548,16,'image',72,'{"alt": "auto_install", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_auto_install.png", "width": "676"}','/static/img/linux/linux_pxe_auto_install.png','/static/img/linux/linux_pxe_auto_install.png',0,'alvin',curdate());
insert into Content values(1549,16,'image',73,'{"alt": "install_process", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_pxe_install_process.png", "width": "676"}','/static/img/linux/linux_pxe_install_process.png','/static/img/linux/linux_pxe_install_process.png',0,'alvin',curdate());
insert into Content values(1550,16,'p',74,'{}','        由此可见，当生产环境工作中有数百台服务器需要批量安装系统时，使用无人值守安装系统的便捷性是不言而喻的。','        由此可见，当生产环境工作中有数百台服务器需要批量安装系统时，使用无人值守安装系统的便捷性是不言而喻的。',0,'alvin',curdate());
insert into Content values(1551,17,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用LNMP架构部署动态网站环境',' <span class="color_h1">  Linux </span> 使用LNMP架构部署动态网站环境',0,'alvin',curdate());
insert into Content values(1552,17,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1553,17,'p',3,'{}','        LNMP动态网站部署架构是一套由Linux + Nginx + MySQL + PHP组成的动态网站系统解决方案，具有免费、高效、扩展性强且资源消耗低等优良特性。本章首先对比了使用源码包安装服务程序与使用RPM软件包安装服务程序的区别，然后讲解了如何手工编译源码包并安装各个服务程序，以及如何使用Discuz! X3.2版本论坛系统验证架构环境。','        LNMP动态网站部署架构是一套由Linux + Nginx + MySQL + PHP组成的动态网站系统解决方案，具有免费、高效、扩展性强且资源消耗低等优良特性。本章首先对比了使用源码包安装服务程序与使用RPM软件包安装服务程序的区别，然后讲解了如何手工编译源码包并安装各个服务程序，以及如何使用Discuz! X3.2版本论坛系统验证架构环境。',0,'alvin',curdate());
insert into Content values(1554,17,'h2',4,'{}','源码包程序','源码包程序',0,'alvin',curdate());
insert into Content values(1555,17,'p',5,'{}','        本书第1章中曾经讲到，在RPM（红帽软件包管理器）技术出现之前，Linux系统运维人员只能通过源码包的方式来安装各种服务程序，这是一件非常繁琐且极易消耗时间与耐心的事情；而且在安装、升级、卸载程序时还要考虑到与其他程序或函数库的相互依赖关系，这就要求运维人员不仅要掌握更多的Linux系统理论知识以及高超的实操技能，还需要有极好的耐心才能安装好一个源码软件包。考虑到本书的读者都是刚入门或准备入门的运维新人，因为本书在前面的章节中一直都是采用Yum软件仓库的方式来安装服务程序。但是，现在依然有很多软件程序只有源码包的形式，如果我们只会使用Yum软件仓库的方式来安装程序，则面对这些只有源码包的软件程序时，将充满无力感，要么需要等到第三方组织将这些软件程序编写成RPM软件包之后再行使用，要么就只能寻找相关软件程序的替代品了（而且替代软件还必须具备RPM软件包的形式）。由此可见，如果运维人员只会使用Yum软件仓库来安装服务程序，将会形成知识短板，对日后的运维工作带来不利。','        本书第1章中曾经讲到，在RPM（红帽软件包管理器）技术出现之前，Linux系统运维人员只能通过源码包的方式来安装各种服务程序，这是一件非常繁琐且极易消耗时间与耐心的事情；而且在安装、升级、卸载程序时还要考虑到与其他程序或函数库的相互依赖关系，这就要求运维人员不仅要掌握更多的Linux系统理论知识以及高超的实操技能，还需要有极好的耐心才能安装好一个源码软件包。考虑到本书的读者都是刚入门或准备入门的运维新人，因为本书在前面的章节中一直都是采用Yum软件仓库的方式来安装服务程序。但是，现在依然有很多软件程序只有源码包的形式，如果我们只会使用Yum软件仓库的方式来安装程序，则面对这些只有源码包的软件程序时，将充满无力感，要么需要等到第三方组织将这些软件程序编写成RPM软件包之后再行使用，要么就只能寻找相关软件程序的替代品了（而且替代软件还必须具备RPM软件包的形式）。由此可见，如果运维人员只会使用Yum软件仓库来安装服务程序，将会形成知识短板，对日后的运维工作带来不利。',0,'alvin',curdate());
insert into Content values(1556,17,'p',6,'{}','        本着不能让自己的读者在运维工作中吃亏的想法，老师接下来会详细讲解如何使用源码包的方式来安装服务程序。','        本着不能让自己的读者在运维工作中吃亏的想法，老师接下来会详细讲解如何使用源码包的方式来安装服务程序。',0,'alvin',curdate());
insert into Content values(1557,17,'p',7,'{}','        其实，使用源码包来安装服务程序具有两个优势。','        其实，使用源码包来安装服务程序具有两个优势。',0,'alvin',curdate());
insert into Content values(1558,17,'p',8,'{}','        源码包的可移植性非常好，几乎可以在任何Linux系统中安装使用，而RPM软件包是针对特定系统和架构编写的指令集，必须严格地符合执行环境才能顺利安装（即只会去“生硬地”安装服务程序）。','        源码包的可移植性非常好，几乎可以在任何Linux系统中安装使用，而RPM软件包是针对特定系统和架构编写的指令集，必须严格地符合执行环境才能顺利安装（即只会去“生硬地”安装服务程序）。',0,'alvin',curdate());
insert into Content values(1559,17,'p',9,'{}','        使用源码包安装服务程序时会有一个编译过程，因此可以更好地适应安装主机的系统环境，运行效率和优化程度都会强于使用RPM软件包安装的服务程序。也就是说，可以将采用源码包安装服务程序的方式看作是针对系统的“量体裁衣”。','        使用源码包安装服务程序时会有一个编译过程，因此可以更好地适应安装主机的系统环境，运行效率和优化程度都会强于使用RPM软件包安装的服务程序。也就是说，可以将采用源码包安装服务程序的方式看作是针对系统的“量体裁衣”。',0,'alvin',curdate());
insert into Content values(1560,17,'p',10,'{}','        一般来讲，在安装软件时，如果能通过Yum软件仓库来安装，就用Yum方式；反之则去寻找合适的RPM软件包来安装；如果是在没有资源可用，那就只能使用源码包来安装了。','        一般来讲，在安装软件时，如果能通过Yum软件仓库来安装，就用Yum方式；反之则去寻找合适的RPM软件包来安装；如果是在没有资源可用，那就只能使用源码包来安装了。',0,'alvin',curdate());
insert into Content values(1561,17,'p',11,'{}','        使用源码包安装服务程序的过程看似复杂，其实在归纳汇总后只需要4～5个步骤即可完成安装。刘遄老师接下来会对每一个步骤进行详解。','        使用源码包安装服务程序的过程看似复杂，其实在归纳汇总后只需要4～5个步骤即可完成安装。刘遄老师接下来会对每一个步骤进行详解。',0,'alvin',curdate());
insert into Content values(1562,17,'p',12,'{}','        需要提前说明的是，在使用源码包安装程序时，会输出大量的过程信息，这些信息的意义并不大，因此本章会省略这部分输出信息而不作特殊备注，请大家在具体操作时以实际为准。','        需要提前说明的是，在使用源码包安装程序时，会输出大量的过程信息，这些信息的意义并不大，因此本章会省略这部分输出信息而不作特殊备注，请大家在具体操作时以实际为准。',0,'alvin',curdate());
insert into Content values(1563,17,'p',13,'{}',' BOLD[  第1步： ]BOLD 下载及解压源码包文件。为了方便在网络中传输，源码包文件通常会在归档后使用gzip或bzip2等格式进行压缩，因此一般会具有.tar.gz与.tar.bz2的后缀。要想使用源码包安装服务程序，必须先把里面的内容解压出来，然后再切换到源码包文件的目录中：',' BOLD[  第1步： ]BOLD 下载及解压源码包文件。为了方便在网络中传输，源码包文件通常会在归档后使用gzip或bzip2等格式进行压缩，因此一般会具有.tar.gz与.tar.bz2的后缀。要想使用源码包安装服务程序，必须先把里面的内容解压出来，然后再切换到源码包文件的目录中：',0,'alvin',curdate());
insert into Content values(1564,17,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# tar xzvf FileName.tar.gz
[root@linuxprobe ~]# cd FileDirectory
','[root@linuxprobe ~]# tar xzvf FileName.tar.gz
[root@linuxprobe ~]# cd FileDirectory
',0,'alvin',curdate());
insert into Content values(1565,17,'p',15,'{}',' BOLD[  第2步： ]BOLD 编译源码包代码。在正式使用源码包安装服务程序之前，还需要使用编译脚本针对当前系统进行一系列的评估工作，包括对源码包文件、软件之间及函数库之间的依赖关系、编译器、汇编器及连接器进行检查。我们还可以根据需要来追加--prefix参数，以指定稍后源码包程序的安装路径，从而对服务程序的安装过程更加可控。当编译工作结束后，如果系统环境符合安装要求，一般会自动在当前目录下生成一个Makefile安装文件。',' BOLD[  第2步： ]BOLD 编译源码包代码。在正式使用源码包安装服务程序之前，还需要使用编译脚本针对当前系统进行一系列的评估工作，包括对源码包文件、软件之间及函数库之间的依赖关系、编译器、汇编器及连接器进行检查。我们还可以根据需要来追加--prefix参数，以指定稍后源码包程序的安装路径，从而对服务程序的安装过程更加可控。当编译工作结束后，如果系统环境符合安装要求，一般会自动在当前目录下生成一个Makefile安装文件。',0,'alvin',curdate());
insert into Content values(1566,17,'pre',16,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ./configure --prefix=/usr/local/program
','[root@linuxprobe ~]# ./configure --prefix=/usr/local/program
',0,'alvin',curdate());
insert into Content values(1567,17,'p',17,'{}',' BOLD[  第3步： ]BOLD 生成二进制安装程序。刚刚生成的Makefile文件中会保存有关系统环境、软件依赖关系和安装规则等内容，接下来便可以使用make命令来根据Makefile文件内容提供的合适规则编译生成出真正可供用户安装服务程序的二进制可执行文件了。',' BOLD[  第3步： ]BOLD 生成二进制安装程序。刚刚生成的Makefile文件中会保存有关系统环境、软件依赖关系和安装规则等内容，接下来便可以使用make命令来根据Makefile文件内容提供的合适规则编译生成出真正可供用户安装服务程序的二进制可执行文件了。',0,'alvin',curdate());
insert into Content values(1568,17,'pre',18,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# make
','[root@linuxprobe ~]# make
',0,'alvin',curdate());
insert into Content values(1569,17,'p',19,'{}',' BOLD[  第4步： ]BOLD 运行二进制的服务程序安装包。由于不需要再检查系统环境，也不需要再编译代码，因此运行二进制的服务程序安装包应该是速度最快的步骤。如果在源码包编译阶段使用了--prefix参数，那么此时服务程序就会被安装到那个目录，如果没有自行使用参数定义目录的话，一般会被默认安装到/usr/local/bin目录中。',' BOLD[  第4步： ]BOLD 运行二进制的服务程序安装包。由于不需要再检查系统环境，也不需要再编译代码，因此运行二进制的服务程序安装包应该是速度最快的步骤。如果在源码包编译阶段使用了--prefix参数，那么此时服务程序就会被安装到那个目录，如果没有自行使用参数定义目录的话，一般会被默认安装到/usr/local/bin目录中。',0,'alvin',curdate());
insert into Content values(1570,17,'pre',20,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# make install
','[root@linuxprobe ~]# make install
',0,'alvin',curdate());
insert into Content values(1571,17,'p',21,'{}',' BOLD[  第5步： ]BOLD 清理源码包临时文件。由于在安装服务程序的过程中进行了代码编译的工作，因此在安装后目录中会遗留下很多临时垃圾文件，本着尽量不要浪费磁盘存储空间的原则，可以使用make clean命令对临时文件进行彻底的清理工作。',' BOLD[  第5步： ]BOLD 清理源码包临时文件。由于在安装服务程序的过程中进行了代码编译的工作，因此在安装后目录中会遗留下很多临时垃圾文件，本着尽量不要浪费磁盘存储空间的原则，可以使用make clean命令对临时文件进行彻底的清理工作。',0,'alvin',curdate());
insert into Content values(1572,17,'pre',22,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# make clean
','[root@linuxprobe ~]# make clean
',0,'alvin',curdate());
insert into Content values(1573,17,'p',23,'{}','        估计有读者会有疑问，为什么通常是安装一个服务程序，源码包的编译工作（configure）与生成二进制文件的工作（make）会使用这么长的时间，而采用RPM软件包安装就特别有效率呢？其实原因很简单，在RHCA认证的RH401考试中，会要求考生写一个RPM软件包。刘遄老师会在本书的进阶篇中讲到，其实RPM软件包就是把软件的源码包和一个针对特定系统、架构、环境编写的安装规定打包成一起的指令集，因此为了让用户都能使用这个软件包来安装程序，通常一个软件程序会发布多种格式的RPM软件包（例如i386、x86_64等架构）来让用户选择。而源码包的软件作者肯定希望自己的软件能够被安装到更多的系统上面，能够被更多的用户所了解、使用，因此便会在编译阶段（configure）来检查用户当前系统的情况，然后制定出一份可行的安装方案，所以会占用很多的系统资源，需要更长的等待时间。','        估计有读者会有疑问，为什么通常是安装一个服务程序，源码包的编译工作（configure）与生成二进制文件的工作（make）会使用这么长的时间，而采用RPM软件包安装就特别有效率呢？其实原因很简单，在RHCA认证的RH401考试中，会要求考生写一个RPM软件包。刘遄老师会在本书的进阶篇中讲到，其实RPM软件包就是把软件的源码包和一个针对特定系统、架构、环境编写的安装规定打包成一起的指令集，因此为了让用户都能使用这个软件包来安装程序，通常一个软件程序会发布多种格式的RPM软件包（例如i386、x86_64等架构）来让用户选择。而源码包的软件作者肯定希望自己的软件能够被安装到更多的系统上面，能够被更多的用户所了解、使用，因此便会在编译阶段（configure）来检查用户当前系统的情况，然后制定出一份可行的安装方案，所以会占用很多的系统资源，需要更长的等待时间。',0,'alvin',curdate());
insert into Content values(1574,17,'h2',24,'{}','LNMP动态网站架构','LNMP动态网站架构',0,'alvin',curdate());
insert into Content values(1575,17,'p',25,'{}','        LNMP动态网站部署架构是一套由Linux + Nginx + MySQL + PHP组成的动态网站系统解决方案（其logo见图20-1）。LNMP中的字母L是Linux系统的意思，不仅可以是RHEL、CentOS、Fedora，还可以是Debian、Ubuntu等系统。本书的配套站点https://www.linuxprobe.com就是基于LNMP部署出来的，目前的运行一直很稳定，访问速度也很快。','        LNMP动态网站部署架构是一套由Linux + Nginx + MySQL + PHP组成的动态网站系统解决方案（其logo见图20-1）。LNMP中的字母L是Linux系统的意思，不仅可以是RHEL、CentOS、Fedora，还可以是Debian、Ubuntu等系统。本书的配套站点https://www.linuxprobe.com就是基于LNMP部署出来的，目前的运行一直很稳定，访问速度也很快。',0,'alvin',curdate());
insert into Content values(1576,17,'image',26,'{"alt": "lnmp_logo", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_lnmp_logo.jpg", "width": "676"}','/static/img/linux/linux_lnmp_logo.jpg','/static/img/linux/linux_lnmp_logo.jpg',0,'alvin',curdate());
insert into Content values(1577,17,'p',27,'{}','        在使用源码包安装服务程序之前，首先要让安装主机具备编译程序源码的环境，他需要具备C语言、C++语言、Perl语言的编译器，以及各种常见的编译支持函数库程序。因此请先配置妥当Yum软件仓库，然后把下面列出的这些软件包都统统安装上：','        在使用源码包安装服务程序之前，首先要让安装主机具备编译程序源码的环境，他需要具备C语言、C++语言、Perl语言的编译器，以及各种常见的编译支持函数库程序。因此请先配置妥当Yum软件仓库，然后把下面列出的这些软件包都统统安装上：',0,'alvin',curdate());
insert into Content values(1578,17,'pre',28,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install -y apr* autoconf automake bison bzip2 bzip2* compat* cpp curl curl-devel fontconfig fontconfig-devel freetype freetype* freetype-devel gcc gcc-c++ gd gettext gettext-devel glibc kernel kernel-headers keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng-devel libjpeg* libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* libtiff libtiff* make mpfr ncurses* ntp openssl openssl-devel patch pcre-devel perl php-common php-gd policycoreutils telnet t1lib t1lib* nasm nasm* wget zlib-devel
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
………………省略部分安装过程………………
Installing:
 apr                         x86_64       1.4.8-3.el7               rhel7       103 k
 apr-devel                   x86_64       1.4.8-3.el7               rhel7       188 k
 apr-util                    x86_64       1.5.2-6.el7               rhel7        92 k
 apr-util-devel              x86_64       1.5.2-6.el7               rhel7        76 k
 autoconf                    noarch       2.69-11.el7               rhel7       701 k
 automake                    noarch       1.13.4-3.el7              rhel7       679 k
 bison                       x86_64       2.7-4.el7                 rhel7       578 k
 bzip2-devel                 x86_64       1.0.6-12.el7              rhel7       218 k
 compat-dapl                 x86_64       1:1.2.19-3.el7            rhel7       109 k
 compat-db-headers           noarch       4.7.25-27.el7             rhel7        48 k
 compat-db47                 x86_64       4.7.25-27.el7             rhel7       795 k
 compat-gcc-44               x86_64       4.4.7-8.el7               rhel7        10 M
 compat-gcc-44-c++           x86_64       4.4.7-8.el7               rhel7       6.3 M
 compat-glibc                x86_64       1:2.12-4.el7              rhel7       1.2 M
 compat-glibc-headers        x86_64       1:2.12-4.el7              rhel7       452 k
 compat-libcap1              x86_64       1.10-7.el7                rhel7        19 k
 compat-libf2c-34            x86_64       3.4.6-32.el7              rhel7       155 k
 compat-libgfortran-41       x86_64       4.1.2-44.el7              rhel7       142 k
 compat-libtiff3             x86_64       3.9.4-11.el7              rhel7       135 k
 compat-openldap             x86_64       1:2.3.43-5.el7            rhel7       174 k
 cpp                         x86_64       4.8.2-16.el7              rhel7       5.9 M
 fontconfig-devel            x86_64       2.10.95-7.el7             rhel7       128 k
 freetype-devel              x86_64       2.4.11-9.el7              rhel7       355 k
 gcc                         x86_64       4.8.2-16.el7              rhel7        16 M
 gcc-c++                     x86_64       4.8.2-16.el7              rhel7       7.1 M
………………省略部分安装过程………………
Complete!
','[root@linuxprobe ~]# yum install -y apr* autoconf automake bison bzip2 bzip2* compat* cpp curl curl-devel fontconfig fontconfig-devel freetype freetype* freetype-devel gcc gcc-c++ gd gettext gettext-devel glibc kernel kernel-headers keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng-devel libjpeg* libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* libtiff libtiff* make mpfr ncurses* ntp openssl openssl-devel patch pcre-devel perl php-common php-gd policycoreutils telnet t1lib t1lib* nasm nasm* wget zlib-devel
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
………………省略部分安装过程………………
Installing:
 apr                         x86_64       1.4.8-3.el7               rhel7       103 k
 apr-devel                   x86_64       1.4.8-3.el7               rhel7       188 k
 apr-util                    x86_64       1.5.2-6.el7               rhel7        92 k
 apr-util-devel              x86_64       1.5.2-6.el7               rhel7        76 k
 autoconf                    noarch       2.69-11.el7               rhel7       701 k
 automake                    noarch       1.13.4-3.el7              rhel7       679 k
 bison                       x86_64       2.7-4.el7                 rhel7       578 k
 bzip2-devel                 x86_64       1.0.6-12.el7              rhel7       218 k
 compat-dapl                 x86_64       1:1.2.19-3.el7            rhel7       109 k
 compat-db-headers           noarch       4.7.25-27.el7             rhel7        48 k
 compat-db47                 x86_64       4.7.25-27.el7             rhel7       795 k
 compat-gcc-44               x86_64       4.4.7-8.el7               rhel7        10 M
 compat-gcc-44-c++           x86_64       4.4.7-8.el7               rhel7       6.3 M
 compat-glibc                x86_64       1:2.12-4.el7              rhel7       1.2 M
 compat-glibc-headers        x86_64       1:2.12-4.el7              rhel7       452 k
 compat-libcap1              x86_64       1.10-7.el7                rhel7        19 k
 compat-libf2c-34            x86_64       3.4.6-32.el7              rhel7       155 k
 compat-libgfortran-41       x86_64       4.1.2-44.el7              rhel7       142 k
 compat-libtiff3             x86_64       3.9.4-11.el7              rhel7       135 k
 compat-openldap             x86_64       1:2.3.43-5.el7            rhel7       174 k
 cpp                         x86_64       4.8.2-16.el7              rhel7       5.9 M
 fontconfig-devel            x86_64       2.10.95-7.el7             rhel7       128 k
 freetype-devel              x86_64       2.4.11-9.el7              rhel7       355 k
 gcc                         x86_64       4.8.2-16.el7              rhel7        16 M
 gcc-c++                     x86_64       4.8.2-16.el7              rhel7       7.1 M
………………省略部分安装过程………………
Complete!
',0,'alvin',curdate());
insert into Content values(1579,17,'p',29,'{}','        老师已经把安装LNMP动态网站部署架构所需的16个软件源码包和1个用于检查效果的论坛网站系统软件包上传到与本书配套的站点服务器上。大家可以在Windows系统中下载后通过ssh服务传送到打算部署LNMP动态网站架构的Linux服务器中，也可以直接在Linux服务器中使用wget命令下载这些源码包文件。根据第6章讲解的FHS协议，建议把要安装的软件包存放在/usr/local/src目录中：','        老师已经把安装LNMP动态网站部署架构所需的16个软件源码包和1个用于检查效果的论坛网站系统软件包上传到与本书配套的站点服务器上。大家可以在Windows系统中下载后通过ssh服务传送到打算部署LNMP动态网站架构的Linux服务器中，也可以直接在Linux服务器中使用wget命令下载这些源码包文件。根据第6章讲解的FHS协议，建议把要安装的软件包存放在/usr/local/src目录中：',0,'alvin',curdate());
insert into Content values(1580,17,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /usr/local/src
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/cmake-2.8.11.2.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/Discuz_X3.2_SC_GBK.zip
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/freetype-2.5.3.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/jpegsrc.v9a.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libgd-2.1.0.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libmcrypt-2.5.8.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libpng-1.6.12.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libvpx-v1.3.0.tar.bz2
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/mysql-5.6.19.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/nginx-1.6.0.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/openssl-1.0.1h.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/php-5.5.14.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/pcre-8.35.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/t1lib-5.1.2.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/tiff-4.0.3.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/yasm-1.2.0.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/zlib-1.2.8.tar.gz
[root@linuxprobe src]# ls
zlib-1.2.8.tar.gz       libmcrypt-2.5.8.tar.gz  pcre-8.35.tar.gz
cmake-2.8.11.2.tar.gz   libpng-1.6.12.tar.gz    php-5.5.14.tar.gz
Discuz_X3.2_SC_GBK.zip  libvpx-v1.3.0.tar.bz2   t1lib-5.1.2.tar.gz
freetype-2.5.3.tar.gz   mysql-5.6.19.tar.gz     tiff-4.0.3.tar.gz
jpegsrc.v9a.tar.gz      nginx-1.6.0.tar.gz      yasm-1.2.0.tar.gz
libgd-2.1.0.tar.gz      openssl-1.0.1h.tar.gz
','[root@linuxprobe ~]# cd /usr/local/src
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/cmake-2.8.11.2.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/Discuz_X3.2_SC_GBK.zip
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/freetype-2.5.3.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/jpegsrc.v9a.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libgd-2.1.0.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libmcrypt-2.5.8.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libpng-1.6.12.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/libvpx-v1.3.0.tar.bz2
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/mysql-5.6.19.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/nginx-1.6.0.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/openssl-1.0.1h.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/php-5.5.14.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/pcre-8.35.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/t1lib-5.1.2.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/tiff-4.0.3.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/yasm-1.2.0.tar.gz
[root@linuxprobe src] # wget https://www.linuxprobe.com/Software/zlib-1.2.8.tar.gz
[root@linuxprobe src]# ls
zlib-1.2.8.tar.gz       libmcrypt-2.5.8.tar.gz  pcre-8.35.tar.gz
cmake-2.8.11.2.tar.gz   libpng-1.6.12.tar.gz    php-5.5.14.tar.gz
Discuz_X3.2_SC_GBK.zip  libvpx-v1.3.0.tar.bz2   t1lib-5.1.2.tar.gz
freetype-2.5.3.tar.gz   mysql-5.6.19.tar.gz     tiff-4.0.3.tar.gz
jpegsrc.v9a.tar.gz      nginx-1.6.0.tar.gz      yasm-1.2.0.tar.gz
libgd-2.1.0.tar.gz      openssl-1.0.1h.tar.gz
',0,'alvin',curdate());
insert into Content values(1581,17,'p',31,'{}','        CMake是Linux系统中一款常用的编译工具。要想通过源码包安装服务程序，就一定要严格遵守上面总结的安装步骤—下载及解压源码包文件、编译源码包代码、生成二进制安装程序、运行二进制的服务程序安装包。接下来在解压、编译各个软件包源码程序时，都会生成大量的输出信息，下文中将其省略，请读者以实际操作为准。','        CMake是Linux系统中一款常用的编译工具。要想通过源码包安装服务程序，就一定要严格遵守上面总结的安装步骤—下载及解压源码包文件、编译源码包代码、生成二进制安装程序、运行二进制的服务程序安装包。接下来在解压、编译各个软件包源码程序时，都会生成大量的输出信息，下文中将其省略，请读者以实际操作为准。',0,'alvin',curdate());
insert into Content values(1582,17,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe src]# tar xzvf cmake-2.8.11.2.tar.gz
[root@linuxprobe src]# cd cmake-2.8.11.2/
[root@linuxprobe cmake-2.8.11.2]# ./configure
[root@linuxprobe cmake-2.8.11.2]# make 
[root@linuxprobe cmake-2.8.11.2]# make install
','[root@linuxprobe src]# tar xzvf cmake-2.8.11.2.tar.gz
[root@linuxprobe src]# cd cmake-2.8.11.2/
[root@linuxprobe cmake-2.8.11.2]# ./configure
[root@linuxprobe cmake-2.8.11.2]# make 
[root@linuxprobe cmake-2.8.11.2]# make install
',0,'alvin',curdate());
insert into Content values(1583,17,'h3',33,'{}','配置Mysql服务','配置Mysql服务',0,'alvin',curdate());
insert into Content values(1584,17,'p',34,'{}','        本书在第18章讲解过MySQL和MariaDB数据库管理系统之间的因缘和特性，也狠狠地夸奖了MariaDB数据库，但是MySQL数据库当前依然是生产环境中最常使用的关系型数据库管理系统之一，坐拥极大的市场份额，并且已经通过十几年不断的发展向业界证明了自身的稳定性和安全性。另外，虽然第18章已经讲解了基本的数据库管理知识，但是为了进一步帮助大家夯实基础，本章依然在这里整合了MySQL数据库内容，使大家在温故的同时可以知新。','        本书在第18章讲解过MySQL和MariaDB数据库管理系统之间的因缘和特性，也狠狠地夸奖了MariaDB数据库，但是MySQL数据库当前依然是生产环境中最常使用的关系型数据库管理系统之一，坐拥极大的市场份额，并且已经通过十几年不断的发展向业界证明了自身的稳定性和安全性。另外，虽然第18章已经讲解了基本的数据库管理知识，但是为了进一步帮助大家夯实基础，本章依然在这里整合了MySQL数据库内容，使大家在温故的同时可以知新。',0,'alvin',curdate());
insert into Content values(1585,17,'p',35,'{}','        在使用Yum软件仓库安装服务程序时，系统会自动根据RPM软件包中的指令集完整软件配置等工作。但是一旦选择使用源码包的方式来安装，这一切就需要自己来完成了。针对MySQL数据库来讲，我们需要在系统中创建一个名为mysql的用户，专门用于负责运行MySQL数据库。请记得要把这类账户的Bash终端设置成nologin解释器，避免黑客通过该用户登录到服务器中，从而提高系统安全性。','        在使用Yum软件仓库安装服务程序时，系统会自动根据RPM软件包中的指令集完整软件配置等工作。但是一旦选择使用源码包的方式来安装，这一切就需要自己来完成了。针对MySQL数据库来讲，我们需要在系统中创建一个名为mysql的用户，专门用于负责运行MySQL数据库。请记得要把这类账户的Bash终端设置成nologin解释器，避免黑客通过该用户登录到服务器中，从而提高系统安全性。',0,'alvin',curdate());
insert into Content values(1586,17,'pre',36,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe cmake-2.8.11.2]# cd ..
[root@linuxprobe src]# useradd mysql -s /sbin/nologin
','[root@linuxprobe cmake-2.8.11.2]# cd ..
[root@linuxprobe src]# useradd mysql -s /sbin/nologin
',0,'alvin',curdate());
insert into Content values(1587,17,'p',37,'{}','        创建一个用于保存MySQL数据库程序和数据库文件的目录，并把该目录的所有者和所属组身份修改为mysql。其中，/usr/local/mysql是用于保存MySQL数据库服务程序的目录，/usr/local/mysql/var则是用于保存真实数据库文件的目录。','        创建一个用于保存MySQL数据库程序和数据库文件的目录，并把该目录的所有者和所属组身份修改为mysql。其中，/usr/local/mysql是用于保存MySQL数据库服务程序的目录，/usr/local/mysql/var则是用于保存真实数据库文件的目录。',0,'alvin',curdate());
insert into Content values(1588,17,'pre',38,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe src]# mkdir -p /usr/local/mysql/var
[root@linuxprobe src]# chown -Rf mysql:mysql /usr/local/mysql
','[root@linuxprobe src]# mkdir -p /usr/local/mysql/var
[root@linuxprobe src]# chown -Rf mysql:mysql /usr/local/mysql
',0,'alvin',curdate());
insert into Content values(1589,17,'p',39,'{}','        接下来解压、编译、安装MySQL数据库服务程序。在编译数据库时使用的是cmake命令，其中，-DCMAKE_INSTALL_PREFIX参数用于定义数据库服务程序的保存目录，-DMYSQL_DATADIR参数用于定义真实数据库文件的目录，-DSYSCONFDIR则是定义MySQL数据库配置文件的保存目录。由于MySQL数据库服务程序比较大，因此编译的过程比较漫长，在此期间可以稍微休息一下。','        接下来解压、编译、安装MySQL数据库服务程序。在编译数据库时使用的是cmake命令，其中，-DCMAKE_INSTALL_PREFIX参数用于定义数据库服务程序的保存目录，-DMYSQL_DATADIR参数用于定义真实数据库文件的目录，-DSYSCONFDIR则是定义MySQL数据库配置文件的保存目录。由于MySQL数据库服务程序比较大，因此编译的过程比较漫长，在此期间可以稍微休息一下。',0,'alvin',curdate());
insert into Content values(1590,17,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe src]# tar xzvf mysql-5.6.19.tar.gz
[root@linuxprobe src]# cd mysql-5.6.19/
[root@linuxprobe mysql-5.6.19]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/var -DSYSCONFDIR=/etc
[root@linuxprobe mysql-5.6.19]# make
[root@linuxprobe mysql-5.6.19]# make install
','[root@linuxprobe src]# tar xzvf mysql-5.6.19.tar.gz
[root@linuxprobe src]# cd mysql-5.6.19/
[root@linuxprobe mysql-5.6.19]# cmake . -DCMAKE_INSTALL_PREFIX=/usr/local/mysql -DMYSQL_DATADIR=/usr/local/mysql/var -DSYSCONFDIR=/etc
[root@linuxprobe mysql-5.6.19]# make
[root@linuxprobe mysql-5.6.19]# make install
',0,'alvin',curdate());
insert into Content values(1591,17,'p',41,'{}','        为了让MySQL数据库程序正常运转起来，需要先删除/etc目录中的默认配置文件，然后在MySQL数据库程序的保存目录scripts内找到一个名为mysql_install_db的脚本程序，执行这个脚本程序并使用--user参数指定MySQL服务的对应账号名称（在前面步骤已经创建），使用--basedir参数指定MySQL服务程序的保存目录，使用--datadir参数指定MySQL真实数据库的文件保存目录，这样即可生成系统数据库文件，也会生成出新的MySQL服务配置文件。','        为了让MySQL数据库程序正常运转起来，需要先删除/etc目录中的默认配置文件，然后在MySQL数据库程序的保存目录scripts内找到一个名为mysql_install_db的脚本程序，执行这个脚本程序并使用--user参数指定MySQL服务的对应账号名称（在前面步骤已经创建），使用--basedir参数指定MySQL服务程序的保存目录，使用--datadir参数指定MySQL真实数据库的文件保存目录，这样即可生成系统数据库文件，也会生成出新的MySQL服务配置文件。',0,'alvin',curdate());
insert into Content values(1592,17,'pre',42,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe mysql-5.6.19]# rm -rf /etc/my.cnf
[root@linuxprobe mysql-5.6.19]# cd /usr/local/mysql
[root@linuxprobe mysql]# ./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/var
','[root@linuxprobe mysql-5.6.19]# rm -rf /etc/my.cnf
[root@linuxprobe mysql-5.6.19]# cd /usr/local/mysql
[root@linuxprobe mysql]# ./scripts/mysql_install_db --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/var
',0,'alvin',curdate());
insert into Content values(1593,17,'p',43,'{}','        把系统新生成的MySQL数据库配置文件链接到/etc目录中，然后把程序目录中的开机程序文件复制到/etc/rc.d/init.d目录中，以便通过service命令来管理MySQL数据库服务程序。记得把数据库脚本文件的权限修改成755以便于让用户有执行该脚本的权限：','        把系统新生成的MySQL数据库配置文件链接到/etc目录中，然后把程序目录中的开机程序文件复制到/etc/rc.d/init.d目录中，以便通过service命令来管理MySQL数据库服务程序。记得把数据库脚本文件的权限修改成755以便于让用户有执行该脚本的权限：',0,'alvin',curdate());
insert into Content values(1594,17,'pre',44,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe mysql]# ln -s my.cnf /etc/my.cnf 
[root@linuxprobe mysql]# cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld
[root@linuxprobe mysql]# chmod 755 /etc/rc.d/init.d/mysqld
','[root@linuxprobe mysql]# ln -s my.cnf /etc/my.cnf 
[root@linuxprobe mysql]# cp ./support-files/mysql.server /etc/rc.d/init.d/mysqld
[root@linuxprobe mysql]# chmod 755 /etc/rc.d/init.d/mysqld
',0,'alvin',curdate());
insert into Content values(1595,17,'p',45,'{}','        编辑刚复制的MySQL数据库脚本文件，把第46、47行的basedir与datadir参数分别修改为MySQL数据库程序的保存目录和真实数据库的文件内容。','        编辑刚复制的MySQL数据库脚本文件，把第46、47行的basedir与datadir参数分别修改为MySQL数据库程序的保存目录和真实数据库的文件内容。',0,'alvin',curdate());
insert into Content values(1596,17,'pre',46,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe mysql]# vim /etc/rc.d/init.d/mysqld 
………………省略部分输出信息………………
 39 #
 40 # If you want to affect other MySQL variables, you should make your changes
 41 # in the /etc/my.cnf, ~/.my.cnf or other MySQL configuration files.
 42 
 43 # If you change base dir, you must also change datadir. These may get
 44 # overwritten by settings in the MySQL configuration files.
 45 
 46 basedir=/usr/local/mysql
 47 datadir=/usr/local/mysql/var
 48 
………………省略部分输出信息………………
','[root@linuxprobe mysql]# vim /etc/rc.d/init.d/mysqld 
………………省略部分输出信息………………
 39 #
 40 # If you want to affect other MySQL variables, you should make your changes
 41 # in the /etc/my.cnf, ~/.my.cnf or other MySQL configuration files.
 42 
 43 # If you change base dir, you must also change datadir. These may get
 44 # overwritten by settings in the MySQL configuration files.
 45 
 46 basedir=/usr/local/mysql
 47 datadir=/usr/local/mysql/var
 48 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1597,17,'p',47,'{}','        配置好脚本文件后便可以用service命令启动mysqld数据库服务了。mysqld是MySQL数据库程序的服务名称，注意不要写错。顺带再使用chkconfig命令把mysqld服务程序加入到开机启动项中。','        配置好脚本文件后便可以用service命令启动mysqld数据库服务了。mysqld是MySQL数据库程序的服务名称，注意不要写错。顺带再使用chkconfig命令把mysqld服务程序加入到开机启动项中。',0,'alvin',curdate());
insert into Content values(1598,17,'pre',48,'{"class": ["prettyprint", "lang-bash"]}','[root@Linuxprobe mysql]# service mysqld start
Starting MySQL. SUCCESS! 
[root@linuxprobe mysql]# chkconfig mysqld on
','[root@Linuxprobe mysql]# service mysqld start
Starting MySQL. SUCCESS! 
[root@linuxprobe mysql]# chkconfig mysqld on
',0,'alvin',curdate());
insert into Content values(1599,17,'p',49,'{}','        MySQL数据库程序自带了许多命令，但是Bash终端的PATH变量并不会包含这些命令所存放的目录，因此我们也无法顺利地对MySQL数据库进行初始化，也就不能使用MySQL数据库自带的命令了。想要把命令所保存的目录永久性地定义到PATH变量中，需要编辑/etc/profile文件并写入追加的命令目录，这样当物理设备在下一次重启时就会永久生效了。如果不想通过重启设备的方式来生效，也可以使用source命令加载一下/ect/profile文件，此时新的PATH变量也可以立即生效了。','        MySQL数据库程序自带了许多命令，但是Bash终端的PATH变量并不会包含这些命令所存放的目录，因此我们也无法顺利地对MySQL数据库进行初始化，也就不能使用MySQL数据库自带的命令了。想要把命令所保存的目录永久性地定义到PATH变量中，需要编辑/etc/profile文件并写入追加的命令目录，这样当物理设备在下一次重启时就会永久生效了。如果不想通过重启设备的方式来生效，也可以使用source命令加载一下/ect/profile文件，此时新的PATH变量也可以立即生效了。',0,'alvin',curdate());
insert into Content values(1600,17,'pre',50,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe mysql]# vim /etc/profile
………………省略部分输出信息………………
 64 
 65 for i in /etc/profile.d/*.sh ; do
 66 if [ -r "$i" ]; then
 67 if [ "${-#*i}" != "$-" ]; then
 68 . "$i"
 69 else
 70 . "$i" >/dev/null
 71 fi
 72 fi
 73 done
 74 export PATH=$PATH:/usr/local/mysql/bin
 75 unset i
 76 unset -f pathmunge
[root@linuxprobe mysql]# source /etc/profile
','[root@linuxprobe mysql]# vim /etc/profile
………………省略部分输出信息………………
 64 
 65 for i in /etc/profile.d/*.sh ; do
 66 if [ -r "$i" ]; then
 67 if [ "${-#*i}" != "$-" ]; then
 68 . "$i"
 69 else
 70 . "$i" >/dev/null
 71 fi
 72 fi
 73 done
 74 export PATH=$PATH:/usr/local/mysql/bin
 75 unset i
 76 unset -f pathmunge
[root@linuxprobe mysql]# source /etc/profile
',0,'alvin',curdate());
insert into Content values(1601,17,'p',51,'{}','        MySQL数据库服务程序还会调用到一些程序文件和函数库文件。由于当前是通过源码包方式安装MySQL数据库，因此现在也必须以手动方式把这些文件链接过来。','        MySQL数据库服务程序还会调用到一些程序文件和函数库文件。由于当前是通过源码包方式安装MySQL数据库，因此现在也必须以手动方式把这些文件链接过来。',0,'alvin',curdate());
insert into Content values(1602,17,'pre',52,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe mysql]# mkdir /var/lib/mysql
[root@linuxprobe mysql]# ln -s /usr/local/mysql/lib/mysql /usr/lib/mysql
[root@linuxprobe mysql]# ln -s /tmp/mysql.sock /var/lib/mysql/mysql.sock
[root@linuxprobe mysql]# ln -s /usr/local/mysql/include/mysql /usr/include/mysql
','[root@linuxprobe mysql]# mkdir /var/lib/mysql
[root@linuxprobe mysql]# ln -s /usr/local/mysql/lib/mysql /usr/lib/mysql
[root@linuxprobe mysql]# ln -s /tmp/mysql.sock /var/lib/mysql/mysql.sock
[root@linuxprobe mysql]# ln -s /usr/local/mysql/include/mysql /usr/include/mysql
',0,'alvin',curdate());
insert into Content values(1603,17,'p',53,'{}','        现在，MySQL数据库服务程序已经启动，调用的各个函数文件已经就位，PATH环境变量中也加入了MySQL数据库命令的所在目录。接下来准备对MySQL数据库进行初始化，这个初始化的配置过程与MariaDB数据库是一样的，只是最后变成了Thanks for using MySQL!','        现在，MySQL数据库服务程序已经启动，调用的各个函数文件已经就位，PATH环境变量中也加入了MySQL数据库命令的所在目录。接下来准备对MySQL数据库进行初始化，这个初始化的配置过程与MariaDB数据库是一样的，只是最后变成了Thanks for using MySQL!',0,'alvin',curdate());
insert into Content values(1604,17,'pre',54,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe mysql]# mysql_secure_installation 
NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!
In order to log into MySQL to secure it, we\'ll need the current
password for the root user.  If you\'ve just installed MySQL, and
you haven\'t set the root password yet, the password will be blank,
so you should just press enter here.
Enter current password for root (enter for none): 此处只需按下回车键
OK, successfully used password, moving on...
Setting the root password ensures that nobody can log into the MySQL
root user without the proper authorisation.
Set root password? [Y/n] y （要为root管理员设置数据库的密码）
New password: 输入要为root管理员设置的数据库密码
Re-enter new password: 再输入一次密码
Password updated successfully!
Reloading privilege tables..
 ... Success!
By default, a MySQL installation has an anonymous user, allowing anyone
to log into MySQL without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
Remove anonymous users? [Y/n] y （删除匿名账户）
 ... Success!
Normally, root should only be allowed to connect from \'localhost\'.  This
ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? [Y/n] y （禁止root管理员从远程登录）
 ... Success!
By default, MySQL comes with a database named \'test\' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
Remove test database and access to it? [Y/n] y （删除test数据库并取消对其的访问权限）
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
Reload privilege tables now? [Y/n] y （刷新授权表，让初始化后的设定立即生效）
 ... Success!
All done!  If you\'ve completed all of the above steps, your MySQL
installation should now be secure.
Thanks for using MySQL!
Cleaning up...
','[root@linuxprobe mysql]# mysql_secure_installation 
NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MySQL
      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!
In order to log into MySQL to secure it, we\'ll need the current
password for the root user.  If you\'ve just installed MySQL, and
you haven\'t set the root password yet, the password will be blank,
so you should just press enter here.
Enter current password for root (enter for none): 此处只需按下回车键
OK, successfully used password, moving on...
Setting the root password ensures that nobody can log into the MySQL
root user without the proper authorisation.
Set root password? [Y/n] y （要为root管理员设置数据库的密码）
New password: 输入要为root管理员设置的数据库密码
Re-enter new password: 再输入一次密码
Password updated successfully!
Reloading privilege tables..
 ... Success!
By default, a MySQL installation has an anonymous user, allowing anyone
to log into MySQL without having to have a user account created for
them.  This is intended only for testing, and to make the installation
go a bit smoother.  You should remove them before moving into a
production environment.
Remove anonymous users? [Y/n] y （删除匿名账户）
 ... Success!
Normally, root should only be allowed to connect from \'localhost\'.  This
ensures that someone cannot guess at the root password from the network.
Disallow root login remotely? [Y/n] y （禁止root管理员从远程登录）
 ... Success!
By default, MySQL comes with a database named \'test\' that anyone can
access.  This is also intended only for testing, and should be removed
before moving into a production environment.
Remove test database and access to it? [Y/n] y （删除test数据库并取消对其的访问权限）
 - Dropping test database...
 ... Success!
 - Removing privileges on test database...
 ... Success!
Reloading the privilege tables will ensure that all changes made so far
will take effect immediately.
Reload privilege tables now? [Y/n] y （刷新授权表，让初始化后的设定立即生效）
 ... Success!
All done!  If you\'ve completed all of the above steps, your MySQL
installation should now be secure.
Thanks for using MySQL!
Cleaning up...
',0,'alvin',curdate());
insert into Content values(1605,17,'h3',55,'{}','配置Nginx服务','配置Nginx服务',0,'alvin',curdate());
insert into Content values(1606,17,'p',56,'{}','        Nginx是一款相当优秀的用于部署动态网站的轻量级服务程序，它最初是为俄罗斯门户站点而开发的，因其稳定性、功能丰富、占用内存少且并发能力强而备受用户的信赖。目前国内诸如新浪、网易、腾讯等门户站点均已使用了此服务。','        Nginx是一款相当优秀的用于部署动态网站的轻量级服务程序，它最初是为俄罗斯门户站点而开发的，因其稳定性、功能丰富、占用内存少且并发能力强而备受用户的信赖。目前国内诸如新浪、网易、腾讯等门户站点均已使用了此服务。',0,'alvin',curdate());
insert into Content values(1607,17,'p',57,'{}','        Nginx服务程序的稳定性源自于采用了分阶段的资源分配技术，降低了CPU与内存的占用率，所以使用Nginx程序部署的动态网站环境不仅十分稳定、高效，而且消耗的系统资源也很少。此外，Nginx具备的模块数量与Apache具备的模块数量几乎相同，而且现在已经完全支持proxy、rewrite、mod_fcgi、ssl、vhosts等常用模块。更重要的是，Nginx还支持热部署技术，可以7×24不间断提供服务，还可以在不暂停服务的情况下直接对Nginx服务程序进行升级。','        Nginx服务程序的稳定性源自于采用了分阶段的资源分配技术，降低了CPU与内存的占用率，所以使用Nginx程序部署的动态网站环境不仅十分稳定、高效，而且消耗的系统资源也很少。此外，Nginx具备的模块数量与Apache具备的模块数量几乎相同，而且现在已经完全支持proxy、rewrite、mod_fcgi、ssl、vhosts等常用模块。更重要的是，Nginx还支持热部署技术，可以7×24不间断提供服务，还可以在不暂停服务的情况下直接对Nginx服务程序进行升级。',0,'alvin',curdate());
insert into Content values(1608,17,'image',58,'{"alt": "apache_nginx_logo", "class": ["attachment-full"], "height": "152", "src": "/static/img/linux/linux_lnmp_apache_nginx_logo.png", "width": "676"}','/static/img/linux/linux_lnmp_apache_nginx_logo.png','/static/img/linux/linux_lnmp_apache_nginx_logo.png',0,'alvin',curdate());
insert into Content values(1609,17,'p',59,'{}','        坦白来讲，虽然Nginx程序的代码质量非常高，代码很规范，技术成熟，模块扩展也很容易，但依然存在不少问题，比如是由俄罗斯人开发的，所以在资料文档方面还并不完善，中文资料的质量更是鱼龙混杂。但是Nginx服务程序在近年来增长势头迅猛，相信会在轻量级Web服务器市场具有不错的未来。','        坦白来讲，虽然Nginx程序的代码质量非常高，代码很规范，技术成熟，模块扩展也很容易，但依然存在不少问题，比如是由俄罗斯人开发的，所以在资料文档方面还并不完善，中文资料的质量更是鱼龙混杂。但是Nginx服务程序在近年来增长势头迅猛，相信会在轻量级Web服务器市场具有不错的未来。',0,'alvin',curdate());
insert into Content values(1610,17,'p',60,'{}','        在正式安装Nginx服务程序之前，我们还需要为其解决相关的软件依赖关系，例如用于提供Perl语言兼容的正则表达式库的软件包pcre，就是Nginx服务程序用于实现伪静态功能必不可少的依赖包。下面来解压、编译、生成、安装Nginx服务程序的源码文件：','        在正式安装Nginx服务程序之前，我们还需要为其解决相关的软件依赖关系，例如用于提供Perl语言兼容的正则表达式库的软件包pcre，就是Nginx服务程序用于实现伪静态功能必不可少的依赖包。下面来解压、编译、生成、安装Nginx服务程序的源码文件：',0,'alvin',curdate());
insert into Content values(1611,17,'pre',61,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /usr/local/src
[root@linuxprobe src]# tar xzvf pcre-8.35.tar.gz 
[root@linuxprobe src]# cd pcre-8.35
[root@linuxprobe pcre-8.35]# ./configure --prefix=/usr/local/pcre
[root@linuxprobe pcre-8.35]# make
[root@linuxprobe pcre-8.35]# make install 
','[root@linuxprobe ~]# cd /usr/local/src
[root@linuxprobe src]# tar xzvf pcre-8.35.tar.gz 
[root@linuxprobe src]# cd pcre-8.35
[root@linuxprobe pcre-8.35]# ./configure --prefix=/usr/local/pcre
[root@linuxprobe pcre-8.35]# make
[root@linuxprobe pcre-8.35]# make install 
',0,'alvin',curdate());
insert into Content values(1612,17,'p',62,'{}','        openssl软件包是用于提供网站加密证书服务的程序文件，在安装该程序时需要自定义服务程序的安装目录，以便于稍后调用它们的时候更可控。','        openssl软件包是用于提供网站加密证书服务的程序文件，在安装该程序时需要自定义服务程序的安装目录，以便于稍后调用它们的时候更可控。',0,'alvin',curdate());
insert into Content values(1613,17,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe pcre-8.35]# cd /usr/local/src
[root@linuxprobe src]# tar xzvf openssl-1.0.1h.tar.gz
[root@linuxprobe src]# cd openssl-1.0.1h
[root@linuxprobe openssl-1.0.1h]# ./config --prefix=/usr/local/openssl
[root@linuxprobe openssl-1.0.1h]# make
[root@linuxprobe openssl-1.0.1h]# make install 
','[root@linuxprobe pcre-8.35]# cd /usr/local/src
[root@linuxprobe src]# tar xzvf openssl-1.0.1h.tar.gz
[root@linuxprobe src]# cd openssl-1.0.1h
[root@linuxprobe openssl-1.0.1h]# ./config --prefix=/usr/local/openssl
[root@linuxprobe openssl-1.0.1h]# make
[root@linuxprobe openssl-1.0.1h]# make install 
',0,'alvin',curdate());
insert into Content values(1614,17,'p',64,'{}','        openssl软件包安装后默认会在/usr/local/openssl/bin目录中提供很多的可用命令，我们需要像前面的操作那样，将这个目录添加到PATH环境变量中，并写入到配置文件中，最后执行source命令以便让新的PATH环境变量内容可以立即生效：','        openssl软件包安装后默认会在/usr/local/openssl/bin目录中提供很多的可用命令，我们需要像前面的操作那样，将这个目录添加到PATH环境变量中，并写入到配置文件中，最后执行source命令以便让新的PATH环境变量内容可以立即生效：',0,'alvin',curdate());
insert into Content values(1615,17,'pre',65,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe pcre-8.35]# vim /etc/profile
………………省略部分输出信息………………
 64 
 65 for i in /etc/profile.d/*.sh ; do
 66 if [ -r "$i" ]; then
 67 if [ "${-#*i}" != "$-" ]; then
 68 . "$i"
 69 else
 70 . "$i" >/dev/null
 71 fi
 72 fi
 73 done
 74 export PATH=$PATH:/usr/local/mysql/bin:/usr/local/openssl/bin
 75 unset i
 76 unset -f pathmunge
[root@linuxprobe pcre-8.35]# source /etc/profile
','[root@linuxprobe pcre-8.35]# vim /etc/profile
………………省略部分输出信息………………
 64 
 65 for i in /etc/profile.d/*.sh ; do
 66 if [ -r "$i" ]; then
 67 if [ "${-#*i}" != "$-" ]; then
 68 . "$i"
 69 else
 70 . "$i" >/dev/null
 71 fi
 72 fi
 73 done
 74 export PATH=$PATH:/usr/local/mysql/bin:/usr/local/openssl/bin
 75 unset i
 76 unset -f pathmunge
[root@linuxprobe pcre-8.35]# source /etc/profile
',0,'alvin',curdate());
insert into Content values(1616,17,'p',66,'{}','        zlib软件包是用于提供压缩功能的函数库文件。其实Nginx服务程序调用的这些服务程序无需深入了解，只要大致了解其作用就已经足够了：','        zlib软件包是用于提供压缩功能的函数库文件。其实Nginx服务程序调用的这些服务程序无需深入了解，只要大致了解其作用就已经足够了：',0,'alvin',curdate());
insert into Content values(1617,17,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe pcre-8.35]# cd /usr/local/src
[root@linuxprobe src]# tar xzvf zlib-1.2.8.tar.gz 
[root@linuxprobe src]# cd zlib-1.2.8
[root@linuxprobe zlib-1.2.8]# ./configure --prefix=/usr/local/zlib
[root@linuxprobe zlib-1.2.8]# make
[root@linuxprobe zlib-1.2.8]# make install
','[root@linuxprobe pcre-8.35]# cd /usr/local/src
[root@linuxprobe src]# tar xzvf zlib-1.2.8.tar.gz 
[root@linuxprobe src]# cd zlib-1.2.8
[root@linuxprobe zlib-1.2.8]# ./configure --prefix=/usr/local/zlib
[root@linuxprobe zlib-1.2.8]# make
[root@linuxprobe zlib-1.2.8]# make install
',0,'alvin',curdate());
insert into Content values(1618,17,'p',68,'{}','        在安装部署好具有依赖关系的软件包之后，创建一个用于执行Nginx服务程序的账户。账户名称可以自定义，但一定别忘记，因为在后续需要调用：','        在安装部署好具有依赖关系的软件包之后，创建一个用于执行Nginx服务程序的账户。账户名称可以自定义，但一定别忘记，因为在后续需要调用：',0,'alvin',curdate());
insert into Content values(1619,17,'pre',69,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe zlib-1.2.8]# cd ..
[root@linuxprobe src]# useradd www -s /sbin/nologin
','[root@linuxprobe zlib-1.2.8]# cd ..
[root@linuxprobe src]# useradd www -s /sbin/nologin
',0,'alvin',curdate());
insert into Content values(1620,17,'p',70,'{}','        在使用命令编译Nginx服务程序时，需要设置特别多的参数，其中，--prefix参数用于定义服务程序稍后安装到的位置，--user与--group参数用于指定执行Nginx服务程序的用户名和用户组。在使用参数调用openssl、zlib、pcre软件包时，请写出软件源码包的解压路径，而不是程序的安装路径：','        在使用命令编译Nginx服务程序时，需要设置特别多的参数，其中，--prefix参数用于定义服务程序稍后安装到的位置，--user与--group参数用于指定执行Nginx服务程序的用户名和用户组。在使用参数调用openssl、zlib、pcre软件包时，请写出软件源码包的解压路径，而不是程序的安装路径：',0,'alvin',curdate());
insert into Content values(1621,17,'pre',71,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe src]# tar xzvf nginx-1.6.0.tar.gz 
[root@linuxprobe src]# cd nginx-1.6.0/
[root@linuxprobe nginx-1.6.0]# ./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-openssl=/usr/local/src/openssl-1.0.1h --with-zlib=/usr/local/src/zlib-1.2.8 --with-pcre=/usr/local/src/pcre-8.35
[root@linuxprobe nginx-1.6.0]# make
[root@linuxprobe nginx-1.6.0]# make install
','[root@linuxprobe src]# tar xzvf nginx-1.6.0.tar.gz 
[root@linuxprobe src]# cd nginx-1.6.0/
[root@linuxprobe nginx-1.6.0]# ./configure --prefix=/usr/local/nginx --without-http_memcached_module --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --with-http_gzip_static_module --with-openssl=/usr/local/src/openssl-1.0.1h --with-zlib=/usr/local/src/zlib-1.2.8 --with-pcre=/usr/local/src/pcre-8.35
[root@linuxprobe nginx-1.6.0]# make
[root@linuxprobe nginx-1.6.0]# make install
',0,'alvin',curdate());
insert into Content values(1622,17,'p',72,'{}','        要想启动Nginx服务程序以及将其加入到开机启动项中，也需要有脚本文件。可惜的是，在安装完Nginx软件包之后默认并没有为用户提供脚本文件，因此刘遄老师给各位读者准备了一份可用的启动脚本文件，大家只需在/etc/rc.d/init.d目录中创建脚本文件并直接复制下面的脚本内容即可（相信各位读者在掌握了第4章的内容之后，应该可以顺利看懂这个脚本文件）。','        要想启动Nginx服务程序以及将其加入到开机启动项中，也需要有脚本文件。可惜的是，在安装完Nginx软件包之后默认并没有为用户提供脚本文件，因此刘遄老师给各位读者准备了一份可用的启动脚本文件，大家只需在/etc/rc.d/init.d目录中创建脚本文件并直接复制下面的脚本内容即可（相信各位读者在掌握了第4章的内容之后，应该可以顺利看懂这个脚本文件）。',0,'alvin',curdate());
insert into Content values(1623,17,'pre',73,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe nginx-1.6.0]# vim /etc/rc.d/init.d/nginx
#!/bin/bash
# nginx - this script starts and stops the nginx daemon
# chkconfig: - 85 15
# description: Nginx is an HTTP(S) server, HTTP(S) reverse \
# proxy and IMAP/POP3 proxy server
# processname: nginx
# config: /etc/nginx/nginx.conf
# config: /usr/local/nginx/conf/nginx.conf
# pidfile: /usr/local/nginx/logs/nginx.pid
# Source function library.
. /etc/rc.d/init.d/functions
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0
nginx="/usr/local/nginx/sbin/nginx"
prog=$(basename $nginx)
NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"
[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx
lockfile=/var/lock/subsys/nginx
make_dirs() {
# make required directories
user=`$nginx -V 2>&1 | grep "configure arguments:" | sed \'s/[^*]*--user=\([^ ]*\).*/\1/g\' -`
        if [ -z "`grep $user /etc/passwd`" ]; then
                useradd -M -s /bin/nologin $user
        fi
options=`$nginx -V 2>&1 | grep \'configure arguments:\'`
for opt in $options; do
        if [ `echo $opt | grep \'.*-temp-path\'` ]; then
                value=`echo $opt | cut -d "=" -f 2`
                if [ ! -d "$value" ]; then
                        # echo "creating" $value
                        mkdir -p $value && chown -R $user $value
                fi
        fi
done
}
start() {
[ -x $nginx ] || exit 5
[ -f $NGINX_CONF_FILE ] || exit 6
make_dirs
echo -n $"Starting $prog: "
daemon $nginx -c $NGINX_CONF_FILE
retval=$?
echo
[ $retval -eq 0 ] && touch $lockfile
return $retval
}
stop() {
echo -n $"Stopping $prog: "
killproc $prog -QUIT
retval=$?
echo
[ $retval -eq 0 ] && rm -f $lockfile
return $retval
}
restart() {
#configtest || return $?
stop
sleep 1
start
}
reload() {
#configtest || return $?
echo -n $"Reloading $prog: "
killproc $nginx -HUP
RETVAL=$?
echo
}
force_reload() {
restart
}
configtest() {
$nginx -t -c $NGINX_CONF_FILE
}
rh_status() {
status $prog
}
rh_status_q() {
rh_status >/dev/null 2>&1
}
case "$1" in
start)
        rh_status_q && exit 0
        $1
        ;;
stop)
        rh_status_q || exit 0
        $1
        ;;
restart|configtest)
$1
;;
reload)
        rh_status_q || exit 7
        $1
        ;;
force-reload)
        force_reload
        ;;
status)
        rh_status
        ;;
condrestart|try-restart)
        rh_status_q || exit 0
        ;;
*)
echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
exit 2
esac
','[root@linuxprobe nginx-1.6.0]# vim /etc/rc.d/init.d/nginx
#!/bin/bash
# nginx - this script starts and stops the nginx daemon
# chkconfig: - 85 15
# description: Nginx is an HTTP(S) server, HTTP(S) reverse \
# proxy and IMAP/POP3 proxy server
# processname: nginx
# config: /etc/nginx/nginx.conf
# config: /usr/local/nginx/conf/nginx.conf
# pidfile: /usr/local/nginx/logs/nginx.pid
# Source function library.
. /etc/rc.d/init.d/functions
# Source networking configuration.
. /etc/sysconfig/network
# Check that networking is up.
[ "$NETWORKING" = "no" ] && exit 0
nginx="/usr/local/nginx/sbin/nginx"
prog=$(basename $nginx)
NGINX_CONF_FILE="/usr/local/nginx/conf/nginx.conf"
[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx
lockfile=/var/lock/subsys/nginx
make_dirs() {
# make required directories
user=`$nginx -V 2>&1 | grep "configure arguments:" | sed \'s/[^*]*--user=\([^ ]*\).*/\1/g\' -`
        if [ -z "`grep $user /etc/passwd`" ]; then
                useradd -M -s /bin/nologin $user
        fi
options=`$nginx -V 2>&1 | grep \'configure arguments:\'`
for opt in $options; do
        if [ `echo $opt | grep \'.*-temp-path\'` ]; then
                value=`echo $opt | cut -d "=" -f 2`
                if [ ! -d "$value" ]; then
                        # echo "creating" $value
                        mkdir -p $value && chown -R $user $value
                fi
        fi
done
}
start() {
[ -x $nginx ] || exit 5
[ -f $NGINX_CONF_FILE ] || exit 6
make_dirs
echo -n $"Starting $prog: "
daemon $nginx -c $NGINX_CONF_FILE
retval=$?
echo
[ $retval -eq 0 ] && touch $lockfile
return $retval
}
stop() {
echo -n $"Stopping $prog: "
killproc $prog -QUIT
retval=$?
echo
[ $retval -eq 0 ] && rm -f $lockfile
return $retval
}
restart() {
#configtest || return $?
stop
sleep 1
start
}
reload() {
#configtest || return $?
echo -n $"Reloading $prog: "
killproc $nginx -HUP
RETVAL=$?
echo
}
force_reload() {
restart
}
configtest() {
$nginx -t -c $NGINX_CONF_FILE
}
rh_status() {
status $prog
}
rh_status_q() {
rh_status >/dev/null 2>&1
}
case "$1" in
start)
        rh_status_q && exit 0
        $1
        ;;
stop)
        rh_status_q || exit 0
        $1
        ;;
restart|configtest)
$1
;;
reload)
        rh_status_q || exit 7
        $1
        ;;
force-reload)
        force_reload
        ;;
status)
        rh_status
        ;;
condrestart|try-restart)
        rh_status_q || exit 0
        ;;
*)
echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload|configtest}"
exit 2
esac
',0,'alvin',curdate());
insert into Content values(1624,17,'p',74,'{}','        保存脚本文件后记得为其赋予755权限，以便能够执行这个脚本。然后以绝对路径的方式执行这个脚本，通过restart参数重启Nginx服务程序，最后再使用chkconfig命令将Nginx服务程序添加至开机启动项中。大功告成！','        保存脚本文件后记得为其赋予755权限，以便能够执行这个脚本。然后以绝对路径的方式执行这个脚本，通过restart参数重启Nginx服务程序，最后再使用chkconfig命令将Nginx服务程序添加至开机启动项中。大功告成！',0,'alvin',curdate());
insert into Content values(1625,17,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe nginx-1.6.0]# chmod 755 /etc/rc.d/init.d/nginx
[root@linuxprobe nginx-1.6.0]# /etc/rc.d/init.d/nginx restart
Restarting nginx (via systemctl):                          [  OK  ]
[root@linuxprobe nginx-1.6.0]# chkconfig nginx on
','[root@linuxprobe nginx-1.6.0]# chmod 755 /etc/rc.d/init.d/nginx
[root@linuxprobe nginx-1.6.0]# /etc/rc.d/init.d/nginx restart
Restarting nginx (via systemctl):                          [  OK  ]
[root@linuxprobe nginx-1.6.0]# chkconfig nginx on
',0,'alvin',curdate());
insert into Content values(1626,17,'p',76,'{}','        Nginx服务程序在启动后就可以在浏览器中输入服务器的IP地址来查看到默认网页了。相较于Apache服务程序的红色默认页面，Nginx服务程序的默认页面显得更加简洁，如下图所示。','        Nginx服务程序在启动后就可以在浏览器中输入服务器的IP地址来查看到默认网页了。相较于Apache服务程序的红色默认页面，Nginx服务程序的默认页面显得更加简洁，如下图所示。',0,'alvin',curdate());
insert into Content values(1627,17,'image',77,'{"alt": "try_to_connect_web", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_try_to_connect_web.png", "width": "676"}','/static/img/linux/linux_lnmp_try_to_connect_web.png','/static/img/linux/linux_lnmp_try_to_connect_web.png',0,'alvin',curdate());
insert into Content values(1628,17,'h3',78,'{}','配置php服务','配置php服务',0,'alvin',curdate());
insert into Content values(1629,17,'p',79,'{}','        PHP（Hypertxt Preprocessor，超文本预处理器）是一种通用的开源脚本语言，发明于1995年，它吸取了C语言、Java语言及Perl语言的很多优点，具有开源、免费、快捷、跨平台性强、效率高等优良特性，是目前Web开发领域最常用的语言之一。本书的配套站点就是基于PHP语言编写的。','        PHP（Hypertxt Preprocessor，超文本预处理器）是一种通用的开源脚本语言，发明于1995年，它吸取了C语言、Java语言及Perl语言的很多优点，具有开源、免费、快捷、跨平台性强、效率高等优良特性，是目前Web开发领域最常用的语言之一。本书的配套站点就是基于PHP语言编写的。',0,'alvin',curdate());
insert into Content values(1630,17,'p',80,'{}','        使用源码包的方式编译安装PHP语言环境其实并不复杂，难点在于解决PHP的程序包和其他软件的依赖关系。为此需要先安装部署将近十个用于搭建网站页面的软件程序包，然后才能正式安装PHP程序。','        使用源码包的方式编译安装PHP语言环境其实并不复杂，难点在于解决PHP的程序包和其他软件的依赖关系。为此需要先安装部署将近十个用于搭建网站页面的软件程序包，然后才能正式安装PHP程序。',0,'alvin',curdate());
insert into Content values(1631,17,'p',81,'{}','        yasm源码包是一款常见的开源汇编器，其解压、编译、安装过程中生成的输出信息均已省略：','        yasm源码包是一款常见的开源汇编器，其解压、编译、安装过程中生成的输出信息均已省略：',0,'alvin',curdate());
insert into Content values(1632,17,'pre',82,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe nginx-1.6.0]# cd ..
[root@linuxprobe src]# tar zxvf yasm-1.2.0.tar.gz
[root@linuxprobe src]# cd yasm-1.2.0
[root@linuxprobe yasm-1.2.0]# ./configure
[root@linuxprobe yasm-1.2.0]# make
[root@linuxprobe yasm-1.2.0]# make install
','[root@linuxprobe nginx-1.6.0]# cd ..
[root@linuxprobe src]# tar zxvf yasm-1.2.0.tar.gz
[root@linuxprobe src]# cd yasm-1.2.0
[root@linuxprobe yasm-1.2.0]# ./configure
[root@linuxprobe yasm-1.2.0]# make
[root@linuxprobe yasm-1.2.0]# make install
',0,'alvin',curdate());
insert into Content values(1633,17,'p',83,'{}','        libmcrypt源码包是用于加密算法的扩展库程序，其解压、编译、安装过程中生成的输出信息均已省略：','        libmcrypt源码包是用于加密算法的扩展库程序，其解压、编译、安装过程中生成的输出信息均已省略：',0,'alvin',curdate());
insert into Content values(1634,17,'pre',84,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe yasm-1.2.0]# cd ..
[root@linuxprobe src]# tar zxvf libmcrypt-2.5.8.tar.gz
[root@linuxprobe src]# cd libmcrypt-2.5.8
[root@linuxprobe libmcrypt-2.5.8]# ./configure
[root@linuxprobe libmcrypt-2.5.8]# make
[root@linuxprobe libmcrypt-2.5.8]# make install
','[root@linuxprobe yasm-1.2.0]# cd ..
[root@linuxprobe src]# tar zxvf libmcrypt-2.5.8.tar.gz
[root@linuxprobe src]# cd libmcrypt-2.5.8
[root@linuxprobe libmcrypt-2.5.8]# ./configure
[root@linuxprobe libmcrypt-2.5.8]# make
[root@linuxprobe libmcrypt-2.5.8]# make install
',0,'alvin',curdate());
insert into Content values(1635,17,'p',85,'{}','        libvpx源码包是用于提供视频编码器的服务程序，其解压、编译、安装过程中生成的输出信息均已省略。相信会有很多粗心的读者顺手使用了tar命令的xzvf参数，但如果仔细观察就会发现libvpx源码包的后缀是.tar.bz2，即表示使用bzip2格式进行的压缩，因此正确的解压参数应该是xjvf：','        libvpx源码包是用于提供视频编码器的服务程序，其解压、编译、安装过程中生成的输出信息均已省略。相信会有很多粗心的读者顺手使用了tar命令的xzvf参数，但如果仔细观察就会发现libvpx源码包的后缀是.tar.bz2，即表示使用bzip2格式进行的压缩，因此正确的解压参数应该是xjvf：',0,'alvin',curdate());
insert into Content values(1636,17,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe libmcrypt-2.5.8]# cd ..
[root@linuxprobe src]# tar xjvf libvpx-v1.3.0.tar.bz2
[root@linuxprobe src]# cd libvpx-v1.3.0
[root@linuxprobe libvpx-v1.3.0]# ./configure --prefix=/usr/local/libvpx --enable-shared --enable-vp9
[root@linuxprobe libvpx-v1.3.0]# make
[root@linuxprobe libvpx-v1.3.0]# make install
','[root@linuxprobe libmcrypt-2.5.8]# cd ..
[root@linuxprobe src]# tar xjvf libvpx-v1.3.0.tar.bz2
[root@linuxprobe src]# cd libvpx-v1.3.0
[root@linuxprobe libvpx-v1.3.0]# ./configure --prefix=/usr/local/libvpx --enable-shared --enable-vp9
[root@linuxprobe libvpx-v1.3.0]# make
[root@linuxprobe libvpx-v1.3.0]# make install
',0,'alvin',curdate());
insert into Content values(1637,17,'p',87,'{}','        tiff源码包是用于提供标签图像文件格式的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：','        tiff源码包是用于提供标签图像文件格式的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：',0,'alvin',curdate());
insert into Content values(1638,17,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe libvpx-v1.3.0]# cd ..
[root@linuxprobe src]# tar zxvf tiff-4.0.3.tar.gz
[root@linuxprobe src]# cd tiff-4.0.3
[root@linuxprobe tiff-4.0.3]# ./configure --prefix=/usr/local/tiff --enable-shared
[root@linuxprobe tiff-4.0.3]# make
[root@linuxprobe tiff-4.0.3]# make install
','[root@linuxprobe libvpx-v1.3.0]# cd ..
[root@linuxprobe src]# tar zxvf tiff-4.0.3.tar.gz
[root@linuxprobe src]# cd tiff-4.0.3
[root@linuxprobe tiff-4.0.3]# ./configure --prefix=/usr/local/tiff --enable-shared
[root@linuxprobe tiff-4.0.3]# make
[root@linuxprobe tiff-4.0.3]# make install
',0,'alvin',curdate());
insert into Content values(1639,17,'p',89,'{}','        libpng源码包是用于提供png图片格式支持函数库的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：','        libpng源码包是用于提供png图片格式支持函数库的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：',0,'alvin',curdate());
insert into Content values(1640,17,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe tiff-4.0.3]# cd ..
[root@linuxprobe src]# tar zxvf libpng-1.6.12.tar.gz
[root@linuxprobe src]# cd libpng-1.6.12
[root@linuxprobe libpng-1.6.12]# ./configure --prefix=/usr/local/libpng --enable-shared
[root@linuxprobe libpng-1.6.12]# make
[root@linuxprobe libpng-1.6.12]# make install
','[root@linuxprobe tiff-4.0.3]# cd ..
[root@linuxprobe src]# tar zxvf libpng-1.6.12.tar.gz
[root@linuxprobe src]# cd libpng-1.6.12
[root@linuxprobe libpng-1.6.12]# ./configure --prefix=/usr/local/libpng --enable-shared
[root@linuxprobe libpng-1.6.12]# make
[root@linuxprobe libpng-1.6.12]# make install
',0,'alvin',curdate());
insert into Content values(1641,17,'p',91,'{}','        freetype源码包是用于提供字体支持引擎的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：','        freetype源码包是用于提供字体支持引擎的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：',0,'alvin',curdate());
insert into Content values(1642,17,'pre',92,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe libpng-1.6.12]# cd ..
[root@linuxprobe src]# tar zxvf freetype-2.5.3.tar.gz
[root@linuxprobe src]# cd freetype-2.5.3
[root@linuxprobe freetype-2.5.3]# ./configure --prefix=/usr/local/freetype --enable-shared
[root@linuxprobe freetype-2.5.3]# make
[root@linuxprobe freetype-2.5.3]# make install
','[root@linuxprobe libpng-1.6.12]# cd ..
[root@linuxprobe src]# tar zxvf freetype-2.5.3.tar.gz
[root@linuxprobe src]# cd freetype-2.5.3
[root@linuxprobe freetype-2.5.3]# ./configure --prefix=/usr/local/freetype --enable-shared
[root@linuxprobe freetype-2.5.3]# make
[root@linuxprobe freetype-2.5.3]# make install
',0,'alvin',curdate());
insert into Content values(1643,17,'p',93,'{}','        jpeg源码包是用于提供jpeg图片格式支持函数库的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：','        jpeg源码包是用于提供jpeg图片格式支持函数库的服务程序，其解压、编译、安装过程中生成的输出信息均已省略：',0,'alvin',curdate());
insert into Content values(1644,17,'pre',94,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe freetype-2.5.3]# cd ..
[root@linuxprobe src]# tar zxvf jpegsrc.v9a.tar.gz
[root@linuxprobe src]# cd jpeg-9a
[root@linuxprobe jpeg-9a]# ./configure --prefix=/usr/local/jpeg --enable-shared
[root@linuxprobe jpeg-9a]# make
[root@linuxprobe jpeg-9a]# make install
','[root@linuxprobe freetype-2.5.3]# cd ..
[root@linuxprobe src]# tar zxvf jpegsrc.v9a.tar.gz
[root@linuxprobe src]# cd jpeg-9a
[root@linuxprobe jpeg-9a]# ./configure --prefix=/usr/local/jpeg --enable-shared
[root@linuxprobe jpeg-9a]# make
[root@linuxprobe jpeg-9a]# make install
',0,'alvin',curdate());
insert into Content values(1645,17,'p',95,'{}','        libgd源码包是用于提供图形处理的服务程序，其解压、编译、安装过程中生成的输出信息均已省略。在编译libgd源码包时，请记得写入的是jpeg、libpng、freetype、tiff、libvpx等服务程序在系统中的安装路径，即在上面安装过程中使用--prefix参数指定的目录路径：','        libgd源码包是用于提供图形处理的服务程序，其解压、编译、安装过程中生成的输出信息均已省略。在编译libgd源码包时，请记得写入的是jpeg、libpng、freetype、tiff、libvpx等服务程序在系统中的安装路径，即在上面安装过程中使用--prefix参数指定的目录路径：',0,'alvin',curdate());
insert into Content values(1646,17,'pre',96,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe jpeg-9a]# cd ..
[root@linuxprobe src]# tar zxvf libgd-2.1.0.tar.gz
[root@linuxprobe src]# cd libgd-2.1.0
[root@linuxprobe libgd-2.1.0]# ./configure --prefix=/usr/local/libgd --enable-shared --with-jpeg=/usr/local/jpeg --with-png=/usr/local/libpng --with-freetype=/usr/local/freetype --with-fontconfig=/usr/local/freetype --with-xpm=/usr/ --with-tiff=/usr/local/tiff --with-vpx=/usr/local/libvpx
[root@linuxprobe libgd-2.1.0]# make
[root@linuxprobe libgd-2.1.0]# make install
','[root@linuxprobe jpeg-9a]# cd ..
[root@linuxprobe src]# tar zxvf libgd-2.1.0.tar.gz
[root@linuxprobe src]# cd libgd-2.1.0
[root@linuxprobe libgd-2.1.0]# ./configure --prefix=/usr/local/libgd --enable-shared --with-jpeg=/usr/local/jpeg --with-png=/usr/local/libpng --with-freetype=/usr/local/freetype --with-fontconfig=/usr/local/freetype --with-xpm=/usr/ --with-tiff=/usr/local/tiff --with-vpx=/usr/local/libvpx
[root@linuxprobe libgd-2.1.0]# make
[root@linuxprobe libgd-2.1.0]# make install
',0,'alvin',curdate());
insert into Content values(1647,17,'p',97,'{}','        t1lib源码包是用于提供图片生成函数库的服务程序，其解压、编译、安装过程中生成的输出信息均已省略。安装后把/usr/lib64目录中的函数文件链接到/usr/lib目录中，以便系统能够顺利调取到函数文件：','        t1lib源码包是用于提供图片生成函数库的服务程序，其解压、编译、安装过程中生成的输出信息均已省略。安装后把/usr/lib64目录中的函数文件链接到/usr/lib目录中，以便系统能够顺利调取到函数文件：',0,'alvin',curdate());
insert into Content values(1648,17,'pre',98,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe cd libgd-2.1.0]# cd ..
[root@linuxprobe src]# tar zxvf t1lib-5.1.2.tar.gz
[root@linuxprobe src]# cd t1lib-5.1.2
[root@linuxprobe t1lib-5.1.2]# ./configure --prefix=/usr/local/t1lib --enable-shared
[root@linuxprobe t1lib-5.1.2]# make
[root@linuxprobe t1lib-5.1.2]# make install
[root@linuxprobe t1lib-5.1.2]# ln -s /usr/lib64/libltdl.so /usr/lib/libltdl.so 
[root@linuxprobe t1lib-5.1.2]# cp -frp /usr/lib64/libXpm.so* /usr/lib/
','[root@linuxprobe cd libgd-2.1.0]# cd ..
[root@linuxprobe src]# tar zxvf t1lib-5.1.2.tar.gz
[root@linuxprobe src]# cd t1lib-5.1.2
[root@linuxprobe t1lib-5.1.2]# ./configure --prefix=/usr/local/t1lib --enable-shared
[root@linuxprobe t1lib-5.1.2]# make
[root@linuxprobe t1lib-5.1.2]# make install
[root@linuxprobe t1lib-5.1.2]# ln -s /usr/lib64/libltdl.so /usr/lib/libltdl.so 
[root@linuxprobe t1lib-5.1.2]# cp -frp /usr/lib64/libXpm.so* /usr/lib/
',0,'alvin',curdate());
insert into Content values(1649,17,'p',99,'{}','        此时终于把编译php服务源码包的相关软件包都已经安装部署妥当了。在开始编译php源码包之前，先定义一个名为LD_LIBRARY_PATH的全局环境变量，该环境变量的作用是帮助系统找到指定的动态链接库文件，这些文件是编译php服务源码包的必须元素之一。编译php服务源码包时，除了定义要安装到的目录以外，还需要依次定义配置php服务程序配置文件的保存目录、MySQL数据库服务程序所在目录、MySQL数据库服务程序配置文件所在目录，以及libpng、jpeg、freetype、libvpx、zlib、t1lib等服务程序的安装目录路径，并通过参数启动php服务程序的诸多默认功能：','        此时终于把编译php服务源码包的相关软件包都已经安装部署妥当了。在开始编译php源码包之前，先定义一个名为LD_LIBRARY_PATH的全局环境变量，该环境变量的作用是帮助系统找到指定的动态链接库文件，这些文件是编译php服务源码包的必须元素之一。编译php服务源码包时，除了定义要安装到的目录以外，还需要依次定义配置php服务程序配置文件的保存目录、MySQL数据库服务程序所在目录、MySQL数据库服务程序配置文件所在目录，以及libpng、jpeg、freetype、libvpx、zlib、t1lib等服务程序的安装目录路径，并通过参数启动php服务程序的诸多默认功能：',0,'alvin',curdate());
insert into Content values(1650,17,'pre',100,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe t1lib-5.1.2]# cd ..
[root@linuxprobe src]# tar -zvxf php-5.5.14.tar.gz
[root@linuxprobe src]# cd php-5.5.14
[root@linuxprobe php-5.5.14]# export LD_LIBRARY_PATH=/usr/local/libgd/lib
[root@linuxprobe php-5.5.14]# ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-pdo-mysql=/usr/local/mysql --with-gd --with-png-dir=/usr/local/libpng --with-jpeg-dir=/usr/local/jpeg --with-freetype-dir=/usr/local/freetype --with-xpm-dir=/usr/ --with-vpx-dir=/usr/local/libvpx/ --with-zlib-dir=/usr/local/zlib --with-t1lib=/usr/local/t1lib --with-iconv --enable-libxml --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --enable-opcache --enable-mbregex --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --enable-ctype 
[root@linuxprobe php-5.5.14]# make
[root@linuxprobe php-5.5.14]# make install
','[root@linuxprobe t1lib-5.1.2]# cd ..
[root@linuxprobe src]# tar -zvxf php-5.5.14.tar.gz
[root@linuxprobe src]# cd php-5.5.14
[root@linuxprobe php-5.5.14]# export LD_LIBRARY_PATH=/usr/local/libgd/lib
[root@linuxprobe php-5.5.14]# ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-mysql=/usr/local/mysql --with-mysqli=/usr/local/mysql/bin/mysql_config --with-mysql-sock=/tmp/mysql.sock --with-pdo-mysql=/usr/local/mysql --with-gd --with-png-dir=/usr/local/libpng --with-jpeg-dir=/usr/local/jpeg --with-freetype-dir=/usr/local/freetype --with-xpm-dir=/usr/ --with-vpx-dir=/usr/local/libvpx/ --with-zlib-dir=/usr/local/zlib --with-t1lib=/usr/local/t1lib --with-iconv --enable-libxml --enable-xml --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --enable-opcache --enable-mbregex --enable-fpm --enable-mbstring --enable-ftp --enable-gd-native-ttf --with-openssl --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --without-pear --with-gettext --enable-session --with-mcrypt --with-curl --enable-ctype 
[root@linuxprobe php-5.5.14]# make
[root@linuxprobe php-5.5.14]# make install
',0,'alvin',curdate());
insert into Content values(1651,17,'p',101,'{}','        在php源码包程序安装完成后，需要删除当前默认的配置文件，然后将php服务程序目录中相应的配置文件复制过来：','        在php源码包程序安装完成后，需要删除当前默认的配置文件，然后将php服务程序目录中相应的配置文件复制过来：',0,'alvin',curdate());
insert into Content values(1652,17,'pre',102,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe php-5.5.14]# rm -rf /etc/php.ini
[root@linuxprobe php-5.5.14]# ln -s /usr/local/php/etc/php.ini /etc/php.ini
[root@linuxprobe php-5.5.14]# cp php.ini-production /usr/local/php/etc/php.ini
[root@linuxprobe php-5.5.14]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
[root@linuxprobe php-5.5.14]# ln -s /usr/local/php/etc/php-fpm.conf /etc/php-fpm.conf
','[root@linuxprobe php-5.5.14]# rm -rf /etc/php.ini
[root@linuxprobe php-5.5.14]# ln -s /usr/local/php/etc/php.ini /etc/php.ini
[root@linuxprobe php-5.5.14]# cp php.ini-production /usr/local/php/etc/php.ini
[root@linuxprobe php-5.5.14]# cp /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf
[root@linuxprobe php-5.5.14]# ln -s /usr/local/php/etc/php-fpm.conf /etc/php-fpm.conf
',0,'alvin',curdate());
insert into Content values(1653,17,'p',103,'{}','        php-fpm.conf是php服务程序重要的配置文件之一，我们需要启用该配置文件中第25行左右的pid文件保存目录，然后分别将第148和149行的user与group参数分别修改为www账户和用户组名称：','        php-fpm.conf是php服务程序重要的配置文件之一，我们需要启用该配置文件中第25行左右的pid文件保存目录，然后分别将第148和149行的user与group参数分别修改为www账户和用户组名称：',0,'alvin',curdate());
insert into Content values(1654,17,'pre',104,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe php-5.5.14]# vim /usr/local/php/etc/php-fpm.conf
1 ;;;;;;;;;;;;;;;;;;;;;
2 ; FPM Configuration ;
3 ;;;;;;;;;;;;;;;;;;;;;
4 
5 ; All relative paths in this configuration file are relative to PHP\'s instal l
6 ; prefix (/usr/local/php). This prefix can be dynamically changed by using t he
7 ; \'-p\' argument from the command line.
8 
9 ; Include one or more files. If glob(3) exists, it is used to include a bunc h of
10 ; files from a glob(3) pattern. This directive can be used everywhere in the
11 ; file.
12 ; Relative path can also be used. They will be prefixed by:
13 ; - the global prefix if it\'s been set (-p argument)
14 ; - /usr/local/php otherwise
15 ;include=etc/fpm.d/*.conf
16 
17 ;;;;;;;;;;;;;;;;;;
18 ; Global Options ;
19 ;;;;;;;;;;;;;;;;;;
20 
21 [global]
22 ; Pid file
23 ; Note: the default prefix is /usr/local/php/var
24 ; Default Value: none
25 pid = run/php-fpm.pid
26 
………………省略部分输出信息………………
145 ; Unix user/group of processes
146 ; Note: The user is mandatory. If the group is not set, the default user\'s g roup
147 ; will be used.
148 user = www
149 group = www
150 
………………省略部分输出信息………………
','[root@linuxprobe php-5.5.14]# vim /usr/local/php/etc/php-fpm.conf
1 ;;;;;;;;;;;;;;;;;;;;;
2 ; FPM Configuration ;
3 ;;;;;;;;;;;;;;;;;;;;;
4 
5 ; All relative paths in this configuration file are relative to PHP\'s instal l
6 ; prefix (/usr/local/php). This prefix can be dynamically changed by using t he
7 ; \'-p\' argument from the command line.
8 
9 ; Include one or more files. If glob(3) exists, it is used to include a bunc h of
10 ; files from a glob(3) pattern. This directive can be used everywhere in the
11 ; file.
12 ; Relative path can also be used. They will be prefixed by:
13 ; - the global prefix if it\'s been set (-p argument)
14 ; - /usr/local/php otherwise
15 ;include=etc/fpm.d/*.conf
16 
17 ;;;;;;;;;;;;;;;;;;
18 ; Global Options ;
19 ;;;;;;;;;;;;;;;;;;
20 
21 [global]
22 ; Pid file
23 ; Note: the default prefix is /usr/local/php/var
24 ; Default Value: none
25 pid = run/php-fpm.pid
26 
………………省略部分输出信息………………
145 ; Unix user/group of processes
146 ; Note: The user is mandatory. If the group is not set, the default user\'s g roup
147 ; will be used.
148 user = www
149 group = www
150 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1655,17,'p',105,'{}','        配置妥当后便可把用于管理php服务的脚本文件复制到/etc/rc.d/init.d中了。为了能够执行脚本，请记得为脚本赋予755权限。最后把php-fpm服务程序加入到开机启动项中：','        配置妥当后便可把用于管理php服务的脚本文件复制到/etc/rc.d/init.d中了。为了能够执行脚本，请记得为脚本赋予755权限。最后把php-fpm服务程序加入到开机启动项中：',0,'alvin',curdate());
insert into Content values(1656,17,'pre',106,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe php-5.5.14]# cp sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm
[root@linuxprobe php-5.5.14]# chmod 755 /etc/rc.d/init.d/php-fpm
[root@linuxprobe php-5.5.14]# chkconfig php-fpm on
','[root@linuxprobe php-5.5.14]# cp sapi/fpm/init.d.php-fpm /etc/rc.d/init.d/php-fpm
[root@linuxprobe php-5.5.14]# chmod 755 /etc/rc.d/init.d/php-fpm
[root@linuxprobe php-5.5.14]# chkconfig php-fpm on
',0,'alvin',curdate());
insert into Content values(1657,17,'p',107,'{}','        由于php服务程序的配置参数直接会影响到Web服务服务的运行环境，因此，如果默认开启了一些不必要且高危的功能（如允许用户在网页中执行Linux命令），则会降低网站被入侵的难度，入侵人员甚至可以拿到整台Web服务器的管理权限。因此我们需要编辑php.ini配置文件，在305行的disable_functions参数后面追加上要禁止的功能。下面的禁用功能名单是刘遄老师依据网站运行的经验而定制的，不见得适合每个生产环境，建议大家在此基础上根据自身工作需求酌情删减：','        由于php服务程序的配置参数直接会影响到Web服务服务的运行环境，因此，如果默认开启了一些不必要且高危的功能（如允许用户在网页中执行Linux命令），则会降低网站被入侵的难度，入侵人员甚至可以拿到整台Web服务器的管理权限。因此我们需要编辑php.ini配置文件，在305行的disable_functions参数后面追加上要禁止的功能。下面的禁用功能名单是刘遄老师依据网站运行的经验而定制的，不见得适合每个生产环境，建议大家在此基础上根据自身工作需求酌情删减：',0,'alvin',curdate());
insert into Content values(1658,17,'pre',108,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe php-5.5.14]# vim /usr/local/php/etc/php.ini
………………省略部分输出信息………………
300 
301 ; This directive allows you to disable certain functions for security reasons.
302 ; It receives a comma-delimited list of function names. This directive is
303 ; *NOT* affected by whether Safe Mode is turned On or Off.
304 ; http://php.net/disable-functions
305 disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restor e,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,g etservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd,posix_getegid,posix_geteuid,posix_getgid,po six_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid,posix_getppid,posix_getpwnam,posix_ getpwuid,posix_getrlimit,posix_getsid,posix_getuid,posix_isatty,posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid,posix_ setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname
306 
………………省略部分输出信息………………
','[root@linuxprobe php-5.5.14]# vim /usr/local/php/etc/php.ini
………………省略部分输出信息………………
300 
301 ; This directive allows you to disable certain functions for security reasons.
302 ; It receives a comma-delimited list of function names. This directive is
303 ; *NOT* affected by whether Safe Mode is turned On or Off.
304 ; http://php.net/disable-functions
305 disable_functions = passthru,exec,system,chroot,scandir,chgrp,chown,shell_exec,proc_open,proc_get_status,ini_alter,ini_alter,ini_restor e,dl,openlog,syslog,readlink,symlink,popepassthru,stream_socket_server,escapeshellcmd,dll,popen,disk_free_space,checkdnsrr,checkdnsrr,g etservbyname,getservbyport,disk_total_space,posix_ctermid,posix_get_last_error,posix_getcwd,posix_getegid,posix_geteuid,posix_getgid,po six_getgrgid,posix_getgrnam,posix_getgroups,posix_getlogin,posix_getpgid,posix_getpgrp,posix_getpid,posix_getppid,posix_getpwnam,posix_ getpwuid,posix_getrlimit,posix_getsid,posix_getuid,posix_isatty,posix_kill,posix_mkfifo,posix_setegid,posix_seteuid,posix_setgid,posix_ setpgid,posix_setsid,posix_setuid,posix_strerror,posix_times,posix_ttyname,posix_uname
306 
………………省略部分输出信息………………
',0,'alvin',curdate());
insert into Content values(1659,17,'p',109,'{}','        这样就把php服务程序配置妥当了。最后，还需要编辑Nginx服务程序的主配置文件，把第2行的井号（#）删除，然后在后面写上负责运行Nginx服务程序的账户名称和用户组名称；在第45行的index参数后面写上网站的首页名称。最后是将第65～71行参数前的井号（#）删除来启用参数，主要是修改第69行的脚本名称路径参数，其中$document_root变量即为网站信息存储的根目录路径，若没有设置该变量，则Nginx服务程序无法找到网站信息，因此会提示“404页面未找到”的报错信息。在确认参数信息填写正确后便可重启Nginx服务与php-fpm服务。','        这样就把php服务程序配置妥当了。最后，还需要编辑Nginx服务程序的主配置文件，把第2行的井号（#）删除，然后在后面写上负责运行Nginx服务程序的账户名称和用户组名称；在第45行的index参数后面写上网站的首页名称。最后是将第65～71行参数前的井号（#）删除来启用参数，主要是修改第69行的脚本名称路径参数，其中$document_root变量即为网站信息存储的根目录路径，若没有设置该变量，则Nginx服务程序无法找到网站信息，因此会提示“404页面未找到”的报错信息。在确认参数信息填写正确后便可重启Nginx服务与php-fpm服务。',0,'alvin',curdate());
insert into Content values(1660,17,'pre',110,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe php-5.5.14]# vim /usr/local/nginx/conf/nginx.conf
 1 
 2 user www www;
 3 worker_processes 1;
 4 
 5 #error_log logs/error.log;
 6 #error_log logs/error.log notice;
 7 #error_log logs/error.log info;
 8 
 9 #pid logs/nginx.pid;
 10 
 11 
………………省略部分输出信息………………
 40 
 41 #access_log logs/host.access.log main;
 42 
 43 location / {
 44 root html;
 45 index index.html index.htm index.php;
 46 }
 47 
………………省略部分输出信息………………
 62 
 63 #pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
 64 
 65 location ~ \.php$ {
 66 root html;
 67 fastcgi_pass 127.0.0.1:9000;
 68 fastcgi_index index.php;
 69 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
 70 include fastcgi_params;
 71 }
 72 
………………省略部分输出信息………………
[root@linuxprobe php-5.5.14]# systemctl restart nginx
[root@linuxprobe php-5.5.14]# systemctl restart php-fpm
','[root@linuxprobe php-5.5.14]# vim /usr/local/nginx/conf/nginx.conf
 1 
 2 user www www;
 3 worker_processes 1;
 4 
 5 #error_log logs/error.log;
 6 #error_log logs/error.log notice;
 7 #error_log logs/error.log info;
 8 
 9 #pid logs/nginx.pid;
 10 
 11 
………………省略部分输出信息………………
 40 
 41 #access_log logs/host.access.log main;
 42 
 43 location / {
 44 root html;
 45 index index.html index.htm index.php;
 46 }
 47 
………………省略部分输出信息………………
 62 
 63 #pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
 64 
 65 location ~ \.php$ {
 66 root html;
 67 fastcgi_pass 127.0.0.1:9000;
 68 fastcgi_index index.php;
 69 fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
 70 include fastcgi_params;
 71 }
 72 
………………省略部分输出信息………………
[root@linuxprobe php-5.5.14]# systemctl restart nginx
[root@linuxprobe php-5.5.14]# systemctl restart php-fpm
',0,'alvin',curdate());
insert into Content values(1661,17,'p',111,'{}','        至此，LNMP动态网站环境架构的配置实验全部结束。','        至此，LNMP动态网站环境架构的配置实验全部结束。',0,'alvin',curdate());
insert into Content values(1662,17,'h2',112,'{}','搭建Discuz论坛','搭建Discuz论坛',0,'alvin',curdate());
insert into Content values(1663,17,'p',113,'{}','        为了检验LNMP动态网站环境是否配置妥当，可以使用在上面部署Discuz!系统，然后查看结果。如果能够在LNMP动态网站环境中成功安装使用Discuz!论坛系统，也就意味着这套架构是可用的。Discuz! X3.2是国内最常见的社区论坛系统，在经过十多年的研发后已经成为了全球成熟度最高、覆盖率最广的论坛网站系统之一。','        为了检验LNMP动态网站环境是否配置妥当，可以使用在上面部署Discuz!系统，然后查看结果。如果能够在LNMP动态网站环境中成功安装使用Discuz!论坛系统，也就意味着这套架构是可用的。Discuz! X3.2是国内最常见的社区论坛系统，在经过十多年的研发后已经成为了全球成熟度最高、覆盖率最广的论坛网站系统之一。',0,'alvin',curdate());
insert into Content values(1664,17,'p',114,'{}','        Discuz! X3.2软件包的后缀是.zip格式，因此应当使用专用的unzip命令来进行解压。解压后会在当前目录中出现一个名为upload的文件目录，这里面保存的就是Discuz！论坛的系统程序。我们把Nginx服务程序网站根目录的内容清空后，就可以把这些这个目录中的文件都复制进去了。记得把Nginx服务程序的网站根目录的所有者和所属组修改为本地的www用户（已在20.2.2小节创建），并为其赋予755权限以便于能够读、写、执行该论坛系统内的文件。','        Discuz! X3.2软件包的后缀是.zip格式，因此应当使用专用的unzip命令来进行解压。解压后会在当前目录中出现一个名为upload的文件目录，这里面保存的就是Discuz！论坛的系统程序。我们把Nginx服务程序网站根目录的内容清空后，就可以把这些这个目录中的文件都复制进去了。记得把Nginx服务程序的网站根目录的所有者和所属组修改为本地的www用户（已在20.2.2小节创建），并为其赋予755权限以便于能够读、写、执行该论坛系统内的文件。',0,'alvin',curdate());
insert into Content values(1665,17,'pre',115,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe php-5.5.14 ]# cd /usr/local/src/
[root@linuxprobe src]# unzip Discuz_X3.2_SC_GBK.zip
[root@linuxprobe src]# rm -rf /usr/local/nginx/html/{index.html,50x.html}*
[root@linuxprobe src]# mv upload/* /usr/local/nginx/html/
[root@linuxprobe src]# chown -Rf www:www /usr/local/nginx/html
[root@linuxprobe src]# chmod -Rf 755 /usr/local/nginx/html
','[root@linuxprobe php-5.5.14 ]# cd /usr/local/src/
[root@linuxprobe src]# unzip Discuz_X3.2_SC_GBK.zip
[root@linuxprobe src]# rm -rf /usr/local/nginx/html/{index.html,50x.html}*
[root@linuxprobe src]# mv upload/* /usr/local/nginx/html/
[root@linuxprobe src]# chown -Rf www:www /usr/local/nginx/html
[root@linuxprobe src]# chmod -Rf 755 /usr/local/nginx/html
',0,'alvin',curdate());
insert into Content values(1666,17,'p',116,'{}',' BOLD[  第1步： ]BOLD 接受Discuz!安装向导的许可协议。在把Discuz!论坛系统程序（即刚才upload目录中的内容）复制Nginx服务网站根目录后便可刷新浏览器页面，这将自动跳转到Discuz! X3.2论坛系统的安装界面，此处需单击“我同意”按钮，进入下一步的安装过程中，如下图所示。',' BOLD[  第1步： ]BOLD 接受Discuz!安装向导的许可协议。在把Discuz!论坛系统程序（即刚才upload目录中的内容）复制Nginx服务网站根目录后便可刷新浏览器页面，这将自动跳转到Discuz! X3.2论坛系统的安装界面，此处需单击“我同意”按钮，进入下一步的安装过程中，如下图所示。',0,'alvin',curdate());
insert into Content values(1667,17,'image',117,'{"alt": "discuz_step1", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_discuz_step1.jpg", "width": "676"}','/static/img/linux/linux_lnmp_discuz_step1.jpg','/static/img/linux/linux_lnmp_discuz_step1.jpg',0,'alvin',curdate());
insert into Content values(1668,17,'p',118,'{}',' BOLD[  第2步： ]BOLD 检查Discuz! X3.2论坛系统的安装环境及目录权限。我们部署的LNMP动态网站环境版本和软件都与Discuz!论坛的要求相符合，如果下图框中的目录状态为不可写，请自行检查目录的所有者和所属组是否为www用户，以及是否对目录设置了755权限，然后单击“下一步”按钮。',' BOLD[  第2步： ]BOLD 检查Discuz! X3.2论坛系统的安装环境及目录权限。我们部署的LNMP动态网站环境版本和软件都与Discuz!论坛的要求相符合，如果下图框中的目录状态为不可写，请自行检查目录的所有者和所属组是否为www用户，以及是否对目录设置了755权限，然后单击“下一步”按钮。',0,'alvin',curdate());
insert into Content values(1669,17,'image',119,'{"alt": "check_env", "class": ["attachment-full"], "height": "632", "src": "/static/img/linux/linux_lnmp_check_env.jpg", "width": "676"}','/static/img/linux/linux_lnmp_check_env.jpg','/static/img/linux/linux_lnmp_check_env.jpg',0,'alvin',curdate());
insert into Content values(1670,17,'p',120,'{}',' BOLD[  第3步： ]BOLD 选择“全新安装Discuz! X（含UCenter Server）”。UCenter Server是站点的管理平台，能够在多个站点之间同步会员账户及密码信息，单击“下一步”按钮，如下图所示。',' BOLD[  第3步： ]BOLD 选择“全新安装Discuz! X（含UCenter Server）”。UCenter Server是站点的管理平台，能够在多个站点之间同步会员账户及密码信息，单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1671,17,'image',121,'{"alt": "set_run_env", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_set_run_env.jpg", "width": "676"}','/static/img/linux/linux_lnmp_set_run_env.jpg','/static/img/linux/linux_lnmp_set_run_env.jpg',0,'alvin',curdate());
insert into Content values(1672,17,'p',122,'{}',' BOLD[  第4步： ]BOLD 填写服务器的数据库信息与论坛系统管理员信息。网站系统使用由服务器本地（localhost）提供的数据库服务，数据名称与数据表前缀可由用户自行填写，其中数据库的用户名和密码则为用于登录MySQL数据库的信息（以初始化MySQL服务程序时填写的信息为准）。论坛系统的管理员账户为今后登录、管理Discuz!论坛时使用的验证信息，其中账户可以设置得简单好记一些，但是要将密码设置得尽可能复杂一下。在信息填写正确后单击“下一步”按钮，如下图所示。',' BOLD[  第4步： ]BOLD 填写服务器的数据库信息与论坛系统管理员信息。网站系统使用由服务器本地（localhost）提供的数据库服务，数据名称与数据表前缀可由用户自行填写，其中数据库的用户名和密码则为用于登录MySQL数据库的信息（以初始化MySQL服务程序时填写的信息为准）。论坛系统的管理员账户为今后登录、管理Discuz!论坛时使用的验证信息，其中账户可以设置得简单好记一些，但是要将密码设置得尽可能复杂一下。在信息填写正确后单击“下一步”按钮，如下图所示。',0,'alvin',curdate());
insert into Content values(1673,17,'image',123,'{"alt": "input_admin_info", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_input_admin_info.jpg", "width": "676"}','/static/img/linux/linux_lnmp_input_admin_info.jpg','/static/img/linux/linux_lnmp_input_admin_info.jpg',0,'alvin',curdate());
insert into Content values(1674,17,'p',124,'{}',' BOLD[  第5步： ]BOLD 等待Discuz! X3.2论坛系统安装完毕，如下图1所示。这个安装过程是非常快速的，大概只需要30秒左右，然后就可看到论坛安装完成的欢迎界面了。由于虚拟机主机可能并没有连接到互联网，因此该界面中可能无法正常显示Discuz!论坛系统的广告信息。在接入了互联网的服务器上成功安装完Discuz! X3.2论坛系统之后，其界面如下图2所示。随后单击“您的论坛已完成安装，点此访问”按钮，即可访问到论坛首页，如下图3所示。',' BOLD[  第5步： ]BOLD 等待Discuz! X3.2论坛系统安装完毕，如下图1所示。这个安装过程是非常快速的，大概只需要30秒左右，然后就可看到论坛安装完成的欢迎界面了。由于虚拟机主机可能并没有连接到互联网，因此该界面中可能无法正常显示Discuz!论坛系统的广告信息。在接入了互联网的服务器上成功安装完Discuz! X3.2论坛系统之后，其界面如下图2所示。随后单击“您的论坛已完成安装，点此访问”按钮，即可访问到论坛首页，如下图3所示。',0,'alvin',curdate());
insert into Content values(1675,17,'image',125,'{"alt": "wait_for_finish", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_wait_for_finish.jpg", "width": "676"}','/static/img/linux/linux_lnmp_wait_for_finish.jpg','/static/img/linux/linux_lnmp_wait_for_finish.jpg',0,'alvin',curdate());
insert into Content values(1676,17,'image',126,'{"alt": "succeed_install", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_succeed_install.jpg", "width": "676"}','/static/img/linux/linux_lnmp_succeed_install.jpg','/static/img/linux/linux_lnmp_succeed_install.jpg',0,'alvin',curdate());
insert into Content values(1677,17,'image',127,'{"alt": "open_discuz", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_lnmp_open_discuz.jpg", "width": "676"}','/static/img/linux/linux_lnmp_open_discuz.jpg','/static/img/linux/linux_lnmp_open_discuz.jpg',0,'alvin',curdate());
insert into Content values(1678,17,'h2',128,'{}','选购服务器主机','选购服务器主机',0,'alvin',curdate());
insert into Content values(1679,17,'p',129,'{}','        我们日常访问的网站是由域名、网站源程序和主机共同组成的，其中，主机则是用于存放网页源代码并能够把网页内容展示给用户的服务器。在本书即将结束之际，刘遄老师再啰嗦几句有关服务器主机的知识以及选购技巧，这些技巧都是在近几年做网站时总结出来的，希望能对大家有所帮助。','        我们日常访问的网站是由域名、网站源程序和主机共同组成的，其中，主机则是用于存放网页源代码并能够把网页内容展示给用户的服务器。在本书即将结束之际，刘遄老师再啰嗦几句有关服务器主机的知识以及选购技巧，这些技巧都是在近几年做网站时总结出来的，希望能对大家有所帮助。',0,'alvin',curdate());
insert into Content values(1680,17,'ul',130,'{}',' BOLD[  虚拟主机： ]BOLD 在一台服务器中划分一定的磁盘空间供用户放置网站信息、存放数据等；仅提供基础的网站访问、数据存放与传输功能；能够极大地降低用户费用，也几乎不需要用户来维护网站以外的服务；适合小型网站。
 BOLD[  VPS（Virtual Private Server，虚拟专用服务器）： ]BOLD 在一台服务器中利用OpenVZ、Xen或KVM等虚拟化技术模拟出多台“主机”（即VPS），每个主机都有独立的IP地址、操作系统；不同VPS之间的磁盘空间、内存、CPU、进程与系统配置完全隔离，用户可自由使用分配到的主机中的所有资源，为此需要具备一定的维护系统的能力；适合小型网站。
 BOLD[  ECS（Elastic Compute Service，云服务器）： ]BOLD 是一种整合了计算、存储、网络，能够做到弹性伸缩的计算服务；使用起来与VPS几乎一样，差别是云服务器是建立在一组集群服务器中，每个服务器都会保存一个主机的镜像（备份），从而大大提升了安全性和稳定性；另外还具备灵活性与扩展性；用户只需按使用量付费即可；适合大中小型网站。
 BOLD[  独立服务器： ]BOLD 这台服务器仅提供给用户一个人使用，其使用方式分为租用方式与托管方式。租用方式是用户将服务器的硬件配置要求告知IDC服务商，按照月、季、年为单位来租用它们的硬件设备。这些硬件设备由IDC服务商的机房负责维护，用户一般需要自行安装相应的软件并部署网站服务，这减轻了用户在硬件设备上的投入，适合大中型网站。托管方式则是用户需要自行购置服务器硬件设备，并将其交给IDC服务供应商进行管理（需要缴纳管理服务费）。用户对服务器硬件配置有完全的控制权，自主性强，但需要自行维护、修理服务器硬件设备，适合大中型网站。',' BOLD[  虚拟主机： ]BOLD 在一台服务器中划分一定的磁盘空间供用户放置网站信息、存放数据等；仅提供基础的网站访问、数据存放与传输功能；能够极大地降低用户费用，也几乎不需要用户来维护网站以外的服务；适合小型网站。
 BOLD[  VPS（Virtual Private Server，虚拟专用服务器）： ]BOLD 在一台服务器中利用OpenVZ、Xen或KVM等虚拟化技术模拟出多台“主机”（即VPS），每个主机都有独立的IP地址、操作系统；不同VPS之间的磁盘空间、内存、CPU、进程与系统配置完全隔离，用户可自由使用分配到的主机中的所有资源，为此需要具备一定的维护系统的能力；适合小型网站。
 BOLD[  ECS（Elastic Compute Service，云服务器）： ]BOLD 是一种整合了计算、存储、网络，能够做到弹性伸缩的计算服务；使用起来与VPS几乎一样，差别是云服务器是建立在一组集群服务器中，每个服务器都会保存一个主机的镜像（备份），从而大大提升了安全性和稳定性；另外还具备灵活性与扩展性；用户只需按使用量付费即可；适合大中小型网站。
 BOLD[  独立服务器： ]BOLD 这台服务器仅提供给用户一个人使用，其使用方式分为租用方式与托管方式。租用方式是用户将服务器的硬件配置要求告知IDC服务商，按照月、季、年为单位来租用它们的硬件设备。这些硬件设备由IDC服务商的机房负责维护，用户一般需要自行安装相应的软件并部署网站服务，这减轻了用户在硬件设备上的投入，适合大中型网站。托管方式则是用户需要自行购置服务器硬件设备，并将其交给IDC服务供应商进行管理（需要缴纳管理服务费）。用户对服务器硬件配置有完全的控制权，自主性强，但需要自行维护、修理服务器硬件设备，适合大中型网站。',0,'alvin',curdate());
insert into Content values(1681,17,'p',131,'{}','        另外需要提醒读者的是，在选择服务器主机供应商时请一定要注意查看口碑，并在综合分析后再决定购买。某些供应商会有限制功能、强制添加广告、隐藏扣费或强制扣费等恶劣行为，请各位读者一定擦亮眼睛，不要上当!','        另外需要提醒读者的是，在选择服务器主机供应商时请一定要注意查看口碑，并在综合分析后再决定购买。某些供应商会有限制功能、强制添加广告、隐藏扣费或强制扣费等恶劣行为，请各位读者一定擦亮眼睛，不要上当!',0,'alvin',curdate());
insert into Content values(1682,18,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用Git分布式版本控制系统',' <span class="color_h1">  Linux </span> 使用Git分布式版本控制系统',0,'alvin',curdate());
insert into Content values(1683,18,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(1684,18,'p',3,'{}','        本章节内完整的介绍了Git服务程序的来由，详细介绍分布式版本控制系统原理，阐明对比CVS、Subversion等传统版本控制的优势。','        本章节内完整的介绍了Git服务程序的来由，详细介绍分布式版本控制系统原理，阐明对比CVS、Subversion等传统版本控制的优势。',0,'alvin',curdate());
insert into Content values(1685,18,'p',4,'{}','        带领读者在Git服务程序中提交数据、移除数据、移动数据、查询历史记录、还原数据及管理标签等实验，满足日常工作的需求。','        带领读者在Git服务程序中提交数据、移除数据、移动数据、查询历史记录、还原数据及管理标签等实验，满足日常工作的需求。',0,'alvin',curdate());
insert into Content values(1686,18,'p',5,'{}','        同时还为包括了分支结构的创建与合并，遇到分支内容冲突的解决办法，动手部署Git服务器及使用Github托管服务等超实用内容。','        同时还为包括了分支结构的创建与合并，遇到分支内容冲突的解决办法，动手部署Git服务器及使用Github托管服务等超实用内容。',0,'alvin',curdate());
insert into Content values(1687,18,'h2',6,'{}','分布式版本控制系统','分布式版本控制系统',0,'alvin',curdate());
insert into Content values(1688,18,'p',7,'{}','        我想大家还记得前面章节中谈到过Linus torvalds在1991年时发布了Linux操作系统吧，从那以后Linux系统便不断发展壮大，因为Linux系统开源的特性，所以一直接受着来自全球Linux技术爱好者的贡献，志愿者们通过邮件向Linus发送着自己编写的源代码文件，然后由Linus本人通过手工的方式将代码合并，但这样不仅没有效率，而且真的是太痛苦了。','        我想大家还记得前面章节中谈到过Linus torvalds在1991年时发布了Linux操作系统吧，从那以后Linux系统便不断发展壮大，因为Linux系统开源的特性，所以一直接受着来自全球Linux技术爱好者的贡献，志愿者们通过邮件向Linus发送着自己编写的源代码文件，然后由Linus本人通过手工的方式将代码合并，但这样不仅没有效率，而且真的是太痛苦了。',0,'alvin',curdate());
insert into Content values(1689,18,'p',8,'{}','        一直到2002年，Linux系统经过十余年的不断发展，代码库已经庞大到无法再通过手工的方式管理了，但是Linus真的很不喜欢类似于CVS或者Subversion的一些版本控制系统，于是商业公司BitMover决定将其公司的BitKeeper分布式版本控制系统授权给Linux开发社区来免费使用，当时的BitKeeper可以比较文件内容的不同，还能够将出错的文档还原到历史某个状态，Linus终于放下了心里的石头。','        一直到2002年，Linux系统经过十余年的不断发展，代码库已经庞大到无法再通过手工的方式管理了，但是Linus真的很不喜欢类似于CVS或者Subversion的一些版本控制系统，于是商业公司BitMover决定将其公司的BitKeeper分布式版本控制系统授权给Linux开发社区来免费使用，当时的BitKeeper可以比较文件内容的不同，还能够将出错的文档还原到历史某个状态，Linus终于放下了心里的石头。',0,'alvin',curdate());
insert into Content values(1690,18,'image',9,'{"alt": "git_process", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_git_process.jpg", "width": "676"}','/static/img/linux/linux_git_process.jpg','/static/img/linux/linux_git_process.jpg',0,'alvin',curdate());
insert into Content values(1691,18,'p',10,'{}','        CVS和Subversion属于传统的版本控制系统，而分布式版本控制系统最大的特点是不需要每次提交都把文件推送到版本控制服务器，而是采用分布式版本库的机制，使得每个开发人员都够从服务器中克隆一份完整的版本库到自己计算机本地，不必再完全依赖于版本控制服务器，使得源代码的发布和合并更加方便，并且因为数据都在自己本地，不仅效率提高了，而且即便我们离开了网络依然可以执行提交文件、查看历史版本记录、创建分支等等操作，真的是开发者的福音啊。','        CVS和Subversion属于传统的版本控制系统，而分布式版本控制系统最大的特点是不需要每次提交都把文件推送到版本控制服务器，而是采用分布式版本库的机制，使得每个开发人员都够从服务器中克隆一份完整的版本库到自己计算机本地，不必再完全依赖于版本控制服务器，使得源代码的发布和合并更加方便，并且因为数据都在自己本地，不仅效率提高了，而且即便我们离开了网络依然可以执行提交文件、查看历史版本记录、创建分支等等操作，真的是开发者的福音啊。',0,'alvin',curdate());
insert into Content values(1692,18,'p',11,'{}','        就这样平静的度过了三年时间，但是Linux社区聚集着太多的黑客人物，2005年时，那位曾经开发Samba服务程序的Andrew因为试图破解BitKeeper软件协议而激怒了BitMover公司，当即决定不再向Linux社区提供免费的软件授权了，此时的Linus其实也早已有自己编写分布式版本控制系统的打算了，于是便用C语言创建了Git分布式版本控制系统，并上传了Linux系统的源代码。','        就这样平静的度过了三年时间，但是Linux社区聚集着太多的黑客人物，2005年时，那位曾经开发Samba服务程序的Andrew因为试图破解BitKeeper软件协议而激怒了BitMover公司，当即决定不再向Linux社区提供免费的软件授权了，此时的Linus其实也早已有自己编写分布式版本控制系统的打算了，于是便用C语言创建了Git分布式版本控制系统，并上传了Linux系统的源代码。',0,'alvin',curdate());
insert into Content values(1693,18,'image',12,'{"alt": "git_logo", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_git_logo.jpg", "width": "676"}','/static/img/linux/linux_git_logo.jpg','/static/img/linux/linux_git_logo.jpg',0,'alvin',curdate());
insert into Content values(1694,18,'p',13,'{}','        Git不仅是一款开源的分布式版本控制系统，而且有其独特的功能特性，例如大多数的分布式版本控制系统只会记录每次文件的变化，说白了就是只会关心文件的内容变化差异，而Git则是关注于文件数据整体的变化，直接会将文件提交时的数据保存成快照，而非仅记录差异内容，并且使用SHA-1加密算法保证数据的完整性。','        Git不仅是一款开源的分布式版本控制系统，而且有其独特的功能特性，例如大多数的分布式版本控制系统只会记录每次文件的变化，说白了就是只会关心文件的内容变化差异，而Git则是关注于文件数据整体的变化，直接会将文件提交时的数据保存成快照，而非仅记录差异内容，并且使用SHA-1加密算法保证数据的完整性。',0,'alvin',curdate());
insert into Content values(1695,18,'p',14,'{}','        Git为了提高效率，对于没有被修改的文件，则不会重复存储，而是创建一个链接指向之前存储过的文件。','        Git为了提高效率，对于没有被修改的文件，则不会重复存储，而是创建一个链接指向之前存储过的文件。',0,'alvin',curdate());
insert into Content values(1696,18,'image',15,'{"alt": "commit_process", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_commit_process.jpg", "width": "876"}','/static/img/linux/linux_git_commit_process.jpg','/static/img/linux/linux_git_commit_process.jpg',0,'alvin',curdate());
insert into Content values(1697,18,'p',16,'{}','        其实从发明计算机至今，编写文档工作早已融入到每个人的生活之中，但为了完成一篇好文章，一定免不了反复的修改，许多人习惯用复制整个文件的方式来保存不同的版本，或许还会改名加上备份时间以示区别，这样做的好处就是简单，但人们的思维如此活跃，一不小心就变成了这个样子：','        其实从发明计算机至今，编写文档工作早已融入到每个人的生活之中，但为了完成一篇好文章，一定免不了反复的修改，许多人习惯用复制整个文件的方式来保存不同的版本，或许还会改名加上备份时间以示区别，这样做的好处就是简单，但人们的思维如此活跃，一不小心就变成了这个样子：',0,'alvin',curdate());
insert into Content values(1698,18,'image',17,'{"alt": "commit_problem", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_git_commit_problem.png", "width": "476"}','/static/img/linux/linux_git_commit_problem.png','/static/img/linux/linux_git_commit_problem.png',0,'alvin',curdate());
insert into Content values(1699,18,'p',18,'{}','        无意中就创建出了这么多乱七八糟的文档，但是那个才是我想要的版本呢？而且又担心要删除的文档中可能保留有某个不错的想法，删除后就不能找回了。更要命的是，有些章节还需要团队一起编写，于是需要把文件传输给他们，等到编写后再传回来，最后由我逐条对照差别后将新的内容添加进去，这样真的是太麻烦了，我们更希望看到这样的记录吧：','        无意中就创建出了这么多乱七八糟的文档，但是那个才是我想要的版本呢？而且又担心要删除的文档中可能保留有某个不错的想法，删除后就不能找回了。更要命的是，有些章节还需要团队一起编写，于是需要把文件传输给他们，等到编写后再传回来，最后由我逐条对照差别后将新的内容添加进去，这样真的是太麻烦了，我们更希望看到这样的记录吧：',0,'alvin',curdate());
insert into Content values(1700,18,'table',19,'{"class": ["table", "table-bordered", "table-striped"]}','版本	用户	说明	日期
1	Ronny	创建Git章节文档	10/12 13:48
2	Dave	新增Git命令介绍	10/15 12:19
3	Aaron	新增Github使用方法	10/20 8:32
4	Kim	改正文章中的错别字	10/30 15:17','版本	用户	说明	日期
1	Ronny	创建Git章节文档	10/12 13:48
2	Dave	新增Git命令介绍	10/15 12:19
3	Aaron	新增Github使用方法	10/20 8:32
4	Kim	改正文章中的错别字	10/30 15:17',0,'alvin',curdate());
insert into Content values(1701,18,'h2',20,'{}','使用Git服务程序','使用Git服务程序',0,'alvin',curdate());
insert into Content values(1702,18,'p',21,'{}','        在正式使用前，我们还需要弄清楚Git的三种重要模式，分别是已提交、已修改和已暂存：','        在正式使用前，我们还需要弄清楚Git的三种重要模式，分别是已提交、已修改和已暂存：',0,'alvin',curdate());
insert into Content values(1703,18,'ul',22,'{}','已提交(committed):表示数据文件已经顺利提交到Git数据库中。
已修改(modified):表示数据文件已经被修改，但未被保存到Git数据库中。
已暂存(staged):表示数据文件已经被修改，并会在下次提交时提交到Git数据库中。','已提交(committed):表示数据文件已经顺利提交到Git数据库中。
已修改(modified):表示数据文件已经被修改，但未被保存到Git数据库中。
已暂存(staged):表示数据文件已经被修改，并会在下次提交时提交到Git数据库中。',0,'alvin',curdate());
insert into Content values(1704,18,'p',23,'{}','        提交前的数据文件可能会被随意修改或丢失，但只要把文件快照顺利提交到Git数据库中，那就可以完全放心了，流程为：','        提交前的数据文件可能会被随意修改或丢失，但只要把文件快照顺利提交到Git数据库中，那就可以完全放心了，流程为：',0,'alvin',curdate());
insert into Content values(1705,18,'ol',24,'{}','在工作目录中修改数据文件。
将文件的快照放入暂存区域。
将暂存区域的文件快照提交到Git仓库中。','在工作目录中修改数据文件。
将文件的快照放入暂存区域。
将暂存区域的文件快照提交到Git仓库中。',0,'alvin',curdate());
insert into Content values(1706,18,'image',25,'{"alt": "three_work_type", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_three_work_type.jpg", "width": "876"}','/static/img/linux/linux_git_three_work_type.jpg','/static/img/linux/linux_git_three_work_type.jpg',0,'alvin',curdate());
insert into Content values(1707,18,'p',26,'{}','        执行yum命令来安装Git服务程序：','        执行yum命令来安装Git服务程序：',0,'alvin',curdate());
insert into Content values(1708,18,'pre',27,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install -y git
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分安装过程………………
Installing:
 git                    x86_64       1.8.3.1-4.el7            rhel7       4.3 M
Installing for dependencies:
 perl-Error             noarch       1:0.17020-2.el7          rhel7        32 k
 perl-Git               noarch       1.8.3.1-4.el7            rhel7        52 k
 perl-TermReadKey       x86_64       2.30-20.el7              rhel7        31 k
………………省略部分安装过程………………
Complete!
','[root@linuxprobe ~]# yum install -y git
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分安装过程………………
Installing:
 git                    x86_64       1.8.3.1-4.el7            rhel7       4.3 M
Installing for dependencies:
 perl-Error             noarch       1:0.17020-2.el7          rhel7        32 k
 perl-Git               noarch       1.8.3.1-4.el7            rhel7        52 k
 perl-TermReadKey       x86_64       2.30-20.el7              rhel7        31 k
………………省略部分安装过程………………
Complete!
',0,'alvin',curdate());
insert into Content values(1709,18,'p',28,'{}','        首次安装Git服务程序后需要设置下用户名称、邮件信息和编辑器，这些信息会随着文件每次都提交到Git数据库中，用于记录提交者的信息，而Git服务程序的配置文档通常会有三份，针对当前用户和指定仓库的配置文件优先级最高：','        首次安装Git服务程序后需要设置下用户名称、邮件信息和编辑器，这些信息会随着文件每次都提交到Git数据库中，用于记录提交者的信息，而Git服务程序的配置文档通常会有三份，针对当前用户和指定仓库的配置文件优先级最高：',0,'alvin',curdate());
insert into Content values(1710,18,'table',29,'{"class": ["table", "table-bordered", "table-striped"]}','配置文件	作用
/etc/gitconfig	保存着系统中每个用户及仓库通用配置信息。
~/.gitconfig<ul>~/.config/git/config	针对于当前用户的配置信息。
                工作目录/.git/config            	针对于当前仓库数据的配置信息。','配置文件	作用
/etc/gitconfig	保存着系统中每个用户及仓库通用配置信息。
~/.gitconfig<ul>~/.config/git/config	针对于当前用户的配置信息。
                工作目录/.git/config            	针对于当前仓库数据的配置信息。',0,'alvin',curdate());
insert into Content values(1711,18,'p',30,'{}','        第一个要配置的是你个人的用户名称和电子邮件地址，这两条配置很重要，每次 Git 提交时都会引用这两条信息，记录是谁提交了文件，并且会随更新内容一起被永久纳入历史记录：','        第一个要配置的是你个人的用户名称和电子邮件地址，这两条配置很重要，每次 Git 提交时都会引用这两条信息，记录是谁提交了文件，并且会随更新内容一起被永久纳入历史记录：',0,'alvin',curdate());
insert into Content values(1712,18,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# git config --global user.name "Liu Chuan"
[root@linuxprobe ~]# git config --global user.email "root@linuxprobe.com"
','[root@linuxprobe ~]# git config --global user.name "Liu Chuan"
[root@linuxprobe ~]# git config --global user.email "root@linuxprobe.com"
',0,'alvin',curdate());
insert into Content values(1713,18,'p',32,'{}','        设置vim为默认的文本编辑器：','        设置vim为默认的文本编辑器：',0,'alvin',curdate());
insert into Content values(1714,18,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# git config --global core.editor vim
','[root@linuxprobe ~]# git config --global core.editor vim
',0,'alvin',curdate());
insert into Content values(1715,18,'p',34,'{}','        嗯，此时查看下刚刚配置的Git工作环境信息吧：','        嗯，此时查看下刚刚配置的Git工作环境信息吧：',0,'alvin',curdate());
insert into Content values(1716,18,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# git config --list
user.name=Liu Chuan
user.email=root@linuxprobe.com
core.editor=vim
','[root@linuxprobe ~]# git config --list
user.name=Liu Chuan
user.email=root@linuxprobe.com
core.editor=vim
',0,'alvin',curdate());
insert into Content values(1717,18,'h3',36,'{}','提交数据','提交数据',0,'alvin',curdate());
insert into Content values(1718,18,'p',37,'{}','        我们可以简单的把工作目录理解成是一个被Git服务程序管理的目录，Git会时刻的追踪目录内文件的改动，另外在安装好了Git服务程序后，默认就会创建好了一个叫做master的分支，我们直接可以提交数据到主线了。','        我们可以简单的把工作目录理解成是一个被Git服务程序管理的目录，Git会时刻的追踪目录内文件的改动，另外在安装好了Git服务程序后，默认就会创建好了一个叫做master的分支，我们直接可以提交数据到主线了。',0,'alvin',curdate());
insert into Content values(1719,18,'p',38,'{}','        创建本地的工作目录：','        创建本地的工作目录：',0,'alvin',curdate());
insert into Content values(1720,18,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir linuxprobe
[root@linuxprobe ~]# cd linuxprobe/
','[root@linuxprobe ~]# mkdir linuxprobe
[root@linuxprobe ~]# cd linuxprobe/
',0,'alvin',curdate());
insert into Content values(1721,18,'p',40,'{}','        将该目录初始化转成Git的工作目录：','        将该目录初始化转成Git的工作目录：',0,'alvin',curdate());
insert into Content values(1722,18,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git init
Initialized empty Git repository in /root/linuxprobe/.git/
','[root@linuxprobe linuxprobe]# git init
Initialized empty Git repository in /root/linuxprobe/.git/
',0,'alvin',curdate());
insert into Content values(1723,18,'p',42,'{}','        Git只能追踪类似于txt文件、网页、程序源码等文本文件的内容变化，而不能判断图片、视频、可执行命令等这些二进制文件的内容变化，所以先来尝试往里面写入一个新文件吧。','        Git只能追踪类似于txt文件、网页、程序源码等文本文件的内容变化，而不能判断图片、视频、可执行命令等这些二进制文件的内容变化，所以先来尝试往里面写入一个新文件吧。',0,'alvin',curdate());
insert into Content values(1724,18,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "Initialization Git repository" > readme.txt
','[root@linuxprobe linuxprobe]# echo "Initialization Git repository" > readme.txt
',0,'alvin',curdate());
insert into Content values(1725,18,'p',44,'{}','        将该文件添加到暂存区：','        将该文件添加到暂存区：',0,'alvin',curdate());
insert into Content values(1726,18,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt
','[root@linuxprobe linuxprobe]# git add readme.txt
',0,'alvin',curdate());
insert into Content values(1727,18,'image',46,'{"alt": "commit_to_stage", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_commit_to_stage.jpg", "width": "776"}','/static/img/linux/linux_git_commit_to_stage.jpg','/static/img/linux/linux_git_commit_to_stage.jpg',0,'alvin',curdate());
insert into Content values(1728,18,'p',47,'{}','        添加到暂存区后再次修改文件的内容：','        添加到暂存区后再次修改文件的内容：',0,'alvin',curdate());
insert into Content values(1729,18,'pre',48,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "Something not important" >> readme.txt
','[root@linuxprobe linuxprobe]# echo "Something not important" >> readme.txt
',0,'alvin',curdate());
insert into Content values(1730,18,'p',49,'{}','        将暂存区的文件提交到Git版本仓库，命令格式为“git commit -m "提交说明”：','        将暂存区的文件提交到Git版本仓库，命令格式为“git commit -m "提交说明”：',0,'alvin',curdate());
insert into Content values(1731,18,'pre',50,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git commit -m "add the readme file"
[master (root-commit) 0b7e029] add the readme file
 1 file changed, 1 insertion(+)
 create mode 100644 readme.txt
','[root@linuxprobe linuxprobe]# git commit -m "add the readme file"
[master (root-commit) 0b7e029] add the readme file
 1 file changed, 1 insertion(+)
 create mode 100644 readme.txt
',0,'alvin',curdate());
insert into Content values(1732,18,'image',51,'{"alt": "commit_to_stream", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_commit_to_stream.jpg", "width": "776"}','/static/img/linux/linux_git_commit_to_stream.jpg','/static/img/linux/linux_git_commit_to_stream.jpg',0,'alvin',curdate());
insert into Content values(1733,18,'p',52,'{}','        查看当前工作目录的状态（咦，为什么文件还是提示被修改了？）：','        查看当前工作目录的状态（咦，为什么文件还是提示被修改了？）：',0,'alvin',curdate());
insert into Content values(1734,18,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add ..." to update what will be committed)
#   (use "git checkout -- ..." to discard changes in working directory)
#
#    modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
','[root@linuxprobe linuxprobe]# git status
# On branch master
# Changes not staged for commit:
#   (use "git add ..." to update what will be committed)
#   (use "git checkout -- ..." to discard changes in working directory)
#
#    modified:   readme.txt
#
no changes added to commit (use "git add" and/or "git commit -a")
',0,'alvin',curdate());
insert into Content values(1735,18,'p',54,'{}','        因为提交操作只是将文件在暂存区中的快照版本提交到Git版本数据库，所以当你将文件添加到暂存区后，如果又对文件做了修改，请一定要再将文件添加到暂存区后提交到Git版本数据库：','        因为提交操作只是将文件在暂存区中的快照版本提交到Git版本数据库，所以当你将文件添加到暂存区后，如果又对文件做了修改，请一定要再将文件添加到暂存区后提交到Git版本数据库：',0,'alvin',curdate());
insert into Content values(1736,18,'p',55,'{}','        第一次修改 -> git add -> 第二次修改 -> git add -> git commit','        第一次修改 -> git add -> 第二次修改 -> git add -> git commit',0,'alvin',curdate());
insert into Content values(1737,18,'p',56,'{}','        查看当前文件内容与Git版本数据库中的差别：','        查看当前文件内容与Git版本数据库中的差别：',0,'alvin',curdate());
insert into Content values(1738,18,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git diff readme.txt
diff --git a/readme.txt b/readme.txt
index cb06697..33d16d0 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1 +1,2 @@
 Initialization Git repository
+Something not important
','[root@linuxprobe linuxprobe]# git diff readme.txt
diff --git a/readme.txt b/readme.txt
index cb06697..33d16d0 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1 +1,2 @@
 Initialization Git repository
+Something not important
',0,'alvin',curdate());
insert into Content values(1739,18,'p',58,'{}','        那么现在把文件提交到Git版本数据库吧：','        那么现在把文件提交到Git版本数据库吧：',0,'alvin',curdate());
insert into Content values(1740,18,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git commit -m "added a line of words"
[master f7814dc] added a line of words
 1 file changed, 1 insertion(+)
','[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git commit -m "added a line of words"
[master f7814dc] added a line of words
 1 file changed, 1 insertion(+)
',0,'alvin',curdate());
insert into Content values(1741,18,'p',60,'{}','        再来查看下当前Git版本仓库的状态：','        再来查看下当前Git版本仓库的状态：',0,'alvin',curdate());
insert into Content values(1742,18,'pre',61,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
','[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
',0,'alvin',curdate());
insert into Content values(1743,18,'p',62,'{}','        有些时候工作目录内的文件会比较多，懒的把文件一个个提交到暂存区，可以先设置下要忽略上传的文件（写入到"工作目录/.gitignore"文件中），然后使用"git add ."命令来将当前工作目录内的所有文件都一起添加到暂存区域。','        有些时候工作目录内的文件会比较多，懒的把文件一个个提交到暂存区，可以先设置下要忽略上传的文件（写入到"工作目录/.gitignore"文件中），然后使用"git add ."命令来将当前工作目录内的所有文件都一起添加到暂存区域。',0,'alvin',curdate());
insert into Content values(1744,18,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','//忽略所有以.a为后缀的文件。
*.a
//但是lib.a这个文件除外，依然会被提交。
!lib.a
//忽略build目录内的所有文件。
build/
//忽略build目录内以txt为后缀的文件。
build/*.txt
//指定忽略名字为git.c的文件。
git.c
','//忽略所有以.a为后缀的文件。
*.a
//但是lib.a这个文件除外，依然会被提交。
!lib.a
//忽略build目录内的所有文件。
build/
//忽略build目录内以txt为后缀的文件。
build/*.txt
//指定忽略名字为git.c的文件。
git.c
',0,'alvin',curdate());
insert into Content values(1745,18,'p',64,'{}','        先在工作目录中创建一个名字为git.c的文件：','        先在工作目录中创建一个名字为git.c的文件：',0,'alvin',curdate());
insert into Content values(1746,18,'pre',65,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# touch git.c
','[root@linuxprobe linuxprobe]# touch git.c
',0,'alvin',curdate());
insert into Content values(1747,18,'p',66,'{}','        然后创建忽略文件列表：','        然后创建忽略文件列表：',0,'alvin',curdate());
insert into Content values(1748,18,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# vim .gitignore
git.c
','[root@linuxprobe linuxprobe]# vim .gitignore
git.c
',0,'alvin',curdate());
insert into Content values(1749,18,'p',68,'{}','        添加将当前工作目录中的所有文件快照上传到暂存区：','        添加将当前工作目录中的所有文件快照上传到暂存区：',0,'alvin',curdate());
insert into Content values(1750,18,'pre',69,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add .
[root@linuxprobe linuxprobe]# git commit -m "add the .gitignore file"
[master c2cce40] add the .gitignore file
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore
','[root@linuxprobe linuxprobe]# git add .
[root@linuxprobe linuxprobe]# git commit -m "add the .gitignore file"
[master c2cce40] add the .gitignore file
 1 file changed, 1 insertion(+)
 create mode 100644 .gitignore
',0,'alvin',curdate());
insert into Content values(1751,18,'p',70,'{}','        经过刚刚的实验，大家一定发现“添加到暂存区”真是个很麻烦的步骤，虽然使用暂存区的方式可以让提交文件更加的准确，但有时却略显繁琐，如果对要提交的文件完全有把握，我们完全可以追加-a参数，这样Git会将以前所有追踪过的文件添加到暂存区后自动的提交，从而跳过了上传暂存区的步骤，再来修改下文件：','        经过刚刚的实验，大家一定发现“添加到暂存区”真是个很麻烦的步骤，虽然使用暂存区的方式可以让提交文件更加的准确，但有时却略显繁琐，如果对要提交的文件完全有把握，我们完全可以追加-a参数，这样Git会将以前所有追踪过的文件添加到暂存区后自动的提交，从而跳过了上传暂存区的步骤，再来修改下文件：',0,'alvin',curdate());
insert into Content values(1752,18,'pre',71,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "Modified again" >> readme.txt
','[root@linuxprobe linuxprobe]# echo "Modified again" >> readme.txt
',0,'alvin',curdate());
insert into Content values(1753,18,'p',72,'{}','        文件被直接提交到Git数据库：','        文件被直接提交到Git数据库：',0,'alvin',curdate());
insert into Content values(1754,18,'pre',73,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git commit -a -m "Modified again"
[master f587f3d] Modified again
 1 file changed, 1 insertion(+)
[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
','[root@linuxprobe linuxprobe]# git commit -a -m "Modified again"
[master f587f3d] Modified again
 1 file changed, 1 insertion(+)
[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
',0,'alvin',curdate());
insert into Content values(1755,18,'p',74,'{}','        比如想把git.c也提交上去，便可以这样强制添加文件：','        比如想把git.c也提交上去，便可以这样强制添加文件：',0,'alvin',curdate());
insert into Content values(1756,18,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add -f git.c
','[root@linuxprobe linuxprobe]# git add -f git.c
',0,'alvin',curdate());
insert into Content values(1757,18,'p',76,'{}','        然后重新提交一次（即修改上次的提交操作）：','        然后重新提交一次（即修改上次的提交操作）：',0,'alvin',curdate());
insert into Content values(1758,18,'pre',77,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git commit --amend
Modified again
# Please enter the commit message for your changes. Lines starting
# with \'#\' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD^1 ..." to unstage)
#
#       new file:   git.c
#       modified:   readme.txt
#
//我们简单浏览下提交描述，然后输入:wq!保存并退出。
[master c6f4adf] Modified again
 2 files changed, 1 insertion(+)
 create mode 100644 git.c
','[root@linuxprobe linuxprobe]# git commit --amend
Modified again
# Please enter the commit message for your changes. Lines starting
# with \'#\' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD^1 ..." to unstage)
#
#       new file:   git.c
#       modified:   readme.txt
#
//我们简单浏览下提交描述，然后输入:wq!保存并退出。
[master c6f4adf] Modified again
 2 files changed, 1 insertion(+)
 create mode 100644 git.c
',0,'alvin',curdate());
insert into Content values(1759,18,'h3',78,'{}','移除数据','移除数据',0,'alvin',curdate());
insert into Content values(1760,18,'p',79,'{}','        有些时候会想把已经添加到暂存区的文件移除，但仍然希望文件在工作目录中不丢失，换句话说，就是把文件从追踪清单中删除。先添加一个新文件，并上传到暂存区：','        有些时候会想把已经添加到暂存区的文件移除，但仍然希望文件在工作目录中不丢失，换句话说，就是把文件从追踪清单中删除。先添加一个新文件，并上传到暂存区：',0,'alvin',curdate());
insert into Content values(1761,18,'pre',80,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# touch database
[root@linuxprobe linuxprobe]# git add database
','[root@linuxprobe linuxprobe]# touch database
[root@linuxprobe linuxprobe]# git add database
',0,'alvin',curdate());
insert into Content values(1762,18,'p',81,'{}','        查看当前的Git状态：','        查看当前的Git状态：',0,'alvin',curdate());
insert into Content values(1763,18,'pre',82,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD ..." to unstage)
#
#    new file:   database
#
','[root@linuxprobe linuxprobe]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD ..." to unstage)
#
#    new file:   database
#
',0,'alvin',curdate());
insert into Content values(1764,18,'p',83,'{}','        将该文件从Git暂存区域的追踪列表中移除（并不会删除当前工作目录内的数据文件）：','        将该文件从Git暂存区域的追踪列表中移除（并不会删除当前工作目录内的数据文件）：',0,'alvin',curdate());
insert into Content values(1765,18,'pre',84,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git rm --cached database
rm \'database\'
[root@linuxprobe linuxprobe]# ls
database  git.c  readme.txt
','[root@linuxprobe linuxprobe]# git rm --cached database
rm \'database\'
[root@linuxprobe linuxprobe]# ls
database  git.c  readme.txt
',0,'alvin',curdate());
insert into Content values(1766,18,'p',85,'{}','        此时文件已经是未追踪状态了：','        此时文件已经是未追踪状态了：',0,'alvin',curdate());
insert into Content values(1767,18,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git status
# On branch master
# Untracked files:
#   (use "git add ..." to include in what will be committed)
#
#    database
nothing added to commit but untracked files present (use "git add" to track)
','[root@linuxprobe linuxprobe]# git status
# On branch master
# Untracked files:
#   (use "git add ..." to include in what will be committed)
#
#    database
nothing added to commit but untracked files present (use "git add" to track)
',0,'alvin',curdate());
insert into Content values(1768,18,'p',87,'{}','        而如果我们想将文件数据从Git暂存区和工作目录中一起删除，可以这样操作：再将database文件提交到Git暂存区：','        而如果我们想将文件数据从Git暂存区和工作目录中一起删除，可以这样操作：再将database文件提交到Git暂存区：',0,'alvin',curdate());
insert into Content values(1769,18,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add .
','[root@linuxprobe linuxprobe]# git add .
',0,'alvin',curdate());
insert into Content values(1770,18,'p',89,'{}','        使用git rm命令可以直接删除暂存区内的追踪信息及工作目录内的数据文件：但如果在删除之前数据文件已经被放入到暂存区域的话，Git会担心你勿删未提交的文件而提示报错信息，此时可追加强制删除-f参数。','        使用git rm命令可以直接删除暂存区内的追踪信息及工作目录内的数据文件：但如果在删除之前数据文件已经被放入到暂存区域的话，Git会担心你勿删未提交的文件而提示报错信息，此时可追加强制删除-f参数。',0,'alvin',curdate());
insert into Content values(1771,18,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git rm -f database 
rm \'database\'
[root@linuxprobe linuxprobe]# ls
git.c  readme.txt
','[root@linuxprobe linuxprobe]# git rm -f database 
rm \'database\'
[root@linuxprobe linuxprobe]# ls
git.c  readme.txt
',0,'alvin',curdate());
insert into Content values(1772,18,'p',91,'{}','        查看当前Git的状态：','        查看当前Git的状态：',0,'alvin',curdate());
insert into Content values(1773,18,'pre',92,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
','[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
',0,'alvin',curdate());
insert into Content values(1774,18,'h3',93,'{}','移动数据','移动数据',0,'alvin',curdate());
insert into Content values(1775,18,'p',94,'{}','        Git不像其他版本控制系统那样跟踪文件的移动操作，如果要修改文件名称，则需要使用git mv命令：','        Git不像其他版本控制系统那样跟踪文件的移动操作，如果要修改文件名称，则需要使用git mv命令：',0,'alvin',curdate());
insert into Content values(1776,18,'pre',95,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git mv readme.txt introduction.txt','[root@linuxprobe linuxprobe]# git mv readme.txt introduction.txt',0,'alvin',curdate());
insert into Content values(1777,18,'p',96,'{}','        发现下次提交时会有一个改名操作：','        发现下次提交时会有一个改名操作：',0,'alvin',curdate());
insert into Content values(1778,18,'pre',97,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD ..." to unstage)
#
#    renamed:    readme.txt -> introduction.txt
#
','[root@linuxprobe linuxprobe]# git status
# On branch master
# Changes to be committed:
#   (use "git reset HEAD ..." to unstage)
#
#    renamed:    readme.txt -> introduction.txt
#
',0,'alvin',curdate());
insert into Content values(1779,18,'p',98,'{}','        提交文件到Git版本仓库：','        提交文件到Git版本仓库：',0,'alvin',curdate());
insert into Content values(1780,18,'pre',99,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git commit -m "changed name"
[master c2674b7] changed name
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename readme.txt => introduction.txt (100%)
','[root@linuxprobe linuxprobe]# git commit -m "changed name"
[master c2674b7] changed name
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename readme.txt => introduction.txt (100%)
',0,'alvin',curdate());
insert into Content values(1781,18,'p',100,'{}','        其实我们还可以这样来修改文件名，首先将工作目录下的数据文件改名：','        其实我们还可以这样来修改文件名，首先将工作目录下的数据文件改名：',0,'alvin',curdate());
insert into Content values(1782,18,'pre',101,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# mv introduction.txt readme.txt
','[root@linuxprobe linuxprobe]# mv introduction.txt readme.txt
',0,'alvin',curdate());
insert into Content values(1783,18,'p',102,'{}','        然后删除Git版本仓库内的文件快照：','        然后删除Git版本仓库内的文件快照：',0,'alvin',curdate());
insert into Content values(1784,18,'pre',103,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git rm introduction.txt
rm \'introduction.txt\'
','[root@linuxprobe linuxprobe]# git rm introduction.txt
rm \'introduction.txt\'
',0,'alvin',curdate());
insert into Content values(1785,18,'p',104,'{}','        最后再将新的文件添加进入：','        最后再将新的文件添加进入：',0,'alvin',curdate());
insert into Content values(1786,18,'pre',105,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git commit -m "changed the file name again"
[master d97dd0b] changed the file name again
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename introduction.txt => readme.txt (100%)
','[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git commit -m "changed the file name again"
[master d97dd0b] changed the file name again
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename introduction.txt => readme.txt (100%)
',0,'alvin',curdate());
insert into Content values(1787,18,'h3',106,'{}','历史记录','历史记录',0,'alvin',curdate());
insert into Content values(1788,18,'p',107,'{}','        在完成上面的实验后，我们已经不知不觉有了很多次的提交操作了，可以用git log命令来查看提交历史记录：','        在完成上面的实验后，我们已经不知不觉有了很多次的提交操作了，可以用git log命令来查看提交历史记录：',0,'alvin',curdate());
insert into Content values(1789,18,'pre',108,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:14:56 2016 -0500

 changed name

commit c6f4adf87e2d16e39335b621e8a14f58217fcbc4
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:12:06 2016 -0500

 Modified again

commit c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:11:21 2016 -0500

 add the .gitignore file

commit f7814dc9297799fa000159b0e291142024f0a11a
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:10:25 2016 -0500

 added a line of words

commit 0b7e02927d36e82eaa2ef7353d6910a30bf16119
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:08:38 2016 -0500

 add the readme file 
','[root@linuxprobe linuxprobe]# git log
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:14:56 2016 -0500

 changed name

commit c6f4adf87e2d16e39335b621e8a14f58217fcbc4
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:12:06 2016 -0500

 Modified again

commit c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:11:21 2016 -0500

 add the .gitignore file

commit f7814dc9297799fa000159b0e291142024f0a11a
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:10:25 2016 -0500

 added a line of words

commit 0b7e02927d36e82eaa2ef7353d6910a30bf16119
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:08:38 2016 -0500

 add the readme file 
',0,'alvin',curdate());
insert into Content values(1790,18,'p',109,'{}','        像上面直接执行git log命令后会看到所有的更新记录（按时间排序，最近更新的会在上面），历史记录会除了保存文件快照，还会详细的记录着文件SHA-1校验和，作者的姓名，邮箱及更新时间，如果只想看最近几条记录，可以直接这样操作：','        像上面直接执行git log命令后会看到所有的更新记录（按时间排序，最近更新的会在上面），历史记录会除了保存文件快照，还会详细的记录着文件SHA-1校验和，作者的姓名，邮箱及更新时间，如果只想看最近几条记录，可以直接这样操作：',0,'alvin',curdate());
insert into Content values(1791,18,'pre',110,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log -2
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:14:56 2016 -0500

 changed name
','[root@linuxprobe linuxprobe]# git log -2
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:14:56 2016 -0500

 changed name
',0,'alvin',curdate());
insert into Content values(1792,18,'p',111,'{}','        我也常用-p参数来展开显示每次提交的内容差异，例如仅查看最近一次的差异：','        我也常用-p参数来展开显示每次提交的内容差异，例如仅查看最近一次的差异：',0,'alvin',curdate());
insert into Content values(1793,18,'pre',112,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log -p -1
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

diff --git a/introduction.txt b/introduction.txt
deleted file mode 100644
index f3c8232..0000000
--- a/introduction.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-Initialization Git repository
-Something not important
-Modified again
diff --git a/readme.txt b/readme.txt
new file mode 100644
index 0000000..f3c8232
--- /dev/null
+++ b/readme.txt
@@ -0,0 +1,3 @@
+Initialization Git repository
+Something not important
+Modified again
(END)
','[root@linuxprobe linuxprobe]# git log -p -1
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

diff --git a/introduction.txt b/introduction.txt
deleted file mode 100644
index f3c8232..0000000
--- a/introduction.txt
+++ /dev/null
@@ -1,3 +0,0 @@
-Initialization Git repository
-Something not important
-Modified again
diff --git a/readme.txt b/readme.txt
new file mode 100644
index 0000000..f3c8232
--- /dev/null
+++ b/readme.txt
@@ -0,0 +1,3 @@
+Initialization Git repository
+Something not important
+Modified again
(END)
',0,'alvin',curdate());
insert into Content values(1794,18,'p',113,'{}','        我们还可以使用--stat参数来简要的显示数据增改行数，这样就能够看到提交中修改过的内容、对文件添加或移除的行数，并在最后列出所有增减行的概要信息（仅看最近两次的提交历史）：','        我们还可以使用--stat参数来简要的显示数据增改行数，这样就能够看到提交中修改过的内容、对文件添加或移除的行数，并在最后列出所有增减行的概要信息（仅看最近两次的提交历史）：',0,'alvin',curdate());
insert into Content values(1795,18,'pre',114,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --stat -2 
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

 introduction.txt | 3 ---
 readme.txt | 3 +++
 2 files changed, 3 insertions(+), 3 deletions(-)

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:14:56 2016 -0500

 changed name

 introduction.txt | 3 +++
 readme.txt | 3 ---
 2 files changed, 3 insertions(+), 3 deletions(-)
','[root@linuxprobe linuxprobe]# git log --stat -2 
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

 introduction.txt | 3 ---
 readme.txt | 3 +++
 2 files changed, 3 insertions(+), 3 deletions(-)

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:14:56 2016 -0500

 changed name

 introduction.txt | 3 +++
 readme.txt | 3 ---
 2 files changed, 3 insertions(+), 3 deletions(-)
',0,'alvin',curdate());
insert into Content values(1796,18,'p',115,'{}','        还有一个超级常用的--pretty参数，它可以根据不同的格式为我们展示提交的历史信息，比如每行显示一条提交记录：','        还有一个超级常用的--pretty参数，它可以根据不同的格式为我们展示提交的历史信息，比如每行显示一条提交记录：',0,'alvin',curdate());
insert into Content values(1797,18,'pre',116,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --pretty=oneline
d97dd0beafa082933e044f9213809564ce2bc617 changed the file name again
c2674b7194f1f794dbb980e5d68137dec658672b changed name
c6f4adf87e2d16e39335b621e8a14f58217fcbc4 Modified again
c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3 add the .gitignore file
f7814dc9297799fa000159b0e291142024f0a11a added a line of words
0b7e02927d36e82eaa2ef7353d6910a30bf16119 add the readme file
','[root@linuxprobe linuxprobe]# git log --pretty=oneline
d97dd0beafa082933e044f9213809564ce2bc617 changed the file name again
c2674b7194f1f794dbb980e5d68137dec658672b changed name
c6f4adf87e2d16e39335b621e8a14f58217fcbc4 Modified again
c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3 add the .gitignore file
f7814dc9297799fa000159b0e291142024f0a11a added a line of words
0b7e02927d36e82eaa2ef7353d6910a30bf16119 add the readme file
',0,'alvin',curdate());
insert into Content values(1798,18,'p',117,'{}','        以更详细的模式输出最近两次的历史记录：','        以更详细的模式输出最近两次的历史记录：',0,'alvin',curdate());
insert into Content values(1799,18,'pre',118,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --pretty=fuller -2
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
AuthorDate: Mon Jan 18 01:30:52 2016 -0500
Commit: Liu Chuan <root@linuxprobe.com>
CommitDate: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
AuthorDate: Mon Jan 18 01:14:56 2016 -0500
Commit: Liu Chuan <root@linuxprobe.com>
CommitDate: Mon Jan 18 01:14:56 2016 -0500

 changed name
','[root@linuxprobe linuxprobe]# git log --pretty=fuller -2
commit d97dd0beafa082933e044f9213809564ce2bc617
Author: Liu Chuan <root@linuxprobe.com>
AuthorDate: Mon Jan 18 01:30:52 2016 -0500
Commit: Liu Chuan <root@linuxprobe.com>
CommitDate: Mon Jan 18 01:30:52 2016 -0500

 changed the file name again

commit c2674b7194f1f794dbb980e5d68137dec658672b
Author: Liu Chuan <root@linuxprobe.com>
AuthorDate: Mon Jan 18 01:14:56 2016 -0500
Commit: Liu Chuan <root@linuxprobe.com>
CommitDate: Mon Jan 18 01:14:56 2016 -0500

 changed name
',0,'alvin',curdate());
insert into Content values(1800,18,'p',119,'{}','        还可以使用format参数来指定具体的输出格式，这样非常便于后期编程的提取分析哦，常用的格式有：','        还可以使用format参数来指定具体的输出格式，这样非常便于后期编程的提取分析哦，常用的格式有：',0,'alvin',curdate());
insert into Content values(1801,18,'table',120,'{"class": ["table", "table-bordered", "table-striped"]}','%s	提交说明。
%cd	提交日期。
%an	作者的名字。
%cn	提交者的姓名。
%ce	提交者的电子邮件。
%H	提交对象的完整SHA-1哈希字串。
%h	提交对象的简短SHA-1哈希字串。
%T	树对象的完整SHA-1哈希字串。
%t	树对象的简短SHA-1哈希字串。
%P	父对象的完整SHA-1哈希字串。
%p	父对象的简短SHA-1哈希字串。
%ad	作者的修订时间。','%s	提交说明。
%cd	提交日期。
%an	作者的名字。
%cn	提交者的姓名。
%ce	提交者的电子邮件。
%H	提交对象的完整SHA-1哈希字串。
%h	提交对象的简短SHA-1哈希字串。
%T	树对象的完整SHA-1哈希字串。
%t	树对象的简短SHA-1哈希字串。
%P	父对象的完整SHA-1哈希字串。
%p	父对象的简短SHA-1哈希字串。
%ad	作者的修订时间。',0,'alvin',curdate());
insert into Content values(1802,18,'p',121,'{}','        另外作者和提交者是不同的，作者才是对文件作出实际修改的人，而提交者只是最后将此文件提交到Git版本数据库的人。查看当前所有提交记录的简短SHA-1哈希字串与提交者的姓名：','        另外作者和提交者是不同的，作者才是对文件作出实际修改的人，而提交者只是最后将此文件提交到Git版本数据库的人。查看当前所有提交记录的简短SHA-1哈希字串与提交者的姓名：',0,'alvin',curdate());
insert into Content values(1803,18,'pre',122,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --pretty=format:"%h %cn"d97dd0b Liu Chuan
c2674b7 Liu Chuan
c6f4adf Liu Chuan
c2cce40 Liu Chuan
f7814dc Liu Chuan
0b7e029 Liu Chuan
','[root@linuxprobe linuxprobe]# git log --pretty=format:"%h %cn"d97dd0b Liu Chuan
c2674b7 Liu Chuan
c6f4adf Liu Chuan
c2cce40 Liu Chuan
f7814dc Liu Chuan
0b7e029 Liu Chuan
',0,'alvin',curdate());
insert into Content values(1804,18,'h3',123,'{}','还原数据','还原数据',0,'alvin',curdate());
insert into Content values(1805,18,'p',124,'{}','        还原数据是每一个版本控制的基本功能，先来随意修改下文件吧：','        还原数据是每一个版本控制的基本功能，先来随意修改下文件吧：',0,'alvin',curdate());
insert into Content values(1806,18,'pre',125,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "Git is a version control system" >> readme.txt
','[root@linuxprobe linuxprobe]# echo "Git is a version control system" >> readme.txt
',0,'alvin',curdate());
insert into Content values(1807,18,'p',126,'{}','        然后将文件提交到Git版本数据库：','        然后将文件提交到Git版本数据库：',0,'alvin',curdate());
insert into Content values(1808,18,'pre',127,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt
[root@linuxprobe linuxprobe]# git commit -m "Introduction software"
[master a41441f] Introduction software
 1 file changed, 1 insertion(+)
','[root@linuxprobe linuxprobe]# git add readme.txt
[root@linuxprobe linuxprobe]# git commit -m "Introduction software"
[master a41441f] Introduction software
 1 file changed, 1 insertion(+)
',0,'alvin',curdate());
insert into Content values(1809,18,'p',128,'{}','        此时觉得写的不妥，想要还原某一次提交的文件快照：','        此时觉得写的不妥，想要还原某一次提交的文件快照：',0,'alvin',curdate());
insert into Content values(1810,18,'pre',129,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --pretty=oneline
a41441f985549a0b91f22f535ebc611c530b5b27 Introduction software
d97dd0beafa082933e044f9213809564ce2bc617 changed the file name again
c2674b7194f1f794dbb980e5d68137dec658672b changed name
c6f4adf87e2d16e39335b621e8a14f58217fcbc4 Modified again
c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3 add the .gitignore file
f7814dc9297799fa000159b0e291142024f0a11a added a line of words
0b7e02927d36e82eaa2ef7353d6910a30bf16119 add the readme file
','[root@linuxprobe linuxprobe]# git log --pretty=oneline
a41441f985549a0b91f22f535ebc611c530b5b27 Introduction software
d97dd0beafa082933e044f9213809564ce2bc617 changed the file name again
c2674b7194f1f794dbb980e5d68137dec658672b changed name
c6f4adf87e2d16e39335b621e8a14f58217fcbc4 Modified again
c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3 add the .gitignore file
f7814dc9297799fa000159b0e291142024f0a11a added a line of words
0b7e02927d36e82eaa2ef7353d6910a30bf16119 add the readme file
',0,'alvin',curdate());
insert into Content values(1811,18,'p',130,'{}','        Git服务程序中有一个叫做HEAD的版本指针，当用户申请还原数据时，其实就是将HEAD指针指向到某个特定的提交版本而已，但是因为Git是分布式版本控制系统，所以不可能像SVN那样使用1、2、3、4来定义每个历史的提交版本号，为了避免历史记录冲突，故使用了SHA-1计算出十六进制的哈希字串来区分每个提交版本，像刚刚最上面最新的提交版本号就是5cee15b32d78259985bac4e0cbb0cdad72ab68ad，另外默认的HEAD版本指针会指向到最近的一次提交版本记录哦，而上一个提交版本会叫HEAD^，上上一个版本则会叫做HEAD^^，当然一般会用HEAD~5来表示往上数第五个提交版本哦~。','        Git服务程序中有一个叫做HEAD的版本指针，当用户申请还原数据时，其实就是将HEAD指针指向到某个特定的提交版本而已，但是因为Git是分布式版本控制系统，所以不可能像SVN那样使用1、2、3、4来定义每个历史的提交版本号，为了避免历史记录冲突，故使用了SHA-1计算出十六进制的哈希字串来区分每个提交版本，像刚刚最上面最新的提交版本号就是5cee15b32d78259985bac4e0cbb0cdad72ab68ad，另外默认的HEAD版本指针会指向到最近的一次提交版本记录哦，而上一个提交版本会叫HEAD^，上上一个版本则会叫做HEAD^^，当然一般会用HEAD~5来表示往上数第五个提交版本哦~。',0,'alvin',curdate());
insert into Content values(1812,18,'p',131,'{}','        好啦，既然我们已经锁定了要还原的历史提交版本，就可以使用git reset命令来还原数据了：','        好啦，既然我们已经锁定了要还原的历史提交版本，就可以使用git reset命令来还原数据了：',0,'alvin',curdate());
insert into Content values(1813,18,'pre',132,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git reset --hard HEAD^
HEAD is now at d97dd0b changed the file name again
','[root@linuxprobe linuxprobe]# git reset --hard HEAD^
HEAD is now at d97dd0b changed the file name again
',0,'alvin',curdate());
insert into Content values(1814,18,'p',133,'{}','        再来看下文件的内容吧（怎么样，内容果然已经还原了吧~）：','        再来看下文件的内容吧（怎么样，内容果然已经还原了吧~）：',0,'alvin',curdate());
insert into Content values(1815,18,'pre',134,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
','[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
',0,'alvin',curdate());
insert into Content values(1816,18,'p',135,'{}','        刚刚的操作实际上就是改变了一下HEAD版本指针的位置，说白了就是你将HEAD指针放在那里，那么你的当前工作版本就会定位在那里，要想把内容再还原到最新提交的版本，先查看下提交版本号吧：','        刚刚的操作实际上就是改变了一下HEAD版本指针的位置，说白了就是你将HEAD指针放在那里，那么你的当前工作版本就会定位在那里，要想把内容再还原到最新提交的版本，先查看下提交版本号吧：',0,'alvin',curdate());
insert into Content values(1817,18,'pre',136,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --pretty=oneline
d97dd0beafa082933e044f9213809564ce2bc617 changed the file name again
c2674b7194f1f794dbb980e5d68137dec658672b changed name
c6f4adf87e2d16e39335b621e8a14f58217fcbc4 Modified again
c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3 add the .gitignore file
f7814dc9297799fa000159b0e291142024f0a11a added a line of words
0b7e02927d36e82eaa2ef7353d6910a30bf16119 add the readme file
','[root@linuxprobe linuxprobe]# git log --pretty=oneline
d97dd0beafa082933e044f9213809564ce2bc617 changed the file name again
c2674b7194f1f794dbb980e5d68137dec658672b changed name
c6f4adf87e2d16e39335b621e8a14f58217fcbc4 Modified again
c2cce402ca019f4cbbf5f0bb5eb41a7e2fe277c3 add the .gitignore file
f7814dc9297799fa000159b0e291142024f0a11a added a line of words
0b7e02927d36e82eaa2ef7353d6910a30bf16119 add the readme file
',0,'alvin',curdate());
insert into Content values(1818,18,'p',137,'{}','        怎么搞得？竟然没有了Introduction software这个提交版本记录？？','        怎么搞得？竟然没有了Introduction software这个提交版本记录？？',0,'alvin',curdate());
insert into Content values(1819,18,'p',138,'{}','        原因很简单，因为我们当前的工作版本是历史的一个提交点，这个历史提交点还没有发生过Introduction software更新记录，所以当然就看不到了，要是想“还原到未来”的历史更新点，可以用git reflog命令来查看所有的历史记录：','        原因很简单，因为我们当前的工作版本是历史的一个提交点，这个历史提交点还没有发生过Introduction software更新记录，所以当然就看不到了，要是想“还原到未来”的历史更新点，可以用git reflog命令来查看所有的历史记录：',0,'alvin',curdate());
insert into Content values(1820,18,'pre',139,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git reflog
d97dd0b HEAD@{0}: reset: moving to HEAD^
a41441f HEAD@{1}: commit: Introduction software
d97dd0b HEAD@{2}: commit: changed the file name again
c2674b7 HEAD@{3}: commit: changed name
c6f4adf HEAD@{4}: commit (amend): Modified again
f587f3d HEAD@{5}: commit: Modified again
c2cce40 HEAD@{6}: commit: add the .gitignore file
f7814dc HEAD@{7}: commit: added a line of words
0b7e029 HEAD@{8}: commit (initial): add the readme file
','[root@linuxprobe linuxprobe]# git reflog
d97dd0b HEAD@{0}: reset: moving to HEAD^
a41441f HEAD@{1}: commit: Introduction software
d97dd0b HEAD@{2}: commit: changed the file name again
c2674b7 HEAD@{3}: commit: changed name
c6f4adf HEAD@{4}: commit (amend): Modified again
f587f3d HEAD@{5}: commit: Modified again
c2cce40 HEAD@{6}: commit: add the .gitignore file
f7814dc HEAD@{7}: commit: added a line of words
0b7e029 HEAD@{8}: commit (initial): add the readme file
',0,'alvin',curdate());
insert into Content values(1821,18,'p',140,'{}','        找到历史还原点的SHA-1值后，就可以还原文件了，另外SHA-1值没有必要写全，Git会自动去匹配：x','        找到历史还原点的SHA-1值后，就可以还原文件了，另外SHA-1值没有必要写全，Git会自动去匹配：x',0,'alvin',curdate());
insert into Content values(1822,18,'pre',141,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git reset --hard 5cee15b 
HEAD is now at 5cee15b Introduction software
[root@localhost linuxprobe]# cat readme.txt 
Initialization Git repository
Something not important
Modified again
Git is a version control system
','[root@linuxprobe linuxprobe]# git reset --hard 5cee15b 
HEAD is now at 5cee15b Introduction software
[root@localhost linuxprobe]# cat readme.txt 
Initialization Git repository
Something not important
Modified again
Git is a version control system
',0,'alvin',curdate());
insert into Content values(1823,18,'p',142,'{}','        如是只是想把某个文件内容还原，就不必这么麻烦，直接用git checkout命令就可以的，先随便写入一段话：','        如是只是想把某个文件内容还原，就不必这么麻烦，直接用git checkout命令就可以的，先随便写入一段话：',0,'alvin',curdate());
insert into Content values(1824,18,'pre',143,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "Some mistakes words" >> readme.txt
[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Some mistakes words
','[root@linuxprobe linuxprobe]# echo "Some mistakes words" >> readme.txt
[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Some mistakes words
',0,'alvin',curdate());
insert into Content values(1825,18,'p',144,'{}','        哎呀，我们突然发现不应该写一句话的，可以手工删除（当内容比较多的时候会很麻烦），还可以将文件内容从暂存区中恢复：','        哎呀，我们突然发现不应该写一句话的，可以手工删除（当内容比较多的时候会很麻烦），还可以将文件内容从暂存区中恢复：',0,'alvin',curdate());
insert into Content values(1826,18,'pre',145,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git checkout -- readme.txt
[root@linuxprobe linuxprobe]# cat readme.txt 
Initialization Git repository
Something not important
Modified again
Git is a version control system
','[root@linuxprobe linuxprobe]# git checkout -- readme.txt
[root@linuxprobe linuxprobe]# cat readme.txt 
Initialization Git repository
Something not important
Modified again
Git is a version control system
',0,'alvin',curdate());
insert into Content values(1827,18,'p',146,'{}','        checkou规则是如果暂存区中有该文件，则直接从暂存区恢复，如果暂存区没有该文件，则将还原成最近一次文件提交时的快照。','        checkou规则是如果暂存区中有该文件，则直接从暂存区恢复，如果暂存区没有该文件，则将还原成最近一次文件提交时的快照。',0,'alvin',curdate());
insert into Content values(1828,18,'h3',147,'{}','管理标签','管理标签',0,'alvin',curdate());
insert into Content values(1829,18,'p',148,'{}','        当版本仓库内的数据有个大的改善或者功能更新，我们经常会打一个类似于软件版本号的标签，这样通过标签就可以将版本库中的某个历史版本给记录下来，方便我们随时将特定历史时期的数据取出来用，另外打标签其实只是向某个历史版本做了一个指针，所以一般都是瞬间完成的，感觉很方便吧。','        当版本仓库内的数据有个大的改善或者功能更新，我们经常会打一个类似于软件版本号的标签，这样通过标签就可以将版本库中的某个历史版本给记录下来，方便我们随时将特定历史时期的数据取出来用，另外打标签其实只是向某个历史版本做了一个指针，所以一般都是瞬间完成的，感觉很方便吧。',0,'alvin',curdate());
insert into Content values(1830,18,'p',149,'{}','        在Git中打标签非常简单，给最近一次提交的记录打个标签：','        在Git中打标签非常简单，给最近一次提交的记录打个标签：',0,'alvin',curdate());
insert into Content values(1831,18,'pre',150,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git tag v1.0
','[root@linuxprobe linuxprobe]# git tag v1.0
',0,'alvin',curdate());
insert into Content values(1832,18,'p',151,'{}','        查看所有的已有标签：','        查看所有的已有标签：',0,'alvin',curdate());
insert into Content values(1833,18,'pre',152,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git tag
v1.0
','[root@linuxprobe linuxprobe]# git tag
v1.0
',0,'alvin',curdate());
insert into Content values(1834,18,'p',153,'{}','        查看此标签的详细信息：','        查看此标签的详细信息：',0,'alvin',curdate());
insert into Content values(1835,18,'pre',154,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git show v1.0
commit a41441f985549a0b91f22f535ebc611c530b5b27
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:37:45 2016 -0500

 Introduction software

diff --git a/readme.txt b/readme.txt
index f3c8232..955efba 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,3 +1,4 @@
 Initialization Git repository
 Something not important
 Modified again
+Git is a version control system
','[root@linuxprobe linuxprobe]# git show v1.0
commit a41441f985549a0b91f22f535ebc611c530b5b27
Author: Liu Chuan <root@linuxprobe.com>
Date: Mon Jan 18 01:37:45 2016 -0500

 Introduction software

diff --git a/readme.txt b/readme.txt
index f3c8232..955efba 100644
--- a/readme.txt
+++ b/readme.txt
@@ -1,3 +1,4 @@
 Initialization Git repository
 Something not important
 Modified again
+Git is a version control system
',0,'alvin',curdate());
insert into Content values(1836,18,'p',155,'{}','        还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：','        还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：',0,'alvin',curdate());
insert into Content values(1837,18,'pre',156,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git tag v1.1 -m "version 1.1 released" d316fb
','[root@linuxprobe linuxprobe]# git tag v1.1 -m "version 1.1 released" d316fb
',0,'alvin',curdate());
insert into Content values(1838,18,'p',157,'{}','        我们为同一个提交版本设置了两次标签，来把之前的标签删除吧：','        我们为同一个提交版本设置了两次标签，来把之前的标签删除吧：',0,'alvin',curdate());
insert into Content values(1839,18,'pre',158,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git tag -d v1.0
Deleted tag \'v1.0\' (was d316fb2)
[root@localhost linuxprobe]# git tag
v1.1
','[root@linuxprobe linuxprobe]# git tag -d v1.0
Deleted tag \'v1.0\' (was d316fb2)
[root@localhost linuxprobe]# git tag
v1.1
',0,'alvin',curdate());
insert into Content values(1840,18,'h2',159,'{}','管理分支结构','管理分支结构',0,'alvin',curdate());
insert into Content values(1841,18,'p',160,'{}','        分支即是平行空间，假设你在为某个手机系统研发拍照功能，代码已经完成了80%，但如果将这不完整的代码直接提交到git仓库中，又有可能影响到其他人的工作，此时我们便可以在该软件的项目之上创建一个名叫“拍照功能”的分支，这种分支只会属于你自己，而其他人看不到，等代码编写完成后再与原来的项目主分支合并下即可，这样即能保证代码不丢失，又不影响其他人的工作。','        分支即是平行空间，假设你在为某个手机系统研发拍照功能，代码已经完成了80%，但如果将这不完整的代码直接提交到git仓库中，又有可能影响到其他人的工作，此时我们便可以在该软件的项目之上创建一个名叫“拍照功能”的分支，这种分支只会属于你自己，而其他人看不到，等代码编写完成后再与原来的项目主分支合并下即可，这样即能保证代码不丢失，又不影响其他人的工作。',0,'alvin',curdate());
insert into Content values(1842,18,'image',161,'{"alt": "team_work_process", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_git_team_work_process.png", "width": "876"}','/static/img/linux/linux_git_team_work_process.png','/static/img/linux/linux_git_team_work_process.png',0,'alvin',curdate());
insert into Content values(1843,18,'p',162,'{}','        一般在实际的项目开发中，我们要尽量保证master分支是非常稳定的，仅用于发布新版本，平时不要随便直接修改里面的数据文件，而工作的时候则可以新建不同的工作分支，等到工作完成后在合并到master分支上面，所以团队的合作分支看起来会像上面图那样。','        一般在实际的项目开发中，我们要尽量保证master分支是非常稳定的，仅用于发布新版本，平时不要随便直接修改里面的数据文件，而工作的时候则可以新建不同的工作分支，等到工作完成后在合并到master分支上面，所以团队的合作分支看起来会像上面图那样。',0,'alvin',curdate());
insert into Content values(1844,18,'image',163,'{"alt": "branch_sample", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_git_branch_sample.png", "width": "676"}','/static/img/linux/linux_git_branch_sample.png','/static/img/linux/linux_git_branch_sample.png',0,'alvin',curdate());
insert into Content values(1845,18,'p',164,'{}','        另外如前面所讲，git会将每次的提交操作串成一个时间线，而在前面的实验中实际都是在对master分支进行操作，Git会在创建分支后默认创建一个叫做Photograph的指针，所以我们还需要再将HEAD指针切换到“Photograph”的位置才正式使用上了新分支哦，这么说起来可能比较抽象，赶紧学习下面的实验吧。','        另外如前面所讲，git会将每次的提交操作串成一个时间线，而在前面的实验中实际都是在对master分支进行操作，Git会在创建分支后默认创建一个叫做Photograph的指针，所以我们还需要再将HEAD指针切换到“Photograph”的位置才正式使用上了新分支哦，这么说起来可能比较抽象，赶紧学习下面的实验吧。',0,'alvin',curdate());
insert into Content values(1846,18,'h3',165,'{}','创建分支','创建分支',0,'alvin',curdate());
insert into Content values(1847,18,'p',166,'{}','        首先创建分支：','        首先创建分支：',0,'alvin',curdate());
insert into Content values(1848,18,'pre',167,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git branch linuxprobe
','[root@linuxprobe linuxprobe]# git branch linuxprobe
',0,'alvin',curdate());
insert into Content values(1849,18,'p',168,'{}','        切换至分支：','        切换至分支：',0,'alvin',curdate());
insert into Content values(1850,18,'pre',169,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git checkout linuxprobe
Switched to branch \'linuxprobe\'
','[root@linuxprobe linuxprobe]# git checkout linuxprobe
Switched to branch \'linuxprobe\'
',0,'alvin',curdate());
insert into Content values(1851,18,'p',170,'{}','        查看当前分支的情况（会列出该仓库中所有的分支，当前的分支前有＊号）：','        查看当前分支的情况（会列出该仓库中所有的分支，当前的分支前有＊号）：',0,'alvin',curdate());
insert into Content values(1852,18,'pre',171,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git branch
* linuxprobe
 master
','[root@linuxprobe linuxprobe]# git branch
* linuxprobe
 master
',0,'alvin',curdate());
insert into Content values(1853,18,'p',172,'{}','        我们对文件再追加一行字符串吧：','        我们对文件再追加一行字符串吧：',0,'alvin',curdate());
insert into Content values(1854,18,'pre',173,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "Creating a new branch is quick." >> readme.txt
','[root@linuxprobe linuxprobe]# echo "Creating a new branch is quick." >> readme.txt
',0,'alvin',curdate());
insert into Content values(1855,18,'p',174,'{}','        将文件提交到git仓库：','        将文件提交到git仓库：',0,'alvin',curdate());
insert into Content values(1856,18,'pre',175,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt
[root@linuxprobe linuxprobe]# git commit -m "new branch"
[linuxprobe 2457d98] new branch
 1 file changed, 1 insertion(+)
','[root@linuxprobe linuxprobe]# git add readme.txt
[root@linuxprobe linuxprobe]# git commit -m "new branch"
[linuxprobe 2457d98] new branch
 1 file changed, 1 insertion(+)
',0,'alvin',curdate());
insert into Content values(1857,18,'p',176,'{}','        为了让大家更好理解分支的作用，我们在提交文件后再切换回master分支：','        为了让大家更好理解分支的作用，我们在提交文件后再切换回master分支：',0,'alvin',curdate());
insert into Content values(1858,18,'pre',177,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git checkout master
Switched to branch \'master\'
','[root@linuxprobe linuxprobe]# git checkout master
Switched to branch \'master\'
',0,'alvin',curdate());
insert into Content values(1859,18,'p',178,'{}','        然后查看下文件内容，发现并没有新追加的字符串哦：','        然后查看下文件内容，发现并没有新追加的字符串哦：',0,'alvin',curdate());
insert into Content values(1860,18,'pre',179,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
','[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
',0,'alvin',curdate());
insert into Content values(1861,18,'h3',180,'{}','合并分支','合并分支',0,'alvin',curdate());
insert into Content values(1862,18,'p',181,'{}','        现在，我们想把linuxprobe的工作成果合并到master分支上了，则可以使用"git merge"命令来将指定的的分支与当前分支合并：','        现在，我们想把linuxprobe的工作成果合并到master分支上了，则可以使用"git merge"命令来将指定的的分支与当前分支合并：',0,'alvin',curdate());
insert into Content values(1863,18,'image',182,'{"alt": "merge_branch", "class": ["attachment-full"], "height": "252", "src": "/static/img/linux/linux_git_merge_branch.png", "width": "676"}','/static/img/linux/linux_git_merge_branch.png','/static/img/linux/linux_git_merge_branch.png',0,'alvin',curdate());
insert into Content values(1864,18,'pre',183,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git merge linuxprobe
Updating a41441f..2457d98
Fast-forward
 readme.txt | 1 +
 1 file changed, 1 insertion(+)
','[root@linuxprobe linuxprobe]# git merge linuxprobe
Updating a41441f..2457d98
Fast-forward
 readme.txt | 1 +
 1 file changed, 1 insertion(+)
',0,'alvin',curdate());
insert into Content values(1865,18,'p',184,'{}','        查看合并后的readme.txt文件：','        查看合并后的readme.txt文件：',0,'alvin',curdate());
insert into Content values(1866,18,'pre',185,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
','[root@linuxprobe linuxprobe]# cat readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
',0,'alvin',curdate());
insert into Content values(1867,18,'p',186,'{}','        确认合并完成后，就可以放心地删除linuxprobe分支了：','        确认合并完成后，就可以放心地删除linuxprobe分支了：',0,'alvin',curdate());
insert into Content values(1868,18,'pre',187,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git branch -d linuxprobe
Deleted branch linuxprobe (was 2457d98).
','[root@linuxprobe linuxprobe]# git branch -d linuxprobe
Deleted branch linuxprobe (was 2457d98).
',0,'alvin',curdate());
insert into Content values(1869,18,'p',188,'{}','        删除后，查看branch，就只剩下master分支了：','        删除后，查看branch，就只剩下master分支了：',0,'alvin',curdate());
insert into Content values(1870,18,'pre',189,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git branch
* master
','[root@linuxprobe linuxprobe]# git branch
* master
',0,'alvin',curdate());
insert into Content values(1871,18,'h3',190,'{}','内容冲突','内容冲突',0,'alvin',curdate());
insert into Content values(1872,18,'p',191,'{}','        但是Git并不能每次都为我们自动的合并分支，当遇到了内容冲突比较复杂的情况，则必须手工将差异内容处理掉，比如这样的情况：','        但是Git并不能每次都为我们自动的合并分支，当遇到了内容冲突比较复杂的情况，则必须手工将差异内容处理掉，比如这样的情况：',0,'alvin',curdate());
insert into Content values(1873,18,'image',192,'{"alt": "merge_conflict_branch", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_git_merge_conflict_branch.png", "width": "676"}','/static/img/linux/linux_git_merge_conflict_branch.png','/static/img/linux/linux_git_merge_conflict_branch.png',0,'alvin',curdate());
insert into Content values(1874,18,'p',193,'{}','        创建分支并切换到该分支命令：git checkout -b 分支名称','        创建分支并切换到该分支命令：git checkout -b 分支名称',0,'alvin',curdate());
insert into Content values(1875,18,'p',194,'{}','        创建一个新分支并切换到该分支命令：','        创建一个新分支并切换到该分支命令：',0,'alvin',curdate());
insert into Content values(1876,18,'pre',195,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git checkout -b linuxprobe
Switched to a new branch \'linuxprobe\'
','[root@linuxprobe linuxprobe]# git checkout -b linuxprobe
Switched to a new branch \'linuxprobe\'
',0,'alvin',curdate());
insert into Content values(1877,18,'p',196,'{}','        修改readme.txt文件内容：','        修改readme.txt文件内容：',0,'alvin',curdate());
insert into Content values(1878,18,'pre',197,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# vim readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
Creating a new branch is quick & simple.
','[root@linuxprobe linuxprobe]# vim readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
Creating a new branch is quick & simple.
',0,'alvin',curdate());
insert into Content values(1879,18,'p',198,'{}','        在linuxprobe分支上提交：','        在linuxprobe分支上提交：',0,'alvin',curdate());
insert into Content values(1880,18,'pre',199,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt
[root@linuxprobe linuxprobe]# git commit -m "Creating a new branch is quick & simple. " 
[linuxprobe 882a128] Creating a new branch is quick & simple.
 1 file changed, 1 insertion(+)
','[root@linuxprobe linuxprobe]# git add readme.txt
[root@linuxprobe linuxprobe]# git commit -m "Creating a new branch is quick & simple. " 
[linuxprobe 882a128] Creating a new branch is quick & simple.
 1 file changed, 1 insertion(+)
',0,'alvin',curdate());
insert into Content values(1881,18,'p',200,'{}','        切换到master分支：','        切换到master分支：',0,'alvin',curdate());
insert into Content values(1882,18,'pre',201,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git checkout master
Switched to branch \'master\'
','[root@linuxprobe linuxprobe]# git checkout master
Switched to branch \'master\'
',0,'alvin',curdate());
insert into Content values(1883,18,'p',202,'{}','        在在master分支上修改readme.txt文件同一行的内容：','        在在master分支上修改readme.txt文件同一行的内容：',0,'alvin',curdate());
insert into Content values(1884,18,'pre',203,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# vim readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
Creating a new branch is quick AND simple.
','[root@linuxprobe linuxprobe]# vim readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
Creating a new branch is quick AND simple.
',0,'alvin',curdate());
insert into Content values(1885,18,'p',204,'{}','        提交至Git版本仓库：','        提交至Git版本仓库：',0,'alvin',curdate());
insert into Content values(1886,18,'pre',205,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt
Creating a new branch is quick AND simple.
[root@linuxprobe linuxprobe]# git commit -m "Creating a new branch is quick AND simple. "
[master c21741c] Creating a new branch is quick AND simple.
 1 file changed, 1 insertion(+)
','[root@linuxprobe linuxprobe]# git add readme.txt
Creating a new branch is quick AND simple.
[root@linuxprobe linuxprobe]# git commit -m "Creating a new branch is quick AND simple. "
[master c21741c] Creating a new branch is quick AND simple.
 1 file changed, 1 insertion(+)
',0,'alvin',curdate());
insert into Content values(1887,18,'p',206,'{}','        那么此时，我们在master与linuxprobe分支上都分别对中readme.txt文件进行了修改并提交了，那这种情况下Git就没法再为我们自动的快速合并了，它只能告诉我们readme.txt文件的内容有冲突，需要手工处理冲突的内容后才能继续合并：','        那么此时，我们在master与linuxprobe分支上都分别对中readme.txt文件进行了修改并提交了，那这种情况下Git就没法再为我们自动的快速合并了，它只能告诉我们readme.txt文件的内容有冲突，需要手工处理冲突的内容后才能继续合并：',0,'alvin',curdate());
insert into Content values(1888,18,'pre',207,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git merge linuxprobe
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
','[root@linuxprobe linuxprobe]# git merge linuxprobe
Auto-merging readme.txt
CONFLICT (content): Merge conflict in readme.txt
Automatic merge failed; fix conflicts and then commit the result.
',0,'alvin',curdate());
insert into Content values(1889,18,'p',208,'{}','        冲突的内容为：','        冲突的内容为：',0,'alvin',curdate());
insert into Content values(1890,18,'pre',209,'{"class": ["prettyprint", "lang-bash"]}','[root@localhost linuxprobe]# vim readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
<<<<<<< HEAD
Creating a new branch is quick AND simple.
=======
Creating a new branch is quick & simple.
>>>>>>> linuxprobe
','[root@localhost linuxprobe]# vim readme.txt
Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
<<<<<<< HEAD
Creating a new branch is quick AND simple.
=======
Creating a new branch is quick & simple.
>>>>>>> linuxprobe
',0,'alvin',curdate());
insert into Content values(1891,18,'p',210,'{}','        Git用< <<<<<<，=======，>>>>>>>分割开了各个分支冲突的内容，我们需要手工的删除这些符号，并将内容修改为：','        Git用< <<<<<<，=======，>>>>>>>分割开了各个分支冲突的内容，我们需要手工的删除这些符号，并将内容修改为：',0,'alvin',curdate());
insert into Content values(1892,18,'pre',211,'{}','Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
Creating a new branch is quick and simple.
','Initialization Git repository
Something not important
Modified again
Git is a version control system
Creating a new branch is quick.
Creating a new branch is quick and simple.
',0,'alvin',curdate());
insert into Content values(1893,18,'p',212,'{}','        解决冲突内容后则可顺利的提交：','        解决冲突内容后则可顺利的提交：',0,'alvin',curdate());
insert into Content values(1894,18,'pre',213,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git commit -m "conflict fixed" 
[master 90c607a] conflict fixed
','[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git commit -m "conflict fixed" 
[master 90c607a] conflict fixed
',0,'alvin',curdate());
insert into Content values(1895,18,'p',214,'{}','        查看Git历史提交记录(可以看到分支的变化)：','        查看Git历史提交记录(可以看到分支的变化)：',0,'alvin',curdate());
insert into Content values(1896,18,'pre',215,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git log --graph --pretty=oneline --abbrev-commit
* 90c607a conflict fixed
|\ 
| * 882a128 Creating a new branch is quick & simple.
* | c21741c Creating a new branch is quick AND simple.
|/ 
* 2457d98 new branch
* a41441f Introduction software
* d97dd0b changed the file name again
* c2674b7 changed name
* c6f4adf Modified again
* c2cce40 add the .gitignore file
* f7814dc added a line of words
* 0b7e029 add the readme file
','[root@linuxprobe linuxprobe]# git log --graph --pretty=oneline --abbrev-commit
* 90c607a conflict fixed
|\ 
| * 882a128 Creating a new branch is quick & simple.
* | c21741c Creating a new branch is quick AND simple.
|/ 
* 2457d98 new branch
* a41441f Introduction software
* d97dd0b changed the file name again
* c2674b7 changed name
* c6f4adf Modified again
* c2cce40 add the .gitignore file
* f7814dc added a line of words
* 0b7e029 add the readme file
',0,'alvin',curdate());
insert into Content values(1897,18,'p',216,'{}','        最后，放心的删除linuxprobe分支吧：','        最后，放心的删除linuxprobe分支吧：',0,'alvin',curdate());
insert into Content values(1898,18,'pre',217,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git branch -d linuxprobe
Deleted branch linuxprobe (was 882a128).
[root@linuxprobe linuxprobe]# git branch
* master
','[root@linuxprobe linuxprobe]# git branch -d linuxprobe
Deleted branch linuxprobe (was 882a128).
[root@linuxprobe linuxprobe]# git branch
* master
',0,'alvin',curdate());
insert into Content values(1899,18,'h2',218,'{}','部署Git服务器','部署Git服务器',0,'alvin',curdate());
insert into Content values(1900,18,'p',219,'{}','        Git是分布式的版本控制系统，我们只要有了一个原始Git版本仓库，就可以让其他主机克隆走这个原始版本仓库，从而使得一个Git版本仓库可以被同时分布到不同的主机之上，并且每台主机的版本库都是一样的，没有主次之分，极大的保证了数据安全性，并使得用户能够自主选择向那个Git服务器推送文件了，其实部署一个git服务器是非常简单的事情，我们需要用到两台主机，分别是：','        Git是分布式的版本控制系统，我们只要有了一个原始Git版本仓库，就可以让其他主机克隆走这个原始版本仓库，从而使得一个Git版本仓库可以被同时分布到不同的主机之上，并且每台主机的版本库都是一样的，没有主次之分，极大的保证了数据安全性，并使得用户能够自主选择向那个Git服务器推送文件了，其实部署一个git服务器是非常简单的事情，我们需要用到两台主机，分别是：',0,'alvin',curdate());
insert into Content values(1901,18,'table',220,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
Git服务器	红帽RHEL7操作系统	192.168.10.10
Git客户端	红帽RHEL7操作系统	192.168.10.20','主机名称	操作系统	IP地址
Git服务器	红帽RHEL7操作系统	192.168.10.10
Git客户端	红帽RHEL7操作系统	192.168.10.20',0,'alvin',curdate());
insert into Content values(1902,18,'p',221,'{}','        首先我们分别在Git服务器和客户机中安装Git服务程序(刚刚实验安装过就不用安装了)：','        首先我们分别在Git服务器和客户机中安装Git服务程序(刚刚实验安装过就不用安装了)：',0,'alvin',curdate());
insert into Content values(1903,18,'pre',222,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install git 
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Package git-1.8.3.1-4.el7.x86_64 already installed and latest version
Nothing to do
','[root@linuxprobe ~]# yum install git 
Loaded plugins: langpacks, product-id, subscription-manager
This system is not registered to Red Hat Subscription Management. You can use subscription-manager to register.
Package git-1.8.3.1-4.el7.x86_64 already installed and latest version
Nothing to do
',0,'alvin',curdate());
insert into Content values(1904,18,'p',223,'{}','        然后创建Git版本仓库，一般规范的方式要以.git为后缀：','        然后创建Git版本仓库，一般规范的方式要以.git为后缀：',0,'alvin',curdate());
insert into Content values(1905,18,'pre',224,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir linuxprobe.git
','[root@linuxprobe ~]# mkdir linuxprobe.git
',0,'alvin',curdate());
insert into Content values(1906,18,'p',225,'{}','        修改Git版本仓库的所有者与所有组：','        修改Git版本仓库的所有者与所有组：',0,'alvin',curdate());
insert into Content values(1907,18,'pre',226,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# chown -Rf git:git linuxprobe.git/
','[root@linuxprobe ~]# chown -Rf git:git linuxprobe.git/
',0,'alvin',curdate());
insert into Content values(1908,18,'p',227,'{}','        初始化Git版本仓库：','        初始化Git版本仓库：',0,'alvin',curdate());
insert into Content values(1909,18,'pre',228,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd linuxprobe.git/
[root@linuxprobe linuxprobe.git]# git --bare init
Initialized empty Git repository in /root/linuxprobe.git/
','[root@linuxprobe ~]# cd linuxprobe.git/
[root@linuxprobe linuxprobe.git]# git --bare init
Initialized empty Git repository in /root/linuxprobe.git/
',0,'alvin',curdate());
insert into Content values(1910,18,'p',229,'{}','        其实此时你的Git服务器就已经部署好了，但用户还不能向你推送数据，也不能克隆你的Git版本仓库，因为我们要在服务器上开放至少一种支持Git的协议，比如HTTP/HTTPS/SSH等，现在用的最多的就是HTTPS和SSH，我们切换至Git客户机来生成SSH密钥：','        其实此时你的Git服务器就已经部署好了，但用户还不能向你推送数据，也不能克隆你的Git版本仓库，因为我们要在服务器上开放至少一种支持Git的协议，比如HTTP/HTTPS/SSH等，现在用的最多的就是HTTPS和SSH，我们切换至Git客户机来生成SSH密钥：',0,'alvin',curdate());
insert into Content values(1911,18,'pre',230,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Created directory \'/root/.ssh\'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
65:4a:53:0d:4f:ee:49:4f:94:24:82:16:7a:dd:1f:28 root@linuxprobe.com
The key\'s randomart image is:
+--[ RSA 2048]----+
|        .o+oo.o. |
|       .oo *.+.  |
|      ..+ E * o  |
|       o = + = . |
|        S   o o  |
|                 |
|                 |
|                 |
|                 |
+-----------------+
','[root@linuxprobe ~]# ssh-keygen 
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Created directory \'/root/.ssh\'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
65:4a:53:0d:4f:ee:49:4f:94:24:82:16:7a:dd:1f:28 root@linuxprobe.com
The key\'s randomart image is:
+--[ RSA 2048]----+
|        .o+oo.o. |
|       .oo *.+.  |
|      ..+ E * o  |
|       o = + = . |
|        S   o o  |
|                 |
|                 |
|                 |
|                 |
+-----------------+
',0,'alvin',curdate());
insert into Content values(1912,18,'p',231,'{}','        将客户机的公钥传递给Git服务器：','        将客户机的公钥传递给Git服务器：',0,'alvin',curdate());
insert into Content values(1913,18,'pre',232,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ssh-copy-id 192.168.10.10
root@192.168.10.10\'s password: 
Number of key(s) added: 1
Now try logging into the machine, with: "ssh \'192.168.10.10\'"
and check to make sure that only the key(s) you wanted were added.
','[root@linuxprobe ~]# ssh-copy-id 192.168.10.10
root@192.168.10.10\'s password: 
Number of key(s) added: 1
Now try logging into the machine, with: "ssh \'192.168.10.10\'"
and check to make sure that only the key(s) you wanted were added.
',0,'alvin',curdate());
insert into Content values(1914,18,'p',233,'{}','        此时就已经可以从Git服务器中克隆版本仓库了（此时目录内没有文件是正常的）：','        此时就已经可以从Git服务器中克隆版本仓库了（此时目录内没有文件是正常的）：',0,'alvin',curdate());
insert into Content values(1915,18,'pre',234,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# git clone root@192.168.10.10:/root/linuxprobe.git
Cloning into \'linuxprobe\'...
warning: You appear to have cloned an empty repository.
[root@linuxprobe ~]# cd linuxprobe
[root@linuxprobe linuxprobe]# 
','[root@linuxprobe ~]# git clone root@192.168.10.10:/root/linuxprobe.git
Cloning into \'linuxprobe\'...
warning: You appear to have cloned an empty repository.
[root@linuxprobe ~]# cd linuxprobe
[root@linuxprobe linuxprobe]# 
',0,'alvin',curdate());
insert into Content values(1916,18,'p',235,'{}','        初始化下Git工作环境：','        初始化下Git工作环境：',0,'alvin',curdate());
insert into Content values(1917,18,'pre',236,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# git config --global user.name "Liu Chuan"
[root@linuxprobe ~]# git config --global user.email "root@linuxprobe.com"
[root@linuxprobe ~]# git config --global core.editor vim
','[root@linuxprobe ~]# git config --global user.name "Liu Chuan"
[root@linuxprobe ~]# git config --global user.email "root@linuxprobe.com"
[root@linuxprobe ~]# git config --global core.editor vim
',0,'alvin',curdate());
insert into Content values(1918,18,'p',237,'{}','        向Git版本仓库中提交一个新文件：','        向Git版本仓库中提交一个新文件：',0,'alvin',curdate());
insert into Content values(1919,18,'pre',238,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# echo "I successfully cloned the Git repository" > readme.txt
[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached ..." to unstage)
#
#    new file:   readme.txt
#
[root@linuxprobe linuxprobe]# git commit -m "Clone the Git repository"
[master (root-commit) c3961c9] Clone the Git repository
 Committer: root 
1 file changed, 1 insertion(+)
 create mode 100644 readme.txt
[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
','[root@linuxprobe linuxprobe]# echo "I successfully cloned the Git repository" > readme.txt
[root@linuxprobe linuxprobe]# git add readme.txt 
[root@linuxprobe linuxprobe]# git status
# On branch master
#
# Initial commit
#
# Changes to be committed:
#   (use "git rm --cached ..." to unstage)
#
#    new file:   readme.txt
#
[root@linuxprobe linuxprobe]# git commit -m "Clone the Git repository"
[master (root-commit) c3961c9] Clone the Git repository
 Committer: root 
1 file changed, 1 insertion(+)
 create mode 100644 readme.txt
[root@linuxprobe linuxprobe]# git status
# On branch master
nothing to commit, working directory clean
',0,'alvin',curdate());
insert into Content values(1920,18,'p',239,'{}','        但是这次的操作还是只将文件提交到了本地的Git版本仓库，并没有推送到远程Git服务器，所以我们来定义下远程的Git服务器吧：','        但是这次的操作还是只将文件提交到了本地的Git版本仓库，并没有推送到远程Git服务器，所以我们来定义下远程的Git服务器吧：',0,'alvin',curdate());
insert into Content values(1921,18,'pre',240,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git remote add server root@192.168.10.10:/root/linuxprobe.git
','[root@linuxprobe linuxprobe]# git remote add server root@192.168.10.10:/root/linuxprobe.git
',0,'alvin',curdate());
insert into Content values(1922,18,'p',241,'{}','        将文件提交到远程Git服务器吧：','        将文件提交到远程Git服务器吧：',0,'alvin',curdate());
insert into Content values(1923,18,'pre',242,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git push -u server master
Counting objects: 3, done.
Writing objects: 100% (3/3), 261 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To root@192.168.10.10:/root/linuxprobe.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from server.
','[root@linuxprobe linuxprobe]# git push -u server master
Counting objects: 3, done.
Writing objects: 100% (3/3), 261 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To root@192.168.10.10:/root/linuxprobe.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from server.
',0,'alvin',curdate());
insert into Content values(1924,18,'p',243,'{}','        为了验证真的是推送到了远程的Git服务，你可以换个目录再克隆一份版本仓库（虽然在工作中毫无意义）：','        为了验证真的是推送到了远程的Git服务，你可以换个目录再克隆一份版本仓库（虽然在工作中毫无意义）：',0,'alvin',curdate());
insert into Content values(1925,18,'pre',244,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# cd ../Desktop
[root@linuxprobe Desktop]# git clone root@192.168.10.10:/root/linuxprobe.git
Cloning into \'linuxprobe\'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
[root@linuxprobe Desktop]# cd linuxprobe/
[root@linuxprobe linuxprobe]# cat readme.txt 
I successfully cloned the Git repository
','[root@linuxprobe linuxprobe]# cd ../Desktop
[root@linuxprobe Desktop]# git clone root@192.168.10.10:/root/linuxprobe.git
Cloning into \'linuxprobe\'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (3/3), done.
[root@linuxprobe Desktop]# cd linuxprobe/
[root@linuxprobe linuxprobe]# cat readme.txt 
I successfully cloned the Git repository
',0,'alvin',curdate());
insert into Content values(1926,18,'h2',245,'{}','Github托管服务','Github托管服务',0,'alvin',curdate());
insert into Content values(1927,18,'p',246,'{}','        其实自己部署一台Git服务器或许很有意思，但想到你要保证这台主机能够7*24小时稳定运行，还要保证各种权限及版本库的安全就觉得很累吧，','        其实自己部署一台Git服务器或许很有意思，但想到你要保证这台主机能够7*24小时稳定运行，还要保证各种权限及版本库的安全就觉得很累吧，',0,'alvin',curdate());
insert into Content values(1928,18,'image',247,'{"alt": "github_logo", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_git_github_logo.jpg", "width": "676"}','/static/img/linux/linux_git_github_logo.jpg','/static/img/linux/linux_git_github_logo.jpg',0,'alvin',curdate());
insert into Content values(1929,18,'p',248,'{}','        Github顾名思义是一个Git版本库的托管服务，是目前全球最大的软件仓库，拥有上百万的开发者用户，也是软件开发和寻找资源的最佳途径，Github不仅可以托管各种Git版本仓库，还拥有了更美观的Web界面，您的代码文件可以被任何人克隆，使得开发者为开源项贡献代码变得更加容易，当然也可以付费购买私有库，这样高性价比的私有库真的是帮助到了很多团队和企业。','        Github顾名思义是一个Git版本库的托管服务，是目前全球最大的软件仓库，拥有上百万的开发者用户，也是软件开发和寻找资源的最佳途径，Github不仅可以托管各种Git版本仓库，还拥有了更美观的Web界面，您的代码文件可以被任何人克隆，使得开发者为开源项贡献代码变得更加容易，当然也可以付费购买私有库，这样高性价比的私有库真的是帮助到了很多团队和企业。',0,'alvin',curdate());
insert into Content values(1930,18,'p',249,'{}','        大多数用户都是为了寻找资源而爱上Github的，首先进入网站，点击注册(Sign up)：','        大多数用户都是为了寻找资源而爱上Github的，首先进入网站，点击注册(Sign up)：',0,'alvin',curdate());
insert into Content values(1931,18,'image',250,'{"alt": "github_signup", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_git_github_signup.png", "width": "676"}','/static/img/linux/linux_git_github_signup.png','/static/img/linux/linux_git_github_signup.png',0,'alvin',curdate());
insert into Content values(1932,18,'p',251,'{}','        填写注册信息：','        填写注册信息：',0,'alvin',curdate());
insert into Content values(1933,18,'image',252,'{"alt": "input_account_info", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_git_input_account_info.png", "width": "676"}','/static/img/linux/linux_git_input_account_info.png','/static/img/linux/linux_git_input_account_info.png',0,'alvin',curdate());
insert into Content values(1934,18,'p',253,'{}','        选择仓库类型：','        选择仓库类型：',0,'alvin',curdate());
insert into Content values(1935,18,'image',254,'{"alt": "check_free_type", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_git_check_free_type.png", "width": "676"}','/static/img/linux/linux_git_check_free_type.png','/static/img/linux/linux_git_check_free_type.png',0,'alvin',curdate());
insert into Content values(1936,18,'p',255,'{}','        好棒，我们的GitHub帐号注册完成了：','        好棒，我们的GitHub帐号注册完成了：',0,'alvin',curdate());
insert into Content values(1937,18,'image',256,'{"alt": "sign_success", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_git_sign_success.png", "width": "676"}','/static/img/linux/linux_git_sign_success.png','/static/img/linux/linux_git_sign_success.png',0,'alvin',curdate());
insert into Content values(1938,18,'p',257,'{}','        我们在向Github推送文件时，可以选择SSH协议模式，在本机生成密钥文件（上面实验已经做过，就不需要再生成了）：','        我们在向Github推送文件时，可以选择SSH协议模式，在本机生成密钥文件（上面实验已经做过，就不需要再生成了）：',0,'alvin',curdate());
insert into Content values(1939,18,'pre',258,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Created directory \'/root/.ssh\'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
88:91:4c:db:85:b6:b4:69:ba:44:4d:b1:89:da:48:78 root@linuxprobe.com
The key\'s randomart image is:
+--[ RSA 2048]----+
|    . .o.        |
| . o ==+         |
|. E *=++         |
| o +.o*.         |
|  o.oo. S        |
|    o            |
|   . .           |
|    .            |
|                 |
+-----------------+
[root@linuxprobe ~]# ssh-add
','[root@linuxprobe ~]# ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa): 
Created directory \'/root/.ssh\'.
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
88:91:4c:db:85:b6:b4:69:ba:44:4d:b1:89:da:48:78 root@linuxprobe.com
The key\'s randomart image is:
+--[ RSA 2048]----+
|    . .o.        |
| . o ==+         |
|. E *=++         |
| o +.o*.         |
|  o.oo. S        |
|    o            |
|   . .           |
|    .            |
|                 |
+-----------------+
[root@linuxprobe ~]# ssh-add
',0,'alvin',curdate());
insert into Content values(1940,18,'p',259,'{}','        点击进入Github的帐户配置页面：','        点击进入Github的帐户配置页面：',0,'alvin',curdate());
insert into Content values(1941,18,'image',260,'{"alt": "account_setup", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_account_setup.png", "width": "676"}','/static/img/linux/linux_git_account_setup.png','/static/img/linux/linux_git_account_setup.png',0,'alvin',curdate());
insert into Content values(1942,18,'p',261,'{}','        点击添加SSH公钥：','        点击添加SSH公钥：',0,'alvin',curdate());
insert into Content values(1943,18,'image',262,'{"alt": "add_ssh_key", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_add_ssh_key.png", "width": "676"}','/static/img/linux/linux_git_add_ssh_key.png','/static/img/linux/linux_git_add_ssh_key.png',0,'alvin',curdate());
insert into Content values(1944,18,'p',263,'{}','        将本机中的ssh公钥(.ssh/id_rsa.pub)复制到页面中，填写ssh公钥信息：','        将本机中的ssh公钥(.ssh/id_rsa.pub)复制到页面中，填写ssh公钥信息：',0,'alvin',curdate());
insert into Content values(1945,18,'image',264,'{"alt": "input_ssh_pub_key", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_input_ssh_pub_key.png", "width": "676"}','/static/img/linux/linux_git_input_ssh_pub_key.png','/static/img/linux/linux_git_input_ssh_pub_key.png',0,'alvin',curdate());
insert into Content values(1946,18,'p',265,'{}','        查看ssh公钥信息：','        查看ssh公钥信息：',0,'alvin',curdate());
insert into Content values(1947,18,'image',266,'{"alt": "check_ssh_key", "class": ["attachment-full"], "height": "202", "src": "/static/img/linux/linux_git_check_ssh_key.png", "width": "676"}','/static/img/linux/linux_git_check_ssh_key.png','/static/img/linux/linux_git_check_ssh_key.png',0,'alvin',curdate());
insert into Content values(1948,18,'p',267,'{}','        好的，现在我们的准备工作已经妥当，让我们在Github上创建自己第一个Git版本仓库吧，点击创建一个新的版本仓库：','        好的，现在我们的准备工作已经妥当，让我们在Github上创建自己第一个Git版本仓库吧，点击创建一个新的版本仓库：',0,'alvin',curdate());
insert into Content values(1949,18,'image',268,'{"alt": "create_new_git", "class": ["attachment-full"], "height": "202", "src": "/static/img/linux/linux_git_create_new_git.png", "width": "676"}','/static/img/linux/linux_git_create_new_git.png','/static/img/linux/linux_git_create_new_git.png',0,'alvin',curdate());
insert into Content values(1950,18,'p',269,'{}','        填写版本仓库的信息：','        填写版本仓库的信息：',0,'alvin',curdate());
insert into Content values(1951,18,'image',270,'{"alt": "create_git", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_create_git.png", "width": "676"}','/static/img/linux/linux_git_create_git.png','/static/img/linux/linux_git_create_git.png',0,'alvin',curdate());
insert into Content values(1952,18,'p',271,'{}','        创建成功后会自动跳转到该仓库的页面：','        创建成功后会自动跳转到该仓库的页面：',0,'alvin',curdate());
insert into Content values(1953,18,'image',272,'{"alt": "check_git_info", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_git_check_git_info.png", "width": "676"}','/static/img/linux/linux_git_check_git_info.png','/static/img/linux/linux_git_check_git_info.png',0,'alvin',curdate());
insert into Content values(1954,18,'p',273,'{}','        复制版本仓库的克隆地址：','        复制版本仓库的克隆地址：',0,'alvin',curdate());
insert into Content values(1955,18,'image',274,'{"alt": "clone_git", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_git_clone_git.png", "width": "676"}','/static/img/linux/linux_git_clone_git.png','/static/img/linux/linux_git_clone_git.png',0,'alvin',curdate());
insert into Content values(1956,18,'p',275,'{}','        尝试把版本仓库克隆到本地(这个版本库我会一直保留，大家可以动手克隆下试试。)：','        尝试把版本仓库克隆到本地(这个版本库我会一直保留，大家可以动手克隆下试试。)：',0,'alvin',curdate());
insert into Content values(1957,18,'pre',276,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# git clone  https://github.com/K130/linuxprobe.git
Cloning into \'linuxprobe\'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
[root@linuxprobe ~]# cat linuxprobe/
.git/      README.md  
[root@linuxprobe ~]# cat linuxprobe/README.md 
# linuxprobe
The highest quality Linux materials
','[root@linuxprobe ~]# git clone  https://github.com/K130/linuxprobe.git
Cloning into \'linuxprobe\'...
remote: Counting objects: 3, done.
remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), done.
[root@linuxprobe ~]# cat linuxprobe/
.git/      README.md  
[root@linuxprobe ~]# cat linuxprobe/README.md 
# linuxprobe
The highest quality Linux materials
',0,'alvin',curdate());
insert into Content values(1958,18,'p',277,'{}','        将该Github版本仓库添加到本机的远程列表中：','        将该Github版本仓库添加到本机的远程列表中：',0,'alvin',curdate());
insert into Content values(1959,18,'pre',278,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git remote add linuxprobe git@github.com:K130/linuxprobe.git
[root@linuxprobe linuxprobe]# git remote
linuxprobe
origin
','[root@linuxprobe linuxprobe]# git remote add linuxprobe git@github.com:K130/linuxprobe.git
[root@linuxprobe linuxprobe]# git remote
linuxprobe
origin
',0,'alvin',curdate());
insert into Content values(1960,18,'p',279,'{}','        编写一个新文件：','        编写一个新文件：',0,'alvin',curdate());
insert into Content values(1961,18,'pre',280,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd linuxprobe/
[root@linuxprobe linuxprobe]# echo "Based on the RHEL&Centos system" > features
','[root@linuxprobe ~]# cd linuxprobe/
[root@linuxprobe linuxprobe]# echo "Based on the RHEL&Centos system" > features
',0,'alvin',curdate());
insert into Content values(1962,18,'p',281,'{}','        将该文件提交到本地的Git版本仓库：','        将该文件提交到本地的Git版本仓库：',0,'alvin',curdate());
insert into Content values(1963,18,'pre',282,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git add features 
[root@linuxprobe linuxprobe]# git commit -m "add features"
','[root@linuxprobe linuxprobe]# git add features 
[root@linuxprobe linuxprobe]# git commit -m "add features"
',0,'alvin',curdate());
insert into Content values(1964,18,'p',283,'{}','        然后将本地的Git仓库同步到远程Git服务器上(第一次请加上参数-u，代表关联本地与远程)：','        然后将本地的Git仓库同步到远程Git服务器上(第一次请加上参数-u，代表关联本地与远程)：',0,'alvin',curdate());
insert into Content values(1965,18,'pre',284,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe linuxprobe]# git push -u linuxprobe  masterCounting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 303 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:K130/linuxprobe.git
   8a5455a..f1bc411  master -> master
Branch master set up to track remote branch master from linuxprobe.
','[root@linuxprobe linuxprobe]# git push -u linuxprobe  masterCounting objects: 4, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 303 bytes | 0 bytes/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:K130/linuxprobe.git
   8a5455a..f1bc411  master -> master
Branch master set up to track remote branch master from linuxprobe.
',0,'alvin',curdate());
insert into Content values(1966,18,'p',285,'{}','        刷新一下Web页面，果然看到版本仓库已经同步了：','        刷新一下Web页面，果然看到版本仓库已经同步了：',0,'alvin',curdate());
insert into Content values(1967,18,'image',286,'{"alt": "check_git_version", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_git_check_git_version.png", "width": "676"}','/static/img/linux/linux_git_check_git_version.png','/static/img/linux/linux_git_check_git_version.png',0,'alvin',curdate());
insert into Content values(1968,19,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用openstack部署云计算服务环境',' <span class="color_h1">  Linux </span> 使用openstack部署云计算服务环境',0,'alvin',curdate());
insert into Content values(1969,19,'p',2,'{}','        从最基础开始带领读者配置搭建和学习Opentack服务，并完全的演示了如何在Openstack软件中配置虚拟网络、创建主机实例模板、创建云主机实例、添加及挂载云硬盘等操作，更加生动深入的走入云时代。','        从最基础开始带领读者配置搭建和学习Opentack服务，并完全的演示了如何在Openstack软件中配置虚拟网络、创建主机实例模板、创建云主机实例、添加及挂载云硬盘等操作，更加生动深入的走入云时代。',0,'alvin',curdate());
insert into Content values(1970,19,'h2',3,'{}','了解云计算','了解云计算',0,'alvin',curdate());
insert into Content values(1971,19,'p',4,'{}','        人类基于千年的物种衍变基础，在这个世纪终于有了爆发式的科技成果，尤其这二十年内互联网的发展，更像是一种催化剂，让原本已经热闹的地球更加的沸腾，互联网经济泡沫破灭后的科技研发却变得更加卖力，一次次的突破着传统研究中对人类脑力、科技最终式的定义，把“来自未来”的产品带到用户面前，那么到底互联网未来会变成什么样子，人类最终的归宿会是怎么样，我们不得而知，但可以肯定的是科技研发一直是由人类需求来驱动的。','        人类基于千年的物种衍变基础，在这个世纪终于有了爆发式的科技成果，尤其这二十年内互联网的发展，更像是一种催化剂，让原本已经热闹的地球更加的沸腾，互联网经济泡沫破灭后的科技研发却变得更加卖力，一次次的突破着传统研究中对人类脑力、科技最终式的定义，把“来自未来”的产品带到用户面前，那么到底互联网未来会变成什么样子，人类最终的归宿会是怎么样，我们不得而知，但可以肯定的是科技研发一直是由人类需求来驱动的。',0,'alvin',curdate());
insert into Content values(1972,19,'p',5,'{}','        众所周知Google谷歌是一家致力于互联网搜索、云计算、广告技术等领域的科技企业，一直在努力为全球无数的用户提供着大量基于互联网的产品与服务，而Amazon亚马逊则是全美国最大的网络电子商务公司，销售内容涉及方方面面，业务范围更是遍布全球，对于这种互联网巨头企业自然少不了庞大的基础设施的支撑，但是传统的硬件设施一旦投入就要一大笔钱，并且在业务的淡季也要一直的空闲，这样无疑产生了资源和资金的巨大浪费，所以最初的云计算便是由Google与Amazon分别提出的，核心理念之一就是通过云计算服务降低用户对资源拥有的成本。','        众所周知Google谷歌是一家致力于互联网搜索、云计算、广告技术等领域的科技企业，一直在努力为全球无数的用户提供着大量基于互联网的产品与服务，而Amazon亚马逊则是全美国最大的网络电子商务公司，销售内容涉及方方面面，业务范围更是遍布全球，对于这种互联网巨头企业自然少不了庞大的基础设施的支撑，但是传统的硬件设施一旦投入就要一大笔钱，并且在业务的淡季也要一直的空闲，这样无疑产生了资源和资金的巨大浪费，所以最初的云计算便是由Google与Amazon分别提出的，核心理念之一就是通过云计算服务降低用户对资源拥有的成本。',0,'alvin',curdate());
insert into Content values(1973,19,'p',6,'{}','        当用户能够通过互联网方便的获取到计算、存储等服务时，我们比喻自己使用到了“云计算”，云计算并不能被称为是一种计算技术，而更像是一种服务模式，云计算服务好像拥有无穷的力量，能够预测气候变化、还能够模拟核弹爆炸，好像只要你需要，“云”就可以为你提供每秒万亿次的计算服务，满足你的一切需求，每个运维人员心里都有一个对云计算的理解，而最普遍接受的是NIST(美国国家标准与技术研究院)的定义：','        当用户能够通过互联网方便的获取到计算、存储等服务时，我们比喻自己使用到了“云计算”，云计算并不能被称为是一种计算技术，而更像是一种服务模式，云计算服务好像拥有无穷的力量，能够预测气候变化、还能够模拟核弹爆炸，好像只要你需要，“云”就可以为你提供每秒万亿次的计算服务，满足你的一切需求，每个运维人员心里都有一个对云计算的理解，而最普遍接受的是NIST(美国国家标准与技术研究院)的定义：',0,'alvin',curdate());
insert into Content values(1974,19,'p',7,'{}','        云计算是一种按使用量付费的服务模式，这是一种能够提供可用的、便捷的、按需求的网络访问模式，计算共享池能够快速的为用户提供网络、服务器、存储、应用软件及其他服务，并且只需要花费很少的管理时间。','        云计算是一种按使用量付费的服务模式，这是一种能够提供可用的、便捷的、按需求的网络访问模式，计算共享池能够快速的为用户提供网络、服务器、存储、应用软件及其他服务，并且只需要花费很少的管理时间。',0,'alvin',curdate());
insert into Content values(1975,19,'image',8,'{"alt": "openstack_aas", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_aas.jpg", "width": "676"}','/static/img/linux/linux_openstack_aas.jpg','/static/img/linux/linux_openstack_aas.jpg',0,'alvin',curdate());
insert into Content values(1976,19,'p',9,'{}','        NIST还针对于云计算的服务模式提出了3个服务层次：','        NIST还针对于云计算的服务模式提出了3个服务层次：',0,'alvin',curdate());
insert into Content values(1977,19,'ul',10,'{}','Iaas：提供给用户的是云计算基础设施，包括CPU、内存、存储、网络等其他的资源服务，用户不需要控制存储与网络等基础设施。
Paas：提供给用户的是云计算中的开发和分发应用的解决方案，用户能够部署应用程序，也可以控制相关的托管环境，比如云服务器及操作系统，但用户不需要接触到云计算中的基础设施。
Saas：提供给用户的是云计算基础设施上的应用程序，用户只需要在客户端界面访问即可使用到所需资源，而接触不到云计算的基础设施。','Iaas：提供给用户的是云计算基础设施，包括CPU、内存、存储、网络等其他的资源服务，用户不需要控制存储与网络等基础设施。
Paas：提供给用户的是云计算中的开发和分发应用的解决方案，用户能够部署应用程序，也可以控制相关的托管环境，比如云服务器及操作系统，但用户不需要接触到云计算中的基础设施。
Saas：提供给用户的是云计算基础设施上的应用程序，用户只需要在客户端界面访问即可使用到所需资源，而接触不到云计算的基础设施。',0,'alvin',curdate());
insert into Content values(1978,19,'image',11,'{"alt": "service_type", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_service_type.jpg", "width": "676"}','/static/img/linux/linux_openstack_service_type.jpg','/static/img/linux/linux_openstack_service_type.jpg',0,'alvin',curdate());
insert into Content values(1979,19,'h2',12,'{}','Openstack项目','Openstack项目',0,'alvin',curdate());
insert into Content values(1980,19,'p',13,'{}','        Openstack最初是由NASA和Rackspace共同发起的云端计算服务项目，该项目以Apache许可证授权的方式成为了一款开源产品，目的是将多个组件整合后从而实现一个开源的云计算平台，目前Openstack项目正在被红帽、IBM、AMD、Intel、戴尔、思科、微软等超过一百家厂商共同研发，并已经支持了几乎所有的常见云计算环境，拥有了良好的可扩展性，而且部署搭建Openstack服务也变得十分简单，目前国内对于云计算的需求也逐渐增加，华胜天成、高德地图、京东、阿里巴巴、百度、中兴、华为等中国企业也加入到了Openstack项目研发当中，Openstack项目也正在随着全球内得到了众多厂商的参与支持而快速成熟。','        Openstack最初是由NASA和Rackspace共同发起的云端计算服务项目，该项目以Apache许可证授权的方式成为了一款开源产品，目的是将多个组件整合后从而实现一个开源的云计算平台，目前Openstack项目正在被红帽、IBM、AMD、Intel、戴尔、思科、微软等超过一百家厂商共同研发，并已经支持了几乎所有的常见云计算环境，拥有了良好的可扩展性，而且部署搭建Openstack服务也变得十分简单，目前国内对于云计算的需求也逐渐增加，华胜天成、高德地图、京东、阿里巴巴、百度、中兴、华为等中国企业也加入到了Openstack项目研发当中，Openstack项目也正在随着全球内得到了众多厂商的参与支持而快速成熟。',0,'alvin',curdate());
insert into Content values(1981,19,'image',14,'{"alt": "openstack_logo", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_logo.jpg", "width": "676"}','/static/img/linux/linux_openstack_logo.jpg','/static/img/linux/linux_openstack_logo.jpg',0,'alvin',curdate());
insert into Content values(1982,19,'p',15,'{}','        Open是开放，Stack则是堆砌之意，合起来就是将众多的功能服务堆积起来的集合，让人们通过Openstack云计算项目，能够将诸如计算能力、存储、网络和软件等资源抽象成服务，以便让用户可以通过互联网远程来享用，付费的形式也变得因需而定，调整方便，拥有极强的虚拟可扩展性，是公共和私有云的建设与管理软件中的优秀开源项目。','        Open是开放，Stack则是堆砌之意，合起来就是将众多的功能服务堆积起来的集合，让人们通过Openstack云计算项目，能够将诸如计算能力、存储、网络和软件等资源抽象成服务，以便让用户可以通过互联网远程来享用，付费的形式也变得因需而定，调整方便，拥有极强的虚拟可扩展性，是公共和私有云的建设与管理软件中的优秀开源项目。',0,'alvin',curdate());
insert into Content values(1983,19,'p',16,'{}','        Openstack作为一个云平台的管理项目，其功能组件覆盖了网络、虚拟化、操作系统、服务器等多个方面，每个功能组件交由不同的项目委员会来研发和管理，目前核心的项目包括有：','        Openstack作为一个云平台的管理项目，其功能组件覆盖了网络、虚拟化、操作系统、服务器等多个方面，每个功能组件交由不同的项目委员会来研发和管理，目前核心的项目包括有：',0,'alvin',curdate());
insert into Content values(1984,19,'table',17,'{"class": ["table", "table-bordered", "table-striped"]}','功能	项目名称	描述
计算服务	Nova	负责虚拟机的创建、开关机、挂起、迁移、调整CPU、内存等规则。
对象存储	Swift	用于在大规模可扩展系统中通过内置的冗余及高容差机制实现对象存储的系统。
镜像服务	Glance	用于创建、上传、删除、编辑镜像信息的虚拟机镜像查找及索引系统。
身份服务	Keystone	为其他的功能服务提供身份验证、服务规则及服务令牌的功能。
网络管理	Neutron	用于为其他服务提供云计算的网络虚拟化技术，可自定义各种网络规则，支持主流的网络厂商技术。
块存储	Cinder	为虚拟机实例提供稳定的数据块存储的创建、删除、挂载、卸载、管理等服务。
图形界面	Horizon	为用户提供简单易用的Web管理界面，降低用户对功能服务的操作难度。
测量服务	Ceilometer	收集项目内所有的事件，用于监控、计费或为其他服务提供数据支撑。
部署编排	Heat	实现通过模板方式进行自动化的资源环境部署服务。
数据库服务	Trove	为用户提供可扩展的关系或非关系性数据库服务。','功能	项目名称	描述
计算服务	Nova	负责虚拟机的创建、开关机、挂起、迁移、调整CPU、内存等规则。
对象存储	Swift	用于在大规模可扩展系统中通过内置的冗余及高容差机制实现对象存储的系统。
镜像服务	Glance	用于创建、上传、删除、编辑镜像信息的虚拟机镜像查找及索引系统。
身份服务	Keystone	为其他的功能服务提供身份验证、服务规则及服务令牌的功能。
网络管理	Neutron	用于为其他服务提供云计算的网络虚拟化技术，可自定义各种网络规则，支持主流的网络厂商技术。
块存储	Cinder	为虚拟机实例提供稳定的数据块存储的创建、删除、挂载、卸载、管理等服务。
图形界面	Horizon	为用户提供简单易用的Web管理界面，降低用户对功能服务的操作难度。
测量服务	Ceilometer	收集项目内所有的事件，用于监控、计费或为其他服务提供数据支撑。
部署编排	Heat	实现通过模板方式进行自动化的资源环境部署服务。
数据库服务	Trove	为用户提供可扩展的关系或非关系性数据库服务。',0,'alvin',curdate());
insert into Content values(1985,19,'p',18,'{}','        Openstack项目的版本按照ABCDEFG……的顺序发布，每6个月更新一次，Openstack版本发布历史：','        Openstack项目的版本按照ABCDEFG……的顺序发布，每6个月更新一次，Openstack版本发布历史：',0,'alvin',curdate());
insert into Content values(1986,19,'table',19,'{"class": ["table", "table-bordered", "table-striped"]}','版本名称	发布时间
Liberty	2015年10月15日
Kilo	2015年4月30日
Juno	2014年10月16日
Icehouse	2014年4月17日
Havana	2013年10月17日
Grizzly	2014年4月4日
Folsom	2012年9月27日
Essex	2012年4月5日
Diablo	2011年9月22日
Cactus	2011年4月15日
Bexar	2011年2月3日
Austin	2010年10月21日','版本名称	发布时间
Liberty	2015年10月15日
Kilo	2015年4月30日
Juno	2014年10月16日
Icehouse	2014年4月17日
Havana	2013年10月17日
Grizzly	2014年4月4日
Folsom	2012年9月27日
Essex	2012年4月5日
Diablo	2011年9月22日
Cactus	2011年4月15日
Bexar	2011年2月3日
Austin	2010年10月21日',0,'alvin',curdate());
insert into Content values(1987,19,'p',20,'{}','        开源社区成员和Linux技术爱好者可以选择使用Openstack RDO版本，RDO版本允许用户以免费授权的方式来获取openstack软件的使用资格，但是从安装开始便较为复杂（需要自行解决诸多的软件依赖关系），而且没有官方给予的保障及售后服务，请读者们仔细的按实验步骤安装，就一定没有问题的~','        开源社区成员和Linux技术爱好者可以选择使用Openstack RDO版本，RDO版本允许用户以免费授权的方式来获取openstack软件的使用资格，但是从安装开始便较为复杂（需要自行解决诸多的软件依赖关系），而且没有官方给予的保障及售后服务，请读者们仔细的按实验步骤安装，就一定没有问题的~',0,'alvin',curdate());
insert into Content values(1988,19,'h2',21,'{}','服务模块组件详解','服务模块组件详解',0,'alvin',curdate());
insert into Content values(1989,19,'p',22,'{}','        Openstack是一个云计算的平台，也像是部署云操作系统的工具集，可以通过调取不同的组件来构建虚拟计算及云计算服务，比较重要的包括有计算（compute）、对象存储（Objectstorage）、认证（Identity）、仪表板（Dashboard）、块存储（Block Storage）、网络（Network）和镜像服务（image service），Openstack服务组件协同工作拓扑：','        Openstack是一个云计算的平台，也像是部署云操作系统的工具集，可以通过调取不同的组件来构建虚拟计算及云计算服务，比较重要的包括有计算（compute）、对象存储（Objectstorage）、认证（Identity）、仪表板（Dashboard）、块存储（Block Storage）、网络（Network）和镜像服务（image service），Openstack服务组件协同工作拓扑：',0,'alvin',curdate());
insert into Content values(1990,19,'image',23,'{"alt": "item_group", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_item_group.png", "width": "676"}','/static/img/linux/linux_openstack_item_group.png','/static/img/linux/linux_openstack_item_group.png',0,'alvin',curdate());
insert into Content values(1991,19,'p',24,'{}','    Nova提供计算服务    ','    Nova提供计算服务    ',0,'alvin',curdate());
insert into Content values(1992,19,'p',25,'{}','        Nova可以称作是Openstack云计算平台中最核心的服务组件了，它作为计算的弹性控制器来管理虚拟化、网络及存储等资源，为Openstack的云主机实例提供可靠的支撑，其功能由不同的API来提供。','        Nova可以称作是Openstack云计算平台中最核心的服务组件了，它作为计算的弹性控制器来管理虚拟化、网络及存储等资源，为Openstack的云主机实例提供可靠的支撑，其功能由不同的API来提供。',0,'alvin',curdate());
insert into Content values(1993,19,'p',26,'{}','Nova-api(API服务器):','Nova-api(API服务器):',0,'alvin',curdate());
insert into Content values(1994,19,'p',27,'{}','        API服务器用于提供云计算设施与外界交互的接口，也是用户对云计算设施进行管理的唯一通道，用户通过网页来调用各种API接口，再由API服务器通过消息队列把请求传递至目标设置进行处理。','        API服务器用于提供云计算设施与外界交互的接口，也是用户对云计算设施进行管理的唯一通道，用户通过网页来调用各种API接口，再由API服务器通过消息队列把请求传递至目标设置进行处理。',0,'alvin',curdate());
insert into Content values(1995,19,'p',28,'{}','Rabbit MQ Server(消息队列):','Rabbit MQ Server(消息队列):',0,'alvin',curdate());
insert into Content values(1996,19,'p',29,'{}','        Openstack在遵循AMQP高级消息队列协议的基础之上采用了消息队列进行通信，异步通信的方式更是能够减少了用户的等待时间，让整个平台都变得更有效率。','        Openstack在遵循AMQP高级消息队列协议的基础之上采用了消息队列进行通信，异步通信的方式更是能够减少了用户的等待时间，让整个平台都变得更有效率。',0,'alvin',curdate());
insert into Content values(1997,19,'p',30,'{}','Nova-compute(运算工作站):','Nova-compute(运算工作站):',0,'alvin',curdate());
insert into Content values(1998,19,'p',31,'{}','        运算工作站通过消息队列接收用户的请求并执行，从而负责对主机实例的整个生命周期中的各种操作进行处理，一般会架设多台计算工作站，根据调度算法来按照实例在任意一个计算工作站上部署。','        运算工作站通过消息队列接收用户的请求并执行，从而负责对主机实例的整个生命周期中的各种操作进行处理，一般会架设多台计算工作站，根据调度算法来按照实例在任意一个计算工作站上部署。',0,'alvin',curdate());
insert into Content values(1999,19,'p',32,'{}','Nova-network(网络控制器):','Nova-network(网络控制器):',0,'alvin',curdate());
insert into Content values(2000,19,'p',33,'{}','        用于处理主机的网络配置，例如分配IP地址，配置项目VLAN，设定安全群组及为计算节点配置网络。','        用于处理主机的网络配置，例如分配IP地址，配置项目VLAN，设定安全群组及为计算节点配置网络。',0,'alvin',curdate());
insert into Content values(2001,19,'p',34,'{}','Nova-Volume(卷工作站):','Nova-Volume(卷工作站):',0,'alvin',curdate());
insert into Content values(2002,19,'p',35,'{}','        基于LVM的实例卷能够为一个主机实例创建、删除、附加卷或从主机中分离卷。','        基于LVM的实例卷能够为一个主机实例创建、删除、附加卷或从主机中分离卷。',0,'alvin',curdate());
insert into Content values(2003,19,'p',36,'{}','Nova-scheduler(调度器)','Nova-scheduler(调度器)',0,'alvin',curdate());
insert into Content values(2004,19,'p',37,'{}','        调度器以名为"nova-schedule"的守护进程方式进行运行，根据对比CPU架构及负载、内存占用率、子节点的远近等因素，使用调度算法从可用的资源池中选择运算服务器。','        调度器以名为"nova-schedule"的守护进程方式进行运行，根据对比CPU架构及负载、内存占用率、子节点的远近等因素，使用调度算法从可用的资源池中选择运算服务器。',0,'alvin',curdate());
insert into Content values(2005,19,'p',38,'{}','    Glance提供镜像服务    ','    Glance提供镜像服务    ',0,'alvin',curdate());
insert into Content values(2006,19,'p',39,'{}','        Openstack镜像服务是一套用于主机实例来发现、注册、索引的系统，功能相比较也很简单，具有基于组件的架构、高可用、容错性、开发标准等优良特性，虚拟机的镜像可以被放置到多种存储上。','        Openstack镜像服务是一套用于主机实例来发现、注册、索引的系统，功能相比较也很简单，具有基于组件的架构、高可用、容错性、开发标准等优良特性，虚拟机的镜像可以被放置到多种存储上。',0,'alvin',curdate());
insert into Content values(2007,19,'p',40,'{}','    Swift提供存储服务    ','    Swift提供存储服务    ',0,'alvin',curdate());
insert into Content values(2008,19,'p',41,'{}','        Swift模块是一种分布式、持续虚拟对象存储，具有跨节点百级对象的存储能力，并且支持内建冗余和失效备援的功能，同时还能够处理数据归档和媒体流，对于超大数据和多对象数量非常高效。','        Swift模块是一种分布式、持续虚拟对象存储，具有跨节点百级对象的存储能力，并且支持内建冗余和失效备援的功能，同时还能够处理数据归档和媒体流，对于超大数据和多对象数量非常高效。',0,'alvin',curdate());
insert into Content values(2009,19,'p',42,'{}','Swfit代理服务器：','Swfit代理服务器：',0,'alvin',curdate());
insert into Content values(2010,19,'p',43,'{}','        用于通过Swift-API与代理服务器进行交互，代理服务器能够检查实例位置并路由相关的请求，当实例失效或被转移后则自动故障切换，减少重复路由请求。','        用于通过Swift-API与代理服务器进行交互，代理服务器能够检查实例位置并路由相关的请求，当实例失效或被转移后则自动故障切换，减少重复路由请求。',0,'alvin',curdate());
insert into Content values(2011,19,'p',44,'{}','Swift对象服务器：','Swift对象服务器：',0,'alvin',curdate());
insert into Content values(2012,19,'p',45,'{}','        用于处理处理本地存储中对象数据的存储、索引和删除操作。','        用于处理处理本地存储中对象数据的存储、索引和删除操作。',0,'alvin',curdate());
insert into Content values(2013,19,'p',46,'{}','Swift容器服务器：','Swift容器服务器：',0,'alvin',curdate());
insert into Content values(2014,19,'p',47,'{}','        用于统计容器内包含的对象数量及容量存储空间使用率，默认对象列表将存储为SQLite或者MYSQL文件。','        用于统计容器内包含的对象数量及容量存储空间使用率，默认对象列表将存储为SQLite或者MYSQL文件。',0,'alvin',curdate());
insert into Content values(2015,19,'p',48,'{}','Swift帐户服务器：','Swift帐户服务器：',0,'alvin',curdate());
insert into Content values(2016,19,'p',49,'{}','        与容器服务器类似，列出容器中的对象。','        与容器服务器类似，列出容器中的对象。',0,'alvin',curdate());
insert into Content values(2017,19,'p',50,'{}','Ring索引环：','Ring索引环：',0,'alvin',curdate());
insert into Content values(2018,19,'p',51,'{}','        用户记录着Swift中物理存储对象位置的信息，作为真实物理存储位置的虚拟映射，能够查找及定位不同集群的实体真实物理位置的索引服务，上述的代理、对象、容器、帐户都拥有自己的Ring索引环。','        用户记录着Swift中物理存储对象位置的信息，作为真实物理存储位置的虚拟映射，能够查找及定位不同集群的实体真实物理位置的索引服务，上述的代理、对象、容器、帐户都拥有自己的Ring索引环。',0,'alvin',curdate());
insert into Content values(2019,19,'p',52,'{}','    Keystone提供认证服务    ','    Keystone提供认证服务    ',0,'alvin',curdate());
insert into Content values(2020,19,'p',53,'{}','        Keystone模块依赖于自身的Identity API系统基于判断动作消息来源者请求的合法性来为Openstack中Swift、Glance、Nove等各个组件提供认证和访问策略服务，','        Keystone模块依赖于自身的Identity API系统基于判断动作消息来源者请求的合法性来为Openstack中Swift、Glance、Nove等各个组件提供认证和访问策略服务，',0,'alvin',curdate());
insert into Content values(2021,19,'p',54,'{}','    Horizon提供管理服务    ','    Horizon提供管理服务    ',0,'alvin',curdate());
insert into Content values(2022,19,'p',55,'{}','        Horizon是一个用于管理、控制Openstack云计算平台服务器的Web控制面板，用户能够在网页中管理主机实例、镜像、创建密钥对、管理实例卷、操作Swift容器等操作。','        Horizon是一个用于管理、控制Openstack云计算平台服务器的Web控制面板，用户能够在网页中管理主机实例、镜像、创建密钥对、管理实例卷、操作Swift容器等操作。',0,'alvin',curdate());
insert into Content values(2023,19,'p',56,'{}','    Quantum提供网络服务    ','    Quantum提供网络服务    ',0,'alvin',curdate());
insert into Content values(2024,19,'p',57,'{}','        重要的网络管理组件。','        重要的网络管理组件。',0,'alvin',curdate());
insert into Content values(2025,19,'p',58,'{}','    Cinder提供存储管理服务    ','    Cinder提供存储管理服务    ',0,'alvin',curdate());
insert into Content values(2026,19,'p',59,'{}','        用于管理主机实例中的存储资源。','        用于管理主机实例中的存储资源。',0,'alvin',curdate());
insert into Content values(2027,19,'p',60,'{}','    Heat提供软件部署服务    ','    Heat提供软件部署服务    ',0,'alvin',curdate());
insert into Content values(2028,19,'p',61,'{}','        用于在主机实例创建后简化配置操作。','        用于在主机实例创建后简化配置操作。',0,'alvin',curdate());
insert into Content values(2029,19,'h2',62,'{}','安装Openstack软件','安装Openstack软件',0,'alvin',curdate());
insert into Content values(2030,19,'p',63,'{}','        此刻我写这段话的时候，Openstack Liberty版本刚刚发布几周，企业中的生产环境会以稳定性为核心标准，所以还需要较长一段时间才能接受并正式使用这个新版本的产品，为了能够让读者学完即用，本片内容则会以Juno版本来做实验，为了能够让云计算平台发挥到最好的性能，我们需要开启虚拟机的虚拟化功能，内存至少为4GB（推荐8GB以上），并添加额外的一块硬盘(20G以上)。','        此刻我写这段话的时候，Openstack Liberty版本刚刚发布几周，企业中的生产环境会以稳定性为核心标准，所以还需要较长一段时间才能接受并正式使用这个新版本的产品，为了能够让读者学完即用，本片内容则会以Juno版本来做实验，为了能够让云计算平台发挥到最好的性能，我们需要开启虚拟机的虚拟化功能，内存至少为4GB（推荐8GB以上），并添加额外的一块硬盘(20G以上)。',0,'alvin',curdate());
insert into Content values(2031,19,'table',64,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	IP地址/子网	DNS地址
openstack.linuxprobe.com	192.168.10.10/24	192.168.10.10','主机名称	IP地址/子网	DNS地址
openstack.linuxprobe.com	192.168.10.10/24	192.168.10.10',0,'alvin',curdate());
insert into Content values(2032,19,'image',65,'{"alt": "vm_setting", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_vm_setting.png", "width": "676"}','/static/img/linux/linux_openstack_vm_setting.png','/static/img/linux/linux_openstack_vm_setting.png',0,'alvin',curdate());
insert into Content values(2033,19,'p',66,'{}','        设置服务器的主机名称：','        设置服务器的主机名称：',0,'alvin',curdate());
insert into Content values(2034,19,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# vim /etc/hostname
openstack.linuxprobe.com
','[root@openstack ~]# vim /etc/hostname
openstack.linuxprobe.com
',0,'alvin',curdate());
insert into Content values(2035,19,'p',68,'{}','        使用vim编辑器写入主机名（域名）与IP地址的映射文件：','        使用vim编辑器写入主机名（域名）与IP地址的映射文件：',0,'alvin',curdate());
insert into Content values(2036,19,'pre',69,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# vim /etc/hosts
127.0.0.1      localhost localhost.localdomain localhost4 localhost4.localdomain4
::1            localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.10.10  openstack.linuxprobe.com openstack
','[root@openstack ~]# vim /etc/hosts
127.0.0.1      localhost localhost.localdomain localhost4 localhost4.localdomain4
::1            localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.10.10  openstack.linuxprobe.com openstack
',0,'alvin',curdate());
insert into Content values(2037,19,'p',70,'{}','        将服务器网卡IP地址配置成"192.168.10.10"后测试主机连通状态：','        将服务器网卡IP地址配置成"192.168.10.10"后测试主机连通状态：',0,'alvin',curdate());
insert into Content values(2038,19,'pre',71,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# ping $HOSTNAME
PING openstack.linuxprobe.com (192.168.10.10) 56(84) bytes of data.
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=1 ttl=64 time=0.099 ms
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=2 ttl=64 time=0.107 ms
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=3 ttl=64 time=0.070 ms
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=4 ttl=64 time=0.075 ms
^C
--- openstack.linuxprobe.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.070/0.087/0.107/0.019 ms
','[root@openstack ~]# ping $HOSTNAME
PING openstack.linuxprobe.com (192.168.10.10) 56(84) bytes of data.
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=1 ttl=64 time=0.099 ms
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=2 ttl=64 time=0.107 ms
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=3 ttl=64 time=0.070 ms
64 bytes from openstack.linuxprobe.com (192.168.10.10): icmp_seq=4 ttl=64 time=0.075 ms
^C
--- openstack.linuxprobe.com ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3001ms
rtt min/avg/max/mdev = 0.070/0.087/0.107/0.019 ms
',0,'alvin',curdate());
insert into Content values(2039,19,'p',72,'{}','        创建系统镜像的挂载目录：','        创建系统镜像的挂载目录：',0,'alvin',curdate());
insert into Content values(2040,19,'pre',73,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# mkdir -p /media/cdrom
','[root@openstack ~]# mkdir -p /media/cdrom
',0,'alvin',curdate());
insert into Content values(2041,19,'p',74,'{}','        写入镜像与挂载点的信息：','        写入镜像与挂载点的信息：',0,'alvin',curdate());
insert into Content values(2042,19,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# vim /etc/fstab
# HEADER: This file was autogenerated at 2016-01-28 00:57:19 +0800
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.

#
# /etc/fstab
# Created by anaconda on Wed Jan 27 15:24:00 2016
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root   /       xfs     defaults        1       1
UUID=c738dff6-b025-4333-9673-61b10eaf2268       /boot   xfs     defaults        1       2
/dev/mapper/rhel-swap   swap    swap    defaults        0       0
/dev/cdrom      /media/cdrom    iso9660 defaults        0       0
','[root@openstack ~]# vim /etc/fstab
# HEADER: This file was autogenerated at 2016-01-28 00:57:19 +0800
# HEADER: by puppet.  While it can still be managed manually, it
# HEADER: is definitely not recommended.

#
# /etc/fstab
# Created by anaconda on Wed Jan 27 15:24:00 2016
#
# Accessible filesystems, by reference, are maintained under \'/dev/disk\'
# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info
#
/dev/mapper/rhel-root   /       xfs     defaults        1       1
UUID=c738dff6-b025-4333-9673-61b10eaf2268       /boot   xfs     defaults        1       2
/dev/mapper/rhel-swap   swap    swap    defaults        0       0
/dev/cdrom      /media/cdrom    iso9660 defaults        0       0
',0,'alvin',curdate());
insert into Content values(2043,19,'p',76,'{}','        挂载系统镜像设备：','        挂载系统镜像设备：',0,'alvin',curdate());
insert into Content values(2044,19,'pre',77,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# mount -a
mount: /dev/sr0 is write-protected, mounting read-only
','[root@openstack ~]# mount -a
mount: /dev/sr0 is write-protected, mounting read-only
',0,'alvin',curdate());
insert into Content values(2045,19,'p',78,'{}','        写入基本的yum仓库配置信息：','        写入基本的yum仓库配置信息：',0,'alvin',curdate());
insert into Content values(2046,19,'pre',79,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# vim /etc/yum.repos.d/rhel.repo
[base]
name=base
baseurl=file:///media/cdrom
enabled=1
gpgcheck=0
','[root@openstack ~]# vim /etc/yum.repos.d/rhel.repo
[base]
name=base
baseurl=file:///media/cdrom
enabled=1
gpgcheck=0
',0,'alvin',curdate());
insert into Content values(2047,19,'p',80,'{}','        您可以点此下载EPEL仓库源以及Openstack-juno的软件安装包，并上传至服务器的/media目录中：','        您可以点此下载EPEL仓库源以及Openstack-juno的软件安装包，并上传至服务器的/media目录中：',0,'alvin',curdate());
insert into Content values(2048,19,'p',81,'{}','        软件资源下载地址：https://www.linuxprobe.com/tools/','        软件资源下载地址：https://www.linuxprobe.com/tools/',0,'alvin',curdate());
insert into Content values(2049,19,'pre',82,'{}','Openstack Juno——云计算平台软件

Openstack云计算软件能够将诸如计算能力、存储、网络和软件等资源抽象成服务，以便让用户可以通过互联网远程来享用，付费的形式也变得因需而定，拥有极强的虚拟可扩展性。

EPEL——系统的软件源仓库

EPEL是企业版额外的资源包，提供了默认不提供的软件安装包

Cirros——精简的操作系统

Cirros是一款极为精简的操作系统，一般用于灌装到Openstack服务平台中。
','Openstack Juno——云计算平台软件

Openstack云计算软件能够将诸如计算能力、存储、网络和软件等资源抽象成服务，以便让用户可以通过互联网远程来享用，付费的形式也变得因需而定，拥有极强的虚拟可扩展性。

EPEL——系统的软件源仓库

EPEL是企业版额外的资源包，提供了默认不提供的软件安装包

Cirros——精简的操作系统

Cirros是一款极为精简的操作系统，一般用于灌装到Openstack服务平台中。
',0,'alvin',curdate());
insert into Content values(2050,19,'pre',83,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# cd /media
[root@openstack media]# ls
cdrom epel.tar.bz2 openstack-juno.tar.bz2
','[root@openstack ~]# cd /media
[root@openstack media]# ls
cdrom epel.tar.bz2 openstack-juno.tar.bz2
',0,'alvin',curdate());
insert into Content values(2051,19,'p',84,'{}','        分别解压文件：','        分别解压文件：',0,'alvin',curdate());
insert into Content values(2052,19,'pre',85,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack media]# tar xjf epel.tar.bz2
[root@openstack media]# tar xjf openstack-juno.tar.bz2
','[root@openstack media]# tar xjf epel.tar.bz2
[root@openstack media]# tar xjf openstack-juno.tar.bz2
',0,'alvin',curdate());
insert into Content values(2053,19,'p',86,'{}','        分别写入EPEL与openstack的yum仓库源信息：','        分别写入EPEL与openstack的yum仓库源信息：',0,'alvin',curdate());
insert into Content values(2054,19,'pre',87,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack media]# vim /etc/yum.repos.d/openstack.repo
[openstack]
name=openstack
baseurl=file:///media/openstack-juno
enabled=1
gpgcheck=0
[root@openstack media]# vim /etc/yum.repos.d/epel.repo
[epel]
name=epel
baseurl=file:///media/EPEL
enabled=1
gpgcheck=0
','[root@openstack media]# vim /etc/yum.repos.d/openstack.repo
[openstack]
name=openstack
baseurl=file:///media/openstack-juno
enabled=1
gpgcheck=0
[root@openstack media]# vim /etc/yum.repos.d/epel.repo
[epel]
name=epel
baseurl=file:///media/EPEL
enabled=1
gpgcheck=0
',0,'alvin',curdate());
insert into Content values(2055,19,'p',88,'{}','        将/dev/sdb创建成逻辑卷，卷组名称为cinder-volumes：','        将/dev/sdb创建成逻辑卷，卷组名称为cinder-volumes：',0,'alvin',curdate());
insert into Content values(2056,19,'pre',89,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack media]# pvcreate /dev/sdb
Physical volume "/dev/sdb" successfully created
[root@openstack media]# vgcreate cinder-volumes /dev/sdb
Volume group "cinder-volumes" successfully created
','[root@openstack media]# pvcreate /dev/sdb
Physical volume "/dev/sdb" successfully created
[root@openstack media]# vgcreate cinder-volumes /dev/sdb
Volume group "cinder-volumes" successfully created
',0,'alvin',curdate());
insert into Content values(2057,19,'p',90,'{}','        重启系统：','        重启系统：',0,'alvin',curdate());
insert into Content values(2058,19,'pre',91,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack media]# reboot
','[root@openstack media]# reboot
',0,'alvin',curdate());
insert into Content values(2059,19,'p',92,'{}','        安装Openstack的应答文件：','        安装Openstack的应答文件：',0,'alvin',curdate());
insert into Content values(2060,19,'pre',93,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# yum install openstack-packstack
………………省略部分安装过程………………
Installing:
openstack-packstack noarch 2014.2-0.4.dev1266.g63d9c50.el7.centos openstack 210 k
Installing for dependencies:
libyaml x86_64 0.1.4-10.el7 base 55 k
openstack-packstack-puppet noarch 2014.2-0.4.dev1266.g63d9c50.el7.centos openstack 43 k
openstack-puppet-modules noarch 2014.2.1-0.5.el7.centos openstack 1.3 M
perl x86_64 4:5.16.3-283.el7 base 8.0 M
perl-Carp noarch 1.26-244.el7 base 19 k
perl-Encode x86_64 2.51-7.el7 base 1.5 M
perl-Exporter noarch 5.68-3.el7 base 28 k
perl-File-Path noarch 2.09-2.el7 base 27 k
perl-File-Temp noarch 0.23.01-3.el7 base 56 k
perl-Filter x86_64 1.49-3.el7 base 76 k
perl-Getopt-Long noarch 2.40-2.el7 base 56 k
perl-HTTP-Tiny noarch 0.033-3.el7 base 38 k
perl-PathTools x86_64 3.40-5.el7 base 83 k
perl-Pod-Escapes noarch 1:1.04-283.el7 base 50 k
perl-Pod-Perldoc noarch 3.20-4.el7 base 87 k
perl-Pod-Simple noarch 1:3.28-4.el7 base 216 k
perl-Pod-Usage noarch 1.63-3.el7 base 27 k
perl-Scalar-List-Utils x86_64 1.27-248.el7 base 36 k
perl-Socket x86_64 2.010-3.el7 base 49 k
perl-Storable x86_64 2.45-3.el7 base 77 k
perl-Text-ParseWords noarch 3.29-4.el7 base 14 k
perl-Time-Local noarch 1.2300-2.el7 base 24 k
perl-constant noarch 1.27-2.el7 base 19 k
perl-libs x86_64 4:5.16.3-283.el7 base 686 k
perl-macros x86_64 4:5.16.3-283.el7 base 42 k
perl-parent noarch 1:0.225-244.el7 base 12 k
perl-podlators noarch 2.5.1-3.el7 base 112 k
perl-threads x86_64 1.87-4.el7 base 49 k
perl-threads-shared x86_64 1.43-6.el7 base 39 k
python-netaddr noarch 0.7.12-1.el7.centos openstack 1.3 M
ruby x86_64 2.0.0.353-20.el7 base 66 k
ruby-irb noarch 2.0.0.353-20.el7 base 87 k
ruby-libs x86_64 2.0.0.353-20.el7 base 2.8 M
rubygem-bigdecimal x86_64 1.2.0-20.el7 base 78 k
rubygem-io-console x86_64 0.4.2-20.el7 base 49 k
rubygem-json x86_64 1.7.7-20.el7 base 74 k
rubygem-psych x86_64 2.0.0-20.el7 base 76 k
rubygem-rdoc noarch 4.0.0-20.el7 base 317 k
rubygems noarch 2.0.14-20.el7 base 211 k
………………省略部分安装过程………………
Complete!
','[root@openstack ~]# yum install openstack-packstack
………………省略部分安装过程………………
Installing:
openstack-packstack noarch 2014.2-0.4.dev1266.g63d9c50.el7.centos openstack 210 k
Installing for dependencies:
libyaml x86_64 0.1.4-10.el7 base 55 k
openstack-packstack-puppet noarch 2014.2-0.4.dev1266.g63d9c50.el7.centos openstack 43 k
openstack-puppet-modules noarch 2014.2.1-0.5.el7.centos openstack 1.3 M
perl x86_64 4:5.16.3-283.el7 base 8.0 M
perl-Carp noarch 1.26-244.el7 base 19 k
perl-Encode x86_64 2.51-7.el7 base 1.5 M
perl-Exporter noarch 5.68-3.el7 base 28 k
perl-File-Path noarch 2.09-2.el7 base 27 k
perl-File-Temp noarch 0.23.01-3.el7 base 56 k
perl-Filter x86_64 1.49-3.el7 base 76 k
perl-Getopt-Long noarch 2.40-2.el7 base 56 k
perl-HTTP-Tiny noarch 0.033-3.el7 base 38 k
perl-PathTools x86_64 3.40-5.el7 base 83 k
perl-Pod-Escapes noarch 1:1.04-283.el7 base 50 k
perl-Pod-Perldoc noarch 3.20-4.el7 base 87 k
perl-Pod-Simple noarch 1:3.28-4.el7 base 216 k
perl-Pod-Usage noarch 1.63-3.el7 base 27 k
perl-Scalar-List-Utils x86_64 1.27-248.el7 base 36 k
perl-Socket x86_64 2.010-3.el7 base 49 k
perl-Storable x86_64 2.45-3.el7 base 77 k
perl-Text-ParseWords noarch 3.29-4.el7 base 14 k
perl-Time-Local noarch 1.2300-2.el7 base 24 k
perl-constant noarch 1.27-2.el7 base 19 k
perl-libs x86_64 4:5.16.3-283.el7 base 686 k
perl-macros x86_64 4:5.16.3-283.el7 base 42 k
perl-parent noarch 1:0.225-244.el7 base 12 k
perl-podlators noarch 2.5.1-3.el7 base 112 k
perl-threads x86_64 1.87-4.el7 base 49 k
perl-threads-shared x86_64 1.43-6.el7 base 39 k
python-netaddr noarch 0.7.12-1.el7.centos openstack 1.3 M
ruby x86_64 2.0.0.353-20.el7 base 66 k
ruby-irb noarch 2.0.0.353-20.el7 base 87 k
ruby-libs x86_64 2.0.0.353-20.el7 base 2.8 M
rubygem-bigdecimal x86_64 1.2.0-20.el7 base 78 k
rubygem-io-console x86_64 0.4.2-20.el7 base 49 k
rubygem-json x86_64 1.7.7-20.el7 base 74 k
rubygem-psych x86_64 2.0.0-20.el7 base 76 k
rubygem-rdoc noarch 4.0.0-20.el7 base 317 k
rubygems noarch 2.0.14-20.el7 base 211 k
………………省略部分安装过程………………
Complete!
',0,'alvin',curdate());
insert into Content values(2061,19,'p',94,'{}','        安装openstack服务程序：','        安装openstack服务程序：',0,'alvin',curdate());
insert into Content values(2062,19,'pre',95,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# packstack --allinone --provision-demo=n --nagios-install=n
Welcome to Installer setup utility
Packstack changed given value to required value /root/.ssh/id_rsa.pub
Installing:
Clean Up [ DONE ]
Setting up ssh keys [ DONE ]
Discovering hosts\' details [ DONE ]
Adding pre install manifest entries [ DONE ]
Preparing servers [ DONE ]
Adding AMQP manifest entries [ DONE ]
Adding MySQL manifest entries [ DONE ]
Adding Keystone manifest entries [ DONE ]
Adding Glance Keystone manifest entries [ DONE ]
Adding Glance manifest entries [ DONE ]
Adding Cinder Keystone manifest entries [ DONE ]
Adding Cinder manifest entries [ DONE ]
Checking if the Cinder server has a cinder-volumes vg[ DONE ]
Adding Nova API manifest entries [ DONE ]
Adding Nova Keystone manifest entries [ DONE ]
Adding Nova Cert manifest entries [ DONE ]
Adding Nova Conductor manifest entries [ DONE ]
Creating ssh keys for Nova migration [ DONE ]
Gathering ssh host keys for Nova migration [ DONE ]
Adding Nova Compute manifest entries [ DONE ]
Adding Nova Scheduler manifest entries [ DONE ]
Adding Nova VNC Proxy manifest entries [ DONE ]
Adding Openstack Network-related Nova manifest entries[ DONE ]
Adding Nova Common manifest entries [ DONE ]
Adding Neutron API manifest entries [ DONE ]
Adding Neutron Keystone manifest entries [ DONE ]
Adding Neutron L3 manifest entries [ DONE ]
Adding Neutron L2 Agent manifest entries [ DONE ]
Adding Neutron DHCP Agent manifest entries [ DONE ]
Adding Neutron LBaaS Agent manifest entries [ DONE ]
Adding Neutron Metering Agent manifest entries [ DONE ]
Adding Neutron Metadata Agent manifest entries [ DONE ]
Checking if NetworkManager is enabled and running [ DONE ]
Adding OpenStack Client manifest entries [ DONE ]
Adding Horizon manifest entries [ DONE ]
Adding Swift Keystone manifest entries [ DONE ]
Adding Swift builder manifest entries [ DONE ]
Adding Swift proxy manifest entries [ DONE ]
Adding Swift storage manifest entries [ DONE ]
Adding Swift common manifest entries [ DONE ]
Adding MongoDB manifest entries [ DONE ]
Adding Ceilometer manifest entries [ DONE ]
Adding Ceilometer Keystone manifest entries [ DONE ]
Adding post install manifest entries [ DONE ]
Installing Dependencies [ DONE ]
Copying Puppet modules and manifests [ DONE ]
Applying 192.168.10.10_prescript.pp
192.168.10.10_prescript.pp: [ DONE ]
Applying 192.168.10.10_amqp.pp
Applying 192.168.10.10_mysql.pp
192.168.10.10_amqp.pp: [ DONE ]
192.168.10.10_mysql.pp: [ DONE ]
Applying 192.168.10.10_keystone.pp
Applying 192.168.10.10_glance.pp
Applying 192.168.10.10_cinder.pp
192.168.10.10_keystone.pp: [ DONE ]
192.168.10.10_cinder.pp: [ DONE ]
192.168.10.10_glance.pp: [ DONE ]
Applying 192.168.10.10_api_nova.pp
192.168.10.10_api_nova.pp: [ DONE ]
Applying 192.168.10.10_nova.pp
192.168.10.10_nova.pp: [ DONE ]
Applying 192.168.10.10_neutron.pp
192.168.10.10_neutron.pp: [ DONE ]
Applying 192.168.10.10_neutron_fwaas.pp
Applying 192.168.10.10_osclient.pp
Applying 192.168.10.10_horizon.pp
192.168.10.10_neutron_fwaas.pp: [ DONE ]
192.168.10.10_osclient.pp: [ DONE ]
192.168.10.10_horizon.pp: [ DONE ]
Applying 192.168.10.10_ring_swift.pp
192.168.10.10_ring_swift.pp: [ DONE ]
Applying 192.168.10.10_swift.pp
192.168.10.10_swift.pp: [ DONE ]
Applying 192.168.10.10_mongodb.pp
192.168.10.10_mongodb.pp: [ DONE ]
Applying 192.168.10.10_ceilometer.pp
192.168.10.10_ceilometer.pp: [ DONE ]
Applying 192.168.10.10_postscript.pp
192.168.10.10_postscript.pp: [ DONE ]
Applying Puppet manifests [ DONE ]
Finalizing [ DONE ]

**** Installation completed successfully ******
Additional information:
* A new answerfile was created in: /root/packstack-answers-20160128-004334.txt
* Time synchronization installation was skipped. Please note that unsynchronized time on server instances might be problem for some OpenStack components.
* Did not create a cinder volume group, one already existed
* File /root/keystonerc_admin has been created on OpenStack client host 192.168.10.10. To use the command line tools you need to source the file.
* To access the OpenStack Dashboard browse to http://192.168.10.10/dashboard .
Please, find your login credentials stored in the keystonerc_admin in your home directory.
* Because of the kernel update the host 192.168.10.10 requires reboot.
* The installation log file is available at: /var/tmp/packstack/20160128-004334-tNBVhA/openstack-setup.log
* The generated manifests are available at: /var/tmp/packstack/20160128-004334-tNBVhA/manifests
','[root@openstack ~]# packstack --allinone --provision-demo=n --nagios-install=n
Welcome to Installer setup utility
Packstack changed given value to required value /root/.ssh/id_rsa.pub
Installing:
Clean Up [ DONE ]
Setting up ssh keys [ DONE ]
Discovering hosts\' details [ DONE ]
Adding pre install manifest entries [ DONE ]
Preparing servers [ DONE ]
Adding AMQP manifest entries [ DONE ]
Adding MySQL manifest entries [ DONE ]
Adding Keystone manifest entries [ DONE ]
Adding Glance Keystone manifest entries [ DONE ]
Adding Glance manifest entries [ DONE ]
Adding Cinder Keystone manifest entries [ DONE ]
Adding Cinder manifest entries [ DONE ]
Checking if the Cinder server has a cinder-volumes vg[ DONE ]
Adding Nova API manifest entries [ DONE ]
Adding Nova Keystone manifest entries [ DONE ]
Adding Nova Cert manifest entries [ DONE ]
Adding Nova Conductor manifest entries [ DONE ]
Creating ssh keys for Nova migration [ DONE ]
Gathering ssh host keys for Nova migration [ DONE ]
Adding Nova Compute manifest entries [ DONE ]
Adding Nova Scheduler manifest entries [ DONE ]
Adding Nova VNC Proxy manifest entries [ DONE ]
Adding Openstack Network-related Nova manifest entries[ DONE ]
Adding Nova Common manifest entries [ DONE ]
Adding Neutron API manifest entries [ DONE ]
Adding Neutron Keystone manifest entries [ DONE ]
Adding Neutron L3 manifest entries [ DONE ]
Adding Neutron L2 Agent manifest entries [ DONE ]
Adding Neutron DHCP Agent manifest entries [ DONE ]
Adding Neutron LBaaS Agent manifest entries [ DONE ]
Adding Neutron Metering Agent manifest entries [ DONE ]
Adding Neutron Metadata Agent manifest entries [ DONE ]
Checking if NetworkManager is enabled and running [ DONE ]
Adding OpenStack Client manifest entries [ DONE ]
Adding Horizon manifest entries [ DONE ]
Adding Swift Keystone manifest entries [ DONE ]
Adding Swift builder manifest entries [ DONE ]
Adding Swift proxy manifest entries [ DONE ]
Adding Swift storage manifest entries [ DONE ]
Adding Swift common manifest entries [ DONE ]
Adding MongoDB manifest entries [ DONE ]
Adding Ceilometer manifest entries [ DONE ]
Adding Ceilometer Keystone manifest entries [ DONE ]
Adding post install manifest entries [ DONE ]
Installing Dependencies [ DONE ]
Copying Puppet modules and manifests [ DONE ]
Applying 192.168.10.10_prescript.pp
192.168.10.10_prescript.pp: [ DONE ]
Applying 192.168.10.10_amqp.pp
Applying 192.168.10.10_mysql.pp
192.168.10.10_amqp.pp: [ DONE ]
192.168.10.10_mysql.pp: [ DONE ]
Applying 192.168.10.10_keystone.pp
Applying 192.168.10.10_glance.pp
Applying 192.168.10.10_cinder.pp
192.168.10.10_keystone.pp: [ DONE ]
192.168.10.10_cinder.pp: [ DONE ]
192.168.10.10_glance.pp: [ DONE ]
Applying 192.168.10.10_api_nova.pp
192.168.10.10_api_nova.pp: [ DONE ]
Applying 192.168.10.10_nova.pp
192.168.10.10_nova.pp: [ DONE ]
Applying 192.168.10.10_neutron.pp
192.168.10.10_neutron.pp: [ DONE ]
Applying 192.168.10.10_neutron_fwaas.pp
Applying 192.168.10.10_osclient.pp
Applying 192.168.10.10_horizon.pp
192.168.10.10_neutron_fwaas.pp: [ DONE ]
192.168.10.10_osclient.pp: [ DONE ]
192.168.10.10_horizon.pp: [ DONE ]
Applying 192.168.10.10_ring_swift.pp
192.168.10.10_ring_swift.pp: [ DONE ]
Applying 192.168.10.10_swift.pp
192.168.10.10_swift.pp: [ DONE ]
Applying 192.168.10.10_mongodb.pp
192.168.10.10_mongodb.pp: [ DONE ]
Applying 192.168.10.10_ceilometer.pp
192.168.10.10_ceilometer.pp: [ DONE ]
Applying 192.168.10.10_postscript.pp
192.168.10.10_postscript.pp: [ DONE ]
Applying Puppet manifests [ DONE ]
Finalizing [ DONE ]

**** Installation completed successfully ******
Additional information:
* A new answerfile was created in: /root/packstack-answers-20160128-004334.txt
* Time synchronization installation was skipped. Please note that unsynchronized time on server instances might be problem for some OpenStack components.
* Did not create a cinder volume group, one already existed
* File /root/keystonerc_admin has been created on OpenStack client host 192.168.10.10. To use the command line tools you need to source the file.
* To access the OpenStack Dashboard browse to http://192.168.10.10/dashboard .
Please, find your login credentials stored in the keystonerc_admin in your home directory.
* Because of the kernel update the host 192.168.10.10 requires reboot.
* The installation log file is available at: /var/tmp/packstack/20160128-004334-tNBVhA/openstack-setup.log
* The generated manifests are available at: /var/tmp/packstack/20160128-004334-tNBVhA/manifests
',0,'alvin',curdate());
insert into Content values(2063,19,'p',96,'{}','        创建云平台的网卡配置文件：','        创建云平台的网卡配置文件：',0,'alvin',curdate());
insert into Content values(2064,19,'pre',97,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# vim /etc/sysconfig/network-scripts/ifcfg-br-ex
DEVICE=br-ex
IPADDR=192.168.10.10
NETMASK=255.255.255.0
BOOTPROTO=static
DNS1=192.168.10.1
GATEWAY=192.168.10.1
BROADCAST=192.168.10.254
NM_CONTROLLED=no
DEFROUTE=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
ONBOOT=yes
DEVICETYPE=ovs
TYPE="OVSIntPort"
OVS_BRIDGE=br-ex
','[root@openstack ~]# vim /etc/sysconfig/network-scripts/ifcfg-br-ex
DEVICE=br-ex
IPADDR=192.168.10.10
NETMASK=255.255.255.0
BOOTPROTO=static
DNS1=192.168.10.1
GATEWAY=192.168.10.1
BROADCAST=192.168.10.254
NM_CONTROLLED=no
DEFROUTE=yes
IPV4_FAILURE_FATAL=yes
IPV6INIT=no
ONBOOT=yes
DEVICETYPE=ovs
TYPE="OVSIntPort"
OVS_BRIDGE=br-ex
',0,'alvin',curdate());
insert into Content values(2065,19,'p',98,'{}','        修改网卡参数信息为：','        修改网卡参数信息为：',0,'alvin',curdate());
insert into Content values(2066,19,'pre',99,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# vim /etc/sysconfig/network-scripts/ifcfg-eno16777728 
DEVICE="eno16777728"
ONBOOT=yes
TYPE=OVSPort
DEVICETYPE=ovs
OVS_BRIDGE=br-ex
NM_CONTROLLED=no
IPV6INIT=no
','[root@openstack ~]# vim /etc/sysconfig/network-scripts/ifcfg-eno16777728 
DEVICE="eno16777728"
ONBOOT=yes
TYPE=OVSPort
DEVICETYPE=ovs
OVS_BRIDGE=br-ex
NM_CONTROLLED=no
IPV6INIT=no
',0,'alvin',curdate());
insert into Content values(2067,19,'p',100,'{}','        将网卡设备添加到OVS网络中：','        将网卡设备添加到OVS网络中：',0,'alvin',curdate());
insert into Content values(2068,19,'pre',101,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# ovs-vsctl add-port br-ex eno16777728 
[root@openstack ~]# ovs-vsctl show
55501ff1-856c-46f1-8a00-5c61e48bb64d
    Bridge br-ex
        Port br-ex
            Interface br-ex
                type: internal
        Port "eno16777728"
            Interface "eno16777728"
    Bridge br-int
        fail_mode: secure
        Port br-int
            Interface br-int
                type: internal
        Port patch-tun
            Interface patch-tun
                type: patch
                options: {peer=patch-int}
    Bridge br-tun
        Port patch-int
            Interface patch-int
                type: patch
                options: {peer=patch-tun}
        Port br-tun
            Interface br-tun
                type: internal
    ovs_version: "2.1.3"
','[root@openstack ~]# ovs-vsctl add-port br-ex eno16777728 
[root@openstack ~]# ovs-vsctl show
55501ff1-856c-46f1-8a00-5c61e48bb64d
    Bridge br-ex
        Port br-ex
            Interface br-ex
                type: internal
        Port "eno16777728"
            Interface "eno16777728"
    Bridge br-int
        fail_mode: secure
        Port br-int
            Interface br-int
                type: internal
        Port patch-tun
            Interface patch-tun
                type: patch
                options: {peer=patch-int}
    Bridge br-tun
        Port patch-int
            Interface patch-int
                type: patch
                options: {peer=patch-tun}
        Port br-tun
            Interface br-tun
                type: internal
    ovs_version: "2.1.3"
',0,'alvin',curdate());
insert into Content values(2069,19,'p',102,'{}','        重启系统让网络设备同步：','        重启系统让网络设备同步：',0,'alvin',curdate());
insert into Content values(2070,19,'pre',103,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# reboot
','[root@openstack ~]# reboot
',0,'alvin',curdate());
insert into Content values(2071,19,'p',104,'{}','        执行身份认证脚本：','        执行身份认证脚本：',0,'alvin',curdate());
insert into Content values(2072,19,'pre',105,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@openstack ~]# source keystonerc_admin
[root@openstack ~(keystone_admin)]# openstack-status
== Nova services ==
openstack-nova-api: active
openstack-nova-cert: active
openstack-nova-compute: active
openstack-nova-network: inactive (disabled on boot)
openstack-nova-scheduler: active
openstack-nova-volume: inactive (disabled on boot)
openstack-nova-conductor: active
== Glance services ==
openstack-glance-api: active
openstack-glance-registry: active
== Keystone service ==
openstack-keystone: active
== Horizon service ==
openstack-dashboard: active
== neutron services ==
neutron-server: active
neutron-dhcp-agent: active
neutron-l3-agent: active
neutron-metadata-agent: active
neutron-lbaas-agent: inactive (disabled on boot)
neutron-openvswitch-agent: active
neutron-linuxbridge-agent: inactive (disabled on boot)
neutron-ryu-agent: inactive (disabled on boot)
neutron-nec-agent: inactive (disabled on boot)
neutron-mlnx-agent: inactive (disabled on boot)
== Swift services ==
openstack-swift-proxy: active
openstack-swift-account: active
openstack-swift-container: active
openstack-swift-object: active
== Cinder services ==
openstack-cinder-api: active
openstack-cinder-scheduler: active
openstack-cinder-volume: active
openstack-cinder-backup: active
== Ceilometer services ==
openstack-ceilometer-api: active
openstack-ceilometer-central: active
openstack-ceilometer-compute: active
openstack-ceilometer-collector: active
openstack-ceilometer-alarm-notifier: active
openstack-ceilometer-alarm-evaluator: active
== Support services ==
libvirtd: active
openvswitch: active
dbus: active
tgtd: inactive (disabled on boot)
rabbitmq-server: active
memcached: active
== Keystone users ==
+----------------------------------+------------+---------+----------------------+
| id | name | enabled | email |
+----------------------------------+------------+---------+----------------------+
| 7f1f43a0002e4fb9a04b9b1480294e08   | admin        | True | test@test.com             |
| c7570a0d3e264f0191d8108359100cdd  | ceilometer | True | ceilometer@localhost |
| 9d3d1b46599341638771c33bcebe17fc    | cinder         | True | cinder@localhost        |
| 52a803edcc4e479ea147e69ca2966f46    | glance         | True | glance@localhost        |
| 8b0bcd19b11f49059bc100d260f39d50  | neutron      | True | neutron@localhost     |
| 953e01b228ef480db551dd05d43eb6d1 | nova            | True | nova@localhost          |
| 16ced2f73c034e58a0951e46f22eddc8    | swift            | True | swift@localhost          |
+----------------------------------+------------+---------+----------------------+
== Glance images ==
+----+------+-------------+------------------+------+--------+
| ID | Name | Disk Format | Container Format | Size | Status |
+----+------+-------------+------------------+------+--------+
+----+------+-------------+------------------+------+--------+
== Nova managed services ==
+----+------------------+--------------------------+----------+---------+-------+----------------------------+-----------------+
| Id | Binary | Host | Zone | Status | State | Updated_at | Disabled Reason |
+----+------------------+--------------------------+----------+---------+-------+----------------------------+-----------------+
| 1 | nova-consoleauth   | openstack.linuxprobe.com | internal | enabled | up | 2016-01-29T04:36:20.000000 | - |
| 2 | nova-scheduler      | openstack.linuxprobe.com | internal | enabled | up | 2016-01-29T04:36:20.000000 | - |
| 3 | nova-conductor     | openstack.linuxprobe.com | internal | enabled  | up | 2016-01-29T04:36:20.000000 | - |
| 4 | nova-compute       | openstack.linuxprobe.com | nova      | enabled  | up | 2016-01-29T04:36:16.000000 | - |
| 5 | nova-cert           | openstack.linuxprobe.com | internal | enabled  | up | 2016-01-29T04:36:20.000000 | - |
+----+------------------+--------------------------+----------+---------+-------+----------------------------+-----------------+
== Nova networks ==
+----+-------+------+
| ID | Label | Cidr |
+----+-------+------+
+----+-------+------+
== Nova instance flavors ==
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID | Name | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| 1 | m1.tiny            | 512       | 1    | 0 | | 1 | 1.0 | True |
| 2 | m1.small         | 2048    | 20  | 0 | | 1 | 1.0 | True |
| 3 | m1.medium    | 4096    | 40  | 0 | | 2 | 1.0 | True |
| 4 | m1.large          | 8192    | 80  | 0 | | 4 | 1.0 | True |
| 5 | m1.xlarge        | 16384 | 160 | 0 | | 8 | 1.0 | True |
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
== Nova instances ==
+----+------+--------+------------+-------------+----------+
| ID | Name | Status | Task State | Power State | Networks |
+----+------+--------+------------+-------------+----------+
+----+------+--------+------------+-------------+----------+
[/cc]
','[cc lang="bash"]
[root@openstack ~]# source keystonerc_admin
[root@openstack ~(keystone_admin)]# openstack-status
== Nova services ==
openstack-nova-api: active
openstack-nova-cert: active
openstack-nova-compute: active
openstack-nova-network: inactive (disabled on boot)
openstack-nova-scheduler: active
openstack-nova-volume: inactive (disabled on boot)
openstack-nova-conductor: active
== Glance services ==
openstack-glance-api: active
openstack-glance-registry: active
== Keystone service ==
openstack-keystone: active
== Horizon service ==
openstack-dashboard: active
== neutron services ==
neutron-server: active
neutron-dhcp-agent: active
neutron-l3-agent: active
neutron-metadata-agent: active
neutron-lbaas-agent: inactive (disabled on boot)
neutron-openvswitch-agent: active
neutron-linuxbridge-agent: inactive (disabled on boot)
neutron-ryu-agent: inactive (disabled on boot)
neutron-nec-agent: inactive (disabled on boot)
neutron-mlnx-agent: inactive (disabled on boot)
== Swift services ==
openstack-swift-proxy: active
openstack-swift-account: active
openstack-swift-container: active
openstack-swift-object: active
== Cinder services ==
openstack-cinder-api: active
openstack-cinder-scheduler: active
openstack-cinder-volume: active
openstack-cinder-backup: active
== Ceilometer services ==
openstack-ceilometer-api: active
openstack-ceilometer-central: active
openstack-ceilometer-compute: active
openstack-ceilometer-collector: active
openstack-ceilometer-alarm-notifier: active
openstack-ceilometer-alarm-evaluator: active
== Support services ==
libvirtd: active
openvswitch: active
dbus: active
tgtd: inactive (disabled on boot)
rabbitmq-server: active
memcached: active
== Keystone users ==
+----------------------------------+------------+---------+----------------------+
| id | name | enabled | email |
+----------------------------------+------------+---------+----------------------+
| 7f1f43a0002e4fb9a04b9b1480294e08   | admin        | True | test@test.com             |
| c7570a0d3e264f0191d8108359100cdd  | ceilometer | True | ceilometer@localhost |
| 9d3d1b46599341638771c33bcebe17fc    | cinder         | True | cinder@localhost        |
| 52a803edcc4e479ea147e69ca2966f46    | glance         | True | glance@localhost        |
| 8b0bcd19b11f49059bc100d260f39d50  | neutron      | True | neutron@localhost     |
| 953e01b228ef480db551dd05d43eb6d1 | nova            | True | nova@localhost          |
| 16ced2f73c034e58a0951e46f22eddc8    | swift            | True | swift@localhost          |
+----------------------------------+------------+---------+----------------------+
== Glance images ==
+----+------+-------------+------------------+------+--------+
| ID | Name | Disk Format | Container Format | Size | Status |
+----+------+-------------+------------------+------+--------+
+----+------+-------------+------------------+------+--------+
== Nova managed services ==
+----+------------------+--------------------------+----------+---------+-------+----------------------------+-----------------+
| Id | Binary | Host | Zone | Status | State | Updated_at | Disabled Reason |
+----+------------------+--------------------------+----------+---------+-------+----------------------------+-----------------+
| 1 | nova-consoleauth   | openstack.linuxprobe.com | internal | enabled | up | 2016-01-29T04:36:20.000000 | - |
| 2 | nova-scheduler      | openstack.linuxprobe.com | internal | enabled | up | 2016-01-29T04:36:20.000000 | - |
| 3 | nova-conductor     | openstack.linuxprobe.com | internal | enabled  | up | 2016-01-29T04:36:20.000000 | - |
| 4 | nova-compute       | openstack.linuxprobe.com | nova      | enabled  | up | 2016-01-29T04:36:16.000000 | - |
| 5 | nova-cert           | openstack.linuxprobe.com | internal | enabled  | up | 2016-01-29T04:36:20.000000 | - |
+----+------------------+--------------------------+----------+---------+-------+----------------------------+-----------------+
== Nova networks ==
+----+-------+------+
| ID | Label | Cidr |
+----+-------+------+
+----+-------+------+
== Nova instance flavors ==
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| ID | Name | Memory_MB | Disk | Ephemeral | Swap | VCPUs | RXTX_Factor | Is_Public |
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
| 1 | m1.tiny            | 512       | 1    | 0 | | 1 | 1.0 | True |
| 2 | m1.small         | 2048    | 20  | 0 | | 1 | 1.0 | True |
| 3 | m1.medium    | 4096    | 40  | 0 | | 2 | 1.0 | True |
| 4 | m1.large          | 8192    | 80  | 0 | | 4 | 1.0 | True |
| 5 | m1.xlarge        | 16384 | 160 | 0 | | 8 | 1.0 | True |
+----+-----------+-----------+------+-----------+------+-------+-------------+-----------+
== Nova instances ==
+----+------+--------+------------+-------------+----------+
| ID | Name | Status | Task State | Power State | Networks |
+----+------+--------+------------+-------------+----------+
+----+------+--------+------------+-------------+----------+
[/cc]
',0,'alvin',curdate());
insert into Content values(2073,19,'p',106,'{}','        打开浏览器进入http://192.168.10.10/dashboard：','        打开浏览器进入http://192.168.10.10/dashboard：',0,'alvin',curdate());
insert into Content values(2074,19,'image',107,'{"alt": "login", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_login.png", "width": "796"}','/static/img/linux/linux_openstack_login.png','/static/img/linux/linux_openstack_login.png',0,'alvin',curdate());
insert into Content values(2075,19,'p',108,'{}','        查看登录的帐号密码：','        查看登录的帐号密码：',0,'alvin',curdate());
insert into Content values(2076,19,'pre',109,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# cat keystonerc_admin 
export OS_USERNAME=admin
export OS_TENANT_NAME=admin
export OS_PASSWORD=14ad1e723132440c
export OS_AUTH_URL=http://192.168.10.10:5000/v2.0/
export PS1=\'[\u@\h \W(keystone_admin)]\$ \'
','[root@openstack ~]# cat keystonerc_admin 
export OS_USERNAME=admin
export OS_TENANT_NAME=admin
export OS_PASSWORD=14ad1e723132440c
export OS_AUTH_URL=http://192.168.10.10:5000/v2.0/
export PS1=\'[\u@\h \W(keystone_admin)]\$ \'
',0,'alvin',curdate());
insert into Content values(2077,19,'p',110,'{}','        输入帐号密码后进入到Openstack管理中心：','        输入帐号密码后进入到Openstack管理中心：',0,'alvin',curdate());
insert into Content values(2078,19,'image',111,'{"alt": "login_platom", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_login_platom.png", "width": "796"}','/static/img/linux/linux_openstack_login_platom.png','/static/img/linux/linux_openstack_login_platom.png',0,'alvin',curdate());
insert into Content values(2079,19,'h2',112,'{}','使用Openstack服务','使用Openstack服务',0,'alvin',curdate());
insert into Content values(2080,19,'h3',113,'{}','配置虚拟网络','配置虚拟网络',0,'alvin',curdate());
insert into Content values(2081,19,'p',114,'{}','        要想让云平台中的虚拟实例机能够互相通信，并且让外部的用户访问到里面的数据，我们首先就必需配置好云平台中的网络环境。','        要想让云平台中的虚拟实例机能够互相通信，并且让外部的用户访问到里面的数据，我们首先就必需配置好云平台中的网络环境。',0,'alvin',curdate());
insert into Content values(2082,19,'p',115,'{}','        Openstack创建网络：','        Openstack创建网络：',0,'alvin',curdate());
insert into Content values(2083,19,'image',116,'{"alt": "create_web", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_create_web.jpg", "width": "796"}','/static/img/linux/linux_openstack_create_web.jpg','/static/img/linux/linux_openstack_create_web.jpg',0,'alvin',curdate());
insert into Content values(2084,19,'p',117,'{}','        编辑网络配置：','        编辑网络配置：',0,'alvin',curdate());
insert into Content values(2085,19,'image',118,'{"alt": "web_setting", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_openstack_web_setting.png", "width": "796"}','/static/img/linux/linux_openstack_web_setting.png','/static/img/linux/linux_openstack_web_setting.png',0,'alvin',curdate());
insert into Content values(2086,19,'p',119,'{}','        点击创建子网：','        点击创建子网：',0,'alvin',curdate());
insert into Content values(2087,19,'image',120,'{"alt": "create_child_web", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_create_child_web.png", "width": "796"}','/static/img/linux/linux_openstack_create_child_web.png','/static/img/linux/linux_openstack_create_child_web.png',0,'alvin',curdate());
insert into Content values(2088,19,'p',121,'{}','        创建子网信息：','        创建子网信息：',0,'alvin',curdate());
insert into Content values(2089,19,'image',122,'{"alt": "input_child_web_info", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_input_child_web_info.jpg", "width": "796"}','/static/img/linux/linux_openstack_input_child_web_info.jpg','/static/img/linux/linux_openstack_input_child_web_info.jpg',0,'alvin',curdate());
insert into Content values(2090,19,'p',123,'{}','        填写子网详情(DHCP地址池中的IP地址用逗号间隔)：','        填写子网详情(DHCP地址池中的IP地址用逗号间隔)：',0,'alvin',curdate());
insert into Content values(2091,19,'image',124,'{"alt": "input_child_detail", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_input_child_detail.png", "width": "796"}','/static/img/linux/linux_openstack_input_child_detail.png','/static/img/linux/linux_openstack_input_child_detail.png',0,'alvin',curdate());
insert into Content values(2092,19,'p',125,'{}','        子网详情：','        子网详情：',0,'alvin',curdate());
insert into Content values(2093,19,'image',126,'{"alt": "web_info", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_openstack_web_info.png", "width": "796"}','/static/img/linux/linux_openstack_web_info.png','/static/img/linux/linux_openstack_web_info.png',0,'alvin',curdate());
insert into Content values(2094,19,'p',127,'{}','        创建私有网络：','        创建私有网络：',0,'alvin',curdate());
insert into Content values(2095,19,'image',128,'{"alt": "create_private_web", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_create_private_web.png", "width": "796"}','/static/img/linux/linux_openstack_create_private_web.png','/static/img/linux/linux_openstack_create_private_web.png',0,'alvin',curdate());
insert into Content values(2096,19,'p',129,'{}','        创建网络：','        创建网络：',0,'alvin',curdate());
insert into Content values(2097,19,'image',130,'{"alt": "create_web_process", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_create_web_process.png", "width": "796"}','/static/img/linux/linux_openstack_create_web_process.png','/static/img/linux/linux_openstack_create_web_process.png',0,'alvin',curdate());
insert into Content values(2098,19,'p',131,'{}','        填写网络信息：','        填写网络信息：',0,'alvin',curdate());
insert into Content values(2099,19,'image',132,'{"alt": "input_web_info", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_openstack_input_web_info.jpg", "width": "796"}','/static/img/linux/linux_openstack_input_web_info.jpg','/static/img/linux/linux_openstack_input_web_info.jpg',0,'alvin',curdate());
insert into Content values(2100,19,'p',133,'{}','        设置网络详情：','        设置网络详情：',0,'alvin',curdate());
insert into Content values(2101,19,'image',134,'{"alt": "edit_web_info", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_openstack_edit_web_info.jpg", "width": "796"}','/static/img/linux/linux_openstack_edit_web_info.jpg','/static/img/linux/linux_openstack_edit_web_info.jpg',0,'alvin',curdate());
insert into Content values(2102,19,'p',135,'{}','        查看网络信息：','        查看网络信息：',0,'alvin',curdate());
insert into Content values(2103,19,'image',136,'{"alt": "check_web_info", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_check_web_info.png", "width": "796"}','/static/img/linux/linux_openstack_check_web_info.png','/static/img/linux/linux_openstack_check_web_info.png',0,'alvin',curdate());
insert into Content values(2104,19,'p',137,'{}','        添加路由信息：','        添加路由信息：',0,'alvin',curdate());
insert into Content values(2105,19,'image',138,'{"alt": "add_route", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_add_route.png", "width": "796"}','/static/img/linux/linux_openstack_add_route.png','/static/img/linux/linux_openstack_add_route.png',0,'alvin',curdate());
insert into Content values(2106,19,'p',139,'{}','        填写路由名称：','        填写路由名称：',0,'alvin',curdate());
insert into Content values(2107,19,'image',140,'{"alt": "create_route", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_create_route.png", "width": "796"}','/static/img/linux/linux_openstack_create_route.png','/static/img/linux/linux_openstack_create_route.png',0,'alvin',curdate());
insert into Content values(2108,19,'p',141,'{}','        设置路由的网关信息：','        设置路由的网关信息：',0,'alvin',curdate());
insert into Content values(2109,19,'image',142,'{"alt": "set_route_info", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_set_route_info.png", "width": "796"}','/static/img/linux/linux_openstack_set_route_info.png','/static/img/linux/linux_openstack_set_route_info.png',0,'alvin',curdate());
insert into Content values(2110,19,'p',143,'{}','        设置网关：','        设置网关：',0,'alvin',curdate());
insert into Content values(2111,19,'image',144,'{"alt": "set_route", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_openstack_set_route.png", "width": "796"}','/static/img/linux/linux_openstack_set_route.png','/static/img/linux/linux_openstack_set_route.png',0,'alvin',curdate());
insert into Content values(2112,19,'p',145,'{}','        在网络拓扑中添加接口：','        在网络拓扑中添加接口：',0,'alvin',curdate());
insert into Content values(2113,19,'image',146,'{"alt": "add_interface", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_openstack_add_interface.png", "width": "796"}','/static/img/linux/linux_openstack_add_interface.png','/static/img/linux/linux_openstack_add_interface.png',0,'alvin',curdate());
insert into Content values(2114,19,'p',147,'{}','        添加接口信息：','        添加接口信息：',0,'alvin',curdate());
insert into Content values(2115,19,'image',148,'{"alt": "input_interface_info", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_openstack_input_interface_info.png", "width": "796"}','/static/img/linux/linux_openstack_input_interface_info.png','/static/img/linux/linux_openstack_input_interface_info.png',0,'alvin',curdate());
insert into Content values(2116,19,'p',149,'{}','        路由的接口信息(需要等待几秒钟后，内部接口的状态会变成ACTIVE)：','        路由的接口信息(需要等待几秒钟后，内部接口的状态会变成ACTIVE)：',0,'alvin',curdate());
insert into Content values(2117,19,'image',150,'{"alt": "route_info", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_route_info.png", "width": "796"}','/static/img/linux/linux_openstack_route_info.png','/static/img/linux/linux_openstack_route_info.png',0,'alvin',curdate());
insert into Content values(2118,19,'h3',151,'{}','创建云主机类型','创建云主机类型',0,'alvin',curdate());
insert into Content values(2119,19,'p',152,'{}','        我们可以预先设置多个云主机类型的模板，这样可以灵活的满足用户的需求，先来创建云主机类型：','        我们可以预先设置多个云主机类型的模板，这样可以灵活的满足用户的需求，先来创建云主机类型：',0,'alvin',curdate());
insert into Content values(2120,19,'image',153,'{"alt": "create_cloud_server", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_create_cloud_server.png", "width": "796"}','/static/img/linux/linux_openstack_create_cloud_server.png','/static/img/linux/linux_openstack_create_cloud_server.png',0,'alvin',curdate());
insert into Content values(2121,19,'p',154,'{}','        填写云主机的基本信息：','        填写云主机的基本信息：',0,'alvin',curdate());
insert into Content values(2122,19,'image',155,'{"alt": "input_cloud_info", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_openstack_input_cloud_info.png", "width": "796"}','/static/img/linux/linux_openstack_input_cloud_info.png','/static/img/linux/linux_openstack_input_cloud_info.png',0,'alvin',curdate());
insert into Content values(2123,19,'p',156,'{}','        创建上传镜像：','        创建上传镜像：',0,'alvin',curdate());
insert into Content values(2124,19,'image',157,'{"alt": "create_upload_mirror", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_openstack_create_upload_mirror.png", "width": "796"}','/static/img/linux/linux_openstack_create_upload_mirror.png','/static/img/linux/linux_openstack_create_upload_mirror.png',0,'alvin',curdate());
insert into Content values(2125,19,'p',158,'{}','        Cirros是一款极为精简的操作系统，非常小巧精简的Linux系统镜像，一般会在搭建Openstack后测试云计算平台可用性的系统，特点是体积小巧，速度极快，那么来上传Cirros系统镜像吧：','        Cirros是一款极为精简的操作系统，非常小巧精简的Linux系统镜像，一般会在搭建Openstack后测试云计算平台可用性的系统，特点是体积小巧，速度极快，那么来上传Cirros系统镜像吧：',0,'alvin',curdate());
insert into Content values(2126,19,'image',159,'{"alt": "upload_sys_mirror", "class": ["attachment-full"], "height": "532", "src": "/static/img/linux/linux_openstack_upload_sys_mirror.png", "width": "796"}','/static/img/linux/linux_openstack_upload_sys_mirror.png','/static/img/linux/linux_openstack_upload_sys_mirror.png',0,'alvin',curdate());
insert into Content values(2127,19,'p',160,'{}','        查看已上传的镜像(Cirros系统上传速度超级快吧!)：','        查看已上传的镜像(Cirros系统上传速度超级快吧!)：',0,'alvin',curdate());
insert into Content values(2128,19,'image',161,'{"alt": "check_cloud_info", "class": ["attachment-full"], "height": "132", "src": "/static/img/linux/linux_openstack_check_cloud_info.png", "width": "796"}','/static/img/linux/linux_openstack_check_cloud_info.png','/static/img/linux/linux_openstack_check_cloud_info.png',0,'alvin',curdate());
insert into Content values(2129,19,'h3',162,'{}','创建主机实例','创建主机实例',0,'alvin',curdate());
insert into Content values(2130,19,'p',163,'{}','        创建云主机实例：','        创建云主机实例：',0,'alvin',curdate());
insert into Content values(2131,19,'image',164,'{"alt": "create_server", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_create_server.png", "width": "796"}','/static/img/linux/linux_openstack_create_server.png','/static/img/linux/linux_openstack_create_server.png',0,'alvin',curdate());
insert into Content values(2132,19,'p',165,'{}','        填写云主机的详情(云主机类型可以选择前面自定义创建的)：','        填写云主机的详情(云主机类型可以选择前面自定义创建的)：',0,'alvin',curdate());
insert into Content values(2133,19,'image',166,'{"alt": "input_server_info", "class": ["attachment-full"], "height": "552", "src": "/static/img/linux/linux_openstack_input_server_info.png", "width": "796"}','/static/img/linux/linux_openstack_input_server_info.png','/static/img/linux/linux_openstack_input_server_info.png',0,'alvin',curdate());
insert into Content values(2134,19,'p',167,'{}','        查看云主机的访问与安全规则：','        查看云主机的访问与安全规则：',0,'alvin',curdate());
insert into Content values(2135,19,'image',168,'{"alt": "check_safe_rule", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_check_safe_rule.png", "width": "796"}','/static/img/linux/linux_openstack_check_safe_rule.png','/static/img/linux/linux_openstack_check_safe_rule.png',0,'alvin',curdate());
insert into Content values(2136,19,'p',169,'{}','        将私有网络网卡添加到云主机：','        将私有网络网卡添加到云主机：',0,'alvin',curdate());
insert into Content values(2137,19,'image',170,'{"alt": "add_private_route", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_add_private_route.png", "width": "796"}','/static/img/linux/linux_openstack_add_private_route.png','/static/img/linux/linux_openstack_add_private_route.png',0,'alvin',curdate());
insert into Content values(2138,19,'p',171,'{}','        查看安装后的脚本数据：','        查看安装后的脚本数据：',0,'alvin',curdate());
insert into Content values(2139,19,'image',172,'{"alt": "view_safe_rule", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_view_safe_rule.jpg", "width": "796"}','/static/img/linux/linux_openstack_view_safe_rule.jpg','/static/img/linux/linux_openstack_view_safe_rule.jpg',0,'alvin',curdate());
insert into Content values(2140,19,'p',173,'{}','        查看磁盘的分区方式：','        查看磁盘的分区方式：',0,'alvin',curdate());
insert into Content values(2141,19,'image',174,'{"alt": "view_disk_type", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_view_disk_type.png", "width": "796"}','/static/img/linux/linux_openstack_view_disk_type.png','/static/img/linux/linux_openstack_view_disk_type.png',0,'alvin',curdate());
insert into Content values(2142,19,'p',175,'{}','        主机实例的孵化过程大约需要10-30秒，然后查看已经运行的实例：','        主机实例的孵化过程大约需要10-30秒，然后查看已经运行的实例：',0,'alvin',curdate());
insert into Content values(2143,19,'image',176,'{"alt": "mail_system", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_check_run_type.png", "width": "796"}','/static/img/linux/linux_openstack_check_run_type.png','/static/img/linux/linux_openstack_check_run_type.png',0,'alvin',curdate());
insert into Content values(2144,19,'p',177,'{}','        查看实例主机的网络拓扑（当前仅在内网中）：','        查看实例主机的网络拓扑（当前仅在内网中）：',0,'alvin',curdate());
insert into Content values(2145,19,'image',178,'{"alt": "check_web_tubo", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_check_web_tubo.png", "width": "796"}','/static/img/linux/linux_openstack_check_web_tubo.png','/static/img/linux/linux_openstack_check_web_tubo.png',0,'alvin',curdate());
insert into Content values(2146,19,'p',179,'{}','        为实例主机绑定浮动IP地址：','        为实例主机绑定浮动IP地址：',0,'alvin',curdate());
insert into Content values(2147,19,'image',180,'{"alt": "bind_ip", "class": ["attachment-full"], "height": "352", "src": "/static/img/linux/linux_openstack_bind_ip.png", "width": "796"}','/static/img/linux/linux_openstack_bind_ip.png','/static/img/linux/linux_openstack_bind_ip.png',0,'alvin',curdate());
insert into Content values(2148,19,'p',181,'{}','        为主机实例添加浮动IP','        为主机实例添加浮动IP',0,'alvin',curdate());
insert into Content values(2149,19,'image',182,'{"alt": "add_ip_to_server", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_openstack_add_ip_to_server.png", "width": "796"}','/static/img/linux/linux_openstack_add_ip_to_server.png','/static/img/linux/linux_openstack_add_ip_to_server.png',0,'alvin',curdate());
insert into Content values(2150,19,'p',183,'{}','        选择绑定的IP地址：','        选择绑定的IP地址：',0,'alvin',curdate());
insert into Content values(2151,19,'image',184,'{"alt": "check_bind_ip", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_openstack_check_bind_ip.png", "width": "796"}','/static/img/linux/linux_openstack_check_bind_ip.png','/static/img/linux/linux_openstack_check_bind_ip.png',0,'alvin',curdate());
insert into Content values(2152,19,'p',185,'{}','        将主机实例与IP地址关联：','        将主机实例与IP地址关联：',0,'alvin',curdate());
insert into Content values(2153,19,'image',186,'{"alt": "bind_ip_with_server", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_openstack_bind_ip_with_server.png", "width": "796"}','/static/img/linux/linux_openstack_bind_ip_with_server.png','/static/img/linux/linux_openstack_bind_ip_with_server.png',0,'alvin',curdate());
insert into Content values(2154,19,'p',187,'{}','        此时再查看实例的信息，IP地址段就多了一个数据值（192.168.10.51）：','        此时再查看实例的信息，IP地址段就多了一个数据值（192.168.10.51）：',0,'alvin',curdate());
insert into Content values(2155,19,'image',188,'{"alt": "view_sample_info", "class": ["attachment-full"], "height": "132", "src": "/static/img/linux/linux_openstack_view_sample_info.png", "width": "796"}','/static/img/linux/linux_openstack_view_sample_info.png','/static/img/linux/linux_openstack_view_sample_info.png',0,'alvin',curdate());
insert into Content values(2156,19,'p',189,'{}','        尝试从外部ping云主机实例（结果是失败的）：','        尝试从外部ping云主机实例（结果是失败的）：',0,'alvin',curdate());
insert into Content values(2157,19,'pre',190,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# ping 192.168.10.51
PING 192.168.10.51 (192.168.10.51) 56(84) bytes of data.
From 192.168.10.10 icmp_seq=1 Destination Host Unreachable
From 192.168.10.10 icmp_seq=2 Destination Host Unreachable
From 192.168.10.10 icmp_seq=3 Destination Host Unreachable
From 192.168.10.10 icmp_seq=4 Destination Host Unreachable
^C
--- 192.168.10.51 ping statistics ---
6 packets transmitted, 0 received, +4 errors, 100% packet loss, time 5001ms
pipe 4
','[root@openstack ~]# ping 192.168.10.51
PING 192.168.10.51 (192.168.10.51) 56(84) bytes of data.
From 192.168.10.10 icmp_seq=1 Destination Host Unreachable
From 192.168.10.10 icmp_seq=2 Destination Host Unreachable
From 192.168.10.10 icmp_seq=3 Destination Host Unreachable
From 192.168.10.10 icmp_seq=4 Destination Host Unreachable
^C
--- 192.168.10.51 ping statistics ---
6 packets transmitted, 0 received, +4 errors, 100% packet loss, time 5001ms
pipe 4
',0,'alvin',curdate());
insert into Content values(2158,19,'p',191,'{}','        原因是我们没有设置安全组规则那，需要让外部流量允许进入到主机实例中：','        原因是我们没有设置安全组规则那，需要让外部流量允许进入到主机实例中：',0,'alvin',curdate());
insert into Content values(2159,19,'image',192,'{"alt": "create_safe_group_rule", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_create_safe_group_rule.png", "width": "796"}','/static/img/linux/linux_openstack_create_safe_group_rule.png','/static/img/linux/linux_openstack_create_safe_group_rule.png',0,'alvin',curdate());
insert into Content values(2160,19,'p',193,'{}','        填写策略组的名称与描述：','        填写策略组的名称与描述：',0,'alvin',curdate());
insert into Content values(2161,19,'image',194,'{"alt": "input_safe_group_info", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_input_safe_group_info.png", "width": "796"}','/static/img/linux/linux_openstack_input_safe_group_info.png','/static/img/linux/linux_openstack_input_safe_group_info.png',0,'alvin',curdate());
insert into Content values(2162,19,'p',195,'{}','        管理安全组的规则：','        管理安全组的规则：',0,'alvin',curdate());
insert into Content values(2163,19,'image',196,'{"alt": "manage_safe_rule", "class": ["attachment-full"], "height": "182", "src": "/static/img/linux/linux_openstack_manage_safe_rule.png", "width": "796"}','/static/img/linux/linux_openstack_manage_safe_rule.png','/static/img/linux/linux_openstack_manage_safe_rule.png',0,'alvin',curdate());
insert into Content values(2164,19,'p',197,'{}','        添加安全规则：','        添加安全规则：',0,'alvin',curdate());
insert into Content values(2165,19,'image',198,'{"alt": "add_safe_rule", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_add_safe_rule.png", "width": "796"}','/static/img/linux/linux_openstack_add_safe_rule.png','/static/img/linux/linux_openstack_add_safe_rule.png',0,'alvin',curdate());
insert into Content values(2166,19,'p',199,'{}','        允许所有的ICMP数据包流入（当然根据工作有时还需要选择TCP或UDP协议，此时仅为验证网络连通性）：','        允许所有的ICMP数据包流入（当然根据工作有时还需要选择TCP或UDP协议，此时仅为验证网络连通性）：',0,'alvin',curdate());
insert into Content values(2167,19,'image',200,'{"alt": "allow_icmp_data", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_allow_icmp_data.png", "width": "796"}','/static/img/linux/linux_openstack_allow_icmp_data.png','/static/img/linux/linux_openstack_allow_icmp_data.png',0,'alvin',curdate());
insert into Content values(2168,19,'p',201,'{}','        编辑实例的安全策略组：','        编辑实例的安全策略组：',0,'alvin',curdate());
insert into Content values(2169,19,'image',202,'{"alt": "edit_safe_rule", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_edit_safe_rule.png", "width": "796"}','/static/img/linux/linux_openstack_edit_safe_rule.png','/static/img/linux/linux_openstack_edit_safe_rule.png',0,'alvin',curdate());
insert into Content values(2170,19,'p',203,'{}','        将新建的安全组策略作用到主机实例上：','        将新建的安全组策略作用到主机实例上：',0,'alvin',curdate());
insert into Content values(2171,19,'image',204,'{"alt": "active_safe_rule", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_active_safe_rule.png", "width": "796"}','/static/img/linux/linux_openstack_active_safe_rule.png','/static/img/linux/linux_openstack_active_safe_rule.png',0,'alvin',curdate());
insert into Content values(2172,19,'p',205,'{}','        再次尝试从外部ping虚拟实例主机：','        再次尝试从外部ping虚拟实例主机：',0,'alvin',curdate());
insert into Content values(2173,19,'pre',206,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# ping 192.168.10.51
PING 192.168.10.51 (192.168.10.51) 56(84) bytes of data.
64 bytes from 192.168.10.51: icmp_seq=1 ttl=63 time=2.47 ms
64 bytes from 192.168.10.51: icmp_seq=2 ttl=63 time=0.764 ms
64 bytes from 192.168.10.51: icmp_seq=3 ttl=63 time=1.44 ms
64 bytes from 192.168.10.51: icmp_seq=4 ttl=63 time=1.30 ms
^C
--- 192.168.10.51 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.764/1.497/2.479/0.622 ms
','[root@openstack ~]# ping 192.168.10.51
PING 192.168.10.51 (192.168.10.51) 56(84) bytes of data.
64 bytes from 192.168.10.51: icmp_seq=1 ttl=63 time=2.47 ms
64 bytes from 192.168.10.51: icmp_seq=2 ttl=63 time=0.764 ms
64 bytes from 192.168.10.51: icmp_seq=3 ttl=63 time=1.44 ms
64 bytes from 192.168.10.51: icmp_seq=4 ttl=63 time=1.30 ms
^C
--- 192.168.10.51 ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3004ms
rtt min/avg/max/mdev = 0.764/1.497/2.479/0.622 ms
',0,'alvin',curdate());
insert into Content values(2174,19,'h3',207,'{}','添加云硬盘','添加云硬盘',0,'alvin',curdate());
insert into Content values(2175,19,'p',208,'{}','        云计算平台的特性就是要能够灵活的，弹性的调整主机实例使用的资源，我们可以来为主机实例多挂载一块云硬盘，首先来创建云硬盘设备：','        云计算平台的特性就是要能够灵活的，弹性的调整主机实例使用的资源，我们可以来为主机实例多挂载一块云硬盘，首先来创建云硬盘设备：',0,'alvin',curdate());
insert into Content values(2176,19,'image',209,'{"alt": "create_cloud_disk", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_create_cloud_disk.png", "width": "796"}','/static/img/linux/linux_openstack_create_cloud_disk.png','/static/img/linux/linux_openstack_create_cloud_disk.png',0,'alvin',curdate());
insert into Content values(2177,19,'p',210,'{}','        填写云硬盘的信息（以10GB为例）：','        填写云硬盘的信息（以10GB为例）：',0,'alvin',curdate());
insert into Content values(2178,19,'image',211,'{"alt": "input_cloud_disk_info", "class": ["attachment-full"], "height": "582", "src": "/static/img/linux/linux_openstack_input_cloud_disk_info.png", "width": "796"}','/static/img/linux/linux_openstack_input_cloud_disk_info.png','/static/img/linux/linux_openstack_input_cloud_disk_info.png',0,'alvin',curdate());
insert into Content values(2179,19,'p',212,'{}','        编辑挂载设备到主机云实例：','        编辑挂载设备到主机云实例：',0,'alvin',curdate());
insert into Content values(2180,19,'image',213,'{"alt": "mount_disk_on_cloud", "class": ["attachment-full"], "height": "332", "src": "/static/img/linux/linux_openstack_mount_disk_on_cloud.png", "width": "796"}','/static/img/linux/linux_openstack_mount_disk_on_cloud.png','/static/img/linux/linux_openstack_mount_disk_on_cloud.png',0,'alvin',curdate());
insert into Content values(2181,19,'p',214,'{}','        将云硬盘挂载到主机实例中：','        将云硬盘挂载到主机实例中：',0,'alvin',curdate());
insert into Content values(2182,19,'image',215,'{"alt": "mount_disk_to_cloud", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openstack_mount_disk_to_cloud.png", "width": "796"}','/static/img/linux/linux_openstack_mount_disk_to_cloud.png','/static/img/linux/linux_openstack_mount_disk_to_cloud.png',0,'alvin',curdate());
insert into Content values(2183,19,'p',216,'{}','        查看云主机实例中的硬盘信息：','        查看云主机实例中的硬盘信息：',0,'alvin',curdate());
insert into Content values(2184,19,'image',217,'{"alt": "view_cloud_disk_info", "class": ["attachment-full"], "height": "132", "src": "/static/img/linux/linux_openstack_view_cloud_disk_info.png", "width": "796"}','/static/img/linux/linux_openstack_view_cloud_disk_info.png','/static/img/linux/linux_openstack_view_cloud_disk_info.png',0,'alvin',curdate());
insert into Content values(2185,19,'h2',218,'{}','控制云主机实例','控制云主机实例',0,'alvin',curdate());
insert into Content values(2186,19,'p',219,'{}','        经过上面的一系列配置，我们此时已经创建出了一台能够交付给用户使用的云主机实例了，查看下云平台的信息：','        经过上面的一系列配置，我们此时已经创建出了一台能够交付给用户使用的云主机实例了，查看下云平台的信息：',0,'alvin',curdate());
insert into Content values(2187,19,'image',220,'{"alt": "view_cloud_platom_use", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_view_cloud_platom_use.png", "width": "796"}','/static/img/linux/linux_openstack_view_cloud_platom_use.png','/static/img/linux/linux_openstack_view_cloud_platom_use.png',0,'alvin',curdate());
insert into Content values(2188,19,'p',221,'{}','        编辑安全策略，允许TCP和UDP协议的数据流入到云主机实例中：','        编辑安全策略，允许TCP和UDP协议的数据流入到云主机实例中：',0,'alvin',curdate());
insert into Content values(2189,19,'image',222,'{"alt": "edit_safe_strategy", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_edit_safe_strategy.png", "width": "796"}','/static/img/linux/linux_openstack_edit_safe_strategy.png','/static/img/linux/linux_openstack_edit_safe_strategy.png',0,'alvin',curdate());
insert into Content values(2190,19,'p',223,'{}','        分别添加TCP和UDP的允许规则：','        分别添加TCP和UDP的允许规则：',0,'alvin',curdate());
insert into Content values(2191,19,'image',224,'{"alt": "add_allow_rule", "class": ["attachment-full"], "height": "232", "src": "/static/img/linux/linux_openstack_add_allow_rule.png", "width": "796"}','/static/img/linux/linux_openstack_add_allow_rule.png','/static/img/linux/linux_openstack_add_allow_rule.png',0,'alvin',curdate());
insert into Content values(2192,19,'p',225,'{}','        成功登录到云主机实例中（默认帐号为"cirros"，密码为："cubswin:)"）：','        成功登录到云主机实例中（默认帐号为"cirros"，密码为："cubswin:)"）：',0,'alvin',curdate());
insert into Content values(2193,19,'pre',226,'{"class": ["prettyprint", "lang-bash"]}','[root@openstack ~]# ssh cirros@192.168.10.52
The authenticity of host \'192.168.10.52 (192.168.10.52)\' can\'t be established.
RSA key fingerprint is 12:ef:c7:fb:57:70:fc:60:88:8c:96:13:38:b1:f6:65.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added \'192.168.10.52\' (RSA) to the list of known hosts.
cirros@192.168.10.52\'s password: 
$
','[root@openstack ~]# ssh cirros@192.168.10.52
The authenticity of host \'192.168.10.52 (192.168.10.52)\' can\'t be established.
RSA key fingerprint is 12:ef:c7:fb:57:70:fc:60:88:8c:96:13:38:b1:f6:65.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added \'192.168.10.52\' (RSA) to the list of known hosts.
cirros@192.168.10.52\'s password: 
$
',0,'alvin',curdate());
insert into Content values(2194,19,'p',227,'{}','        查看云主机实例的网络情况：','        查看云主机实例的网络情况：',0,'alvin',curdate());
insert into Content values(2195,19,'pre',228,'{"class": ["prettyprint", "lang-bash"]}','$ ip a 
1: lo:  mtu 16436 qdisc noqueue 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0:  mtu 1500 qdisc pfifo_fast qlen 1000
    link/ether fa:16:3e:4f:1c:97 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.51/24 brd 10.10.10.255 scope global eth0
    inet6 fe80::f816:3eff:fe4f:1c97/64 scope link 
       valid_lft forever preferred_lft forever
','$ ip a 
1: lo:  mtu 16436 qdisc noqueue 
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
2: eth0:  mtu 1500 qdisc pfifo_fast qlen 1000
    link/ether fa:16:3e:4f:1c:97 brd ff:ff:ff:ff:ff:ff
    inet 10.10.10.51/24 brd 10.10.10.255 scope global eth0
    inet6 fe80::f816:3eff:fe4f:1c97/64 scope link 
       valid_lft forever preferred_lft forever
',0,'alvin',curdate());
insert into Content values(2196,19,'p',229,'{}','        挂载刚刚创建的云硬盘设备：','        挂载刚刚创建的云硬盘设备：',0,'alvin',curdate());
insert into Content values(2197,19,'pre',230,'{"class": ["prettyprint", "lang-bash"]}','$ df -h
Filesystem                Size      Used Available Use% Mounted on
/dev                    494.3M         0    494.3M   0% /dev
/dev/vda1                23.2M     18.0M      4.0M  82% /
tmpfs                   497.8M         0    497.8M   0% /dev/shm
tmpfs                   200.0K     68.0K    132.0K  34% /run
$ mkdir disk
$ sudo mkfs.ext4 /dev/vdb
mke2fs 1.42.2 (27-Mar-2012)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
655360 inodes, 2621440 blocks
131072 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=2684354560
80 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done 
$ sudo mount /dev/vdb disk/
$ df -h
Filesystem                Size      Used Available Use% Mounted on
/dev                    494.3M         0    494.3M   0% /dev
/dev/vda1                23.2M     18.0M      4.0M  82% /
tmpfs                   497.8M         0    497.8M   0% /dev/shm
tmpfs                   200.0K     68.0K    132.0K  34% /run
/dev/vdb                  9.8G    150.5M      9.2G   2% /home/cirros/disk
','$ df -h
Filesystem                Size      Used Available Use% Mounted on
/dev                    494.3M         0    494.3M   0% /dev
/dev/vda1                23.2M     18.0M      4.0M  82% /
tmpfs                   497.8M         0    497.8M   0% /dev/shm
tmpfs                   200.0K     68.0K    132.0K  34% /run
$ mkdir disk
$ sudo mkfs.ext4 /dev/vdb
mke2fs 1.42.2 (27-Mar-2012)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
Stride=0 blocks, Stripe width=0 blocks
655360 inodes, 2621440 blocks
131072 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=2684354560
80 block groups
32768 blocks per group, 32768 fragments per group
8192 inodes per group
Superblock backups stored on blocks: 
    32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (32768 blocks): done
Writing superblocks and filesystem accounting information: done 
$ sudo mount /dev/vdb disk/
$ df -h
Filesystem                Size      Used Available Use% Mounted on
/dev                    494.3M         0    494.3M   0% /dev
/dev/vda1                23.2M     18.0M      4.0M  82% /
tmpfs                   497.8M         0    497.8M   0% /dev/shm
tmpfs                   200.0K     68.0K    132.0K  34% /run
/dev/vdb                  9.8G    150.5M      9.2G   2% /home/cirros/disk
',0,'alvin',curdate());
insert into Content values(2198,20,'h1_span',1,'{}',' <span class="color_h1">  Linux </span> 使用OpenLDAP部署目录服务',' <span class="color_h1">  Linux </span> 使用OpenLDAP部署目录服务',0,'alvin',curdate());
insert into Content values(2199,20,'line',2,'{}','','',0,'alvin',curdate());
insert into Content values(2200,20,'p',3,'{}','        通过部署目录服务实现对系统帐户的集中式管理，相比于X.500协议具有更快的查询速度、更少的消耗资源等优势。','        通过部署目录服务实现对系统帐户的集中式管理，相比于X.500协议具有更快的查询速度、更少的消耗资源等优势。',0,'alvin',curdate());
insert into Content values(2201,20,'h2',4,'{}','了解目录服务','了解目录服务',0,'alvin',curdate());
insert into Content values(2202,20,'p',5,'{}','        回忆前面所学的章节，我们发现其实目录可以被理解成是一种为查询、浏览或搜索的数据库，但数据库又分为了目录数据库和关系数据库，目录数据库主要用于存储较小的信息（如姓名、电话、主机名等），同时具有很好的读性能，但在写性能方面比较差，所以不适合存放那些需要经常修改的数据。','        回忆前面所学的章节，我们发现其实目录可以被理解成是一种为查询、浏览或搜索的数据库，但数据库又分为了目录数据库和关系数据库，目录数据库主要用于存储较小的信息（如姓名、电话、主机名等），同时具有很好的读性能，但在写性能方面比较差，所以不适合存放那些需要经常修改的数据。',0,'alvin',curdate());
insert into Content values(2203,20,'p',6,'{}','        目录服务则是由目录数据库和一套能够访问和处理数据库信息的协议组成的服务协议，用于集中的管理主机帐号密码，员工名字等数据，大大的提升了管理工作效率。轻量级目录访问协议LDAP(Lightweight Directory Access Protocol)是在目录访问协议X.500的基础上研发的，主要的优势是：','        目录服务则是由目录数据库和一套能够访问和处理数据库信息的协议组成的服务协议，用于集中的管理主机帐号密码，员工名字等数据，大大的提升了管理工作效率。轻量级目录访问协议LDAP(Lightweight Directory Access Protocol)是在目录访问协议X.500的基础上研发的，主要的优势是：',0,'alvin',curdate());
insert into Content values(2204,20,'p',7,'{}','        X.500目录协议功能非常臃肿，消耗大量资源，无法做到快速查询且不支持TCP/IP协议网络。','        X.500目录协议功能非常臃肿，消耗大量资源，无法做到快速查询且不支持TCP/IP协议网络。',0,'alvin',curdate());
insert into Content values(2205,20,'p',8,'{}','        LDAP采用树状结构存储数据（类似于前面学习的DNS服务程序），用于在IP网络层面实现对分布式目录的访问和管理操作，条目是LDAP协议中最基本的元素，可以想象成字典中的单词或者数据库中的记录，通常对LDAP服务程序的添加、删除、更改、搜索都是以条目为基本对象的。','        LDAP采用树状结构存储数据（类似于前面学习的DNS服务程序），用于在IP网络层面实现对分布式目录的访问和管理操作，条目是LDAP协议中最基本的元素，可以想象成字典中的单词或者数据库中的记录，通常对LDAP服务程序的添加、删除、更改、搜索都是以条目为基本对象的。',0,'alvin',curdate());
insert into Content values(2206,20,'image',9,'{"alt": "ldap_structure", "class": ["attachment-full"], "height": "432", "src": "/static/img/linux/linux_openldap_ldap_structure.png", "width": "676"}','/static/img/linux/linux_openldap_ldap_structure.png','/static/img/linux/linux_openldap_ldap_structure.png',0,'alvin',curdate());
insert into Content values(2207,20,'p',10,'{}','        dn:每个条目的唯一标识符，如上图中linuxprobe的dn值是：','        dn:每个条目的唯一标识符，如上图中linuxprobe的dn值是：',0,'alvin',curdate());
insert into Content values(2208,20,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','cn=linuxprobe,ou=marketing,ou=people,dc=mydomain,dc=org','cn=linuxprobe,ou=marketing,ou=people,dc=mydomain,dc=org',0,'alvin',curdate());
insert into Content values(2209,20,'p',12,'{}','        rdn:一般为dn值中最左侧的部分，如上图中linuxprobe的rdn值是：','        rdn:一般为dn值中最左侧的部分，如上图中linuxprobe的rdn值是：',0,'alvin',curdate());
insert into Content values(2210,20,'pre',13,'{"class": ["prettyprint", "lang-bash"]}','cn=linuxprobe','cn=linuxprobe',0,'alvin',curdate());
insert into Content values(2211,20,'p',14,'{}','        base DN:此为基准DN值，表示顶层的根部，上图中的base DN值是：','        base DN:此为基准DN值，表示顶层的根部，上图中的base DN值是：',0,'alvin',curdate());
insert into Content values(2212,20,'pre',15,'{"class": ["prettyprint", "lang-bash"]}','dc=mydomain,dc=org','dc=mydomain,dc=org',0,'alvin',curdate());
insert into Content values(2213,20,'p',16,'{}','        而每个条目可以有多个属性（如姓名、地址、电话等），每个属性中会保存着对象名称与对应值，LDAP已经为运维人员对常见的对象定义了属性，其中有：','        而每个条目可以有多个属性（如姓名、地址、电话等），每个属性中会保存着对象名称与对应值，LDAP已经为运维人员对常见的对象定义了属性，其中有：',0,'alvin',curdate());
insert into Content values(2214,20,'table',17,'{"class": ["table", "table-bordered", "table-striped"]}','属性名称	属性别名	语法	描述	值（举例）
commonName	cn	Directory String	名字	sean
surname	sn	Directory String	姓氏	Chow
organizationalUnitName	ou	Directory String	单位（部门）名称	IT_SECTION
organization	o	Directory String	组织（公司）名称	linuxprobe
telephoneNumber		Telephone Number	电话号码	911
objectClass			内置属性	organizationalPerson','属性名称	属性别名	语法	描述	值（举例）
commonName	cn	Directory String	名字	sean
surname	sn	Directory String	姓氏	Chow
organizationalUnitName	ou	Directory String	单位（部门）名称	IT_SECTION
organization	o	Directory String	组织（公司）名称	linuxprobe
telephoneNumber		Telephone Number	电话号码	911
objectClass			内置属性	organizationalPerson',0,'alvin',curdate());
insert into Content values(2215,20,'h2',18,'{}','目录服务实验','目录服务实验',0,'alvin',curdate());
insert into Content values(2216,20,'p',19,'{}','        OpenLdap是基于LDAP协议的开源程序，它的程序名称叫做slapd，本次实验需要用到两台主机：','        OpenLdap是基于LDAP协议的开源程序，它的程序名称叫做slapd，本次实验需要用到两台主机：',0,'alvin',curdate());
insert into Content values(2217,20,'table',20,'{"class": ["table", "table-bordered", "table-striped"]}','主机名称	操作系统	IP地址
LDAP服务端(instructor.linuxprobe.com)	红帽RHEL7操作系统	192.168.10.10
LDAP客户端	红帽RHEL7操作系统	192.168.10.20','主机名称	操作系统	IP地址
LDAP服务端(instructor.linuxprobe.com)	红帽RHEL7操作系统	192.168.10.10
LDAP客户端	红帽RHEL7操作系统	192.168.10.20',0,'alvin',curdate());
insert into Content values(2218,20,'h3',21,'{}','配置LDAP服务端','配置LDAP服务端',0,'alvin',curdate());
insert into Content values(2219,20,'p',22,'{}','        安装openldap与相关的软件包：','        安装openldap与相关的软件包：',0,'alvin',curdate());
insert into Content values(2220,20,'pre',23,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install -y openldap openldap-clients openldap-servers migrationtools
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分安装过程………………
Installing:
 migrationtools          noarch        47-15.el7             rhel7         26 k
 openldap-clients        x86_64        2.4.39-3.el7          rhel7        183 k
 openldap-servers        x86_64        2.4.39-3.el7          rhel7        2.1 M
………………省略部分安装过程………………
Complete!
','[root@linuxprobe ~]# yum install -y openldap openldap-clients openldap-servers migrationtools
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分安装过程………………
Installing:
 migrationtools          noarch        47-15.el7             rhel7         26 k
 openldap-clients        x86_64        2.4.39-3.el7          rhel7        183 k
 openldap-servers        x86_64        2.4.39-3.el7          rhel7        2.1 M
………………省略部分安装过程………………
Complete!
',0,'alvin',curdate());
insert into Content values(2221,20,'p',24,'{}','        生成密钥文件（记下生成出的值，后面要用）：','        生成密钥文件（记下生成出的值，后面要用）：',0,'alvin',curdate());
insert into Content values(2222,20,'pre',25,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# slappasswd -s linuxprobe -n > /etc/openldap/passwd
[root@linuxprobe ~]# cat /etc/openldap/passwd 
{SSHA}v/GJvGG8SbIuCxhfTDVhkmWEuz2afNIR
','[root@linuxprobe ~]# slappasswd -s linuxprobe -n > /etc/openldap/passwd
[root@linuxprobe ~]# cat /etc/openldap/passwd 
{SSHA}v/GJvGG8SbIuCxhfTDVhkmWEuz2afNIR
',0,'alvin',curdate());
insert into Content values(2223,20,'p',26,'{}','        写入一条主机与IP地址的解析记录：','        写入一条主机与IP地址的解析记录：',0,'alvin',curdate());
insert into Content values(2224,20,'pre',27,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# echo "192.168.10.10 instructor.linuxprobe.com" >> /etc/hosts
','[root@linuxprobe ~]# echo "192.168.10.10 instructor.linuxprobe.com" >> /etc/hosts
',0,'alvin',curdate());
insert into Content values(2225,20,'p',28,'{}','        因为LDAP目录服务是以明文的方式在网络中传输数据的（包括密码），这样真的很不安全，所以我们采用TLS加密机制来解决这个问题，使用openssl工具生成X509格式的证书文件（有效期为365天）：','        因为LDAP目录服务是以明文的方式在网络中传输数据的（包括密码），这样真的很不安全，所以我们采用TLS加密机制来解决这个问题，使用openssl工具生成X509格式的证书文件（有效期为365天）：',0,'alvin',curdate());
insert into Content values(2226,20,'pre',29,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@linuxprobe ~]# openssl req -new -x509 -nodes -out /etc/openldap/certs/cert.pem -keyout /etc/openldap/certs/priv.pem -days 365
Generating a 2048 bit RSA private key
..........................................+++
..............................................................+++
writing new private key to \'/etc/openldap/certs/priv.pem\'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter \'.\', the field will be left blank.
-----
Country Name (2 letter code) [XX]:敲击回车
State or Province Name (full name) []:敲击回车
Locality Name (eg, city) [Default City]:敲击回车
Organization Name (eg, company) [Default Company Ltd]:敲击回车
Organizational Unit Name (eg, section) []:敲击回车
Common Name (eg, your name or your server hostname) []:instructor.linuxprobe.com
Email Address []:敲击回车
[/cc]
','[cc lang="bash"]
[root@linuxprobe ~]# openssl req -new -x509 -nodes -out /etc/openldap/certs/cert.pem -keyout /etc/openldap/certs/priv.pem -days 365
Generating a 2048 bit RSA private key
..........................................+++
..............................................................+++
writing new private key to \'/etc/openldap/certs/priv.pem\'
-----
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter \'.\', the field will be left blank.
-----
Country Name (2 letter code) [XX]:敲击回车
State or Province Name (full name) []:敲击回车
Locality Name (eg, city) [Default City]:敲击回车
Organization Name (eg, company) [Default Company Ltd]:敲击回车
Organizational Unit Name (eg, section) []:敲击回车
Common Name (eg, your name or your server hostname) []:instructor.linuxprobe.com
Email Address []:敲击回车
[/cc]
',0,'alvin',curdate());
insert into Content values(2227,20,'p',30,'{}','        修改证书的所属与权限：','        修改证书的所属与权限：',0,'alvin',curdate());
insert into Content values(2228,20,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /etc/openldap/certs/
[root@linuxprobe certs]# chown ldap:ldap *
[root@linuxprobe certs]# chmod 600 priv.pem
[root@linuxprobe certs]# ls -al
total 8
drwxr-xr-x. 2 root root 36 Oct 5 13:41 .
drwxr-xr-x. 5 root root 100 Oct 5 13:39 ..
-rw-r--r--. 1 ldap ldap 1318 Oct 5 13:41 cert.pem
-rw-------. 1 ldap ldap 1704 Oct 5 13:41 priv.pem
','[root@linuxprobe ~]# cd /etc/openldap/certs/
[root@linuxprobe certs]# chown ldap:ldap *
[root@linuxprobe certs]# chmod 600 priv.pem
[root@linuxprobe certs]# ls -al
total 8
drwxr-xr-x. 2 root root 36 Oct 5 13:41 .
drwxr-xr-x. 5 root root 100 Oct 5 13:39 ..
-rw-r--r--. 1 ldap ldap 1318 Oct 5 13:41 cert.pem
-rw-------. 1 ldap ldap 1704 Oct 5 13:41 priv.pem
',0,'alvin',curdate());
insert into Content values(2229,20,'p',32,'{}','        复制一份LDAP的配置模板：','        复制一份LDAP的配置模板：',0,'alvin',curdate());
insert into Content values(2230,20,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
','[root@linuxprobe ~]# cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG
',0,'alvin',curdate());
insert into Content values(2231,20,'p',34,'{}','        生成数据库文件（不用担心报错信息）：','        生成数据库文件（不用担心报错信息）：',0,'alvin',curdate());
insert into Content values(2232,20,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# slaptest 
5610aaa9 hdb_db_open: database "dc=my-domain,dc=com": db_open(/var/lib/ldap/id2entry.bdb) failed: No such file or directory (2).
5610aaa9 backend_startup_one (type=hdb, suffix="dc=my-domain,dc=com"): bi_db_open failed! (2)
slap_startup failed (test would succeed using the -u switch)
','[root@linuxprobe ~]# slaptest 
5610aaa9 hdb_db_open: database "dc=my-domain,dc=com": db_open(/var/lib/ldap/id2entry.bdb) failed: No such file or directory (2).
5610aaa9 backend_startup_one (type=hdb, suffix="dc=my-domain,dc=com"): bi_db_open failed! (2)
slap_startup failed (test would succeed using the -u switch)
',0,'alvin',curdate());
insert into Content values(2233,20,'p',36,'{}','        修改LDAP数据库的所属主与组：','        修改LDAP数据库的所属主与组：',0,'alvin',curdate());
insert into Content values(2234,20,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# chown ldap:ldap /var/lib/ldap/*
','[root@linuxprobe ~]# chown ldap:ldap /var/lib/ldap/*
',0,'alvin',curdate());
insert into Content values(2235,20,'p',38,'{}','        启动slapd服务程序并设置为开机启动：','        启动slapd服务程序并设置为开机启动：',0,'alvin',curdate());
insert into Content values(2236,20,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@linuxprobe ~]# systemctl restart slapd
[root@linuxprobe ~]# systemctl enable slapd
ln -s \'/usr/lib/systemd/system/slapd.service\' \'/etc/systemd/system/multi-user.target.wants/slapd.service\'
[/cc]
','[cc lang="bash"]
[root@linuxprobe ~]# systemctl restart slapd
[root@linuxprobe ~]# systemctl enable slapd
ln -s \'/usr/lib/systemd/system/slapd.service\' \'/etc/systemd/system/multi-user.target.wants/slapd.service\'
[/cc]
',0,'alvin',curdate());
insert into Content values(2237,20,'p',40,'{}','        在LDAP目录服务中使用LDIF(LDAP Interchange Format)格式来保存信息，而LDIF是一种标准的文本文件且可以随意的导入导出，所以我们需要有一种“格式”标准化LDIF文件的写法，这中格式叫做“schema”，schema用于指定一个目录中所包含对象的类型，以及每一个类型中的可选属性，我们可以将schema理解为面向对象程序设计中的“类”，通过“类”定义出具体的对象，因此其实LDIF数据条目则都是通过schema数据模型创建出来的具体对象：','        在LDAP目录服务中使用LDIF(LDAP Interchange Format)格式来保存信息，而LDIF是一种标准的文本文件且可以随意的导入导出，所以我们需要有一种“格式”标准化LDIF文件的写法，这中格式叫做“schema”，schema用于指定一个目录中所包含对象的类型，以及每一个类型中的可选属性，我们可以将schema理解为面向对象程序设计中的“类”，通过“类”定义出具体的对象，因此其实LDIF数据条目则都是通过schema数据模型创建出来的具体对象：',0,'alvin',curdate());
insert into Content values(2238,20,'table',41,'{"class": ["table", "table-bordered", "table-striped"]}','参数	作用
-x	进行简单认证。
-D	用于绑定服务器的dn。
-h：	目录服务的地址。
-w：	绑定dn的密码。
-f：	使用LDIF文件进行条目添加的文件。','参数	作用
-x	进行简单认证。
-D	用于绑定服务器的dn。
-h：	目录服务的地址。
-w：	绑定dn的密码。
-f：	使用LDIF文件进行条目添加的文件。',0,'alvin',curdate());
insert into Content values(2239,20,'p',42,'{}','        添加cosine和nis模块：','        添加cosine和nis模块：',0,'alvin',curdate());
insert into Content values(2240,20,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cd /etc/openldap/schema/
[root@linuxprobe schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f cosine.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=cosine,cn=schema,cn=config"
[root@linuxprobe schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f nis.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=nis,cn=schema,cn=config"
','[root@linuxprobe ~]# cd /etc/openldap/schema/
[root@linuxprobe schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f cosine.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=cosine,cn=schema,cn=config"
[root@linuxprobe schema]# ldapadd -Y EXTERNAL -H ldapi:/// -D "cn=config" -f nis.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
adding new entry "cn=nis,cn=schema,cn=config"
',0,'alvin',curdate());
insert into Content values(2241,20,'p',44,'{}','        创建/etc/openldap/changes.ldif文件，并将下面的信息复制进去（注意有一处要修改的地方）：','        创建/etc/openldap/changes.ldif文件，并将下面的信息复制进去（注意有一处要修改的地方）：',0,'alvin',curdate());
insert into Content values(2242,20,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/openldap/changes.ldif
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=linuxprobe,dc=com

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=linuxprobe,dc=com

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: 此处输入之前生成的密码（如{SSHA}v/GJvGG8SbIuCxhfTDVhkmWEuz2afNIR）

dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/cert.pem

dn: cn=config
changetype: modify
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/priv.pem

dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: -1

dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=Manager,dc=linuxprobe,dc=com" read by * none
','[root@linuxprobe ~]# vim /etc/openldap/changes.ldif
dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcSuffix
olcSuffix: dc=linuxprobe,dc=com

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootDN
olcRootDN: cn=Manager,dc=linuxprobe,dc=com

dn: olcDatabase={2}hdb,cn=config
changetype: modify
replace: olcRootPW
olcRootPW: 此处输入之前生成的密码（如{SSHA}v/GJvGG8SbIuCxhfTDVhkmWEuz2afNIR）

dn: cn=config
changetype: modify
replace: olcTLSCertificateFile
olcTLSCertificateFile: /etc/openldap/certs/cert.pem

dn: cn=config
changetype: modify
replace: olcTLSCertificateKeyFile
olcTLSCertificateKeyFile: /etc/openldap/certs/priv.pem

dn: cn=config
changetype: modify
replace: olcLogLevel
olcLogLevel: -1

dn: olcDatabase={1}monitor,cn=config
changetype: modify
replace: olcAccess
olcAccess: {0}to * by dn.base="gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth" read by dn.base="cn=Manager,dc=linuxprobe,dc=com" read by * none
',0,'alvin',curdate());
insert into Content values(2243,20,'p',46,'{}','        将新的配置文件更新到slapd服务程序：','        将新的配置文件更新到slapd服务程序：',0,'alvin',curdate());
insert into Content values(2244,20,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/changes.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry "olcDatabase={2}hdb,cn=config"
modifying entry "olcDatabase={2}hdb,cn=config"
modifying entry "olcDatabase={2}hdb,cn=config"
modifying entry "cn=config"
modifying entry "cn=config"
modifying entry "cn=config"
modifying entry "olcDatabase={1}monitor,cn=config"
','[root@linuxprobe ~]# ldapmodify -Y EXTERNAL -H ldapi:/// -f /etc/openldap/changes.ldif
SASL/EXTERNAL authentication started
SASL username: gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth
SASL SSF: 0
modifying entry "olcDatabase={2}hdb,cn=config"
modifying entry "olcDatabase={2}hdb,cn=config"
modifying entry "olcDatabase={2}hdb,cn=config"
modifying entry "cn=config"
modifying entry "cn=config"
modifying entry "cn=config"
modifying entry "olcDatabase={1}monitor,cn=config"
',0,'alvin',curdate());
insert into Content values(2245,20,'p',48,'{}','        创建/etc/openldap/base.ldif文件，并将下面的信息复制进去：','        创建/etc/openldap/base.ldif文件，并将下面的信息复制进去：',0,'alvin',curdate());
insert into Content values(2246,20,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/openldap/base.ldif
dn: dc=linuxprobe,dc=com
dc: linuxprobe
objectClass: top
objectClass: domain

dn: ou=People,dc=linuxprobe,dc=com
ou: People
objectClass: top
objectClass: organizationalUnit

dn: ou=Group,dc=linuxprobe,dc=com
ou: Group
objectClass: top
objectClass: organizationalUnit
','[root@linuxprobe ~]# vim /etc/openldap/base.ldif
dn: dc=linuxprobe,dc=com
dc: linuxprobe
objectClass: top
objectClass: domain

dn: ou=People,dc=linuxprobe,dc=com
ou: People
objectClass: top
objectClass: organizationalUnit

dn: ou=Group,dc=linuxprobe,dc=com
ou: Group
objectClass: top
objectClass: organizationalUnit
',0,'alvin',curdate());
insert into Content values(2247,20,'p',50,'{}','        创建目录的结构服务：','        创建目录的结构服务：',0,'alvin',curdate());
insert into Content values(2248,20,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@linuxprobe ~]# ldapadd -x -w linuxprobe -D cn=Manager,dc=linuxprobe,dc=com -f /etc/openldap/base.ldif
adding new entry "dc=linuxprobe,dc=com"
adding new entry "ou=People,dc=linuxprobe,dc=com"
adding new entry "ou=Group,dc=linuxprobe,dc=com"
[/cc]
','[cc lang="bash"]
[root@linuxprobe ~]# ldapadd -x -w linuxprobe -D cn=Manager,dc=linuxprobe,dc=com -f /etc/openldap/base.ldif
adding new entry "dc=linuxprobe,dc=com"
adding new entry "ou=People,dc=linuxprobe,dc=com"
adding new entry "ou=Group,dc=linuxprobe,dc=com"
[/cc]
',0,'alvin',curdate());
insert into Content values(2249,20,'p',52,'{}','        创建测试用的用户：','        创建测试用的用户：',0,'alvin',curdate());
insert into Content values(2250,20,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# useradd -d /home/ldap ldapuser
','[root@linuxprobe ~]# useradd -d /home/ldap ldapuser
',0,'alvin',curdate());
insert into Content values(2251,20,'p',54,'{}','        设置帐户的迁移（修改第71与74行）：','        设置帐户的迁移（修改第71与74行）：',0,'alvin',curdate());
insert into Content values(2252,20,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /usr/share/migrationtools/migrate_common.ph
$DEFAULT_MAIL_DOMAIN = "linuxprobe.com";
$DEFAULT_BASE = "dc=linuxprobe,dc=com";
','[root@linuxprobe ~]# vim /usr/share/migrationtools/migrate_common.ph
$DEFAULT_MAIL_DOMAIN = "linuxprobe.com";
$DEFAULT_BASE = "dc=linuxprobe,dc=com";
',0,'alvin',curdate());
insert into Content values(2253,20,'p',56,'{}','        将当前系统中的用户迁移至目录服务：','        将当前系统中的用户迁移至目录服务：',0,'alvin',curdate());
insert into Content values(2254,20,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@linuxprobe ~]# cd /usr/share/migrationtools/
[root@linuxprobe migrationtools]# grep ":10[0-9][0-9]" /etc/passwd > passwd
[root@linuxprobe migrationtools]# ./migrate_passwd.pl passwd users.ldif
[root@linuxprobe migrationtools]# ldapadd -x -w linuxprobe -D cn=Manager,dc=linuxprobe,dc=com -f users.ldif
adding new entry "uid=linuxprobe,ou=People,dc=linuxprobe,dc=com"
adding new entry "uid=ldapuser,ou=People,dc=linuxprobe,dc=com"
[/cc]
','[cc lang="bash"]
[root@linuxprobe ~]# cd /usr/share/migrationtools/
[root@linuxprobe migrationtools]# grep ":10[0-9][0-9]" /etc/passwd > passwd
[root@linuxprobe migrationtools]# ./migrate_passwd.pl passwd users.ldif
[root@linuxprobe migrationtools]# ldapadd -x -w linuxprobe -D cn=Manager,dc=linuxprobe,dc=com -f users.ldif
adding new entry "uid=linuxprobe,ou=People,dc=linuxprobe,dc=com"
adding new entry "uid=ldapuser,ou=People,dc=linuxprobe,dc=com"
[/cc]
',0,'alvin',curdate());
insert into Content values(2255,20,'p',58,'{}','        将当前系统中的用户组迁移至目录服务：','        将当前系统中的用户组迁移至目录服务：',0,'alvin',curdate());
insert into Content values(2256,20,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@linuxprobe migrationtools]# grep ":10[0-9][0-9]" /etc/group > group
[root@linuxprobe migrationtools]# ./migrate_group.pl group groups.ldif
[root@linuxprobe migrationtools]# ldapadd -x -w linuxprobe -D cn=Manager,dc=linuxprobe,dc=com -f groups.ldif
adding new entry "cn=linuxprobe,ou=Group,dc=linuxprobe,dc=com"
adding new entry "cn=ldapuser,ou=Group,dc=linuxprobe,dc=com"
[/cc]
','[cc lang="bash"]
[root@linuxprobe migrationtools]# grep ":10[0-9][0-9]" /etc/group > group
[root@linuxprobe migrationtools]# ./migrate_group.pl group groups.ldif
[root@linuxprobe migrationtools]# ldapadd -x -w linuxprobe -D cn=Manager,dc=linuxprobe,dc=com -f groups.ldif
adding new entry "cn=linuxprobe,ou=Group,dc=linuxprobe,dc=com"
adding new entry "cn=ldapuser,ou=Group,dc=linuxprobe,dc=com"
[/cc]
',0,'alvin',curdate());
insert into Content values(2257,20,'p',60,'{}','        测试linuxprobe用户的配置文件：','        测试linuxprobe用户的配置文件：',0,'alvin',curdate());
insert into Content values(2258,20,'pre',61,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# ldapsearch -x cn=ldapuser -b dc=linuxprobe,dc=com
# extended LDIF
#
# LDAPv3
# base <dc=linuxprobe,dc=com> with scope subtree
# filter: cn=ldapuser
# requesting: ALL
#

# ldapuser, People, linuxprobe.com
dn: uid=ldapuser,ou=People,dc=linuxprobe,dc=com
uid: ldapuser
cn: ldapuser
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
userPassword:: e2NyeXB0fSQ2JFdtcXFveHFIJFFNaU1pZDAuL01KLnBrR1ZKLkdVSVlWalguTXh
 xLlB5Uk1IeGJseGdkVTBwOUxwcTBJT2huYnkwNFkzdXh1Zi9QaWFpUUtlLk0wUHdQNFpxRXJQV0cv
shadowLastChange: 16713
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
uidNumber: 1001
gidNumber: 1001
homeDirectory: /home/ldapuser

# ldapuser, Group, linuxprobe.com
dn: cn=ldapuser,ou=Group,dc=linuxprobe,dc=com
objectClass: posixGroup
objectClass: top
cn: ldapuser
userPassword:: e2NyeXB0fXg=
gidNumber: 1001

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
','[root@linuxprobe ~]# ldapsearch -x cn=ldapuser -b dc=linuxprobe,dc=com
# extended LDIF
#
# LDAPv3
# base <dc=linuxprobe,dc=com> with scope subtree
# filter: cn=ldapuser
# requesting: ALL
#

# ldapuser, People, linuxprobe.com
dn: uid=ldapuser,ou=People,dc=linuxprobe,dc=com
uid: ldapuser
cn: ldapuser
objectClass: account
objectClass: posixAccount
objectClass: top
objectClass: shadowAccount
userPassword:: e2NyeXB0fSQ2JFdtcXFveHFIJFFNaU1pZDAuL01KLnBrR1ZKLkdVSVlWalguTXh
 xLlB5Uk1IeGJseGdkVTBwOUxwcTBJT2huYnkwNFkzdXh1Zi9QaWFpUUtlLk0wUHdQNFpxRXJQV0cv
shadowLastChange: 16713
shadowMin: 0
shadowMax: 99999
shadowWarning: 7
loginShell: /bin/bash
uidNumber: 1001
gidNumber: 1001
homeDirectory: /home/ldapuser

# ldapuser, Group, linuxprobe.com
dn: cn=ldapuser,ou=Group,dc=linuxprobe,dc=com
objectClass: posixGroup
objectClass: top
cn: ldapuser
userPassword:: e2NyeXB0fXg=
gidNumber: 1001

# search result
search: 2
result: 0 Success

# numResponses: 3
# numEntries: 2
',0,'alvin',curdate());
insert into Content values(2259,20,'p',62,'{}','        安装httpd服务程序：','        安装httpd服务程序：',0,'alvin',curdate());
insert into Content values(2260,20,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# yum install httpd
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分安装过程………………
Installing:
 httpd               x86_64         2.4.6-17.el7            rhel7         1.2 M
Installing for dependencies:
 apr                 x86_64         1.4.8-3.el7             rhel7         103 k
 apr-util            x86_64         1.5.2-6.el7             rhel7          92 k
 httpd-tools         x86_64         2.4.6-17.el7            rhel7          77 k
 mailcap             noarch         2.1.41-2.el7            rhel7          31 k
………………省略部分安装过程………………
Complete!
','[root@linuxprobe ~]# yum install httpd
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分安装过程………………
Installing:
 httpd               x86_64         2.4.6-17.el7            rhel7         1.2 M
Installing for dependencies:
 apr                 x86_64         1.4.8-3.el7             rhel7         103 k
 apr-util            x86_64         1.5.2-6.el7             rhel7          92 k
 httpd-tools         x86_64         2.4.6-17.el7            rhel7          77 k
 mailcap             noarch         2.1.41-2.el7            rhel7          31 k
………………省略部分安装过程………………
Complete!
',0,'alvin',curdate());
insert into Content values(2261,20,'p',64,'{}','        将密钥文件上传至网站目录：','        将密钥文件上传至网站目录：',0,'alvin',curdate());
insert into Content values(2262,20,'pre',65,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# cp /etc/openldap/certs/cert.pem /var/www/html
','[root@linuxprobe ~]# cp /etc/openldap/certs/cert.pem /var/www/html
',0,'alvin',curdate());
insert into Content values(2263,20,'p',66,'{}','        将httpd服务程序重启，并添加到开机启动项：','        将httpd服务程序重启，并添加到开机启动项：',0,'alvin',curdate());
insert into Content values(2264,20,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[cc lang="bash"]
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# systemctl enable httpd
ln -s \'/usr/lib/systemd/system/httpd.service\' \'/etc/systemd/system/multi-user.target.wants/httpd.service\'
[/cc]
','[cc lang="bash"]
[root@linuxprobe ~]# systemctl restart httpd
[root@linuxprobe ~]# systemctl enable httpd
ln -s \'/usr/lib/systemd/system/httpd.service\' \'/etc/systemd/system/multi-user.target.wants/httpd.service\'
[/cc]
',0,'alvin',curdate());
insert into Content values(2265,20,'p',68,'{}','        清空防火墙的规则并保存状态：','        清空防火墙的规则并保存状态：',0,'alvin',curdate());
insert into Content values(2266,20,'pre',69,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# iptables -F
success
[root@linuxprobe ~]# service iptables save
success
','[root@linuxprobe ~]# iptables -F
success
[root@linuxprobe ~]# service iptables save
success
',0,'alvin',curdate());
insert into Content values(2267,20,'p',70,'{}','        在日志记录服务的配置文件中追加下面语句，并重启日志服务：','        在日志记录服务的配置文件中追加下面语句，并重启日志服务：',0,'alvin',curdate());
insert into Content values(2268,20,'pre',71,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/rsyslog.conf
local4.* /var/log/ldap.log
[root@linuxprobe ~]# systemctl restart rsyslog
','[root@linuxprobe ~]# vim /etc/rsyslog.conf
local4.* /var/log/ldap.log
[root@linuxprobe ~]# systemctl restart rsyslog
',0,'alvin',curdate());
insert into Content values(2269,20,'h3',72,'{}','配置LDAP客户端','配置LDAP客户端',0,'alvin',curdate());
insert into Content values(2270,20,'p',73,'{}','        将LDAP服务端主机名与IP地址的解析记录写入：','        将LDAP服务端主机名与IP地址的解析记录写入：',0,'alvin',curdate());
insert into Content values(2271,20,'pre',74,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# echo "192.168.10.10 instructor.linuxprobe.com" >> /etc/hosts
','[root@linuxprobe ~]# echo "192.168.10.10 instructor.linuxprobe.com" >> /etc/hosts
',0,'alvin',curdate());
insert into Content values(2272,20,'p',75,'{}','        安装相关的软件包：','        安装相关的软件包：',0,'alvin',curdate());
insert into Content values(2273,20,'pre',76,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe Desktop]#  yum install openldap-clients nss-pam-ldapd authconfig-gtk pam_krb5
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分的安装过程………………
Installing:
 authconfig-gtk          x86_64        6.2.8-8.el7            rhel        105 k
 nss-pam-ldapd           x86_64        0.8.13-8.el7           rhel        159 k
 openldap-clients        x86_64        2.4.39-3.el7           rhel        183 k
 pam_krb5                x86_64        2.4.8-4.el7            rhel        158 k
Installing for dependencies:
 nscd                    x86_64        2.17-55.el7            rhel        250 k
………………省略部分的安装过程………………
Complete!
','[root@linuxprobe Desktop]#  yum install openldap-clients nss-pam-ldapd authconfig-gtk pam_krb5
Loaded plugins: langpacks, product-id, subscription-manager
………………省略部分的安装过程………………
Installing:
 authconfig-gtk          x86_64        6.2.8-8.el7            rhel        105 k
 nss-pam-ldapd           x86_64        0.8.13-8.el7           rhel        159 k
 openldap-clients        x86_64        2.4.39-3.el7           rhel        183 k
 pam_krb5                x86_64        2.4.8-4.el7            rhel        158 k
Installing for dependencies:
 nscd                    x86_64        2.17-55.el7            rhel        250 k
………………省略部分的安装过程………………
Complete!
',0,'alvin',curdate());
insert into Content values(2274,20,'p',77,'{}','        运行系统认证工具，并填写LDAP服务信息：','        运行系统认证工具，并填写LDAP服务信息：',0,'alvin',curdate());
insert into Content values(2275,20,'pre',78,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# system-config-authentication
','[root@linuxprobe ~]# system-config-authentication
',0,'alvin',curdate());
insert into Content values(2276,20,'image',79,'{"alt": "openldap_settings1", "class": ["attachment-full"], "height": "832", "src": "/static/img/linux/linux_openldap_settings1.png", "width": "676"}','/static/img/linux/linux_openldap_settings1.png','/static/img/linux/linux_openldap_settings1.png',0,'alvin',curdate());
insert into Content values(2277,20,'p',80,'{}','        填写证书地址：','        填写证书地址：',0,'alvin',curdate());
insert into Content values(2278,20,'image',81,'{"alt": "openldap_settings2", "class": ["attachment-full"], "height": "482", "src": "/static/img/linux/linux_openldap_settings2.png", "width": "676"}','/static/img/linux/linux_openldap_settings2.png','/static/img/linux/linux_openldap_settings2.png',0,'alvin',curdate());
insert into Content values(2279,20,'p',82,'{}','        稍等片刻后，验证本地是否已经有了ldapuser用户：','        稍等片刻后，验证本地是否已经有了ldapuser用户：',0,'alvin',curdate());
insert into Content values(2280,20,'pre',83,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# id ldapuser
uid=1001(ldapuser) gid=1001(ldapuser) groups=1001(ldapuser)
','[root@linuxprobe ~]# id ldapuser
uid=1001(ldapuser) gid=1001(ldapuser) groups=1001(ldapuser)
',0,'alvin',curdate());
insert into Content values(2281,20,'p',84,'{}','        此时说明已经可以通过LDAP服务端验证了，并且ldapuser用户的帐号信息也不会保存在您本地的/etc/passwd文件中~','        此时说明已经可以通过LDAP服务端验证了，并且ldapuser用户的帐号信息也不会保存在您本地的/etc/passwd文件中~',0,'alvin',curdate());
insert into Content values(2282,20,'h2',85,'{}','自动挂载用户目录','自动挂载用户目录',0,'alvin',curdate());
insert into Content values(2283,20,'p',86,'{}','        虽然在客户端已经能够使用LDAP验证帐户了，但是当切换到ldapuser用户时会提示没有该用户的家目录：','        虽然在客户端已经能够使用LDAP验证帐户了，但是当切换到ldapuser用户时会提示没有该用户的家目录：',0,'alvin',curdate());
insert into Content values(2284,20,'pre',87,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# su - ldapuser
su: warning: cannot change directory to /home/ldapuser: No such file or directory
mkdir: cannot create directory \'/home/ldapuser\': Permission denied
','[root@linuxprobe ~]# su - ldapuser
su: warning: cannot change directory to /home/ldapuser: No such file or directory
mkdir: cannot create directory \'/home/ldapuser\': Permission denied
',0,'alvin',curdate());
insert into Content values(2285,20,'p',88,'{}','        原因是本机并没有该用户的家目录，我们需要配置NFS服务将用户的家目录自动挂载过来：','        原因是本机并没有该用户的家目录，我们需要配置NFS服务将用户的家目录自动挂载过来：',0,'alvin',curdate());
insert into Content values(2286,20,'p',89,'{}','        在LDAP服务端添加共享信息（NFS服务程序已经默认安装，我们之前学过还记得吗？）：','        在LDAP服务端添加共享信息（NFS服务程序已经默认安装，我们之前学过还记得吗？）：',0,'alvin',curdate());
insert into Content values(2287,20,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/exports
/home/ldap 192.168.10.20 (rw,sync,root_squash)
','[root@linuxprobe ~]# vim /etc/exports
/home/ldap 192.168.10.20 (rw,sync,root_squash)
',0,'alvin',curdate());
insert into Content values(2288,20,'p',91,'{}','        重启nfs-server服务程序：','        重启nfs-server服务程序：',0,'alvin',curdate());
insert into Content values(2289,20,'pre',92,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# systemctl restart nfs-server
','[root@linuxprobe ~]# systemctl restart nfs-server
',0,'alvin',curdate());
insert into Content values(2290,20,'p',93,'{}','        在LDAP客户端查看共享信息：','        在LDAP客户端查看共享信息：',0,'alvin',curdate());
insert into Content values(2291,20,'pre',94,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ldap]# showmount -e 192.168.10.10
Export list for 192.168.10.10:
/home/ldap 192.168.10.20
','[root@linuxprobe ldap]# showmount -e 192.168.10.10
Export list for 192.168.10.10:
/home/ldap 192.168.10.20
',0,'alvin',curdate());
insert into Content values(2292,20,'p',95,'{}','        将共享目录挂载到本地：','        将共享目录挂载到本地：',0,'alvin',curdate());
insert into Content values(2293,20,'pre',96,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# mkdir /home/ldap
[root@linuxprobe ldap]# mount -t nfs 192.168.10.10:/home/ldap /home/ldap
','[root@linuxprobe ~]# mkdir /home/ldap
[root@linuxprobe ldap]# mount -t nfs 192.168.10.10:/home/ldap /home/ldap
',0,'alvin',curdate());
insert into Content values(2294,20,'p',97,'{}','        再次尝试切换到ldapuser用户，这样非常顺利：','        再次尝试切换到ldapuser用户，这样非常顺利：',0,'alvin',curdate());
insert into Content values(2295,20,'pre',98,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ldap]# su - ldapuser
Last login: Tue Oct  6 11:51:25 CST 2015 on pts/3
[ldapuser@linuxprobe ~]$
','[root@linuxprobe ldap]# su - ldapuser
Last login: Tue Oct  6 11:51:25 CST 2015 on pts/3
[ldapuser@linuxprobe ~]$
',0,'alvin',curdate());
insert into Content values(2296,20,'p',99,'{}','        设置为开机自动挂载：','        设置为开机自动挂载：',0,'alvin',curdate());
insert into Content values(2297,20,'pre',100,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# vim /etc/fstab
192.168.10.10:/home/ldap /home/ldap nfs defaults 0 0
','[root@linuxprobe ~]# vim /etc/fstab
192.168.10.10:/home/ldap /home/ldap nfs defaults 0 0
',0,'alvin',curdate());
insert into Content values(2298,21,'h1',1,'{}','Shell 简介','Shell 简介',0,'alvin',curdate());
insert into Content values(2299,21,'p',2,'{}','强大好用的Shell(Bash4)','强大好用的Shell(Bash4)',0,'alvin',curdate());
insert into Content values(2300,21,'p',3,'{}','        通常来讲，计算机硬件是由运算器、控制器、存储器、输入/输出设备等共同组成的，而让各种硬件设备各司其职且又能协同运行的就是系统内核。Linux系统的内核负责完成对硬件资源的分配、调度等管理任务。由此可见，系统内核对计算机的正常运行来讲是太重要了，因此一般不建议直接去编辑内核中的参数，而是让用户通过基于系统调用接口开发出的程序或服务来管理计算机，以满足日常工作的需要。','        通常来讲，计算机硬件是由运算器、控制器、存储器、输入/输出设备等共同组成的，而让各种硬件设备各司其职且又能协同运行的就是系统内核。Linux系统的内核负责完成对硬件资源的分配、调度等管理任务。由此可见，系统内核对计算机的正常运行来讲是太重要了，因此一般不建议直接去编辑内核中的参数，而是让用户通过基于系统调用接口开发出的程序或服务来管理计算机，以满足日常工作的需要。',0,'alvin',curdate());
insert into Content values(2301,21,'p',4,'{}','        必须肯定的是，Linux系统中有些图形化工具(比如逻辑卷管理器[Logical Volume Manager,LVM])确实非常好用，极大地降低了运维人员操作出错的概率，值得称赞。但是，很多图形化工具其实是调用了脚本来完成相应的工作，往往只是为了完成某种工作来设计的，缺乏Linux命令原有的灵活性及可控性。再者，图形化工具相较于Linux命令行界面会更加消耗系统资源，因此经验丰富的运维人员甚至都不会给Linux系统安装图形界面，需要开始运维工作时直接通过命令行模式远程连接过去，不得不说这样做确实挺高效的。','        必须肯定的是，Linux系统中有些图形化工具(比如逻辑卷管理器[Logical Volume Manager,LVM])确实非常好用，极大地降低了运维人员操作出错的概率，值得称赞。但是，很多图形化工具其实是调用了脚本来完成相应的工作，往往只是为了完成某种工作来设计的，缺乏Linux命令原有的灵活性及可控性。再者，图形化工具相较于Linux命令行界面会更加消耗系统资源，因此经验丰富的运维人员甚至都不会给Linux系统安装图形界面，需要开始运维工作时直接通过命令行模式远程连接过去，不得不说这样做确实挺高效的。',0,'alvin',curdate());
insert into Content values(2302,21,'p',5,'{}','        Shell就是这样的一个命令行工具。Shell(也称终端或壳)充当的是人与内核(硬件)之间的翻译官，用户把一些命令\'告诉终端\'，它就会调用相应的程序服务去完成某些工作。现在包括红帽系统在内的许多主流Linux系统默认使用的终端是Bash(Bourne-Again Shell)解释器。主流Linux系统选择Bash解释器作为命令行终端主要有以下4项优势:','        Shell就是这样的一个命令行工具。Shell(也称终端或壳)充当的是人与内核(硬件)之间的翻译官，用户把一些命令\'告诉终端\'，它就会调用相应的程序服务去完成某些工作。现在包括红帽系统在内的许多主流Linux系统默认使用的终端是Bash(Bourne-Again Shell)解释器。主流Linux系统选择Bash解释器作为命令行终端主要有以下4项优势:',0,'alvin',curdate());
insert into Content values(2303,21,'ul',6,'{}','通过上下方向键来调取过往执行过的Linux命令；
命令或参数仅需输入前几位就可以用Tab键补全；
具有强大的批处理脚本；
具有实用的环境变量功能；','通过上下方向键来调取过往执行过的Linux命令；
命令或参数仅需输入前几位就可以用Tab键补全；
具有强大的批处理脚本；
具有实用的环境变量功能；',0,'alvin',curdate());
insert into Content values(2304,22,'h1',1,'{}','Shell 变量','Shell 变量',0,'alvin',curdate());
insert into Content values(2305,22,'p',2,'{}','变量是计算机系统用于保存可变值的数据类型。','变量是计算机系统用于保存可变值的数据类型。',0,'alvin',curdate());
insert into Content values(2306,22,'p',3,'{}','运行shell时，会同时存在三种变量：','运行shell时，会同时存在三种变量：',0,'alvin',curdate());
insert into Content values(2307,22,'ol',4,'{}','局部变量 : 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
环境变量 : 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
shell变量 : shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。','局部变量 : 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
环境变量 : 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
shell变量 : shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行。',0,'alvin',curdate());
insert into Content values(2308,22,'p',5,'{}','定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：','定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：',0,'alvin',curdate());
insert into Content values(2309,22,'pre',6,'{"class": ["prettyprint", "lang-bash"]}','your_name="test.com"','your_name="test.com"',0,'alvin',curdate());
insert into Content values(2310,22,'p',7,'{}','注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：','注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：',0,'alvin',curdate());
insert into Content values(2311,22,'ul',8,'{}','命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
中间不能有空格，可以使用下划线（_）。
不能使用标点符号。
不能使用bash里的关键字（可用help命令查看保留关键字）。','命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。
中间不能有空格，可以使用下划线（_）。
不能使用标点符号。
不能使用bash里的关键字（可用help命令查看保留关键字）。',0,'alvin',curdate());
insert into Content values(2312,22,'p',9,'{}','有效的 Shell 变量名示例如下：','有效的 Shell 变量名示例如下：',0,'alvin',curdate());
insert into Content values(2313,22,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','RUNOOB
LD_LIBRARY_PATH
_var
var2
','RUNOOB
LD_LIBRARY_PATH
_var
var2
',0,'alvin',curdate());
insert into Content values(2314,22,'p',11,'{}','无效的变量命名：','无效的变量命名：',0,'alvin',curdate());
insert into Content values(2315,22,'pre',12,'{"class": ["prettyprint", "lang-bash"]}','?var=123
user*name=runoob
','?var=123
user*name=runoob
',0,'alvin',curdate());
insert into Content values(2316,22,'p',13,'{}','除了显式地直接赋值，还可以用语句给变量赋值，如：','除了显式地直接赋值，还可以用语句给变量赋值，如：',0,'alvin',curdate());
insert into Content values(2317,22,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','for file in `ls /etc`
或
for file in $(ls /etc)
','for file in `ls /etc`
或
for file in $(ls /etc)
',0,'alvin',curdate());
insert into Content values(2318,22,'p',15,'{}','以上语句将 /etc 下目录的文件名循环出来。','以上语句将 /etc 下目录的文件名循环出来。',0,'alvin',curdate());
insert into Content values(2319,22,'line',16,'{}','','',0,'alvin',curdate());
insert into Content values(2320,22,'h3',17,'{}','使用变量','使用变量',0,'alvin',curdate());
insert into Content values(2321,22,'p',18,'{}','使用一个定义过的变量，只要在变量名前面加美元符号即可，如：','使用一个定义过的变量，只要在变量名前面加美元符号即可，如：',0,'alvin',curdate());
insert into Content values(2322,22,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','your_name="qinjx"
echo $your_name
echo ${your_name}
','your_name="qinjx"
echo $your_name
echo ${your_name}
',0,'alvin',curdate());
insert into Content values(2323,22,'p',20,'{}','变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：','变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：',0,'alvin',curdate());
insert into Content values(2324,22,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','for skill in Ada Coffe Action Java; do
    echo "I am good at ${skill}Script"
done
','for skill in Ada Coffe Action Java; do
    echo "I am good at ${skill}Script"
done
',0,'alvin',curdate());
insert into Content values(2325,22,'p',22,'{}','如果不给skill变量加花括号，写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。','如果不给skill变量加花括号，写成echo "I am good at $skillScript"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。',0,'alvin',curdate());
insert into Content values(2326,22,'p',23,'{}','推荐给所有变量加上花括号，这是个好的编程习惯。','推荐给所有变量加上花括号，这是个好的编程习惯。',0,'alvin',curdate());
insert into Content values(2327,22,'p',24,'{}','已定义的变量，可以被重新定义，如：','已定义的变量，可以被重新定义，如：',0,'alvin',curdate());
insert into Content values(2328,22,'pre',25,'{"class": ["prettyprint", "lang-bash"]}','your_name="tom"
echo $your_name
your_name="alibaba"
echo $your_name
','your_name="tom"
echo $your_name
your_name="alibaba"
echo $your_name
',0,'alvin',curdate());
insert into Content values(2329,22,'p',26,'{}','这样写是合法的，但注意，第二次赋值的时候不能写$your_name="alibaba"，使用变量的时候才加美元符（$）。','这样写是合法的，但注意，第二次赋值的时候不能写$your_name="alibaba"，使用变量的时候才加美元符（$）。',0,'alvin',curdate());
insert into Content values(2330,22,'line',27,'{}','','',0,'alvin',curdate());
insert into Content values(2331,22,'h3',28,'{}','只读变量','只读变量',0,'alvin',curdate());
insert into Content values(2332,22,'p',29,'{}','使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。','使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。',0,'alvin',curdate());
insert into Content values(2333,22,'p',30,'{}','下面的例子尝试更改只读变量，结果报错：','下面的例子尝试更改只读变量，结果报错：',0,'alvin',curdate());
insert into Content values(2334,22,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash

myUrl="http://www.google.com"
readonly myUrl
myUrl="http://www.runoob.com"
','#!/bin/bash

myUrl="http://www.google.com"
readonly myUrl
myUrl="http://www.runoob.com"
',0,'alvin',curdate());
insert into Content values(2335,22,'p',32,'{}','运行脚本，结果如下：','运行脚本，结果如下：',0,'alvin',curdate());
insert into Content values(2336,22,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','/bin/sh: NAME: This variable is read only.
','/bin/sh: NAME: This variable is read only.
',0,'alvin',curdate());
insert into Content values(2337,23,'h1',1,'{}','Shell 环境变量','Shell 环境变量',0,'alvin',curdate());
insert into Content values(2338,23,'p',2,'{}','环境变量是用来定义系统运行环境的一些参数，并允许将数据存储在内存中。比如每个用户不同的家目录、邮件存放位置等。','环境变量是用来定义系统运行环境的一些参数，并允许将数据存储在内存中。比如每个用户不同的家目录、邮件存放位置等。',0,'alvin',curdate());
insert into Content values(2339,23,'p',3,'{}','设置全局环境变量的命令格式：','设置全局环境变量的命令格式：',0,'alvin',curdate());
insert into Content values(2340,23,'pre',4,'{"class": ["prettyprint", "lang-bash"]}','export 变量名=值      # 注意在设置环境变量的时候，[变量=值]之间不能添加空格，要不然shell会把它当做一个单独的命令执行 

或者

变量名=值
export 变量名        # 注意export 命令中不需要$符号 
','export 变量名=值      # 注意在设置环境变量的时候，[变量=值]之间不能添加空格，要不然shell会把它当做一个单独的命令执行 

或者

变量名=值
export 变量名        # 注意export 命令中不需要$符号 
',0,'alvin',curdate());
insert into Content values(2341,23,'p',5,'{}','为了通过环境变量帮助Linux系统构建起能够为用户提供服务的工作运行环境，需要数    百个变量协同工作才能完成。您当然没有必要去把每一个变量都看一遍，而应该在最宝贵的书籍中为读者精讲最重要的内容。为了更好地帮助大家理解变量的作用，刘遄老师给大家举个例子。前文中曾经讲到，在Linux系统中一切都是文件，Linux命令也不例外。那么，在用户执行了一条命令之后，Linux系统中到底发生了什么事情呢？简单来说，命令在Linux中的执行分为4个步骤。','为了通过环境变量帮助Linux系统构建起能够为用户提供服务的工作运行环境，需要数    百个变量协同工作才能完成。您当然没有必要去把每一个变量都看一遍，而应该在最宝贵的书籍中为读者精讲最重要的内容。为了更好地帮助大家理解变量的作用，刘遄老师给大家举个例子。前文中曾经讲到，在Linux系统中一切都是文件，Linux命令也不例外。那么，在用户执行了一条命令之后，Linux系统中到底发生了什么事情呢？简单来说，命令在Linux中的执行分为4个步骤。',0,'alvin',curdate());
insert into Content values(2342,23,'ul',6,'{}','1、判断用户是否以绝对路径或相对路径的方式输入命令（如/bin/ls），如果是的话则直接执行。
 2、Linux系统检查用户输入的命令是否为“别名命令”，即用一个自定义的命令名称来替换原本的命令名称。可以用alias命令来创建一个属于自己的命令别名，格式为“alias别名=命令”。若要取消一个命令别名，则是用unalias命令，格式为“unalias别名”。我们之前在使用rm命令删除文件时，Linux系统都会要求我们再确认是否执行删除操作，其实这就是Linux系统为了防止用户误删除文件而特意设置的rm别名命令，接下来我们把它取消掉： <pre class="prettyprint lang-bash">[root@linuxprobe ~]# ls anaconda-ks.cfg Documents initial-setup-ks.cfg Pictures Templates Desktop Downloads Music Public Videos [root@linuxprobe ~]# rm anaconda-ks.cfg rm:remove regular file ‘anaconda-ks.cfg’? y [root@linuxprobe ~]# alias rm alias rm=\'rm -i\'[root@linuxprobe ~]# unalias rm [root@linuxprobe ~]# rm initial-setup-ks.cfg [root@linuxprobe ~]#    </pre>
3、Bash解释器判断用户输入的是内部命令还是外部命令。内部命令是解释器内部的指令，会被直接执行；而用户在绝大部分时间输入的是外部命令，这些命令交由步骤4继续处理。可以使用“type命令名称”来判断用户输入的命令是内部命令还是外部命令。
 4、系统在多个路径中查找用户输入的命令文件，而定义这些路径的变量叫作PATH，可以简单地把它理解成是“解释器的小助手”，作用是告诉Bash解释器待执行的命令可能存放的位置，然后Bash解释器就会乖乖地在这些位置中逐个查找。PATH是由多个路径值组成的变量，每个路径值之间用冒号间隔，对这些路径的增加和删除操作将影响到Bash解释器对Linux命令的查找。 <pre class="prettyprint lang-bash">[root@linuxprobe ~]# echo $PATH /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin [root@linuxprobe ~]# PATH=$PATH:/root/bin [root@linuxprobe ~]# echo $PATH /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/root/bin</pre>','1、判断用户是否以绝对路径或相对路径的方式输入命令（如/bin/ls），如果是的话则直接执行。
 2、Linux系统检查用户输入的命令是否为“别名命令”，即用一个自定义的命令名称来替换原本的命令名称。可以用alias命令来创建一个属于自己的命令别名，格式为“alias别名=命令”。若要取消一个命令别名，则是用unalias命令，格式为“unalias别名”。我们之前在使用rm命令删除文件时，Linux系统都会要求我们再确认是否执行删除操作，其实这就是Linux系统为了防止用户误删除文件而特意设置的rm别名命令，接下来我们把它取消掉： <pre class="prettyprint lang-bash">[root@linuxprobe ~]# ls anaconda-ks.cfg Documents initial-setup-ks.cfg Pictures Templates Desktop Downloads Music Public Videos [root@linuxprobe ~]# rm anaconda-ks.cfg rm:remove regular file ‘anaconda-ks.cfg’? y [root@linuxprobe ~]# alias rm alias rm=\'rm -i\'[root@linuxprobe ~]# unalias rm [root@linuxprobe ~]# rm initial-setup-ks.cfg [root@linuxprobe ~]#    </pre>
3、Bash解释器判断用户输入的是内部命令还是外部命令。内部命令是解释器内部的指令，会被直接执行；而用户在绝大部分时间输入的是外部命令，这些命令交由步骤4继续处理。可以使用“type命令名称”来判断用户输入的命令是内部命令还是外部命令。
 4、系统在多个路径中查找用户输入的命令文件，而定义这些路径的变量叫作PATH，可以简单地把它理解成是“解释器的小助手”，作用是告诉Bash解释器待执行的命令可能存放的位置，然后Bash解释器就会乖乖地在这些位置中逐个查找。PATH是由多个路径值组成的变量，每个路径值之间用冒号间隔，对这些路径的增加和删除操作将影响到Bash解释器对Linux命令的查找。 <pre class="prettyprint lang-bash">[root@linuxprobe ~]# echo $PATH /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin [root@linuxprobe ~]# PATH=$PATH:/root/bin [root@linuxprobe ~]# echo $PATH /usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/root/bin</pre>',0,'alvin',curdate());
insert into Content values(2343,23,'line',7,'{}','','',0,'alvin',curdate());
insert into Content values(2344,23,'h3',8,'{}','PATH全局环境变量','PATH全局环境变量',0,'alvin',curdate());
insert into Content values(2345,23,'p',9,'{}','修改PATH环境变量：','修改PATH环境变量：',0,'alvin',curdate());
insert into Content values(2346,23,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','PATH=$PATH:新加目录','PATH=$PATH:新加目录',0,'alvin',curdate());
insert into Content values(2347,23,'p',11,'{}',' BOLD[  这里有比较经典的问题：“为什么不能将当前目录（.）添加到PATH中呢?”原因是，尽管可以将当前目录（.）添加到PATH变量中，从而在某些情况下可以让用户免去输入命令所在路径的麻烦。但是，如果黑客在比较常用的公共目录/tmp中存放了一个与ls或cd命令同名的木马文件，而用户又恰巧在公共目录中执行了这些命令，那么就极有可能中招了。 ]BOLD',' BOLD[  这里有比较经典的问题：“为什么不能将当前目录（.）添加到PATH中呢?”原因是，尽管可以将当前目录（.）添加到PATH变量中，从而在某些情况下可以让用户免去输入命令所在路径的麻烦。但是，如果黑客在比较常用的公共目录/tmp中存放了一个与ls或cd命令同名的木马文件，而用户又恰巧在公共目录中执行了这些命令，那么就极有可能中招了。 ]BOLD',0,'alvin',curdate());
insert into Content values(2348,23,'p',12,'{}','所以，作为一名态度谨慎、有经验的运维人员，在接手了一台Linux系统后一定会在执    行命令前先检查PATH变量中是否有可疑的目录，另外读者从前面的PATH变量示例中是否也感觉到环境变量特别有用呢。','所以，作为一名态度谨慎、有经验的运维人员，在接手了一台Linux系统后一定会在执    行命令前先检查PATH变量中是否有可疑的目录，另外读者从前面的PATH变量示例中是否也感觉到环境变量特别有用呢。',0,'alvin',curdate());
insert into Content values(2349,23,'line',13,'{}','','',0,'alvin',curdate());
insert into Content values(2350,23,'h3',14,'{}','Linux 系统中最重要的10个环境变量','Linux 系统中最重要的10个环境变量',0,'alvin',curdate());
insert into Content values(2351,23,'table',15,'{"class": ["table", "table-bordered", "table-striped"]}','变量名称	作用
HOME	用户的主目录（即家目录）
SHELL	用户在使用的Shell解释器名称
HISTSIZE	输出的历史命令记录条数
HISTFILESIZE	保存的历史命令记录条数
MAIL	邮件保存路径
LANG	系统语言、语系名称
RANDOM	生成一个随机数字
PS1	Bash解释器的提示符
PATH	定义解释器搜索用户执行命令的路径
EDITOR	用户默认的文本编辑器','变量名称	作用
HOME	用户的主目录（即家目录）
SHELL	用户在使用的Shell解释器名称
HISTSIZE	输出的历史命令记录条数
HISTFILESIZE	保存的历史命令记录条数
MAIL	邮件保存路径
LANG	系统语言、语系名称
RANDOM	生成一个随机数字
PS1	Bash解释器的提示符
PATH	定义解释器搜索用户执行命令的路径
EDITOR	用户默认的文本编辑器',0,'alvin',curdate());
insert into Content values(2352,23,'p',16,'{}','Linux作为一个多用户多任务的操作系统，能够为每个用户提供独立的、合适的工作运行    环境，因此，一个相同的变量会因为用户身份的不同而具有不同的值。例如，我们使用下述命令来查看HOME变量在不同用户身份下都有哪些值（su是用于切换用户身份的命令，将在下文跟大家见面）：','Linux作为一个多用户多任务的操作系统，能够为每个用户提供独立的、合适的工作运行    环境，因此，一个相同的变量会因为用户身份的不同而具有不同的值。例如，我们使用下述命令来查看HOME变量在不同用户身份下都有哪些值（su是用于切换用户身份的命令，将在下文跟大家见面）：',0,'alvin',curdate());
insert into Content values(2353,23,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','[root@linuxprobe ~]# echo $HOME 
/root 
[root@linuxprobe ~]# su - linuxprobe 
Last login: Fri Feb 27 19:49:57 CST 2017 on pts/0
[linuxprobe@linuxprobe ~]$ echo $HOME 
/home/linuxprobe
','[root@linuxprobe ~]# echo $HOME 
/root 
[root@linuxprobe ~]# su - linuxprobe 
Last login: Fri Feb 27 19:49:57 CST 2017 on pts/0
[linuxprobe@linuxprobe ~]$ echo $HOME 
/home/linuxprobe
',0,'alvin',curdate());
insert into Content values(2354,23,'line',18,'{}','','',0,'alvin',curdate());
insert into Content values(2355,23,'h2',19,'{}','环境变量分为：','环境变量分为：',0,'alvin',curdate());
insert into Content values(2356,23,'ul',20,'{}','全局环境变量
本地环境变量','全局环境变量
本地环境变量',0,'alvin',curdate());
insert into Content values(2357,23,'line',21,'{}','','',0,'alvin',curdate());
insert into Content values(2358,23,'h3',22,'{}','全局环境变量','全局环境变量',0,'alvin',curdate());
insert into Content values(2359,23,'p',23,'{}','在当前shell和子shell都可见，可以用printenv和env命令查看全局环境变量，大写表示是系统环境变量，小写表示是普通用户的环境变量。这是bash    shell的一个标准约定，不是必须的，因此在设置新的环境变量的时候我们用小写就行了，用于区分个人和系统环境变量。','在当前shell和子shell都可见，可以用printenv和env命令查看全局环境变量，大写表示是系统环境变量，小写表示是普通用户的环境变量。这是bash    shell的一个标准约定，不是必须的，因此在设置新的环境变量的时候我们用小写就行了，用于区分个人和系统环境变量。',0,'alvin',curdate());
insert into Content values(2360,23,'p',24,'{}','如下例：','如下例：',0,'alvin',curdate());
insert into Content values(2361,23,'pre',25,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 ~]# printenv
或 
[root@CentOS6 ~]# env
TERM=linux
SHELL=/bin/bash
HISTSIZE=1000
SSH_CLIENT=172.18.251.124 8132 22
QTDIR=/usr/lib64/qt-3.3
QTINC=/usr/lib64/qt-3.3/include
SSH_TTY=/dev/pts/4
name=hello        # 自己定义的环境变量
USER=root
LS_COLORS=...
MAIL=/var/spool/mail/root
PATH=/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
PWD=/root
LANG=en_US.UTF-8
PS1=[\[\e[33m\]\u@\[\e[34m\]\h \[\e[m\]\W]\$ \[\e[m\]
SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
HISTCONTROL=ignoredups
PS2=\[\e[34m\]> \[\e[m\]
SHLVL=1
HOME=/root
LOGNAME=root
QTLIB=/usr/lib64/qt-3.3/lib
CVS_RSH=ssh
SSH_CONNECTION=172.18.251.124 8132 172.18.250.183 22
LESSOPEN=||/usr/bin/lesspipe.sh %s
DISPLAY=localhost:12.0
G_BROKEN_FILENAMES=1
_=/usr/bin/printenv','[root@CentOS6 ~]# printenv
或 
[root@CentOS6 ~]# env
TERM=linux
SHELL=/bin/bash
HISTSIZE=1000
SSH_CLIENT=172.18.251.124 8132 22
QTDIR=/usr/lib64/qt-3.3
QTINC=/usr/lib64/qt-3.3/include
SSH_TTY=/dev/pts/4
name=hello        # 自己定义的环境变量
USER=root
LS_COLORS=...
MAIL=/var/spool/mail/root
PATH=/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin
PWD=/root
LANG=en_US.UTF-8
PS1=[\[\e[33m\]\u@\[\e[34m\]\h \[\e[m\]\W]\$ \[\e[m\]
SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass
HISTCONTROL=ignoredups
PS2=\[\e[34m\]> \[\e[m\]
SHLVL=1
HOME=/root
LOGNAME=root
QTLIB=/usr/lib64/qt-3.3/lib
CVS_RSH=ssh
SSH_CONNECTION=172.18.251.124 8132 172.18.250.183 22
LESSOPEN=||/usr/bin/lesspipe.sh %s
DISPLAY=localhost:12.0
G_BROKEN_FILENAMES=1
_=/usr/bin/printenv',0,'alvin',curdate());
insert into Content values(2362,23,'p',26,'{}','大部分变量都是在登录主shell时设置的','大部分变量都是在登录主shell时设置的',0,'alvin',curdate());
insert into Content values(2363,23,'line',27,'{}','','',0,'alvin',curdate());
insert into Content values(2364,23,'h3',28,'{}','本地环境变量','本地环境变量',0,'alvin',curdate());
insert into Content values(2365,23,'p',29,'{}','只在当前shell中可见，可以通过set命令查看，不过set命令查看的是所有环境变量（全局和本地）','只在当前shell中可见，可以通过set命令查看，不过set命令查看的是所有环境变量（全局和本地）',0,'alvin',curdate());
insert into Content values(2366,23,'line',30,'{}','','',0,'alvin',curdate());
insert into Content values(2367,23,'h3',31,'{}','删除变量','删除变量',0,'alvin',curdate());
insert into Content values(2368,23,'p',32,'{}','使用 unset 命令可以删除变量。语法：','使用 unset 命令可以删除变量。语法：',0,'alvin',curdate());
insert into Content values(2369,23,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','unset variable_name
','unset variable_name
',0,'alvin',curdate());
insert into Content values(2370,23,'ul',34,'{}','变量被删除后不能再次使用。unset 命令不能删除只读变量。
如果在子shell下删除全局环境变量，删除操作只对子shell有效，如果回到父shell下，该全局变量还能引用','变量被删除后不能再次使用。unset 命令不能删除只读变量。
如果在子shell下删除全局环境变量，删除操作只对子shell有效，如果回到父shell下，该全局变量还能引用',0,'alvin',curdate());
insert into Content values(2371,23,'p',35,'{}',' <b>  实例 </b>',' <b>  实例 </b>',0,'alvin',curdate());
insert into Content values(2372,23,'pre',36,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/sh
myUrl="http://www.runoob.com"
unset myUrl
echo $myUrl
','#!/bin/sh
myUrl="http://www.runoob.com"
unset myUrl
echo $myUrl
',0,'alvin',curdate());
insert into Content values(2373,23,'p',37,'{}','以上实例执行将没有任何输出。','以上实例执行将没有任何输出。',0,'alvin',curdate());
insert into Content values(2374,23,'line',38,'{}','','',0,'alvin',curdate());
insert into Content values(2375,23,'h3',39,'{}','设置系统环境变量的相关文件','设置系统环境变量的相关文件',0,'alvin',curdate());
insert into Content values(2376,23,'p',40,'{}','系统环境变量是在shell启动过程中执行相关的文件定义的。这些文件被称为shell启动文件。','系统环境变量是在shell启动过程中执行相关的文件定义的。这些文件被称为shell启动文件。',0,'alvin',curdate());
insert into Content values(2377,23,'p',41,'{}','shell分为四种shell:','shell分为四种shell:',0,'alvin',curdate());
insert into Content values(2378,23,'ul',42,'{}','登录式shell
非登录式shell
交互式shell
非交互式shell','登录式shell
非登录式shell
交互式shell
非交互式shell',0,'alvin',curdate());
insert into Content values(2379,23,'strong',43,'{}',' 我们在设置系统环境变量的时候，我们要区分不同shell的区别，    （登录/非登录和交互/非交互只是划分的标准不一样）只有弄清除了不同模式的shell才能正确修改相应的shell启动文件以至于能够正确设置系统环境变量。',' 我们在设置系统环境变量的时候，我们要区分不同shell的区别，    （登录/非登录和交互/非交互只是划分的标准不一样）只有弄清除了不同模式的shell才能正确修改相应的shell启动文件以至于能够正确设置系统环境变量。',0,'alvin',curdate());
insert into Content values(2380,23,'h4',44,'{}','1、登录式shell','1、登录式shell',0,'alvin',curdate());
insert into Content values(2381,23,'p',45,'{}','登录式shell是用户需要输入用户名和密码的shell，该模式的shell启动过程中会依次执行下列文件:','登录式shell是用户需要输入用户名和密码的shell，该模式的shell启动过程中会依次执行下列文件:',0,'alvin',curdate());
insert into Content values(2382,23,'pre',46,'{"class": ["prettyprint", "lang-bash"]}','/etc/profile    # 登录bash shell的默认主启动文件。任何用户登录shell都会执行此启动文件。不建议修改
~/.bash_profile
~/.bash_login
~/.profile      # 上诉这三个$HOME启动文件是定义对应用户的环境变量。不同linux发行版使用的文件不同  
','/etc/profile    # 登录bash shell的默认主启动文件。任何用户登录shell都会执行此启动文件。不建议修改
~/.bash_profile
~/.bash_login
~/.profile      # 上诉这三个$HOME启动文件是定义对应用户的环境变量。不同linux发行版使用的文件不同  
',0,'alvin',curdate());
insert into Content values(2383,23,'p',47,'{}','/etc/profile中的命令和脚本不是我们现在关注的，我们主要来看看export那一行，因此我们可以知道该文件是设置系统全局环境变量    /etc/profile另一个重要的功能就是能够重复执行/etc/profile.d/目录下的文件（大多是.sh和.csh结尾的文件），这些文件大概是特定应用程序的启动文件，能够设置相关应用程序的环境变量，例如/etc/profile.d/lang.*sh    就是用来设置LANG环境变量的。    $HOME启动文件，我的系统用的~/.bash_profile,这些文件都是以.开头，代表了都是隐藏文件，同时是针对特定用户的，因此用户可以修改该文件。','/etc/profile中的命令和脚本不是我们现在关注的，我们主要来看看export那一行，因此我们可以知道该文件是设置系统全局环境变量    /etc/profile另一个重要的功能就是能够重复执行/etc/profile.d/目录下的文件（大多是.sh和.csh结尾的文件），这些文件大概是特定应用程序的启动文件，能够设置相关应用程序的环境变量，例如/etc/profile.d/lang.*sh    就是用来设置LANG环境变量的。    $HOME启动文件，我的系统用的~/.bash_profile,这些文件都是以.开头，代表了都是隐藏文件，同时是针对特定用户的，因此用户可以修改该文件。',0,'alvin',curdate());
insert into Content values(2384,23,'pre',48,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 ~]# cat /etc/profile
# /etc/profile

# System wide environment and startup programs, for login setup
# Functions and aliases go in /etc/bashrc

# It\'s NOT a good idea to change this file unless you know what you
# are doing. It\'s much better to create a custom.sh shell script in
# /etc/profile.d/ to make custom changes to your environment, as this
# will prevent the need for merging in future updates.
...

export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL

...

for i in /etc/profile.d/*.sh ; do
    if [ -r "$i" ]; then
        if [ "${-#*i}" != "$-" ]; then
            . "$i"
        else
            . "$i" >/dev/null 2>&1
        fi
    fi
done

unset i
unset -f pathmunge
[root@CentOS6 ~]#
','[root@CentOS6 ~]# cat /etc/profile
# /etc/profile

# System wide environment and startup programs, for login setup
# Functions and aliases go in /etc/bashrc

# It\'s NOT a good idea to change this file unless you know what you
# are doing. It\'s much better to create a custom.sh shell script in
# /etc/profile.d/ to make custom changes to your environment, as this
# will prevent the need for merging in future updates.
...

export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL

...

for i in /etc/profile.d/*.sh ; do
    if [ -r "$i" ]; then
        if [ "${-#*i}" != "$-" ]; then
            . "$i"
        else
            . "$i" >/dev/null 2>&1
        fi
    fi
done

unset i
unset -f pathmunge
[root@CentOS6 ~]#
',0,'alvin',curdate());
insert into Content values(2385,23,'p',49,'{}','我们看下~/.bash_profile文件下的内容定义PATH的那一行。$HOME文件定义特定用户的PATH=$PATH:$HOME/bin，代表我们可以将可执行文件放在$HOME/bin目录下。','我们看下~/.bash_profile文件下的内容定义PATH的那一行。$HOME文件定义特定用户的PATH=$PATH:$HOME/bin，代表我们可以将可执行文件放在$HOME/bin目录下。',0,'alvin',curdate());
insert into Content values(2386,23,'pre',50,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 profile.d]# cat ~/.bash_profile 
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then
. ~/.bashrc
fi
# User specific environment and startup programs
PATH=$PATH:$HOME/bin
export PATH
','[root@CentOS6 profile.d]# cat ~/.bash_profile 
# .bash_profile
# Get the aliases and functions
if [ -f ~/.bashrc ]; then
. ~/.bashrc
fi
# User specific environment and startup programs
PATH=$PATH:$HOME/bin
export PATH
',0,'alvin',curdate());
insert into Content values(2387,23,'h4',51,'{}','2、非登录式shell','2、非登录式shell',0,'alvin',curdate());
insert into Content values(2388,23,'p',52,'{}',' 登录式shell是需要输入用户名、密码登录的shell，而非登录式shell则是不需要的，例如直接在命令行输入bash、在图形化界面点击open    in terminal开启命令行终端等都是非登录式shell。 另外，对于退出shell的命令exit和logout的区别， BOLD[  exit命令可以退出登录式shell和非登录式shell，logout只能退出登录式shell。 ]BOLD',' 登录式shell是需要输入用户名、密码登录的shell，而非登录式shell则是不需要的，例如直接在命令行输入bash、在图形化界面点击open    in terminal开启命令行终端等都是非登录式shell。 另外，对于退出shell的命令exit和logout的区别， BOLD[  exit命令可以退出登录式shell和非登录式shell，logout只能退出登录式shell。 ]BOLD',0,'alvin',curdate());
insert into Content values(2389,23,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 bin]# bash
[root@CentOS6 bin]# logout
bash: lougout: not login shell: use `exit\'
[root@CentOS6 bin]# exit
exit
','[root@CentOS6 bin]# bash
[root@CentOS6 bin]# logout
bash: lougout: not login shell: use `exit\'
[root@CentOS6 bin]# exit
exit
',0,'alvin',curdate());
insert into Content values(2390,23,'p',54,'{}',' 我们可以通过 BOLD[  $0变量值 ]BOLD 来查看是登录式shell还是非登录式shell，登录式shell会在前面显示‘-’非登录式shell则没有',' 我们可以通过 BOLD[  $0变量值 ]BOLD 来查看是登录式shell还是非登录式shell，登录式shell会在前面显示‘-’非登录式shell则没有',0,'alvin',curdate());
insert into Content values(2391,23,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 bin]# echo $0  # 当前为登录式shell
-bash
[root@CentOS6 bin]# bash
[root@CentOS6 bin]# echo $0  # 当前为非登录式shell
bash
[root@CentOS6 bin]# 
','[root@CentOS6 bin]# echo $0  # 当前为登录式shell
-bash
[root@CentOS6 bin]# bash
[root@CentOS6 bin]# echo $0  # 当前为非登录式shell
bash
[root@CentOS6 bin]# 
',0,'alvin',curdate());
insert into Content values(2392,23,'p',56,'{}',' 在非登录式shell的启动过程中，由于 BOLD[  不需要重复的登录shell， ]BOLD 所以非登录shell只需要执行下列文件即可，    $HOME/.bashrc # 下面的内容说明',' 在非登录式shell的启动过程中，由于 BOLD[  不需要重复的登录shell， ]BOLD 所以非登录shell只需要执行下列文件即可，    $HOME/.bashrc # 下面的内容说明',0,'alvin',curdate());
insert into Content values(2393,23,'pre',57,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 ~]# cat ~/.bashrc 
# .bashrc
# User specific aliases and functions
alias rm=\'rm -i\'
alias cp=\'cp -i\'
alias mv=\'mv -i\'
alias cdnet=\'cd /etc/sysconfig/network-scripts/\'
alias ping=\'ping -c 4\'
# Source global definitions
if [ -f /etc/bashrc ]; then
. /etc/bashrc
fi
','[root@CentOS6 ~]# cat ~/.bashrc 
# .bashrc
# User specific aliases and functions
alias rm=\'rm -i\'
alias cp=\'cp -i\'
alias mv=\'mv -i\'
alias cdnet=\'cd /etc/sysconfig/network-scripts/\'
alias ping=\'ping -c 4\'
# Source global definitions
if [ -f /etc/bashrc ]; then
. /etc/bashrc
fi
',0,'alvin',curdate());
insert into Content values(2394,23,'p',58,'{}','    该$HOME/.bashrc可以定义用户自定义的别名和函数，另外还有引用公共/etc/bashrc下的变量，我们来看看/etc/bashrc文件内容','    该$HOME/.bashrc可以定义用户自定义的别名和函数，另外还有引用公共/etc/bashrc下的变量，我们来看看/etc/bashrc文件内容',0,'alvin',curdate());
insert into Content values(2395,23,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 ~]# cat /etc/bashrc 
# /etc/bashrc

# System wide functions and aliases
# Environment stuff goes in /etc/profile

# It\'s NOT a good idea to change this file unless you know what you
# are doing. It\'s much better to create a custom.sh shell script in
# /etc/profile.d/ to make custom changes to your environment, as this
# will prevent the need for merging in future updates.

# are we an interactive shell?
...

    # Only display echos from profile.d scripts if we are no login shell
    # and interactive - otherwise just process them to set envvars
    for i in /etc/profile.d/*.sh; do
        if [ -r "$i" ]; then
            if [ "$PS1" ]; then
                . "$i"
            else
                . "$i" >/dev/null 2>&1
            fi
        fi
    done

    unset i
    unset pathmunge
fi
# vim:ts=4:sw=4
','[root@CentOS6 ~]# cat /etc/bashrc 
# /etc/bashrc

# System wide functions and aliases
# Environment stuff goes in /etc/profile

# It\'s NOT a good idea to change this file unless you know what you
# are doing. It\'s much better to create a custom.sh shell script in
# /etc/profile.d/ to make custom changes to your environment, as this
# will prevent the need for merging in future updates.

# are we an interactive shell?
...

    # Only display echos from profile.d scripts if we are no login shell
    # and interactive - otherwise just process them to set envvars
    for i in /etc/profile.d/*.sh; do
        if [ -r "$i" ]; then
            if [ "$PS1" ]; then
                . "$i"
            else
                . "$i" >/dev/null 2>&1
            fi
        fi
    done

    unset i
    unset pathmunge
fi
# vim:ts=4:sw=4
',0,'alvin',curdate());
insert into Content values(2396,23,'p',60,'{}','另外该文件也会执行/etc/profile.d/*.sh来设定特定应用程序的环境变量。    其实登录式shell也会执行$HOME/.bashrc，可以回到上面的~/.bash_profile的代码部分，我们会发现该文件中会调用$HOME/.bashrc文件。    这样说可以加深登录式shell和非登录式shell的本质区别。','另外该文件也会执行/etc/profile.d/*.sh来设定特定应用程序的环境变量。    其实登录式shell也会执行$HOME/.bashrc，可以回到上面的~/.bash_profile的代码部分，我们会发现该文件中会调用$HOME/.bashrc文件。    这样说可以加深登录式shell和非登录式shell的本质区别。',0,'alvin',curdate());
insert into Content values(2397,23,'h4',61,'{}','3、交互式shell','3、交互式shell',0,'alvin',curdate());
insert into Content values(2398,23,'p',62,'{}','我们通过终端登录Linux，输入命令，shell执行命令并实时返回结果，退出。这种模式就是交互式shell。    在交互式shell下，bash不会执行/etc/profile文件，代替而之的是$HOME/.bashrc文件,执行的启动文件和非登录式shell一样。    这个文件定义新交互式shell的环境变量，该文件最好不要定义全局环境变量（export），另外该文件也会执行/etc/profile.d/*.sh来设定特定应用程序的环境变量。任何开启交互式子shell(bash、su    - user)的操作都会读取$HOME/.bashrc。','我们通过终端登录Linux，输入命令，shell执行命令并实时返回结果，退出。这种模式就是交互式shell。    在交互式shell下，bash不会执行/etc/profile文件，代替而之的是$HOME/.bashrc文件,执行的启动文件和非登录式shell一样。    这个文件定义新交互式shell的环境变量，该文件最好不要定义全局环境变量（export），另外该文件也会执行/etc/profile.d/*.sh来设定特定应用程序的环境变量。任何开启交互式子shell(bash、su    - user)的操作都会读取$HOME/.bashrc。',0,'alvin',curdate());
insert into Content values(2399,23,'h4',63,'{}','4、非交互式shell','4、非交互式shell',0,'alvin',curdate());
insert into Content values(2400,23,'p',64,'{}',' 和交互式shell相反，该模式下shell不与终端进行交互，例如以shell脚本的方式读取脚本中命令，而不需要与终端交互（除非需要用户输入参数的命令），当文件结束时，该shell也就退出了。    非交互式shell的相关启动文件和系统设置的一个全局环境变量 BOLD[  BASH_ENV ]BOLD 相关。该变量默认情况下没有定义。我们需要手动设置该变量，当执行shell脚本的时候，会执行该变量指向的文件。',' 和交互式shell相反，该模式下shell不与终端进行交互，例如以shell脚本的方式读取脚本中命令，而不需要与终端交互（除非需要用户输入参数的命令），当文件结束时，该shell也就退出了。    非交互式shell的相关启动文件和系统设置的一个全局环境变量 BOLD[  BASH_ENV ]BOLD 相关。该变量默认情况下没有定义。我们需要手动设置该变量，当执行shell脚本的时候，会执行该变量指向的文件。',0,'alvin',curdate());
insert into Content values(2401,23,'p',65,'{}','我们可以利用$-的变量值来查看当前shell是交互式还是非交互式的，如下图：','我们可以利用$-的变量值来查看当前shell是交互式还是非交互式的，如下图：',0,'alvin',curdate());
insert into Content values(2402,23,'pre',66,'{"class": ["prettyprint", "lang-bash"]}','vim tmp.sh
#!/bin/bash
echo $-
','vim tmp.sh
#!/bin/bash
echo $-
',0,'alvin',curdate());
insert into Content values(2403,23,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','[root@CentOS6 bin]# bash tmp.sh
hB                           # 非交互式shell
[root@CentOS6 bin]# echo $-
himBH                        # 交互式shell
[root@CentOS6 bin]#
','[root@CentOS6 bin]# bash tmp.sh
hB                           # 非交互式shell
[root@CentOS6 bin]# echo $-
himBH                        # 交互式shell
[root@CentOS6 bin]#
',0,'alvin',curdate());
insert into Content values(2404,23,'h4',68,'{}','5、 总结','5、 总结',0,'alvin',curdate());
insert into Content values(2405,23,'p',69,'{}','登录式shell,包括依次要执行的启动文件和文件代码部分要调用的文件，对他们概括如下：','登录式shell,包括依次要执行的启动文件和文件代码部分要调用的文件，对他们概括如下：',0,'alvin',curdate());
insert into Content values(2406,23,'image',70,'{"alt": "env1", "class": ["img-responsive"], "height": "100", "src": "/static/img/bash/env_01.png", "width": "900"}','/static/img/bash/env_01.png','/static/img/bash/env_01.png',0,'alvin',curdate());
insert into Content values(2407,23,'p',71,'{}','非登录式shell','非登录式shell',0,'alvin',curdate());
insert into Content values(2408,23,'image',72,'{"alt": "env2", "class": ["img-responsive"], "height": "100", "src": "/static/img/bash/env_02.png", "width": "900"}','/static/img/bash/env_02.png','/static/img/bash/env_02.png',0,'alvin',curdate());
insert into Content values(2409,23,'h5',73,'{}','交互式shell','交互式shell',0,'alvin',curdate());
insert into Content values(2410,23,'p',74,'{}','执行启动文件过程类似于非登录式shell','执行启动文件过程类似于非登录式shell',0,'alvin',curdate());
insert into Content values(2411,23,'h5',75,'{}','非交互式shell','非交互式shell',0,'alvin',curdate());
insert into Content values(2412,23,'p',76,'{}','执行BASH_ENV全局环境变量指向的文件','执行BASH_ENV全局环境变量指向的文件',0,'alvin',curdate());
insert into Content values(2413,23,'p',77,'{}','    知道了这些启动文件的区别后，我们可以针对性的修改启动文件以使自定义的全局环境变量、别名等永久生效，例如我们可以将所有自定义的全局环境变量放在一个.sh结尾的文件中，然后将该文件放到/etc/profile.d/目录下或者将自定义的变量放入/etc/bashrc文件中，这样将对所有的用户都生效。而对于一些针对个人用户的别名等，可以将其写入到~/.bashrc文件中，只对单个用户有效。','    知道了这些启动文件的区别后，我们可以针对性的修改启动文件以使自定义的全局环境变量、别名等永久生效，例如我们可以将所有自定义的全局环境变量放在一个.sh结尾的文件中，然后将该文件放到/etc/profile.d/目录下或者将自定义的变量放入/etc/bashrc文件中，这样将对所有的用户都生效。而对于一些针对个人用户的别名等，可以将其写入到~/.bashrc文件中，只对单个用户有效。',0,'alvin',curdate());
insert into Content values(2414,24,'h1',1,'{}','Shell 字符串','Shell 字符串',0,'alvin',curdate());
insert into Content values(2415,24,'p',2,'{}','字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。','字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。',0,'alvin',curdate());
insert into Content values(2416,24,'h3',3,'{}','单引号','单引号',0,'alvin',curdate());
insert into Content values(2417,24,'pre',4,'{"class": ["prettyprint", "lang-bash"]}','str=\'this is a string\'
','str=\'this is a string\'
',0,'alvin',curdate());
insert into Content values(2418,24,'p',5,'{}','单引号字符串的限制：','单引号字符串的限制：',0,'alvin',curdate());
insert into Content values(2419,24,'ul',6,'{}','单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。','单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。',0,'alvin',curdate());
insert into Content values(2420,24,'h3',7,'{}','双引号','双引号',0,'alvin',curdate());
insert into Content values(2421,24,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','your_name=\'runoob\'
str="Hello, I know you are \"$your_name\"! \n"
echo -e $str
','your_name=\'runoob\'
str="Hello, I know you are \"$your_name\"! \n"
echo -e $str
',0,'alvin',curdate());
insert into Content values(2422,24,'p',9,'{}','输出结果为：','输出结果为：',0,'alvin',curdate());
insert into Content values(2423,24,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','Hello, I know you are "runoob"! 
','Hello, I know you are "runoob"! 
',0,'alvin',curdate());
insert into Content values(2424,24,'p',11,'{}','双引号的优点：','双引号的优点：',0,'alvin',curdate());
insert into Content values(2425,24,'ul',12,'{}','双引号里可以有变量
双引号里可以出现转义字符','双引号里可以有变量
双引号里可以出现转义字符',0,'alvin',curdate());
insert into Content values(2426,24,'h3',13,'{}','拼接字符串','拼接字符串',0,'alvin',curdate());
insert into Content values(2427,24,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','your_name="runoob"
# 使用双引号拼接
greeting="hello, "$your_name" !"
greeting_1="hello, ${your_name} !"
echo $greeting  $greeting_1
# 使用单引号拼接
greeting_2=\'hello, \'$your_name\' !\'
greeting_3=\'hello, ${your_name} !\'
echo $greeting_2  $greeting_3
','your_name="runoob"
# 使用双引号拼接
greeting="hello, "$your_name" !"
greeting_1="hello, ${your_name} !"
echo $greeting  $greeting_1
# 使用单引号拼接
greeting_2=\'hello, \'$your_name\' !\'
greeting_3=\'hello, ${your_name} !\'
echo $greeting_2  $greeting_3
',0,'alvin',curdate());
insert into Content values(2428,24,'p',15,'{}','输出结果为：','输出结果为：',0,'alvin',curdate());
insert into Content values(2429,24,'pre',16,'{"class": ["prettyprint", "lang-bash"]}','hello, runoob ! hello, runoob !
hello, runoob ! hello, ${your_name} !
','hello, runoob ! hello, runoob !
hello, runoob ! hello, ${your_name} !
',0,'alvin',curdate());
insert into Content values(2430,24,'h3',17,'{}','获取字符串长度','获取字符串长度',0,'alvin',curdate());
insert into Content values(2431,24,'pre',18,'{"class": ["prettyprint", "lang-bash"]}','string="abcd"
echo ${#string} #输出 4
','string="abcd"
echo ${#string} #输出 4
',0,'alvin',curdate());
insert into Content values(2432,24,'h3',19,'{}','提取子字符串','提取子字符串',0,'alvin',curdate());
insert into Content values(2433,24,'p',20,'{}',' 以下实例从字符串第 BOLD[  2 ]BOLD 个字符开始截取 BOLD[  4 ]BOLD 个字符：',' 以下实例从字符串第 BOLD[  2 ]BOLD 个字符开始截取 BOLD[  4 ]BOLD 个字符：',0,'alvin',curdate());
insert into Content values(2434,24,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','string="runoob is a great site"
echo ${string:1:4} # 输出 unoo
','string="runoob is a great site"
echo ${string:1:4} # 输出 unoo
',0,'alvin',curdate());
insert into Content values(2435,24,'h3',22,'{}','查找子字符串','查找子字符串',0,'alvin',curdate());
insert into Content values(2436,24,'p',23,'{}',' 查找字符 BOLD[  i ]BOLD 或 BOLD[  o ]BOLD 的位置(哪个字母先出现就计算哪个)：',' 查找字符 BOLD[  i ]BOLD 或 BOLD[  o ]BOLD 的位置(哪个字母先出现就计算哪个)：',0,'alvin',curdate());
insert into Content values(2437,24,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','string="runoob is a great site"
echo `expr index "$string" io`  # 输出 4
','string="runoob is a great site"
echo `expr index "$string" io`  # 输出 4
',0,'alvin',curdate());
insert into Content values(2438,24,'p',25,'{}',' BOLD[  注意： ]BOLD 以上脚本中 <span class="label label-info">  ` </span> 是反引号，而不是单引号 <span class="label label-info">  \' </span> ，不要看错了哦。',' BOLD[  注意： ]BOLD 以上脚本中 <span class="label label-info">  ` </span> 是反引号，而不是单引号 <span class="label label-info">  \' </span> ，不要看错了哦。',0,'alvin',curdate());
insert into Content values(2439,24,'p',26,'{}',' 使用 BOLD[  expr ]BOLD 命令时，表达式中的运算符左右必须包含空格，如果不包含空格，将会输出表达式本身:',' 使用 BOLD[  expr ]BOLD 命令时，表达式中的运算符左右必须包含空格，如果不包含空格，将会输出表达式本身:',0,'alvin',curdate());
insert into Content values(2440,24,'pre',27,'{"class": ["prettyprint", "lang-bash"]}','expr 5+6    // 直接输出 5+6
expr 5 + 6       // 输出 11
','expr 5+6    // 直接输出 5+6
expr 5 + 6       // 输出 11
',0,'alvin',curdate());
insert into Content values(2441,24,'p',28,'{}','对于某些运算符，还需要我们使用符号"\"进行转义，否则就会提示语法错误。','对于某些运算符，还需要我们使用符号"\"进行转义，否则就会提示语法错误。',0,'alvin',curdate());
insert into Content values(2442,24,'pre',29,'{"class": ["prettyprint", "lang-bash"]}','expr 5 * 6       // 输出错误
expr 5 \* 6      // 输出30
','expr 5 * 6       // 输出错误
expr 5 \* 6      // 输出30
',0,'alvin',curdate());
insert into Content values(2443,24,'line',30,'{}','','',0,'alvin',curdate());
insert into Content values(2444,24,'p',31,'{}',' BOLD[  假设有变量 var=http://www.aaa.com/123.htm，实例如下： ]BOLD',' BOLD[  假设有变量 var=http://www.aaa.com/123.htm，实例如下： ]BOLD',0,'alvin',curdate());
insert into Content values(2445,24,'p',32,'{}',' BOLD[  1. # 号截取，从左开始匹配的第一个字符，删除包含匹配字符的所有左边字符，保留右边字符。 ]BOLD',' BOLD[  1. # 号截取，从左开始匹配的第一个字符，删除包含匹配字符的所有左边字符，保留右边字符。 ]BOLD',0,'alvin',curdate());
insert into Content values(2446,24,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','echo ${var#*//}','echo ${var#*//}',0,'alvin',curdate());
insert into Content values(2447,24,'p',34,'{}','其中 var 是变量名，# 号是运算符，*// 表示从左边开始删除第一个 // 号及左边的所有字符','其中 var 是变量名，# 号是运算符，*// 表示从左边开始删除第一个 // 号及左边的所有字符',0,'alvin',curdate());
insert into Content values(2448,24,'p',35,'{}','即删除 http://','即删除 http://',0,'alvin',curdate());
insert into Content values(2449,24,'p',36,'{}','结果是 ：www.aaa.com/123.htm','结果是 ：www.aaa.com/123.htm',0,'alvin',curdate());
insert into Content values(2450,24,'p',37,'{}',' BOLD[  2. ## 号截取，从左开始匹配的最后一个字符，删除包含匹配字符的左边字符，保留右边字符。 ]BOLD',' BOLD[  2. ## 号截取，从左开始匹配的最后一个字符，删除包含匹配字符的左边字符，保留右边字符。 ]BOLD',0,'alvin',curdate());
insert into Content values(2451,24,'pre',38,'{"class": ["prettyprint", "lang-bash"]}','echo ${var##*/}','echo ${var##*/}',0,'alvin',curdate());
insert into Content values(2452,24,'p',39,'{}','##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符','##*/ 表示从左边开始删除最后（最右边）一个 / 号及左边的所有字符',0,'alvin',curdate());
insert into Content values(2453,24,'p',40,'{}','即删除 http://www.aaa.com/','即删除 http://www.aaa.com/',0,'alvin',curdate());
insert into Content values(2454,24,'p',41,'{}','结果是 123.htm','结果是 123.htm',0,'alvin',curdate());
insert into Content values(2455,24,'p',42,'{}',' BOLD[  3. %号截取，从右开始匹配的第一个字符，删除包含匹配字符的右边字符，保留左边字符 ]BOLD',' BOLD[  3. %号截取，从右开始匹配的第一个字符，删除包含匹配字符的右边字符，保留左边字符 ]BOLD',0,'alvin',curdate());
insert into Content values(2456,24,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','echo ${var%/*}','echo ${var%/*}',0,'alvin',curdate());
insert into Content values(2457,24,'p',44,'{}','%/* 表示从右边开始，删除第一个 / 号及右边的字符','%/* 表示从右边开始，删除第一个 / 号及右边的字符',0,'alvin',curdate());
insert into Content values(2458,24,'p',45,'{}','结果是：http://www.aaa.com','结果是：http://www.aaa.com',0,'alvin',curdate());
insert into Content values(2459,24,'p',46,'{}',' BOLD[  4. %% 号截取，从右开始匹配的最后一个字符，删除包含匹配字符的右边字符，保留左边字符 ]BOLD',' BOLD[  4. %% 号截取，从右开始匹配的最后一个字符，删除包含匹配字符的右边字符，保留左边字符 ]BOLD',0,'alvin',curdate());
insert into Content values(2460,24,'pre',47,'{"class": ["prettyprint", "lang-bash"]}','echo ${var%%/*}','echo ${var%%/*}',0,'alvin',curdate());
insert into Content values(2461,24,'p',48,'{}','%%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符','%%/* 表示从右边开始，删除最后（最左边）一个 / 号及右边的字符',0,'alvin',curdate());
insert into Content values(2462,24,'p',49,'{}','结果是：http:','结果是：http:',0,'alvin',curdate());
insert into Content values(2463,24,'p',50,'{}',' BOLD[  5. 从左边第几个字符开始，及字符的个数 ]BOLD',' BOLD[  5. 从左边第几个字符开始，及字符的个数 ]BOLD',0,'alvin',curdate());
insert into Content values(2464,24,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','echo ${var:0:5}','echo ${var:0:5}',0,'alvin',curdate());
insert into Content values(2465,24,'p',52,'{}','其中的 0 表示左边第一个字符开始，5 表示字符的总个数。','其中的 0 表示左边第一个字符开始，5 表示字符的总个数。',0,'alvin',curdate());
insert into Content values(2466,24,'p',53,'{}','结果是：http:','结果是：http:',0,'alvin',curdate());
insert into Content values(2467,24,'p',54,'{}',' BOLD[  6. 从左边第几个字符开始，一直到结束。 ]BOLD',' BOLD[  6. 从左边第几个字符开始，一直到结束。 ]BOLD',0,'alvin',curdate());
insert into Content values(2468,24,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','echo ${var:7}','echo ${var:7}',0,'alvin',curdate());
insert into Content values(2469,24,'p',56,'{}','其中的 7 表示左边第8个字符开始，一直到结束。','其中的 7 表示左边第8个字符开始，一直到结束。',0,'alvin',curdate());
insert into Content values(2470,24,'p',57,'{}','结果是 ：www.aaa.com/123.htm','结果是 ：www.aaa.com/123.htm',0,'alvin',curdate());
insert into Content values(2471,24,'p',58,'{}',' BOLD[  7. 从右边第几个字符开始，及字符的个数 ]BOLD',' BOLD[  7. 从右边第几个字符开始，及字符的个数 ]BOLD',0,'alvin',curdate());
insert into Content values(2472,24,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','echo ${var:0-7}','echo ${var:0-7}',0,'alvin',curdate());
insert into Content values(2473,24,'p',60,'{}','其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数。','其中的 0-7 表示右边算起第七个字符开始，3 表示字符的个数。',0,'alvin',curdate());
insert into Content values(2474,24,'p',61,'{}','结果是：123','结果是：123',0,'alvin',curdate());
insert into Content values(2475,24,'p',62,'{}',' BOLD[  8. 从右边第几个字符开始，一直到结束。 ]BOLD',' BOLD[  8. 从右边第几个字符开始，一直到结束。 ]BOLD',0,'alvin',curdate());
insert into Content values(2476,24,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','string="hello,everyone my name is xiaoming"
expr length "$string"
','string="hello,everyone my name is xiaoming"
expr length "$string"
',0,'alvin',curdate());
insert into Content values(2477,24,'p',64,'{}','表示从右边第七个字符开始，一直到结束。','表示从右边第七个字符开始，一直到结束。',0,'alvin',curdate());
insert into Content values(2478,24,'p',65,'{}','结果是：123.htm','结果是：123.htm',0,'alvin',curdate());
insert into Content values(2479,24,'p',66,'{}',' BOLD[  注： ]BOLD （左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）',' BOLD[  注： ]BOLD （左边的第一个字符是用 0 表示，右边的第一个字符用 0-1 表示）',0,'alvin',curdate());
insert into Content values(2480,24,'p',67,'{}',' BOLD[  9. 计算字符长度也可是使用  <em>   length  </em>  : ]BOLD',' BOLD[  9. 计算字符长度也可是使用  <em>   length  </em>  : ]BOLD',0,'alvin',curdate());
insert into Content values(2481,24,'pre',68,'{"class": ["prettyprint", "lang-bash"]}','string="hello,everyone my name is xiaoming"
expr length "$string"
','string="hello,everyone my name is xiaoming"
expr length "$string"
',0,'alvin',curdate());
insert into Content values(2482,24,'p',69,'{}','输出:34','输出:34',0,'alvin',curdate());
insert into Content values(2483,24,'p',70,'{}',' BOLD[  注意 ]BOLD ：string字符串里边有空格,所以需要添加双引号',' BOLD[  注意 ]BOLD ：string字符串里边有空格,所以需要添加双引号',0,'alvin',curdate());
insert into Content values(2484,24,'p',71,'{}','10. 字符串大小写','10. 字符串大小写',0,'alvin',curdate());
insert into Content values(2485,24,'pre',72,'{}','var="Hello,Word"','var="Hello,Word"',0,'alvin',curdate());
insert into Content values(2486,24,'pre',73,'{"class": ["prettyprint", "lang-bash"]}','echo ${var^}     # 把变量中的第一个字符换成大写 
echo ${var^^}    # 把变量中的所有小写字母，全部替换为大写
echo ${var,}     # 把变量中的第一个字符换成小写
echo ${var,,}    # 把变量中的所有大写字母，全部替换为小写
','echo ${var^}     # 把变量中的第一个字符换成大写 
echo ${var^^}    # 把变量中的所有小写字母，全部替换为大写
echo ${var,}     # 把变量中的第一个字符换成小写
echo ${var,,}    # 把变量中的所有大写字母，全部替换为小写
',0,'alvin',curdate());
insert into Content values(2487,24,'p',74,'{}','输出:','输出:',0,'alvin',curdate());
insert into Content values(2488,24,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','Hello,Word
HELLO,WORD
hello,Word
hello,word
','Hello,Word
HELLO,WORD
hello,Word
hello,word
',0,'alvin',curdate());
insert into Content values(2489,25,'h1',1,'{}','Shell 注释','Shell 注释',0,'alvin',curdate());
insert into Content values(2490,25,'p',2,'{}',' 以 BLUE_BG[  # ]BLUE_BG 开头的行就是注释，会被解释器忽略。',' 以 BLUE_BG[  # ]BLUE_BG 开头的行就是注释，会被解释器忽略。',0,'alvin',curdate());
insert into Content values(2491,25,'p',3,'{}',' 通过每一行加一个 BOLD[  # ]BOLD 号设置多行注释，像这样：',' 通过每一行加一个 BOLD[  # ]BOLD 号设置多行注释，像这样：',0,'alvin',curdate());
insert into Content values(2492,25,'pre',4,'{"class": ["prettyprint", "lang-bash"]}','#--------------------------------------------
# 这是一个注释
# author：菜鸟教程
# site：www.runoob.com
# slogan：学的不仅是技术，更是梦想！
#--------------------------------------------
##### 用户配置区 开始 #####
#
#
# 这里可以添加脚本描述信息
# 
#
##### 用户配置区 结束  #####
','#--------------------------------------------
# 这是一个注释
# author：菜鸟教程
# site：www.runoob.com
# slogan：学的不仅是技术，更是梦想！
#--------------------------------------------
##### 用户配置区 开始 #####
#
#
# 这里可以添加脚本描述信息
# 
#
##### 用户配置区 结束  #####
',0,'alvin',curdate());
insert into Content values(2493,25,'p',5,'{}','如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？','如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？',0,'alvin',curdate());
insert into Content values(2494,25,'p',6,'{}','每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。','每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。',0,'alvin',curdate());
insert into Content values(2495,25,'h3',7,'{}','多行注释','多行注释',0,'alvin',curdate());
insert into Content values(2496,25,'p',8,'{}','多行注释还可以使用以下格式：','多行注释还可以使用以下格式：',0,'alvin',curdate());
insert into Content values(2497,25,'pre',9,'{"class": ["prettyprint", "lang-bash"]}',':<<EOF
注释内容...
注释内容...
注释内容...
EOF
',':<<EOF
注释内容...
注释内容...
注释内容...
EOF
',0,'alvin',curdate());
insert into Content values(2498,25,'p',10,'{}','EOF 也可以使用其他符号:','EOF 也可以使用其他符号:',0,'alvin',curdate());
insert into Content values(2499,25,'pre',11,'{"class": ["prettyprint", "lang-bash"]}',':<<\'
注释内容...
注释内容...
注释内容...
\'

:<<!
注释内容...
注释内容...
注释内容...
!
',':<<\'
注释内容...
注释内容...
注释内容...
\'

:<<!
注释内容...
注释内容...
注释内容...
!
',0,'alvin',curdate());
insert into Content values(2500,26,'h1',1,'{}','Shell 传递参数','Shell 传递参数',0,'alvin',curdate());
insert into Content values(2501,26,'p',2,'{}',' 我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为： <b>  $n </b> 。 <b>  n </b> 代表一个数字，1        为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……',' 我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为： <b>  $n </b> 。 <b>  n </b> 代表一个数字，1        为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……',0,'alvin',curdate());
insert into Content values(2502,26,'h3',3,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2503,26,'p',4,'{}',' 以下实例我们向脚本传递三个参数，并分别输出，其中 BOLD[  $0 ]BOLD 为执行的文件名：',' 以下实例我们向脚本传递三个参数，并分别输出，其中 BOLD[  $0 ]BOLD 为执行的文件名：',0,'alvin',curdate());
insert into Content values(2504,26,'pre',5,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

echo "Shell 传递参数实例！";
echo "执行的文件名：$0";
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";
',0,'alvin',curdate());
insert into Content values(2505,26,'p',6,'{}','为脚本设置可执行权限，并执行脚本，输出结果如下所示：','为脚本设置可执行权限，并执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2506,26,'pre',7,'{"class": ["prettyprint", "lang-bash"]}','$ chmod +x test.sh 
$ ./test.sh 1 2 3
Shell 传递参数实例！
执行的文件名：./test.sh
第一个参数为：1
第二个参数为：2
第三个参数为：3','$ chmod +x test.sh 
$ ./test.sh 1 2 3
Shell 传递参数实例！
执行的文件名：./test.sh
第一个参数为：1
第二个参数为：2
第三个参数为：3',0,'alvin',curdate());
insert into Content values(2507,26,'p',8,'{}','另外，还有几个特殊字符用来处理参数：','另外，还有几个特殊字符用来处理参数：',0,'alvin',curdate());
insert into Content values(2508,26,'table',9,'{"class": ["table", "table-bordered", "table-striped"]}','参数处理	说明
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。如"$*"用「"」括起来的情况、以"$1 $2 …                    $n"的形式输出所有参数。                
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。 如"$@"用「"」括起来的情况、以"$1"                    "$2" … "$n" 的形式输出所有参数。                
$-	显示Shell使用的当前选项，与set命令功能相同。                
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。','参数处理	说明
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。如"$*"用「"」括起来的情况、以"$1 $2 …                    $n"的形式输出所有参数。                
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。 如"$@"用「"」括起来的情况、以"$1"                    "$2" … "$n" 的形式输出所有参数。                
$-	显示Shell使用的当前选项，与set命令功能相同。                
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。',0,'alvin',curdate());
insert into Content values(2509,26,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

echo "Shell 传递参数实例！";
echo "第一个参数为：$1";

echo "参数个数为：$#";
echo "传递的参数作为一个字符串显示：$*";
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

echo "Shell 传递参数实例！";
echo "第一个参数为：$1";

echo "参数个数为：$#";
echo "传递的参数作为一个字符串显示：$*";
',0,'alvin',curdate());
insert into Content values(2510,26,'p',11,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2511,26,'pre',12,'{"class": ["prettyprint", "lang-bash"]}','$ chmod +x test.sh 
$ ./test.sh 1 2 3
Shell 传递参数实例！
第一个参数为：1
参数个数为：3
传递的参数作为一个字符串显示：1 2 3
','$ chmod +x test.sh 
$ ./test.sh 1 2 3
Shell 传递参数实例！
第一个参数为：1
参数个数为：3
传递的参数作为一个字符串显示：1 2 3
',0,'alvin',curdate());
insert into Content values(2512,26,'p',13,'{}','$* 与 $@ 区别：','$* 与 $@ 区别：',0,'alvin',curdate());
insert into Content values(2513,26,'ul',14,'{}','相同点：都是引用所有参数。
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2            3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。','相同点：都是引用所有参数。
不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 "1 2            3"（传递了一个参数），而 "@" 等价于 "1" "2" "3"（传递了三个参数）。',0,'alvin',curdate());
insert into Content values(2514,26,'pre',15,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

echo "-- \$* 演示 ---"
for i in "$*"; do
    echo $i
done

echo "-- \$@ 演示 ---"
for i in "$@"; do
    echo $i
done
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

echo "-- \$* 演示 ---"
for i in "$*"; do
    echo $i
done

echo "-- \$@ 演示 ---"
for i in "$@"; do
    echo $i
done
',0,'alvin',curdate());
insert into Content values(2515,26,'p',16,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2516,26,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','$ chmod +x test.sh 
$ ./test.sh 1 2 3
-- $* 演示 ---
1 2 3
-- $@ 演示 ---
1
2
3
','$ chmod +x test.sh 
$ ./test.sh 1 2 3
-- $* 演示 ---
1 2 3
-- $@ 演示 ---
1
2
3
',0,'alvin',curdate());
insert into Content values(2517,27,'h1',1,'{}','Shell 常用的转义符','Shell 常用的转义符',0,'alvin',curdate());
insert into Content values(2518,27,'p',2,'{}','为了能够更好地理解用户的表达，Shell 解释器还提供了特别丰富的转义字符来处理输入的特殊数据。','为了能够更好地理解用户的表达，Shell 解释器还提供了特别丰富的转义字符来处理输入的特殊数据。',0,'alvin',curdate());
insert into Content values(2519,27,'ul',3,'{}','反斜杠（\）：使反斜杠后面的一个变量变为单纯的字符串。
单引号（\'\'）：转义其中所有的变量为单纯的字符串。
双引号（""）：保留其中的变量属性，不进行转义处理。
反引号（``）：把其中的命令执行后返回结果。','反斜杠（\）：使反斜杠后面的一个变量变为单纯的字符串。
单引号（\'\'）：转义其中所有的变量为单纯的字符串。
双引号（""）：保留其中的变量属性，不进行转义处理。
反引号（``）：把其中的命令执行后返回结果。',0,'alvin',curdate());
insert into Content values(2520,27,'p',4,'{}','实例如下：','实例如下：',0,'alvin',curdate());
insert into Content values(2521,27,'pre',5,'{"class": ["prettyprint", "lang-bash"]}','[root@linux ~]# PRICE=5
[root@linux ~]# echo "Price is $PRICE"
Price is 5
','[root@linux ~]# PRICE=5
[root@linux ~]# echo "Price is $PRICE"
Price is 5
',0,'alvin',curdate());
insert into Content values(2522,27,'p',6,'{}','接下来，我们希望能够输出“Price is $5”，即价格是 5 美元的字符串内容，但碰巧美元符号与变量提取符号合并后的$$作用是显示当前程序的进程 ID 号码，于是命令执行后输出的内容并不是我们所预期的：','接下来，我们希望能够输出“Price is $5”，即价格是 5 美元的字符串内容，但碰巧美元符号与变量提取符号合并后的$$作用是显示当前程序的进程 ID 号码，于是命令执行后输出的内容并不是我们所预期的：',0,'alvin',curdate());
insert into Content values(2523,27,'pre',7,'{"class": ["prettyprint", "lang-bash"]}','[root@linux ~]# echo "Price is $$PRICE"
Price is 3767PRICE
','[root@linux ~]# echo "Price is $$PRICE"
Price is 3767PRICE
',0,'alvin',curdate());
insert into Content values(2524,27,'p',8,'{}','要想让第一个“$”乖乖地作为美元符号，那么就需要使用反斜杠（\）来进行转义，将这 个命令提取符转义成单纯的文本，去除其特殊功能','要想让第一个“$”乖乖地作为美元符号，那么就需要使用反斜杠（\）来进行转义，将这 个命令提取符转义成单纯的文本，去除其特殊功能',0,'alvin',curdate());
insert into Content values(2525,27,'pre',9,'{"class": ["prettyprint", "lang-bash"]}','[root@linux ~]# echo "Priceis\$$PRICE"
Price is $5
','[root@linux ~]# echo "Priceis\$$PRICE"
Price is $5
',0,'alvin',curdate());
insert into Content values(2526,27,'p',10,'{}','而如果只需要某个命令的输出值时，可以像`命令`这样，将命令用反引号括起来，达到预 期的效果。例如，将反引号与uname-a命令结合，然后使用echo命令来查看本机的Linux版 本和内核信息：','而如果只需要某个命令的输出值时，可以像`命令`这样，将命令用反引号括起来，达到预 期的效果。例如，将反引号与uname-a命令结合，然后使用echo命令来查看本机的Linux版 本和内核信息：',0,'alvin',curdate());
insert into Content values(2527,27,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','[root@linux ~]# echo `uname-a`
Linux linux.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux
','[root@linux ~]# echo `uname-a`
Linux linux.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux
',0,'alvin',curdate());
insert into Content values(2528,28,'h1',1,'{}','Shell 基本运算符','Shell 基本运算符',0,'alvin',curdate());
insert into Content values(2529,28,'p',2,'{}','Shell 和其他编程语言一样，支持多种运算符，包括：','Shell 和其他编程语言一样，支持多种运算符，包括：',0,'alvin',curdate());
insert into Content values(2530,28,'ul',3,'{}','算数运算符
关系运算符
布尔运算符
字符串运算符
文件测试运算符','算数运算符
关系运算符
布尔运算符
字符串运算符
文件测试运算符',0,'alvin',curdate());
insert into Content values(2531,28,'p',4,'{}','原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。','原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。',0,'alvin',curdate());
insert into Content values(2532,28,'p',5,'{}','expr 是一款表达式计算工具，使用它能完成表达式的求值操作。','expr 是一款表达式计算工具，使用它能完成表达式的求值操作。',0,'alvin',curdate());
insert into Content values(2533,28,'p',6,'{}',' 例如，两个数相加( BOLD[  注意使用的是反引号 ` 而不是单引号 \' ]BOLD )：',' 例如，两个数相加( BOLD[  注意使用的是反引号 ` 而不是单引号 \' ]BOLD )：',0,'alvin',curdate());
insert into Content values(2534,28,'h2',7,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2535,28,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
val=`expr 2 + 2`
echo "两数之和为 : $val"
','#!/bin/bash
val=`expr 2 + 2`
echo "两数之和为 : $val"
',0,'alvin',curdate());
insert into Content values(2536,28,'p',9,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2537,28,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','两数之和为 : 4
','两数之和为 : 4
',0,'alvin',curdate());
insert into Content values(2538,28,'p',11,'{}','两点注意：','两点注意：',0,'alvin',curdate());
insert into Content values(2539,28,'ul',12,'{}','        表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
 完整的表达式要被 BLUE_BG[  ` ` ]BLUE_BG 包含，注意这个字符不是常用的单引号，在 Esc 键下边。','        表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。
 完整的表达式要被 BLUE_BG[  ` ` ]BLUE_BG 包含，注意这个字符不是常用的单引号，在 Esc 键下边。',0,'alvin',curdate());
insert into Content values(2540,28,'line',13,'{}','','',0,'alvin',curdate());
insert into Content values(2541,28,'h2',14,'{}','算术运算符','算术运算符',0,'alvin',curdate());
insert into Content values(2542,28,'p',15,'{}','下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：','下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：',0,'alvin',curdate());
insert into Content values(2543,28,'table',16,'{"class": ["table", "table-bordered", "table-striped"]}','                运算符	                说明	                举例
                +	                加法	                `expr $a + $b` 结果为 30。
                -	                减法	                `expr $a - $b` 结果为 -10。
                *	                乘法	                `expr $a \* $b` 结果为  200。
                /	                除法	                `expr $b / $a` 结果为 2。
                %	                取余	                `expr $b % $a` 结果为 0。
                =	                赋值	                a=$b 将把变量 b 的值赋给 a。
                ==	                相等。用于比较两个数字，相同则返回 true。	                [ $a == $b ] 返回 false。
                !=	                不相等。用于比较两个数字，不相同则返回 true。	                [ $a != $b ] 返回 true。','                运算符	                说明	                举例
                +	                加法	                `expr $a + $b` 结果为 30。
                -	                减法	                `expr $a - $b` 结果为 -10。
                *	                乘法	                `expr $a \* $b` 结果为  200。
                /	                除法	                `expr $b / $a` 结果为 2。
                %	                取余	                `expr $b % $a` 结果为 0。
                =	                赋值	                a=$b 将把变量 b 的值赋给 a。
                ==	                相等。用于比较两个数字，相同则返回 true。	                [ $a == $b ] 返回 false。
                !=	                不相等。用于比较两个数字，不相同则返回 true。	                [ $a != $b ] 返回 true。',0,'alvin',curdate());
insert into Content values(2544,28,'p',17,'{}',' <b>  注意： </b> 条件表达式要放在方括号之间，并且要有空格，例如: <b>  [$a==$b] </b> 是错误的，必须写成 <b>  [ $a == $b ] </b> 。',' <b>  注意： </b> 条件表达式要放在方括号之间，并且要有空格，例如: <b>  [$a==$b] </b> 是错误的，必须写成 <b>  [ $a == $b ] </b> 。',0,'alvin',curdate());
insert into Content values(2545,28,'h3',18,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2546,28,'p',19,'{}','算术运算符实例如下：','算术运算符实例如下：',0,'alvin',curdate());
insert into Content values(2547,28,'h2',20,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2548,28,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

val=`expr $a + $b`
echo "a + b : $val"

val=`expr $a - $b`
echo "a - b : $val"

val=`expr $a \* $b`
echo "a * b : $val"

val=`expr $b / $a`
echo "b / a : $val"

val=`expr $b % $a`
echo "b % a : $val"

if [ $a == $b ]
then
   echo "a 等于 b"
fi
if [ $a != $b ]
then
   echo "a 不等于 b"
fi
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

val=`expr $a + $b`
echo "a + b : $val"

val=`expr $a - $b`
echo "a - b : $val"

val=`expr $a \* $b`
echo "a * b : $val"

val=`expr $b / $a`
echo "b / a : $val"

val=`expr $b % $a`
echo "b % a : $val"

if [ $a == $b ]
then
   echo "a 等于 b"
fi
if [ $a != $b ]
then
   echo "a 不等于 b"
fi
',0,'alvin',curdate());
insert into Content values(2549,28,'p',22,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2550,28,'pre',23,'{"class": ["prettyprint", "lang-bash"]}','a + b : 30
a - b : -10
a * b : 200
b / a : 2
b % a : 0
a 不等于 b
','a + b : 30
a - b : -10
a * b : 200
b / a : 2
b % a : 0
a 不等于 b
',0,'alvin',curdate());
insert into Content values(2551,28,'blockquote',24,'{}',' <p>  <b>   注意：  </b> </p> <ul>  <li>   乘号(*)前边必须加反斜杠(\)才能实现乘法运算；  </li>  <li>   if...then...fi 是条件语句，后续将会讲解。  </li>  <li>   在 MAC 中 shell 的 expr 语法是：   BOLD[    $((表达式))   ]BOLD   ，此处表达式中的 "*" 不需要转义符号 "\" 。  </li>  <li>   result=`expr $a + $b` 等价于result= $[a + b]  </li> </ul>',' <p>  <b>   注意：  </b> </p> <ul>  <li>   乘号(*)前边必须加反斜杠(\)才能实现乘法运算；  </li>  <li>   if...then...fi 是条件语句，后续将会讲解。  </li>  <li>   在 MAC 中 shell 的 expr 语法是：   BOLD[    $((表达式))   ]BOLD   ，此处表达式中的 "*" 不需要转义符号 "\" 。  </li>  <li>   result=`expr $a + $b` 等价于result= $[a + b]  </li> </ul>',0,'alvin',curdate());
insert into Content values(2552,28,'line',25,'{}','','',0,'alvin',curdate());
insert into Content values(2553,28,'h2',26,'{}','关系运算符','关系运算符',0,'alvin',curdate());
insert into Content values(2554,28,'p',27,'{}','关系运算符只支持数字，不支持字符串，除非字符串的值是数字。','关系运算符只支持数字，不支持字符串，除非字符串的值是数字。',0,'alvin',curdate());
insert into Content values(2555,28,'p',28,'{}','下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：','下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：',0,'alvin',curdate());
insert into Content values(2556,28,'table',29,'{"class": ["table", "table-bordered", "table-striped"]}','                运算符	                说明	                举例
                -eq	                检测两个数是否相等，相等返回 true。	                [ $a -eq $b ] 返回 false。
                -ne	                检测两个数是否不相等，不相等返回 true。	                [ $a -ne $b ] 返回 true。
                -gt	                检测左边的数是否大于右边的，如果是，则返回 true。	                [ $a -gt $b ] 返回 false。
                -lt	                检测左边的数是否小于右边的，如果是，则返回 true。	                [ $a -lt $b ] 返回 true。
                -ge	                检测左边的数是否大于等于右边的，如果是，则返回 true。	                [ $a -ge $b ] 返回 false。
                -le	                检测左边的数是否小于等于右边的，如果是，则返回 true。	                [ $a -le $b ] 返回 true。','                运算符	                说明	                举例
                -eq	                检测两个数是否相等，相等返回 true。	                [ $a -eq $b ] 返回 false。
                -ne	                检测两个数是否不相等，不相等返回 true。	                [ $a -ne $b ] 返回 true。
                -gt	                检测左边的数是否大于右边的，如果是，则返回 true。	                [ $a -gt $b ] 返回 false。
                -lt	                检测左边的数是否小于右边的，如果是，则返回 true。	                [ $a -lt $b ] 返回 true。
                -ge	                检测左边的数是否大于等于右边的，如果是，则返回 true。	                [ $a -ge $b ] 返回 false。
                -le	                检测左边的数是否小于等于右边的，如果是，则返回 true。	                [ $a -le $b ] 返回 true。',0,'alvin',curdate());
insert into Content values(2557,28,'h3',30,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2558,28,'p',31,'{}','关系运算符实例如下：','关系运算符实例如下：',0,'alvin',curdate());
insert into Content values(2559,28,'h2',32,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2560,28,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

if [ $a -eq $b ]
then
   echo "$a -eq $b : a 等于 b"
else
   echo "$a -eq $b: a 不等于 b"
fi
if [ $a -ne $b ]
then
   echo "$a -ne $b: a 不等于 b"
else
   echo "$a -ne $b : a 等于 b"
fi
if [ $a -gt $b ]
then
   echo "$a -gt $b: a 大于 b"
else
   echo "$a -gt $b: a 不大于 b"
fi
if [ $a -lt $b ]
then
   echo "$a -lt $b: a 小于 b"
else
   echo "$a -lt $b: a 不小于 b"
fi
if [ $a -ge $b ]
then
   echo "$a -ge $b: a 大于或等于 b"
else
   echo "$a -ge $b: a 小于 b"
fi
if [ $a -le $b ]
then
   echo "$a -le $b: a 小于或等于 b"
else
   echo "$a -le $b: a 大于 b"
fi
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

if [ $a -eq $b ]
then
   echo "$a -eq $b : a 等于 b"
else
   echo "$a -eq $b: a 不等于 b"
fi
if [ $a -ne $b ]
then
   echo "$a -ne $b: a 不等于 b"
else
   echo "$a -ne $b : a 等于 b"
fi
if [ $a -gt $b ]
then
   echo "$a -gt $b: a 大于 b"
else
   echo "$a -gt $b: a 不大于 b"
fi
if [ $a -lt $b ]
then
   echo "$a -lt $b: a 小于 b"
else
   echo "$a -lt $b: a 不小于 b"
fi
if [ $a -ge $b ]
then
   echo "$a -ge $b: a 大于或等于 b"
else
   echo "$a -ge $b: a 小于 b"
fi
if [ $a -le $b ]
then
   echo "$a -le $b: a 小于或等于 b"
else
   echo "$a -le $b: a 大于 b"
fi
',0,'alvin',curdate());
insert into Content values(2561,28,'p',34,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2562,28,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','10 -eq 20: a 不等于 b
10 -ne 20: a 不等于 b
10 -gt 20: a 不大于 b
10 -lt 20: a 小于 b
10 -ge 20: a 小于 b
10 -le 20: a 小于或等于 b
','10 -eq 20: a 不等于 b
10 -ne 20: a 不等于 b
10 -gt 20: a 不大于 b
10 -lt 20: a 小于 b
10 -ge 20: a 小于 b
10 -le 20: a 小于或等于 b
',0,'alvin',curdate());
insert into Content values(2563,28,'line',36,'{}','','',0,'alvin',curdate());
insert into Content values(2564,28,'h2',37,'{}','布尔运算符','布尔运算符',0,'alvin',curdate());
insert into Content values(2565,28,'p',38,'{}','下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：','下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：',0,'alvin',curdate());
insert into Content values(2566,28,'table',39,'{"class": ["table", "table-bordered", "table-striped"]}','                运算符	                说明	                举例
                !	                非运算，表达式为 true 则返回 false，否则返回 true。	                [ ! false ] 返回 true。
                -o	                或运算，有一个表达式为 true 则返回 true。	                [ $a -lt 20 -o $b -gt 100 ] 返回 true。
                -a	                与运算，两个表达式都为 true 才返回 true。	                [ $a -lt 20 -a $b -gt 100 ] 返回 false。','                运算符	                说明	                举例
                !	                非运算，表达式为 true 则返回 false，否则返回 true。	                [ ! false ] 返回 true。
                -o	                或运算，有一个表达式为 true 则返回 true。	                [ $a -lt 20 -o $b -gt 100 ] 返回 true。
                -a	                与运算，两个表达式都为 true 才返回 true。	                [ $a -lt 20 -a $b -gt 100 ] 返回 false。',0,'alvin',curdate());
insert into Content values(2567,28,'h3',40,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2568,28,'p',41,'{}','布尔运算符实例如下：','布尔运算符实例如下：',0,'alvin',curdate());
insert into Content values(2569,28,'h2',42,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2570,28,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

if [ $a != $b ]
then
   echo "$a != $b : a 不等于 b"
else
   echo "$a == $b: a 等于 b"
fi
if [ $a -lt 100 -a $b -gt 15 ]
then
   echo "$a 小于 100 且 $b 大于 15 : 返回 true"
else
   echo "$a 小于 100 且 $b 大于 15 : 返回 false"
fi
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo "$a 小于 100 或 $b 大于 100 : 返回 true"
else
   echo "$a 小于 100 或 $b 大于 100 : 返回 false"
fi
if [ $a -lt 5 -o $b -gt 100 ]
then
   echo "$a 小于 5 或 $b 大于 100 : 返回 true"
else
   echo "$a 小于 5 或 $b 大于 100 : 返回 false"
fi
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

if [ $a != $b ]
then
   echo "$a != $b : a 不等于 b"
else
   echo "$a == $b: a 等于 b"
fi
if [ $a -lt 100 -a $b -gt 15 ]
then
   echo "$a 小于 100 且 $b 大于 15 : 返回 true"
else
   echo "$a 小于 100 且 $b 大于 15 : 返回 false"
fi
if [ $a -lt 100 -o $b -gt 100 ]
then
   echo "$a 小于 100 或 $b 大于 100 : 返回 true"
else
   echo "$a 小于 100 或 $b 大于 100 : 返回 false"
fi
if [ $a -lt 5 -o $b -gt 100 ]
then
   echo "$a 小于 5 或 $b 大于 100 : 返回 true"
else
   echo "$a 小于 5 或 $b 大于 100 : 返回 false"
fi
',0,'alvin',curdate());
insert into Content values(2571,28,'p',44,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2572,28,'pre',45,'{"class": ["prettyprint", "lang-bash"]}','10 != 20 : a 不等于 b
10 小于 100 且 20 大于 15 : 返回 true
10 小于 100 或 20 大于 100 : 返回 true
10 小于 5 或 20 大于 100 : 返回 false
','10 != 20 : a 不等于 b
10 小于 100 且 20 大于 15 : 返回 true
10 小于 100 或 20 大于 100 : 返回 true
10 小于 5 或 20 大于 100 : 返回 false
',0,'alvin',curdate());
insert into Content values(2573,28,'line',46,'{}','','',0,'alvin',curdate());
insert into Content values(2574,28,'h2',47,'{}','逻辑运算符','逻辑运算符',0,'alvin',curdate());
insert into Content values(2575,28,'p',48,'{}','以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:','以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:',0,'alvin',curdate());
insert into Content values(2576,28,'table',49,'{"class": ["table", "table-bordered", "table-striped"]}','                运算符	                说明	                举例
                &&    	                逻辑的 AND 	                [[ $a -lt 100 && $b -gt 100 ]] 返回 false
                ||	                逻辑的 OR	                [[ $a -lt 100 || $b -gt 100 ]] 返回 true','                运算符	                说明	                举例
                &&    	                逻辑的 AND 	                [[ $a -lt 100 && $b -gt 100 ]] 返回 false
                ||	                逻辑的 OR	                [[ $a -lt 100 || $b -gt 100 ]] 返回 true',0,'alvin',curdate());
insert into Content values(2577,28,'h3',50,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2578,28,'p',51,'{}','逻辑运算符实例如下：','逻辑运算符实例如下：',0,'alvin',curdate());
insert into Content values(2579,28,'h2',52,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2580,28,'pre',53,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

if [[ $a -lt 100 && $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi

if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a=10
b=20

if [[ $a -lt 100 && $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi

if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi
',0,'alvin',curdate());
insert into Content values(2581,28,'p',54,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2582,28,'pre',55,'{"class": ["prettyprint", "lang-bash"]}','返回 false
返回 true
','返回 false
返回 true
',0,'alvin',curdate());
insert into Content values(2583,28,'line',56,'{}','','',0,'alvin',curdate());
insert into Content values(2584,28,'h2',57,'{}','字符串运算符','字符串运算符',0,'alvin',curdate());
insert into Content values(2585,28,'p',58,'{}','下表列出了常用的字符串运算符，假定变量 a 为 "abc"，变量 b 为 "efg"：','下表列出了常用的字符串运算符，假定变量 a 为 "abc"，变量 b 为 "efg"：',0,'alvin',curdate());
insert into Content values(2586,28,'table',59,'{"class": ["table", "table-bordered", "table-striped"]}','                运算符	                说明	                举例
                =	                检测两个字符串是否相等，相等返回 true。	                [ $a = $b ] 返回 false。
                !=	                检测两个字符串是否相等，不相等返回 true。	                [ $a != $b ] 返回 true。
                -z	                检测字符串长度是否为0，为0返回 true。	                [ -z $a ] 返回 false。
                -n	                检测字符串长度是否为0，不为0返回 true。	                [ -n "$a" ] 返回 true。
                $	                检测字符串是否为空，不为空返回 true。	                [ $a ] 返回 true。','                运算符	                说明	                举例
                =	                检测两个字符串是否相等，相等返回 true。	                [ $a = $b ] 返回 false。
                !=	                检测两个字符串是否相等，不相等返回 true。	                [ $a != $b ] 返回 true。
                -z	                检测字符串长度是否为0，为0返回 true。	                [ -z $a ] 返回 false。
                -n	                检测字符串长度是否为0，不为0返回 true。	                [ -n "$a" ] 返回 true。
                $	                检测字符串是否为空，不为空返回 true。	                [ $a ] 返回 true。',0,'alvin',curdate());
insert into Content values(2587,28,'h3',60,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2588,28,'p',61,'{}','字符串运算符实例如下：','字符串运算符实例如下：',0,'alvin',curdate());
insert into Content values(2589,28,'h2',62,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2590,28,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a="abc"
b="efg"

if [ $a = $b ]
then
   echo "$a = $b : a 等于 b"
else
   echo "$a = $b: a 不等于 b"
fi
if [ $a != $b ]
then
   echo "$a != $b : a 不等于 b"
else
   echo "$a != $b: a 等于 b"
fi
if [ -z $a ]
then
   echo "-z $a : 字符串长度为 0"
else
   echo "-z $a : 字符串长度不为 0"
fi
if [ -n "$a" ]
then
   echo "-n $a : 字符串长度不为 0"
else
   echo "-n $a : 字符串长度为 0"
fi
if [ $a ]
then
   echo "$a : 字符串不为空"
else
   echo "$a : 字符串为空"
fi
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

a="abc"
b="efg"

if [ $a = $b ]
then
   echo "$a = $b : a 等于 b"
else
   echo "$a = $b: a 不等于 b"
fi
if [ $a != $b ]
then
   echo "$a != $b : a 不等于 b"
else
   echo "$a != $b: a 等于 b"
fi
if [ -z $a ]
then
   echo "-z $a : 字符串长度为 0"
else
   echo "-z $a : 字符串长度不为 0"
fi
if [ -n "$a" ]
then
   echo "-n $a : 字符串长度不为 0"
else
   echo "-n $a : 字符串长度为 0"
fi
if [ $a ]
then
   echo "$a : 字符串不为空"
else
   echo "$a : 字符串为空"
fi
',0,'alvin',curdate());
insert into Content values(2591,28,'p',64,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2592,28,'pre',65,'{"class": ["prettyprint", "lang-bash"]}','abc = efg: a 不等于 b
abc != efg : a 不等于 b
-z abc : 字符串长度不为 0
-n abc : 字符串长度不为 0
abc : 字符串不为空
','abc = efg: a 不等于 b
abc != efg : a 不等于 b
-z abc : 字符串长度不为 0
-n abc : 字符串长度不为 0
abc : 字符串不为空
',0,'alvin',curdate());
insert into Content values(2593,28,'line',66,'{}','','',0,'alvin',curdate());
insert into Content values(2594,28,'h2',67,'{}','文件测试运算符','文件测试运算符',0,'alvin',curdate());
insert into Content values(2595,28,'p',68,'{}','文件测试运算符用于检测 Unix 文件的各种属性。','文件测试运算符用于检测 Unix 文件的各种属性。',0,'alvin',curdate());
insert into Content values(2596,28,'p',69,'{}','属性检测描述如下：','属性检测描述如下：',0,'alvin',curdate());
insert into Content values(2597,28,'table',70,'{"class": ["table", "table-bordered", "table-striped"]}','                操作符	                说明	                举例
                -b file	                检测文件是否是块设备文件，如果是，则返回 true。	                [ -b $file ] 返回 false。
                -c file	                检测文件是否是字符设备文件，如果是，则返回 true。	                [ -c $file ] 返回 false。
                -d file	                检测文件是否是目录，如果是，则返回 true。	                [ -d $file ] 返回 false。
                -f file	                检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	                [ -f $file ] 返回 true。
                -g file	                检测文件是否设置了 SGID 位，如果是，则返回 true。	                [ -g $file ] 返回 false。
                -k file	                检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。	                [ -k $file ] 返回 false。
                -p file	                检测文件是否是有名管道，如果是，则返回 true。	                [ -p $file ] 返回 false。
                -u file	                检测文件是否设置了 SUID 位，如果是，则返回 true。	                [ -u $file ] 返回 false。
                -r file	                检测文件是否可读，如果是，则返回 true。	                [ -r $file ] 返回 true。
                -w file	                检测文件是否可写，如果是，则返回 true。	                [ -w $file ] 返回 true。
                -x file	                检测文件是否可执行，如果是，则返回 true。	                [ -x $file ] 返回 true。
                -s file	                检测文件是否为空（文件大小是否大于0），不为空返回 true。	                [ -s $file ] 返回 true。
                -e file	                检测文件（包括目录）是否存在，如果是，则返回 true。	                [ -e $file ] 返回 true。','                操作符	                说明	                举例
                -b file	                检测文件是否是块设备文件，如果是，则返回 true。	                [ -b $file ] 返回 false。
                -c file	                检测文件是否是字符设备文件，如果是，则返回 true。	                [ -c $file ] 返回 false。
                -d file	                检测文件是否是目录，如果是，则返回 true。	                [ -d $file ] 返回 false。
                -f file	                检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。	                [ -f $file ] 返回 true。
                -g file	                检测文件是否设置了 SGID 位，如果是，则返回 true。	                [ -g $file ] 返回 false。
                -k file	                检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。	                [ -k $file ] 返回 false。
                -p file	                检测文件是否是有名管道，如果是，则返回 true。	                [ -p $file ] 返回 false。
                -u file	                检测文件是否设置了 SUID 位，如果是，则返回 true。	                [ -u $file ] 返回 false。
                -r file	                检测文件是否可读，如果是，则返回 true。	                [ -r $file ] 返回 true。
                -w file	                检测文件是否可写，如果是，则返回 true。	                [ -w $file ] 返回 true。
                -x file	                检测文件是否可执行，如果是，则返回 true。	                [ -x $file ] 返回 true。
                -s file	                检测文件是否为空（文件大小是否大于0），不为空返回 true。	                [ -s $file ] 返回 true。
                -e file	                检测文件（包括目录）是否存在，如果是，则返回 true。	                [ -e $file ] 返回 true。',0,'alvin',curdate());
insert into Content values(2598,28,'p',71,'{}','其他检查符：','其他检查符：',0,'alvin',curdate());
insert into Content values(2599,28,'ul',72,'{}',' BOLD[  -S ]BOLD : 判断某文件是否 socket。
 BOLD[  -L ]BOLD',' BOLD[  -S ]BOLD : 判断某文件是否 socket。
 BOLD[  -L ]BOLD',0,'alvin',curdate());
insert into Content values(2600,28,'p',73,'{}','','',0,'alvin',curdate());
insert into Content values(2601,28,'h3',74,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2602,28,'strong',75,'{}','/var/www/runoob/test.sh','/var/www/runoob/test.sh',0,'alvin',curdate());
insert into Content values(2603,28,'strong',76,'{}','rwx','rwx',0,'alvin',curdate());
insert into Content values(2604,28,'p',77,'{}','','',0,'alvin',curdate());
insert into Content values(2605,28,'h2',78,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2606,28,'pre',79,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

file="/var/www/runoob/test.sh"
if [ -r $file ]
then
   echo "文件可读"
else
   echo "文件不可读"
fi
if [ -w $file ]
then
   echo "文件可写"
else
   echo "文件不可写"
fi
if [ -x $file ]
then
   echo "文件可执行"
else
   echo "文件不可执行"
fi
if [ -f $file ]
then
   echo "文件为普通文件"
else
   echo "文件为特殊文件"
fi
if [ -d $file ]
then
   echo "文件是个目录"
else
   echo "文件不是个目录"
fi
if [ -s $file ]
then
   echo "文件不为空"
else
   echo "文件为空"
fi
if [ -e $file ]
then
   echo "文件存在"
else
   echo "文件不存在"
fi
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

file="/var/www/runoob/test.sh"
if [ -r $file ]
then
   echo "文件可读"
else
   echo "文件不可读"
fi
if [ -w $file ]
then
   echo "文件可写"
else
   echo "文件不可写"
fi
if [ -x $file ]
then
   echo "文件可执行"
else
   echo "文件不可执行"
fi
if [ -f $file ]
then
   echo "文件为普通文件"
else
   echo "文件为特殊文件"
fi
if [ -d $file ]
then
   echo "文件是个目录"
else
   echo "文件不是个目录"
fi
if [ -s $file ]
then
   echo "文件不为空"
else
   echo "文件为空"
fi
if [ -e $file ]
then
   echo "文件存在"
else
   echo "文件不存在"
fi
',0,'alvin',curdate());
insert into Content values(2607,28,'p',80,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2608,28,'pre',81,'{"class": ["prettyprint", "lang-bash"]}','文件可读
文件可写
文件可执行
文件为普通文件
文件不是个目录
文件不为空
文件存在
','文件可读
文件可写
文件可执行
文件为普通文件
文件不是个目录
文件不为空
文件存在
',0,'alvin',curdate());
insert into Content values(2609,29,'h1',1,'{}','Shell 数组','Shell 数组',0,'alvin',curdate());
insert into Content values(2610,29,'p',2,'{}',' 数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。 <br/> 获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。',' 数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。 <br/> 获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。',0,'alvin',curdate());
insert into Content values(2611,29,'h3',3,'{}','定义数组','定义数组',0,'alvin',curdate());
insert into Content values(2612,29,'p',4,'{}','在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：','在 Shell 中，用括号来表示数组，数组元素用"空格"符号分割开。定义数组的一般形式为：',0,'alvin',curdate());
insert into Content values(2613,29,'pre',5,'{"class": ["prettyprint", "lang-bash"]}','array_name=(value0 value1 value2 value3 ... valuen)
或者
array_name=(
value0
value1
value2
value3
.
.
valuen
)
','array_name=(value0 value1 value2 value3 ... valuen)
或者
array_name=(
value0
value1
value2
value3
.
.
valuen
)
',0,'alvin',curdate());
insert into Content values(2614,29,'h3',6,'{}','单独定义数组元素','单独定义数组元素',0,'alvin',curdate());
insert into Content values(2615,29,'p',7,'{}','可以不使用连续的下标，而且下标的范围没有限制。还可以单独定义数组的各个元素：','可以不使用连续的下标，而且下标的范围没有限制。还可以单独定义数组的各个元素：',0,'alvin',curdate());
insert into Content values(2616,29,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','array_name[0]=value0
array_name[1]=value1
array_name[n]=valuen
','array_name[0]=value0
array_name[1]=value1
array_name[n]=valuen
',0,'alvin',curdate());
insert into Content values(2617,29,'h3',9,'{}','读取数组','读取数组',0,'alvin',curdate());
insert into Content values(2618,29,'p',10,'{}','读取数组元素值的一般格式是：','读取数组元素值的一般格式是：',0,'alvin',curdate());
insert into Content values(2619,29,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','valuen=${array_name[index]}
','valuen=${array_name[index]}
',0,'alvin',curdate());
insert into Content values(2620,29,'h3',12,'{}','获取数组所有内容','获取数组所有内容',0,'alvin',curdate());
insert into Content values(2621,29,'p',13,'{}',' 使用 BLUE_BG[  @ ]BLUE_BG 或 BLUE_BG[  * ]BLUE_BG 符号可以获取数组中的所有元素，例如：',' 使用 BLUE_BG[  @ ]BLUE_BG 或 BLUE_BG[  * ]BLUE_BG 符号可以获取数组中的所有元素，例如：',0,'alvin',curdate());
insert into Content values(2622,29,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','echo ${array_name[@]}
echo ${array_name[*]}
','echo ${array_name[@]}
echo ${array_name[*]}
',0,'alvin',curdate());
insert into Content values(2623,29,'h3',15,'{}','获取数组的长度','获取数组的长度',0,'alvin',curdate());
insert into Content values(2624,29,'p',16,'{}','获取数组长度的方法与获取字符串长度的方法相同，例如：','获取数组长度的方法与获取字符串长度的方法相同，例如：',0,'alvin',curdate());
insert into Content values(2625,29,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}
','# 取得数组元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
# 取得数组单个元素的长度
lengthn=${#array_name[n]}
',0,'alvin',curdate());
insert into Content values(2626,29,'h3',18,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2627,29,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

my_array=(A B "C" D)

echo "第一个元素为: ${my_array[0]}"
echo "第二个元素为: ${my_array[1]}"
echo "第三个元素为: ${my_array[2]}"
echo "第四个元素为: ${my_array[3]}"

echo "数组的元素为: ${my_array[*]}"
echo "数组的元素为: ${my_array[@]}"

echo "数组元素个数为: ${#my_array[*]}"
echo "数组元素个数为: ${#my_array[@]}"
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

my_array=(A B "C" D)

echo "第一个元素为: ${my_array[0]}"
echo "第二个元素为: ${my_array[1]}"
echo "第三个元素为: ${my_array[2]}"
echo "第四个元素为: ${my_array[3]}"

echo "数组的元素为: ${my_array[*]}"
echo "数组的元素为: ${my_array[@]}"

echo "数组元素个数为: ${#my_array[*]}"
echo "数组元素个数为: ${#my_array[@]}"
',0,'alvin',curdate());
insert into Content values(2628,29,'p',20,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2629,29,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','$ chmod +x test.sh 
$ ./test.sh
第一个元素为: A
第二个元素为: B
第三个元素为: C
第四个元素为: D
数组的元素为: A B C D
数组的元素为: A B C D
数组元素个数为: 4
数组元素个数为: 4
','$ chmod +x test.sh 
$ ./test.sh
第一个元素为: A
第二个元素为: B
第三个元素为: C
第四个元素为: D
数组的元素为: A B C D
数组的元素为: A B C D
数组元素个数为: 4
数组元素个数为: 4
',0,'alvin',curdate());
insert into Content values(2630,30,'h1',1,'{}','Shell 哈希','Shell 哈希',0,'alvin',curdate());
insert into Content values(2631,30,'p',2,'{}',' 哈希中可以存放多个值。 <br/> 获取哈希中的元素要利用哈希键，哈希键可以是整数或字符串，其值应唯一。',' 哈希中可以存放多个值。 <br/> 获取哈希中的元素要利用哈希键，哈希键可以是整数或字符串，其值应唯一。',0,'alvin',curdate());
insert into Content values(2632,30,'h3',3,'{}','定义哈希','定义哈希',0,'alvin',curdate());
insert into Content values(2633,30,'p',4,'{}','在 Shell 中，用括号来表示哈希，哈希元素用"空格"符号分割开。定义哈希的一般形式为：','在 Shell 中，用括号来表示哈希，哈希元素用"空格"符号分割开。定义哈希的一般形式为：',0,'alvin',curdate());
insert into Content values(2634,30,'pre',5,'{"class": ["prettyprint", "lang-bash"]}','declare -A m_dict
m_dict=(
["key1"]="value1"
["key2"]="value2"
)
或者
m_dict=(["key1"]="value1" ["key2"]="value2")
','declare -A m_dict
m_dict=(
["key1"]="value1"
["key2"]="value2"
)
或者
m_dict=(["key1"]="value1" ["key2"]="value2")
',0,'alvin',curdate());
insert into Content values(2635,30,'h3',6,'{}','单独定义哈希元素','单独定义哈希元素',0,'alvin',curdate());
insert into Content values(2636,30,'p',7,'{}','还可以单独定义哈希的各个元素：','还可以单独定义哈希的各个元素：',0,'alvin',curdate());
insert into Content values(2637,30,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','m_dict["key1"]="value1"
m_dict["key2"]="value2"
','m_dict["key1"]="value1"
m_dict["key2"]="value2"
',0,'alvin',curdate());
insert into Content values(2638,30,'h3',9,'{}','读取哈希','读取哈希',0,'alvin',curdate());
insert into Content values(2639,30,'p',10,'{}','读取哈希元素值的一般格式是：','读取哈希元素值的一般格式是：',0,'alvin',curdate());
insert into Content values(2640,30,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','v1=${m_dict[$key]}
v2=${m_dict["value2"]}
','v1=${m_dict[$key]}
v2=${m_dict["value2"]}
',0,'alvin',curdate());
insert into Content values(2641,30,'h3',12,'{}','获取哈希所有key值','获取哈希所有key值',0,'alvin',curdate());
insert into Content values(2642,30,'p',13,'{}',' 使用 BLUE_BG[  *或@ ]BLUE_BG 和 BLUE_BG[  ! ]BLUE_BG 符号可以哈希所有key值，例如：',' 使用 BLUE_BG[  *或@ ]BLUE_BG 和 BLUE_BG[  ! ]BLUE_BG 符号可以哈希所有key值，例如：',0,'alvin',curdate());
insert into Content values(2643,30,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','echo ${!m_dict[*]}
echo ${!m_dict[@]}
','echo ${!m_dict[*]}
echo ${!m_dict[@]}
',0,'alvin',curdate());
insert into Content values(2644,30,'h3',15,'{}','获取哈希所有value值','获取哈希所有value值',0,'alvin',curdate());
insert into Content values(2645,30,'p',16,'{}',' 使用 BLUE_BG[  *或@ ]BLUE_BG 符号可以哈希所有value值，例如：',' 使用 BLUE_BG[  *或@ ]BLUE_BG 符号可以哈希所有value值，例如：',0,'alvin',curdate());
insert into Content values(2646,30,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','echo ${m_dict[*]}
echo ${m_dict[@]}
','echo ${m_dict[*]}
echo ${m_dict[@]}
',0,'alvin',curdate());
insert into Content values(2647,30,'p',18,'{}','遍历哈希中所有key、value值,如果key不存在,则访问的v为空字符串','遍历哈希中所有key、value值,如果key不存在,则访问的v为空字符串',0,'alvin',curdate());
insert into Content values(2648,30,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','for key in $(echo ${!m_dict[*]})
do
    echo "$key : ${m_dict[$key]}"
done
','for key in $(echo ${!m_dict[*]})
do
    echo "$key : ${m_dict[$key]}"
done
',0,'alvin',curdate());
insert into Content values(2649,30,'h3',20,'{}','获取哈希的长度','获取哈希的长度',0,'alvin',curdate());
insert into Content values(2650,30,'p',21,'{}','获取哈希长度的方法与获取数组长度的方法相同，例如：','获取哈希长度的方法与获取数组长度的方法相同，例如：',0,'alvin',curdate());
insert into Content values(2651,30,'pre',22,'{"class": ["prettyprint", "lang-bash"]}','# 取得哈希元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
','# 取得哈希元素的个数
length=${#array_name[@]}
# 或者
length=${#array_name[*]}
',0,'alvin',curdate());
insert into Content values(2652,30,'h3',23,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2653,30,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# Declare a dictionary.
declare -A Host
Host=( [node1]=\'10.1.1.11\' [node2]=\'10.1.1.12\' [node3]=\'10.1.1.13\' [node4]=\'10.1.1.14\' )

# Traversing dictionary values.
for node_ip in ${Host[@]};
do
  echo "One IP of these hosts is ${node_ip} .";
done

# Traversing dictionary keys.
for node in ${!Host[@]};
do
  echo "One hostname of these hosts is: ${node}. ";
done

# Traverse keys and values at the same time.
for node in ${!Host[@]};
do
  echo "Hostname: ${node}, IP: ${Host[${node}]}. "
done

# Get the length of this dictionary.
echo "The length of this dictionary is ${#Host[@]}. "

# Append a key and a value.
Host[node5]=\'10.1.1.15\'
echo "The value of new dictionary is: ${Host[@]}. "
echo "The length of dictionary is: ${#Host[*]}. "

# Modify a value of the dictionary .
Host[node1]=\'10.1.1.111\'
echo "The value of new dictionary is: ${Host[@]}. "
','#!/bin/bash
# Declare a dictionary.
declare -A Host
Host=( [node1]=\'10.1.1.11\' [node2]=\'10.1.1.12\' [node3]=\'10.1.1.13\' [node4]=\'10.1.1.14\' )

# Traversing dictionary values.
for node_ip in ${Host[@]};
do
  echo "One IP of these hosts is ${node_ip} .";
done

# Traversing dictionary keys.
for node in ${!Host[@]};
do
  echo "One hostname of these hosts is: ${node}. ";
done

# Traverse keys and values at the same time.
for node in ${!Host[@]};
do
  echo "Hostname: ${node}, IP: ${Host[${node}]}. "
done

# Get the length of this dictionary.
echo "The length of this dictionary is ${#Host[@]}. "

# Append a key and a value.
Host[node5]=\'10.1.1.15\'
echo "The value of new dictionary is: ${Host[@]}. "
echo "The length of dictionary is: ${#Host[*]}. "

# Modify a value of the dictionary .
Host[node1]=\'10.1.1.111\'
echo "The value of new dictionary is: ${Host[@]}. "
',0,'alvin',curdate());
insert into Content values(2654,30,'p',25,'{}','执行脚本，输出结果如下所示：','执行脚本，输出结果如下所示：',0,'alvin',curdate());
insert into Content values(2655,30,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','$ chmod +x test.sh 
One IP of these hosts is 10.1.1.14 .
One IP of these hosts is 10.1.1.11 .
One IP of these hosts is 10.1.1.12 .
One IP of these hosts is 10.1.1.13 .
One hostname of these hosts is: node4.
One hostname of these hosts is: node1.
One hostname of these hosts is: node2.
One hostname of these hosts is: node3.
Hostname: node4, IP: 10.1.1.14.
Hostname: node1, IP: 10.1.1.11.
Hostname: node2, IP: 10.1.1.12.
Hostname: node3, IP: 10.1.1.13.
The length of this dictionary is 4.
The value of new dictionary is: 10.1.1.14 10.1.1.15 10.1.1.11 10.1.1.12 10.1.1.13.
The length of dictionary is: 5.
The value of new dictionary is: 10.1.1.14 10.1.1.15 10.1.1.111 10.1.1.12 10.1.1.13.
','$ chmod +x test.sh 
One IP of these hosts is 10.1.1.14 .
One IP of these hosts is 10.1.1.11 .
One IP of these hosts is 10.1.1.12 .
One IP of these hosts is 10.1.1.13 .
One hostname of these hosts is: node4.
One hostname of these hosts is: node1.
One hostname of these hosts is: node2.
One hostname of these hosts is: node3.
Hostname: node4, IP: 10.1.1.14.
Hostname: node1, IP: 10.1.1.11.
Hostname: node2, IP: 10.1.1.12.
Hostname: node3, IP: 10.1.1.13.
The length of this dictionary is 4.
The value of new dictionary is: 10.1.1.14 10.1.1.15 10.1.1.11 10.1.1.12 10.1.1.13.
The length of dictionary is: 5.
The value of new dictionary is: 10.1.1.14 10.1.1.15 10.1.1.111 10.1.1.12 10.1.1.13.
',0,'alvin',curdate());
insert into Content values(2656,31,'h1',1,'{}','Shell test 命令','Shell test 命令',0,'alvin',curdate());
insert into Content values(2657,31,'p',2,'{}','Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。','Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。',0,'alvin',curdate());
insert into Content values(2658,31,'line',3,'{}','','',0,'alvin',curdate());
insert into Content values(2659,31,'h2',4,'{}','数值测试','数值测试',0,'alvin',curdate());
insert into Content values(2660,31,'table',5,'{"class": ["table", "table-bordered", "table-striped"]}','                参数	英语源由	                说明
                -eq	equal的缩写	                等于则为真
                -ne	not equal的缩写	                不等于则为真
                -gt	greater than的缩写	                大于则为真
                -ge	greater & equal的缩写	                大于等于则为真
                -lt	lower than的缩写	                小于则为真
                -le	lower&equal的缩写	                小于等于则为真','                参数	英语源由	                说明
                -eq	equal的缩写	                等于则为真
                -ne	not equal的缩写	                不等于则为真
                -gt	greater than的缩写	                大于则为真
                -ge	greater & equal的缩写	                大于等于则为真
                -lt	lower than的缩写	                小于则为真
                -le	lower&equal的缩写	                小于等于则为真',0,'alvin',curdate());
insert into Content values(2661,31,'p',6,'{}','实例演示：','实例演示：',0,'alvin',curdate());
insert into Content values(2662,31,'pre',7,'{"class": ["prettyprint", "lang-bash"]}','num1=100
num2=100
if test $[num1] -eq $[num2]
then
    echo \'两个数相等！\'
else
    echo \'两个数不相等！\'
fi
','num1=100
num2=100
if test $[num1] -eq $[num2]
then
    echo \'两个数相等！\'
else
    echo \'两个数不相等！\'
fi
',0,'alvin',curdate());
insert into Content values(2663,31,'p',8,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2664,31,'pre',9,'{"class": ["prettyprint", "lang-bash"]}','两个数相等！
','两个数相等！
',0,'alvin',curdate());
insert into Content values(2665,31,'p',10,'{}','代码中的 [] 执行基本的算数运算，如：','代码中的 [] 执行基本的算数运算，如：',0,'alvin',curdate());
insert into Content values(2666,31,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash

a=5
b=6

result=$[a+b] # 注意等号两边不能有空格
echo "result 为： $result"
','#!/bin/bash

a=5
b=6

result=$[a+b] # 注意等号两边不能有空格
echo "result 为： $result"
',0,'alvin',curdate());
insert into Content values(2667,31,'p',12,'{}','结果为:','结果为:',0,'alvin',curdate());
insert into Content values(2668,31,'pre',13,'{"class": ["prettyprint", "lang-bash"]}','result 为： 11
','result 为： 11
',0,'alvin',curdate());
insert into Content values(2669,31,'line',14,'{}','','',0,'alvin',curdate());
insert into Content values(2670,31,'h2',15,'{}','字符串测试','字符串测试',0,'alvin',curdate());
insert into Content values(2671,31,'table',16,'{"class": ["table", "table-bordered", "table-striped"]}','                参数	                说明
                =	                等于则为真
                !=	                不相等则为真
                -z 字符串	                字符串的长度为零则为真
                -n 字符串	                字符串的长度不为零则为真','                参数	                说明
                =	                等于则为真
                !=	                不相等则为真
                -z 字符串	                字符串的长度为零则为真
                -n 字符串	                字符串的长度不为零则为真',0,'alvin',curdate());
insert into Content values(2672,31,'p',17,'{}','实例演示：','实例演示：',0,'alvin',curdate());
insert into Content values(2673,31,'pre',18,'{"class": ["prettyprint", "lang-bash"]}','num1="ru1noob"
num2="runoob"
if test $num1 = $num2
then
    echo \'两个字符串相等!\'
else
    echo \'两个字符串不相等!\'
fi
','num1="ru1noob"
num2="runoob"
if test $num1 = $num2
then
    echo \'两个字符串相等!\'
else
    echo \'两个字符串不相等!\'
fi
',0,'alvin',curdate());
insert into Content values(2674,31,'p',19,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2675,31,'pre',20,'{"class": ["prettyprint", "lang-bash"]}','两个字符串不相等!
','两个字符串不相等!
',0,'alvin',curdate());
insert into Content values(2676,31,'line',21,'{}','','',0,'alvin',curdate());
insert into Content values(2677,31,'h2',22,'{}','文件测试','文件测试',0,'alvin',curdate());
insert into Content values(2678,31,'table',23,'{"class": ["table", "table-bordered", "table-striped"]}','                参数	                说明
                -e 文件名	                如果文件存在则为真
                -r 文件名	                如果文件存在且可读则为真
                -w 文件名	                如果文件存在且可写则为真
                -x 文件名	                如果文件存在且可执行则为真
                -s 文件名	                如果文件存在且至少有一个字符则为真
                -d 文件名	                如果文件存在且为目录则为真
                -f 文件名	                如果文件存在且为普通文件则为真
                -c 文件名	                如果文件存在且为字符型特殊文件则为真
                -b 文件名	                如果文件存在且为块特殊文件则为真
                -L 文件名	                如果文件存在且为符号链接则为真
                -h 文件名	                如果文件存在且为软链接则为真
                -O 文件名	                如果文件存在且属于当前用户则为真
                -G 文件名	                如果文件存在且属于当前用户组则为真
                文件名 -nt 文件名	                判断file1是否比file2新 [ "/data/file1" -nt "/data/file2" ]
                文件名 -ot 文件名	                判断file1是否比file2旧 [ "/data/file1" -ot "/data/file2" ]','                参数	                说明
                -e 文件名	                如果文件存在则为真
                -r 文件名	                如果文件存在且可读则为真
                -w 文件名	                如果文件存在且可写则为真
                -x 文件名	                如果文件存在且可执行则为真
                -s 文件名	                如果文件存在且至少有一个字符则为真
                -d 文件名	                如果文件存在且为目录则为真
                -f 文件名	                如果文件存在且为普通文件则为真
                -c 文件名	                如果文件存在且为字符型特殊文件则为真
                -b 文件名	                如果文件存在且为块特殊文件则为真
                -L 文件名	                如果文件存在且为符号链接则为真
                -h 文件名	                如果文件存在且为软链接则为真
                -O 文件名	                如果文件存在且属于当前用户则为真
                -G 文件名	                如果文件存在且属于当前用户组则为真
                文件名 -nt 文件名	                判断file1是否比file2新 [ "/data/file1" -nt "/data/file2" ]
                文件名 -ot 文件名	                判断file1是否比file2旧 [ "/data/file1" -ot "/data/file2" ]',0,'alvin',curdate());
insert into Content values(2679,31,'p',24,'{}','实例演示：','实例演示：',0,'alvin',curdate());
insert into Content values(2680,31,'pre',25,'{"class": ["prettyprint", "lang-bash"]}','cd /bin
if test -e ./bash
then
    echo \'文件已存在!\'
else
    echo \'文件不存在!\'
fi
','cd /bin
if test -e ./bash
then
    echo \'文件已存在!\'
else
    echo \'文件不存在!\'
fi
',0,'alvin',curdate());
insert into Content values(2681,31,'p',26,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2682,31,'pre',27,'{"class": ["prettyprint", "lang-bash"]}','文件已存在!
','文件已存在!
',0,'alvin',curdate());
insert into Content values(2683,31,'p',28,'{}','另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高，"-a"次之，"-o"最低。例如：','另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为："!"最高，"-a"次之，"-o"最低。例如：',0,'alvin',curdate());
insert into Content values(2684,31,'pre',29,'{"class": ["prettyprint", "lang-bash"]}','cd /bin
if test -e ./notFile -o -e ./bash
then
    echo \'至少有一个文件存在!\'
else
    echo \'两个文件都不存在\'
fi
','cd /bin
if test -e ./notFile -o -e ./bash
then
    echo \'至少有一个文件存在!\'
else
    echo \'两个文件都不存在\'
fi
',0,'alvin',curdate());
insert into Content values(2685,31,'p',30,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2686,31,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','至少有一个文件存在!
','至少有一个文件存在!
',0,'alvin',curdate());
insert into Content values(2687,32,'h1',1,'{}','Shell 流程控制','Shell 流程控制',0,'alvin',curdate());
insert into Content values(2688,32,'p',2,'{}','和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：','和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：',0,'alvin',curdate());
insert into Content values(2689,32,'pre',3,'{"class": ["prettyprint", "lang-bash"]}','<?php
if (isset($_GET["q"])) {
    search(q);
}
else {
    // 不做任何事情
}','<?php
if (isset($_GET["q"])) {
    search(q);
}
else {
    // 不做任何事情
}',0,'alvin',curdate());
insert into Content values(2690,32,'p',4,'{}','在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。','在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。',0,'alvin',curdate());
insert into Content values(2691,32,'line',5,'{}','','',0,'alvin',curdate());
insert into Content values(2692,32,'h2',6,'{}','if else','if else',0,'alvin',curdate());
insert into Content values(2693,32,'h3',7,'{}','if','if',0,'alvin',curdate());
insert into Content values(2694,32,'p',8,'{}','if 语句语法格式：','if 语句语法格式：',0,'alvin',curdate());
insert into Content values(2695,32,'pre',9,'{"class": ["prettyprint", "lang-bash"]}','if condition
then
    command1 
    command2
    ...
    commandN 
fi','if condition
then
    command1 
    command2
    ...
    commandN 
fi',0,'alvin',curdate());
insert into Content values(2696,32,'p',10,'{}','写成一行（适用于终端命令提示符）：','写成一行（适用于终端命令提示符）：',0,'alvin',curdate());
insert into Content values(2697,32,'pre',11,'{"class": ["prettyprint", "lang-bash"]}','if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi
    ','if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi
    ',0,'alvin',curdate());
insert into Content values(2698,32,'p',12,'{}','末尾的fi就是if倒过来拼写，后面还会遇到类似的。','末尾的fi就是if倒过来拼写，后面还会遇到类似的。',0,'alvin',curdate());
insert into Content values(2699,32,'h3',13,'{}','if else','if else',0,'alvin',curdate());
insert into Content values(2700,32,'p',14,'{}','if else 语法格式：','if else 语法格式：',0,'alvin',curdate());
insert into Content values(2701,32,'pre',15,'{"class": ["prettyprint", "lang-bash"]}','if condition
then
    command1 
    command2
    ...
    commandN
else
    command
fi','if condition
then
    command1 
    command2
    ...
    commandN
else
    command
fi',0,'alvin',curdate());
insert into Content values(2702,32,'h3',16,'{}','if else-if else','if else-if else',0,'alvin',curdate());
insert into Content values(2703,32,'p',17,'{}','if else-if else 语法格式：','if else-if else 语法格式：',0,'alvin',curdate());
insert into Content values(2704,32,'pre',18,'{"class": ["prettyprint", "lang-bash"]}','if condition1
then
    command1
elif condition2 
then 
    command2
else
    commandN
fi','if condition1
then
    command1
elif condition2 
then 
    command2
else
    commandN
fi',0,'alvin',curdate());
insert into Content values(2705,32,'p',19,'{}','以下实例判断两个变量是否相等：','以下实例判断两个变量是否相等：',0,'alvin',curdate());
insert into Content values(2706,32,'pre',20,'{"class": ["prettyprint", "lang-bash"]}','a=10
b=20
if [ $a == $b ]
then
   echo "a 等于 b"
elif [ $a -gt $b ]
then
   echo "a 大于 b"
elif [ $a -lt $b ]
then
   echo "a 小于 b"
else
   echo "没有符合的条件"
fi','a=10
b=20
if [ $a == $b ]
then
   echo "a 等于 b"
elif [ $a -gt $b ]
then
   echo "a 大于 b"
elif [ $a -lt $b ]
then
   echo "a 小于 b"
else
   echo "没有符合的条件"
fi',0,'alvin',curdate());
insert into Content values(2707,32,'p',21,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2708,32,'pre',22,'{"class": ["prettyprint", "lang-bash"]}','a 小于 b
    ','a 小于 b
    ',0,'alvin',curdate());
insert into Content values(2709,32,'p',23,'{}','if else语句经常与test命令结合使用，如下所示：','if else语句经常与test命令结合使用，如下所示：',0,'alvin',curdate());
insert into Content values(2710,32,'pre',24,'{"class": ["prettyprint", "lang-bash"]}','num1=$[2*3]
num2=$[1+5]
if test $[num1] -eq $[num2]
then
    echo \'两个数字相等!\'
else
    echo \'两个数字不相等!\'
fi','num1=$[2*3]
num2=$[1+5]
if test $[num1] -eq $[num2]
then
    echo \'两个数字相等!\'
else
    echo \'两个数字不相等!\'
fi',0,'alvin',curdate());
insert into Content values(2711,32,'p',25,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2712,32,'pre',26,'{"class": ["prettyprint", "lang-bash"]}','两个数字相等!
    ','两个数字相等!
    ',0,'alvin',curdate());
insert into Content values(2713,32,'line',27,'{}','','',0,'alvin',curdate());
insert into Content values(2714,32,'h2',28,'{}','for 循环','for 循环',0,'alvin',curdate());
insert into Content values(2715,32,'p',29,'{}','与其他编程语言类似，Shell支持for循环。','与其他编程语言类似，Shell支持for循环。',0,'alvin',curdate());
insert into Content values(2716,32,'p',30,'{}','for循环一般格式为：','for循环一般格式为：',0,'alvin',curdate());
insert into Content values(2717,32,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','for var in item1 item2 ... itemN
do
    command1
    command2
    ...
    commandN
done','for var in item1 item2 ... itemN
do
    command1
    command2
    ...
    commandN
done',0,'alvin',curdate());
insert into Content values(2718,32,'p',32,'{}','写成一行：','写成一行：',0,'alvin',curdate());
insert into Content values(2719,32,'pre',33,'{"class": ["prettyprint", "lang-bash"]}','for var in item1 item2 ... itemN; do command1; command2… done;','for var in item1 item2 ... itemN; do command1; command2… done;',0,'alvin',curdate());
insert into Content values(2720,32,'p',34,'{}','当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。    ','当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。    ',0,'alvin',curdate());
insert into Content values(2721,32,'p',35,'{}','in列表是可选的，如果不用它，for循环使用命令行的位置参数。','in列表是可选的，如果不用它，for循环使用命令行的位置参数。',0,'alvin',curdate());
insert into Content values(2722,32,'p',36,'{}','例如，顺序输出当前列表中的数字：','例如，顺序输出当前列表中的数字：',0,'alvin',curdate());
insert into Content values(2723,32,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','for loop in 1 2 3 4 5
do
    echo "The value is: $loop"
done
    ','for loop in 1 2 3 4 5
do
    echo "The value is: $loop"
done
    ',0,'alvin',curdate());
insert into Content values(2724,32,'p',38,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2725,32,'pre',39,'{"class": ["prettyprint", "lang-bash"]}','The value is: 1
The value is: 2
The value is: 3
The value is: 4
The value is: 5','The value is: 1
The value is: 2
The value is: 3
The value is: 4
The value is: 5',0,'alvin',curdate());
insert into Content values(2726,32,'p',40,'{}','顺序输出字符串中的字符：','顺序输出字符串中的字符：',0,'alvin',curdate());
insert into Content values(2727,32,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','for str in \'This is a string\'
do
    echo $str
done','for str in \'This is a string\'
do
    echo $str
done',0,'alvin',curdate());
insert into Content values(2728,32,'p',42,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2729,32,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','This is a string','This is a string',0,'alvin',curdate());
insert into Content values(2730,32,'p',44,'{}','shell 中的 for 循环不仅可以用文章所述的方法。','shell 中的 for 循环不仅可以用文章所述的方法。',0,'alvin',curdate());
insert into Content values(2731,32,'p',45,'{}','对于习惯其他语言 for 循环的朋友来说可能有点别扭。','对于习惯其他语言 for 循环的朋友来说可能有点别扭。',0,'alvin',curdate());
insert into Content values(2732,32,'pre',46,'{"class": ["prettyprint", "lang-bash"]}','for((assignment;condition:next));do
    command_1;
    command_2;
    commond_..;
done;','for((assignment;condition:next));do
    command_1;
    command_2;
    commond_..;
done;',0,'alvin',curdate());
insert into Content values(2733,32,'p',47,'{}','如上所示，这里的 for 循环与 C 中的相似，但并不完全相同。','如上所示，这里的 for 循环与 C 中的相似，但并不完全相同。',0,'alvin',curdate());
insert into Content values(2734,32,'p',48,'{}','通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要,下面来看一个例子：','通常情况下 shell 变量调用需要加 $,但是 for 的 (()) 中不需要,下面来看一个例子：',0,'alvin',curdate());
insert into Content values(2735,32,'pre',49,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
for((i=1;i<=5;i++));do
    echo "这是第 $i 次调用";
done;','#!/bin/bash
for((i=1;i<=5;i++));do
    echo "这是第 $i 次调用";
done;',0,'alvin',curdate());
insert into Content values(2736,32,'p',50,'{}','执行结果：','执行结果：',0,'alvin',curdate());
insert into Content values(2737,32,'pre',51,'{"class": ["prettyprint", "lang-bash"]}','这是第1次调用
这是第2次调用
这是第3次调用
这是第4次调用
这是第5次调用','这是第1次调用
这是第2次调用
这是第3次调用
这是第4次调用
这是第5次调用',0,'alvin',curdate());
insert into Content values(2738,32,'p',52,'{}','与 C 中相似，赋值和下一步执行可以放到代码之前循环语句之中执行，这里要注意一点：如果要在循环体中进行 for 中的 next        操作，记得变量要加 $，不然程序会变成死循环。','与 C 中相似，赋值和下一步执行可以放到代码之前循环语句之中执行，这里要注意一点：如果要在循环体中进行 for 中的 next        操作，记得变量要加 $，不然程序会变成死循环。',0,'alvin',curdate());
insert into Content values(2739,32,'line',53,'{}','','',0,'alvin',curdate());
insert into Content values(2740,32,'h2',54,'{}','while 语句','while 语句',0,'alvin',curdate());
insert into Content values(2741,32,'p',55,'{}','while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：','while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：',0,'alvin',curdate());
insert into Content values(2742,32,'pre',56,'{"class": ["prettyprint", "lang-bash"]}','while condition
do
    command
done','while condition
do
    command
done',0,'alvin',curdate());
insert into Content values(2743,32,'p',57,'{}','以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。    ','以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。    ',0,'alvin',curdate());
insert into Content values(2744,32,'pre',58,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
int=1
while(( $int<=5 ))
do
    echo $int
    let "int++"
done','#!/bin/bash
int=1
while(( $int<=5 ))
do
    echo $int
    let "int++"
done',0,'alvin',curdate());
insert into Content values(2745,32,'p',59,'{}','运行脚本，输出：','运行脚本，输出：',0,'alvin',curdate());
insert into Content values(2746,32,'pre',60,'{"class": ["prettyprint", "lang-bash"]}','1
2
3
4
5','1
2
3
4
5',0,'alvin',curdate());
insert into Content values(2747,32,'p',61,'{}',' 以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅： <a href="//www.runoob.com/linux/linux-comm-let.html" rel="noopener noreferrer" target="_blank">  Bash let 命令 </a>',' 以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅： <a href="//www.runoob.com/linux/linux-comm-let.html" rel="noopener noreferrer" target="_blank">  Bash let 命令 </a>',0,'alvin',curdate());
insert into Content values(2748,32,'p',62,'{}','while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<Ctrl-D>结束循环。','while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<Ctrl-D>结束循环。',0,'alvin',curdate());
insert into Content values(2749,32,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','echo \'按下 <CTRL-D> 退出\'
echo -n \'输入你最喜欢的网站名: \'
while read FILM
do
    echo "是的！$FILM 是一个好网站"
done','echo \'按下 <CTRL-D> 退出\'
echo -n \'输入你最喜欢的网站名: \'
while read FILM
do
    echo "是的！$FILM 是一个好网站"
done',0,'alvin',curdate());
insert into Content values(2750,32,'p',64,'{}','运行脚本，输出类似下面：','运行脚本，输出类似下面：',0,'alvin',curdate());
insert into Content values(2751,32,'pre',65,'{"class": ["prettyprint", "lang-bash"]}','按下 <CTRL-D> 退出
输入你最喜欢的网站名:菜鸟教程
是的！菜鸟教程 是一个好网站
    ','按下 <CTRL-D> 退出
输入你最喜欢的网站名:菜鸟教程
是的！菜鸟教程 是一个好网站
    ',0,'alvin',curdate());
insert into Content values(2752,32,'h3',66,'{}','无限循环','无限循环',0,'alvin',curdate());
insert into Content values(2753,32,'p',67,'{}','无限循环语法格式：','无限循环语法格式：',0,'alvin',curdate());
insert into Content values(2754,32,'pre',68,'{"class": ["prettyprint", "lang-bash"]}','while :
do
    command
done','while :
do
    command
done',0,'alvin',curdate());
insert into Content values(2755,32,'p',69,'{}','或者','或者',0,'alvin',curdate());
insert into Content values(2756,32,'pre',70,'{"class": ["prettyprint", "lang-bash"]}','while true
do
    command
done','while true
do
    command
done',0,'alvin',curdate());
insert into Content values(2757,32,'p',71,'{}','或者','或者',0,'alvin',curdate());
insert into Content values(2758,32,'pre',72,'{"class": ["prettyprint", "lang-bash"]}','for (( ; ; ))','for (( ; ; ))',0,'alvin',curdate());
insert into Content values(2759,32,'p',73,'{}','','',0,'alvin',curdate());
insert into Content values(2760,32,'line',74,'{}','','',0,'alvin',curdate());
insert into Content values(2761,32,'h2',75,'{}','until 循环','until 循环',0,'alvin',curdate());
insert into Content values(2762,32,'p',76,'{}','until 循环执行一系列命令直至条件为 true 时停止。','until 循环执行一系列命令直至条件为 true 时停止。',0,'alvin',curdate());
insert into Content values(2763,32,'p',77,'{}','until 循环与 while 循环在处理方式上刚好相反。','until 循环与 while 循环在处理方式上刚好相反。',0,'alvin',curdate());
insert into Content values(2764,32,'p',78,'{}','一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。','一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。',0,'alvin',curdate());
insert into Content values(2765,32,'p',79,'{}','until 语法格式:','until 语法格式:',0,'alvin',curdate());
insert into Content values(2766,32,'pre',80,'{"class": ["prettyprint", "lang-bash"]}','until condition
do
    command
done','until condition
do
    command
done',0,'alvin',curdate());
insert into Content values(2767,32,'p',81,'{}','condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。','condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。',0,'alvin',curdate());
insert into Content values(2768,32,'p',82,'{}','以下实例我们使用 until 命令来输出 0 ~ 9 的数字：','以下实例我们使用 until 命令来输出 0 ~ 9 的数字：',0,'alvin',curdate());
insert into Content values(2769,32,'pre',83,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash

a=0

until [ ! $a -lt 10 ]
do
   echo $a
   a=`expr $a + 1`
done','#!/bin/bash

a=0

until [ ! $a -lt 10 ]
do
   echo $a
   a=`expr $a + 1`
done',0,'alvin',curdate());
insert into Content values(2770,32,'p',84,'{}','运行结果：','运行结果：',0,'alvin',curdate());
insert into Content values(2771,32,'p',85,'{}','输出结果为：','输出结果为：',0,'alvin',curdate());
insert into Content values(2772,32,'pre',86,'{"class": ["prettyprint", "lang-bash"]}','0
1
2
3
4
5
6
7
8
9','0
1
2
3
4
5
6
7
8
9',0,'alvin',curdate());
insert into Content values(2773,32,'line',87,'{}','','',0,'alvin',curdate());
insert into Content values(2774,32,'h2',88,'{}','case','case',0,'alvin',curdate());
insert into Content values(2775,32,'p',89,'{}','Shell        case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：','Shell        case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：',0,'alvin',curdate());
insert into Content values(2776,32,'pre',90,'{"class": ["prettyprint", "lang-bash"]}','case 值 in
模式1)
    command1
    command2
    ...
    commandN
    ;;
模式2）
    command1
    command2
    ...
    commandN
    ;;
esac','case 值 in
模式1)
    command1
    command2
    ...
    commandN
    ;;
模式2）
    command1
    command2
    ...
    commandN
    ;;
esac',0,'alvin',curdate());
insert into Content values(2777,32,'p',91,'{}','case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至        ;;。','case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至        ;;。',0,'alvin',curdate());
insert into Content values(2778,32,'p',92,'{}','取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 *        捕获该值，再执行后面的命令。','取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 *        捕获该值，再执行后面的命令。',0,'alvin',curdate());
insert into Content values(2779,32,'p',93,'{}','下面的脚本提示输入1到4，与每一种模式进行匹配：','下面的脚本提示输入1到4，与每一种模式进行匹配：',0,'alvin',curdate());
insert into Content values(2780,32,'pre',94,'{"class": ["prettyprint", "lang-bash"]}','echo \'输入 1 到 4 之间的数字:\'
echo \'你输入的数字为:\'
read aNum
case $aNum in
    1)  echo \'你选择了 1\'
    ;;
    2)  echo \'你选择了 2\'
    ;;
    3)  echo \'你选择了 3\'
    ;;
    4)  echo \'你选择了 4\'
    ;;
    *)  echo \'你没有输入 1 到 4 之间的数字\'
    ;;
esac','echo \'输入 1 到 4 之间的数字:\'
echo \'你输入的数字为:\'
read aNum
case $aNum in
    1)  echo \'你选择了 1\'
    ;;
    2)  echo \'你选择了 2\'
    ;;
    3)  echo \'你选择了 3\'
    ;;
    4)  echo \'你选择了 4\'
    ;;
    *)  echo \'你没有输入 1 到 4 之间的数字\'
    ;;
esac',0,'alvin',curdate());
insert into Content values(2781,32,'p',95,'{}','输入不同的内容，会有不同的结果，例如：','输入不同的内容，会有不同的结果，例如：',0,'alvin',curdate());
insert into Content values(2782,32,'pre',96,'{"class": ["prettyprint", "lang-bash"]}','输入 1 到 4 之间的数字:
你输入的数字为:
3
你选择了 3','输入 1 到 4 之间的数字:
你输入的数字为:
3
你选择了 3',0,'alvin',curdate());
insert into Content values(2783,32,'line',97,'{}','','',0,'alvin',curdate());
insert into Content values(2784,32,'h2',98,'{}','跳出循环','跳出循环',0,'alvin',curdate());
insert into Content values(2785,32,'p',99,'{}','在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。    ','在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。    ',0,'alvin',curdate());
insert into Content values(2786,32,'h3',100,'{}','break命令','break命令',0,'alvin',curdate());
insert into Content values(2787,32,'p',101,'{}','break命令允许跳出所有循环（终止执行后面的所有循环）。','break命令允许跳出所有循环（终止执行后面的所有循环）。',0,'alvin',curdate());
insert into Content values(2788,32,'p',102,'{}','下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。','下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。',0,'alvin',curdate());
insert into Content values(2789,32,'pre',103,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
while :
do
    echo -n "输入 1 到 5 之间的数字:"
    read aNum
    case $aNum in
        1|2|3|4|5) echo "你输入的数字为 $aNum!"
        ;;
        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"
            break
        ;;
    esac
done','#!/bin/bash
while :
do
    echo -n "输入 1 到 5 之间的数字:"
    read aNum
    case $aNum in
        1|2|3|4|5) echo "你输入的数字为 $aNum!"
        ;;
        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"
            break
        ;;
    esac
done',0,'alvin',curdate());
insert into Content values(2790,32,'p',104,'{}','执行以上代码，输出结果为：','执行以上代码，输出结果为：',0,'alvin',curdate());
insert into Content values(2791,32,'pre',105,'{"class": ["prettyprint", "lang-bash"]}','输入 1 到 5 之间的数字:3
你输入的数字为 3!
输入 1 到 5 之间的数字:7
你输入的数字不是 1 到 5 之间的! 游戏结束','输入 1 到 5 之间的数字:3
你输入的数字为 3!
输入 1 到 5 之间的数字:7
你输入的数字不是 1 到 5 之间的! 游戏结束',0,'alvin',curdate());
insert into Content values(2792,32,'h3',106,'{}','continue','continue',0,'alvin',curdate());
insert into Content values(2793,32,'p',107,'{}','continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。','continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。',0,'alvin',curdate());
insert into Content values(2794,32,'p',108,'{}','对上面的例子进行修改：','对上面的例子进行修改：',0,'alvin',curdate());
insert into Content values(2795,32,'pre',109,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
while :
do
    echo -n "输入 1 到 5 之间的数字: "
    read aNum
    case $aNum in
        1|2|3|4|5) echo "你输入的数字为 $aNum!"
        ;;
        *) echo "你输入的数字不是 1 到 5 之间的!"
            continue
            echo "游戏结束"
        ;;
    esac
done','#!/bin/bash
while :
do
    echo -n "输入 1 到 5 之间的数字: "
    read aNum
    case $aNum in
        1|2|3|4|5) echo "你输入的数字为 $aNum!"
        ;;
        *) echo "你输入的数字不是 1 到 5 之间的!"
            continue
            echo "游戏结束"
        ;;
    esac
done',0,'alvin',curdate());
insert into Content values(2796,32,'p',110,'{}',' 运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 BOLD[  echo "游戏结束" ]BOLD 永远不会被执行。',' 运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 BOLD[  echo "游戏结束" ]BOLD 永远不会被执行。',0,'alvin',curdate());
insert into Content values(2797,32,'line',111,'{}','','',0,'alvin',curdate());
insert into Content values(2798,32,'h2',112,'{}','esac','esac',0,'alvin',curdate());
insert into Content values(2799,32,'p',113,'{}','case的语法和C        family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。','case的语法和C        family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。',0,'alvin',curdate());
insert into Content values(2800,33,'h1',1,'{}','Shell 函数','Shell 函数',0,'alvin',curdate());
insert into Content values(2801,33,'p',2,'{}','linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。','linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。',0,'alvin',curdate());
insert into Content values(2802,33,'p',3,'{}','shell中函数的定义格式如下：','shell中函数的定义格式如下：',0,'alvin',curdate());
insert into Content values(2803,33,'pre',4,'{"class": ["prettyprint", "lang-bash"]}','[ function ] funname [()]
{
    action;
    [return int;]
}','[ function ] funname [()]
{
    action;
    [return int;]
}',0,'alvin',curdate());
insert into Content values(2804,33,'p',5,'{}','说明：','说明：',0,'alvin',curdate());
insert into Content values(2805,33,'ul',6,'{}','1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。            return后跟数值n(0-255','1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。
2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。            return后跟数值n(0-255',0,'alvin',curdate());
insert into Content values(2806,33,'p',7,'{}','下面的例子定义了一个函数并进行调用：','下面的例子定义了一个函数并进行调用：',0,'alvin',curdate());
insert into Content values(2807,33,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

demoFun(){
    echo "这是我的第一个 shell 函数!"
}
echo "-----函数开始执行-----"
demoFun
echo "-----函数执行完毕-----"','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

demoFun(){
    echo "这是我的第一个 shell 函数!"
}
echo "-----函数开始执行-----"
demoFun
echo "-----函数执行完毕-----"',0,'alvin',curdate());
insert into Content values(2808,33,'p',9,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2809,33,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','-----函数开始执行-----
这是我的第一个 shell 函数!
-----函数执行完毕-----','-----函数开始执行-----
这是我的第一个 shell 函数!
-----函数执行完毕-----',0,'alvin',curdate());
insert into Content values(2810,33,'p',11,'{}','下面定义一个带有return语句的函数：','下面定义一个带有return语句的函数：',0,'alvin',curdate());
insert into Content values(2811,33,'pre',12,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

funWithReturn(){
    echo "这个函数会对输入的两个数字进行相加运算..."
    echo "输入第一个数字: "
    read aNum
    echo "输入第二个数字: "
    read anotherNum
    echo "两个数字分别为 $aNum 和 $anotherNum !"
    return $(($aNum+$anotherNum))
}
funWithReturn
echo "输入的两个数字之和为 $? !"','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

funWithReturn(){
    echo "这个函数会对输入的两个数字进行相加运算..."
    echo "输入第一个数字: "
    read aNum
    echo "输入第二个数字: "
    read anotherNum
    echo "两个数字分别为 $aNum 和 $anotherNum !"
    return $(($aNum+$anotherNum))
}
funWithReturn
echo "输入的两个数字之和为 $? !"',0,'alvin',curdate());
insert into Content values(2812,33,'p',13,'{}','输出类似下面：','输出类似下面：',0,'alvin',curdate());
insert into Content values(2813,33,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','这个函数会对输入的两个数字进行相加运算...
输入第一个数字: 
1
输入第二个数字: 
2
两个数字分别为 1 和 2 !
输入的两个数字之和为 3 !','这个函数会对输入的两个数字进行相加运算...
输入第一个数字: 
1
输入第二个数字: 
2
两个数字分别为 1 和 2 !
输入的两个数字之和为 3 !',0,'alvin',curdate());
insert into Content values(2814,33,'p',15,'{}','函数返回值在调用该函数后通过 $? 来获得。','函数返回值在调用该函数后通过 $? 来获得。',0,'alvin',curdate());
insert into Content values(2815,33,'p',16,'{}','        注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。    ','        注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。    ',0,'alvin',curdate());
insert into Content values(2816,33,'line',17,'{}','','',0,'alvin',curdate());
insert into Content values(2817,33,'h2',18,'{}','函数参数','函数参数',0,'alvin',curdate());
insert into Content values(2818,33,'p',19,'{}','在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n        的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...','在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n        的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数...',0,'alvin',curdate());
insert into Content values(2819,33,'p',20,'{}','带参数的函数示例：','带参数的函数示例：',0,'alvin',curdate());
insert into Content values(2820,33,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

funWithParam(){
    echo "第一个参数为 $1 !"
    echo "第二个参数为 $2 !"
    echo "第十个参数为 $10 !"
    echo "第十个参数为 ${10} !"
    echo "第十一个参数为 ${11} !"
    echo "参数总数有 $# 个!"
    echo "作为一个字符串输出所有参数 $* !"
}
funWithParam 1 2 3 4 5 6 7 8 9 34 73','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

funWithParam(){
    echo "第一个参数为 $1 !"
    echo "第二个参数为 $2 !"
    echo "第十个参数为 $10 !"
    echo "第十个参数为 ${10} !"
    echo "第十一个参数为 ${11} !"
    echo "参数总数有 $# 个!"
    echo "作为一个字符串输出所有参数 $* !"
}
funWithParam 1 2 3 4 5 6 7 8 9 34 73',0,'alvin',curdate());
insert into Content values(2821,33,'p',22,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2822,33,'pre',23,'{"class": ["prettyprint", "lang-bash"]}','第一个参数为 1 !
第二个参数为 2 !
第十个参数为 10 !
第十个参数为 34 !
第十一个参数为 73 !
参数总数有 11 个!
作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !','第一个参数为 1 !
第二个参数为 2 !
第十个参数为 10 !
第十个参数为 34 !
第十一个参数为 73 !
参数总数有 11 个!
作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !',0,'alvin',curdate());
insert into Content values(2823,33,'p',24,'{}','注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。','注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数。',0,'alvin',curdate());
insert into Content values(2824,33,'p',25,'{}','另外，还有几个特殊字符用来处理参数：','另外，还有几个特殊字符用来处理参数：',0,'alvin',curdate());
insert into Content values(2825,33,'table',26,'{"class": ["table", "table-bordered", "table-striped"]}','参数处理	说明
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。','参数处理	说明
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。',0,'alvin',curdate());
insert into Content values(2826,33,'p',27,'{}',' BLUE_BG[  $? ]BLUE_BG 仅对其上一条指令负责，一旦函数返回后其返回值没有立即保存入参数，那么其返回值将不再能通过 BLUE_BG[  $? ]BLUE_BG 获得。',' BLUE_BG[  $? ]BLUE_BG 仅对其上一条指令负责，一旦函数返回后其返回值没有立即保存入参数，那么其返回值将不再能通过 BLUE_BG[  $? ]BLUE_BG 获得。',0,'alvin',curdate());
insert into Content values(2827,33,'p',28,'{}','测试代码：','测试代码：',0,'alvin',curdate());
insert into Content values(2828,33,'pre',29,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
function demoFun1(){
    echo "这是我的第一个 shell 函数!"
    return `expr 1 + 1`
}

demoFun1
echo $?

function demoFun2(){
 echo "这是我的第二个 shell 函数!"
 expr 1 + 1
}

demoFun2
echo $?
demoFun1
echo 在这里插入命令！
echo $?','#!/bin/bash
function demoFun1(){
    echo "这是我的第一个 shell 函数!"
    return `expr 1 + 1`
}

demoFun1
echo $?

function demoFun2(){
 echo "这是我的第二个 shell 函数!"
 expr 1 + 1
}

demoFun2
echo $?
demoFun1
echo 在这里插入命令！
echo $?',0,'alvin',curdate());
insert into Content values(2829,33,'p',30,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2830,33,'pre',31,'{"class": ["prettyprint", "lang-bash"]}','这是我的第一个 shell 函数!
2
这是我的第二个 shell 函数!
2
0
这是我的第一个 shell 函数!
在这里插入命令！
0','这是我的第一个 shell 函数!
2
这是我的第二个 shell 函数!
2
0
这是我的第一个 shell 函数!
在这里插入命令！
0',0,'alvin',curdate());
insert into Content values(2831,33,'p',32,'{}','调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。','调用 demoFun2 后，函数最后一条命令 expr 1 + 1 得到的返回值（$?值）为 0，意思是这个命令没有出错。所有的命令的返回值仅表示其是否出错，而不会有其他有含义的结果。',0,'alvin',curdate());
insert into Content values(2832,33,'p',33,'{}','第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。','第二次调用 demoFun1 后，没有立即查看 $? 的值，而是先插入了一条别的 echo 命令，最后再查看 $? 的值得到的是 0，也就是上一条 echo 命令的结果，而 demoFun1 的返回值被覆盖了。',0,'alvin',curdate());
insert into Content values(2833,33,'p',34,'{}',' 下面这个测试，连续使用两次 BOLD[  echo $? ]BOLD ，得到的结果不同，更为直观：',' 下面这个测试，连续使用两次 BOLD[  echo $? ]BOLD ，得到的结果不同，更为直观：',0,'alvin',curdate());
insert into Content values(2834,33,'pre',35,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash

function demoFun1(){
    echo "这是我的第一个 shell 函数!"
    return `expr 1 + 1`
}

demoFun1
echo $?
echo $?','#!/bin/bash

function demoFun1(){
    echo "这是我的第一个 shell 函数!"
    return `expr 1 + 1`
}

demoFun1
echo $?
echo $?',0,'alvin',curdate());
insert into Content values(2835,33,'p',36,'{}','输出结果：','输出结果：',0,'alvin',curdate());
insert into Content values(2836,33,'pre',37,'{"class": ["prettyprint", "lang-bash"]}','这是我的第一个 shell 函数!
2
0','这是我的第一个 shell 函数!
2
0',0,'alvin',curdate());
insert into Content values(2837,33,'p',38,'{}','函数与命令的执行结果可以作为条件语句使用。要注意的是，和 C 语言不同，shell 语言中 0 代表 true，0 以外的值代表 false。','函数与命令的执行结果可以作为条件语句使用。要注意的是，和 C 语言不同，shell 语言中 0 代表 true，0 以外的值代表 false。',0,'alvin',curdate());
insert into Content values(2838,33,'p',39,'{}','请参见下例：','请参见下例：',0,'alvin',curdate());
insert into Content values(2839,33,'pre',40,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash

echo "Hello World !" | grep -e Hello
echo $?
echo "Hello World !" | grep -e Bye
echo $?
if echo "Hello World !" | grep -e Hello
then
    echo true
else
    echo false
fi

if echo "Hello World !" | grep -e Bye
then
    echo true
else
    echo false
fi

function demoFun1(){
    return 0
}

function demoFun2(){
    return 12
}

if demoFun1
then
    echo true
else
    echo false
fi

if demoFun2
then
    echo ture
else
    echo false
fi','#!/bin/bash

echo "Hello World !" | grep -e Hello
echo $?
echo "Hello World !" | grep -e Bye
echo $?
if echo "Hello World !" | grep -e Hello
then
    echo true
else
    echo false
fi

if echo "Hello World !" | grep -e Bye
then
    echo true
else
    echo false
fi

function demoFun1(){
    return 0
}

function demoFun2(){
    return 12
}

if demoFun1
then
    echo true
else
    echo false
fi

if demoFun2
then
    echo ture
else
    echo false
fi',0,'alvin',curdate());
insert into Content values(2840,33,'p',41,'{}','其执行结果如下：','其执行结果如下：',0,'alvin',curdate());
insert into Content values(2841,33,'pre',42,'{"class": ["prettyprint", "lang-bash"]}','Hello World !
0
1
Hello World !
true
false
true
false','Hello World !
0
1
Hello World !
true
false
true
false',0,'alvin',curdate());
insert into Content values(2842,33,'p',43,'{}','grep 是从给定字符串中寻找匹配内容的命令。首先看出如果找到了匹配的内容，会打印匹配部分且得到的返回值 $? 为 0，如果找不到，则返回值 $? 为 1。','grep 是从给定字符串中寻找匹配内容的命令。首先看出如果找到了匹配的内容，会打印匹配部分且得到的返回值 $? 为 0，如果找不到，则返回值 $? 为 1。',0,'alvin',curdate());
insert into Content values(2843,33,'p',44,'{}','接下来分别将这两次执行的 grep 命令当作条件语句交给 if 判断，得出返回值 $? 为 0，即执行成功时，条件语句为 true，当返回值 $? 为 1，即执行失败时，条件语句为 false。','接下来分别将这两次执行的 grep 命令当作条件语句交给 if 判断，得出返回值 $? 为 0，即执行成功时，条件语句为 true，当返回值 $? 为 1，即执行失败时，条件语句为 false。',0,'alvin',curdate());
insert into Content values(2844,33,'p',45,'{}','之后再用函数的 return 值作为测试，其中 demoFun1 返回值为 0，demoFun2 返回值选择了任意一个和 0 不同的整数，这里为 12。','之后再用函数的 return 值作为测试，其中 demoFun1 返回值为 0，demoFun2 返回值选择了任意一个和 0 不同的整数，这里为 12。',0,'alvin',curdate());
insert into Content values(2845,33,'p',46,'{}','将函数作为条件语句交给 if 判断，得出返回值为 0 时，依然为 true，而返回值只要不是 0，条件语句都判断为 false。','将函数作为条件语句交给 if 判断，得出返回值为 0 时，依然为 true，而返回值只要不是 0，条件语句都判断为 false。',0,'alvin',curdate());
insert into Content values(2846,34,'h1',1,'{}','Shell 输入/输出重定向','Shell 输入/输出重定向',0,'alvin',curdate());
insert into Content values(2847,34,'p',2,'{}','大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。','大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回​​到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。',0,'alvin',curdate());
insert into Content values(2848,34,'p',3,'{}','重定向命令列表如下：','重定向命令列表如下：',0,'alvin',curdate());
insert into Content values(2849,34,'table',4,'{"class": ["table", "table-bordered", "table-striped"]}','                命令	                说明
                command > file	                将输出重定向到 file。
                command < file	                将输入重定向到 file。
                command >> file	                将输出以追加的方式重定向到 file。
                n > file	                将文件描述符为 n 的文件重定向到 file。
                n >> file	                将文件描述符为 n 的文件以追加的方式重定向到 file。
                n >& m	                将输出文件 m 和 n 合并。
                n <& m	                将输入文件 m 和 n 合并。
                << tag	                将开始标记 tag 和结束标记 tag 之间的内容作为输入。','                命令	                说明
                command > file	                将输出重定向到 file。
                command < file	                将输入重定向到 file。
                command >> file	                将输出以追加的方式重定向到 file。
                n > file	                将文件描述符为 n 的文件重定向到 file。
                n >> file	                将文件描述符为 n 的文件以追加的方式重定向到 file。
                n >& m	                将输出文件 m 和 n 合并。
                n <& m	                将输入文件 m 和 n 合并。
                << tag	                将开始标记 tag 和结束标记 tag 之间的内容作为输入。',0,'alvin',curdate());
insert into Content values(2850,34,'blockquote',5,'{}',' <p>  需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。 </p>',' <p>  需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。 </p>',0,'alvin',curdate());
insert into Content values(2851,34,'line',6,'{}','','',0,'alvin',curdate());
insert into Content values(2852,34,'h2',7,'{}','输出重定向','输出重定向',0,'alvin',curdate());
insert into Content values(2853,34,'p',8,'{}','重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:','重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:',0,'alvin',curdate());
insert into Content values(2854,34,'pre',9,'{"class": ["prettyprint", "lang-bash"]}','command1 > file1','command1 > file1',0,'alvin',curdate());
insert into Content values(2855,34,'p',10,'{}','上面这个命令执行command1然后将输出的内容存入file1。','上面这个命令执行command1然后将输出的内容存入file1。',0,'alvin',curdate());
insert into Content values(2856,34,'p',11,'{}','注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用>>操作符。','注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用>>操作符。',0,'alvin',curdate());
insert into Content values(2857,34,'h3',12,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2858,34,'p',13,'{}','执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):','执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):',0,'alvin',curdate());
insert into Content values(2859,34,'pre',14,'{"class": ["prettyprint", "lang-bash"]}','$ who > users','$ who > users',0,'alvin',curdate());
insert into Content values(2860,34,'p',15,'{}','执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。','执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。',0,'alvin',curdate());
insert into Content values(2861,34,'p',16,'{}','你可以使用 cat 命令查看文件内容：','你可以使用 cat 命令查看文件内容：',0,'alvin',curdate());
insert into Content values(2862,34,'pre',17,'{"class": ["prettyprint", "lang-bash"]}','$ cat users
_mbsetupuser console  Oct 31 17:35 
tianqixin    console  Oct 31 17:35 
tianqixin    ttys000  Dec  1 11:33 ','$ cat users
_mbsetupuser console  Oct 31 17:35 
tianqixin    console  Oct 31 17:35 
tianqixin    ttys000  Dec  1 11:33 ',0,'alvin',curdate());
insert into Content values(2863,34,'p',18,'{}','输出重定向会覆盖文件内容，请看下面的例子：','输出重定向会覆盖文件内容，请看下面的例子：',0,'alvin',curdate());
insert into Content values(2864,34,'pre',19,'{"class": ["prettyprint", "lang-bash"]}','$ echo "菜鸟教程：www.runoob.com" > users
$ cat users
菜鸟教程：www.runoob.com
$','$ echo "菜鸟教程：www.runoob.com" > users
$ cat users
菜鸟教程：www.runoob.com
$',0,'alvin',curdate());
insert into Content values(2865,34,'p',20,'{}','如果不希望文件内容被覆盖，可以使用 >> 追加到文件末尾，例如：','如果不希望文件内容被覆盖，可以使用 >> 追加到文件末尾，例如：',0,'alvin',curdate());
insert into Content values(2866,34,'pre',21,'{"class": ["prettyprint", "lang-bash"]}','$ echo "菜鸟教程：www.runoob.com" >> users
$ cat users
菜鸟教程：www.runoob.com
菜鸟教程：www.runoob.com
$','$ echo "菜鸟教程：www.runoob.com" >> users
$ cat users
菜鸟教程：www.runoob.com
菜鸟教程：www.runoob.com
$',0,'alvin',curdate());
insert into Content values(2867,34,'line',22,'{}','','',0,'alvin',curdate());
insert into Content values(2868,34,'h2',23,'{}','输入重定向','输入重定向',0,'alvin',curdate());
insert into Content values(2869,34,'p',24,'{}','和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：','和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：',0,'alvin',curdate());
insert into Content values(2870,34,'pre',25,'{"class": ["prettyprint", "lang-bash"]}','command1 < file1','command1 < file1',0,'alvin',curdate());
insert into Content values(2871,34,'p',26,'{}','这样，本来需要从键盘获取输入的命令会转移到文件读取内容。','这样，本来需要从键盘获取输入的命令会转移到文件读取内容。',0,'alvin',curdate());
insert into Content values(2872,34,'p',27,'{}','注意：输出重定向是大于号(>)，输入重定向是小于号(<)。','注意：输出重定向是大于号(>)，输入重定向是小于号(<)。',0,'alvin',curdate());
insert into Content values(2873,34,'h3',28,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2874,34,'p',29,'{}','接着以上实例，我们需要统计 users 文件的行数,执行以下命令：','接着以上实例，我们需要统计 users 文件的行数,执行以下命令：',0,'alvin',curdate());
insert into Content values(2875,34,'pre',30,'{"class": ["prettyprint", "lang-bash"]}','$ wc -l users
2 users','$ wc -l users
2 users',0,'alvin',curdate());
insert into Content values(2876,34,'p',31,'{}','也可以将输入重定向到 users 文件：','也可以将输入重定向到 users 文件：',0,'alvin',curdate());
insert into Content values(2877,34,'pre',32,'{"class": ["prettyprint", "lang-bash"]}','$  wc -l < users
       2 ','$  wc -l < users
       2 ',0,'alvin',curdate());
insert into Content values(2878,34,'p',33,'{}','注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。','注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。',0,'alvin',curdate());
insert into Content values(2879,34,'pre',34,'{"class": ["prettyprint", "lang-bash"]}','command1 < infile > outfile','command1 < infile > outfile',0,'alvin',curdate());
insert into Content values(2880,34,'p',35,'{}','同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。','同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。',0,'alvin',curdate());
insert into Content values(2881,34,'h3',36,'{}','重定向深入讲解','重定向深入讲解',0,'alvin',curdate());
insert into Content values(2882,34,'p',37,'{}','一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：','一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：',0,'alvin',curdate());
insert into Content values(2883,34,'ul',38,'{}','        标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。
        标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。
        标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。','        标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。
        标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。
        标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。',0,'alvin',curdate());
insert into Content values(2884,34,'p',39,'{}','默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。','默认情况下，command > file 将 stdout 重定向到 file，command < file 将stdin 重定向到 file。',0,'alvin',curdate());
insert into Content values(2885,34,'p',40,'{}','如果希望 stderr 重定向到 file，可以这样写：','如果希望 stderr 重定向到 file，可以这样写：',0,'alvin',curdate());
insert into Content values(2886,34,'pre',41,'{"class": ["prettyprint", "lang-bash"]}','$ command 2 > file','$ command 2 > file',0,'alvin',curdate());
insert into Content values(2887,34,'p',42,'{}','如果希望 stderr 追加到 file 文件末尾，可以这样写：','如果希望 stderr 追加到 file 文件末尾，可以这样写：',0,'alvin',curdate());
insert into Content values(2888,34,'pre',43,'{"class": ["prettyprint", "lang-bash"]}','$ command 2 >> file','$ command 2 >> file',0,'alvin',curdate());
insert into Content values(2889,34,'p',44,'{}',' <b>  2 </b> 表示标准错误文件(stderr)。',' <b>  2 </b> 表示标准错误文件(stderr)。',0,'alvin',curdate());
insert into Content values(2890,34,'p',45,'{}','如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：','如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：',0,'alvin',curdate());
insert into Content values(2891,34,'pre',46,'{"class": ["prettyprint", "lang-bash"]}','$ command > file 2>&1

或者

$ command >> file 2>&1','$ command > file 2>&1

或者

$ command >> file 2>&1',0,'alvin',curdate());
insert into Content values(2892,34,'p',47,'{}','如果希望对 stdin 和 stdout 都重定向，可以这样写：','如果希望对 stdin 和 stdout 都重定向，可以这样写：',0,'alvin',curdate());
insert into Content values(2893,34,'pre',48,'{"class": ["prettyprint", "lang-bash"]}','$ command < file1 >file2','$ command < file1 >file2',0,'alvin',curdate());
insert into Content values(2894,34,'p',49,'{}','command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。 ','command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。 ',0,'alvin',curdate());
insert into Content values(2895,34,'line',50,'{}','','',0,'alvin',curdate());
insert into Content values(2896,34,'h2',51,'{}','Here Document','Here Document',0,'alvin',curdate());
insert into Content values(2897,34,'p',52,'{}','Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。 ','Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。 ',0,'alvin',curdate());
insert into Content values(2898,34,'p',53,'{}','它的基本的形式如下：','它的基本的形式如下：',0,'alvin',curdate());
insert into Content values(2899,34,'pre',54,'{"class": ["prettyprint", "lang-bash"]}','command << delimiter
    document
delimiter','command << delimiter
    document
delimiter',0,'alvin',curdate());
insert into Content values(2900,34,'p',55,'{}','它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。','它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。',0,'alvin',curdate());
insert into Content values(2901,34,'blockquote',56,'{}',' <p>  注意： </p> <ul>  <li>   结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。  </li>  <li>   开始的delimiter前后的空格会被忽略掉。  </li> </ul>',' <p>  注意： </p> <ul>  <li>   结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。  </li>  <li>   开始的delimiter前后的空格会被忽略掉。  </li> </ul>',0,'alvin',curdate());
insert into Content values(2902,34,'h3',57,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2903,34,'p',58,'{}','在命令行中通过 wc -l 命令计算 Here Document 的行数：','在命令行中通过 wc -l 命令计算 Here Document 的行数：',0,'alvin',curdate());
insert into Content values(2904,34,'pre',59,'{"class": ["prettyprint", "lang-bash"]}','$ wc -l << EOF
    欢迎来到
    菜鸟教程
    www.runoob.com
EOF
3          # 输出结果为 3 行
$','$ wc -l << EOF
    欢迎来到
    菜鸟教程
    www.runoob.com
EOF
3          # 输出结果为 3 行
$',0,'alvin',curdate());
insert into Content values(2905,34,'p',60,'{}','我们也可以将 Here Document 用在脚本中，例如：','我们也可以将 Here Document 用在脚本中，例如：',0,'alvin',curdate());
insert into Content values(2906,34,'pre',61,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

cat << EOF
欢迎来到
菜鸟教程
www.runoob.com
EOF','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

cat << EOF
欢迎来到
菜鸟教程
www.runoob.com
EOF',0,'alvin',curdate());
insert into Content values(2907,34,'p',62,'{}','执行以上脚本，输出结果：','执行以上脚本，输出结果：',0,'alvin',curdate());
insert into Content values(2908,34,'pre',63,'{"class": ["prettyprint", "lang-bash"]}','欢迎来到
菜鸟教程
www.runoob.com','欢迎来到
菜鸟教程
www.runoob.com',0,'alvin',curdate());
insert into Content values(2909,34,'line',64,'{}','','',0,'alvin',curdate());
insert into Content values(2910,34,'h2',65,'{}','/dev/null 文件','/dev/null 文件',0,'alvin',curdate());
insert into Content values(2911,34,'p',66,'{}','如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：','如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：',0,'alvin',curdate());
insert into Content values(2912,34,'pre',67,'{"class": ["prettyprint", "lang-bash"]}','$ command > /dev/null','$ command > /dev/null',0,'alvin',curdate());
insert into Content values(2913,34,'p',68,'{}','/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到"禁止输出"的效果。','/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到"禁止输出"的效果。',0,'alvin',curdate());
insert into Content values(2914,34,'p',69,'{}','如果希望屏蔽 stdout 和 stderr，可以这样写：','如果希望屏蔽 stdout 和 stderr，可以这样写：',0,'alvin',curdate());
insert into Content values(2915,34,'pre',70,'{"class": ["prettyprint", "lang-bash"]}','$ command > /dev/null 2>&1','$ command > /dev/null 2>&1',0,'alvin',curdate());
insert into Content values(2916,34,'blockquote',71,'{}',' <p>  <b>   注意：  </b>  0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。 </p>',' <p>  <b>   注意：  </b>  0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。 </p>',0,'alvin',curdate());
insert into Content values(2917,34,'pre',72,'{"class": ["prettyprint", "lang-bash"]}','$ command > file 2>&1
$ command >> file 2>&1','$ command > file 2>&1
$ command >> file 2>&1',0,'alvin',curdate());
insert into Content values(2918,34,'p',73,'{"data-title": "Shell 重定向 2>&1 含义说明", "data-commid": "35273"}',' 这里的 BLUE_BG[  &amp; ]BLUE_BG 没有固定的意思',' 这里的 BLUE_BG[  &amp; ]BLUE_BG 没有固定的意思',0,'alvin',curdate());
insert into Content values(2919,34,'p',74,'{}',' 放在 BLUE_BG[  > ]BLUE_BG 后面的 BLUE_BG[  &amp; ]BLUE_BG ，表示重定向的目标不是一个 BLUE_BG[  文件 ]BLUE_BG ，而是一个 BLUE_BG[  文件描述符 ]BLUE_BG ，内置的文件描述符如下',' 放在 BLUE_BG[  > ]BLUE_BG 后面的 BLUE_BG[  &amp; ]BLUE_BG ，表示重定向的目标不是一个 BLUE_BG[  文件 ]BLUE_BG ，而是一个 BLUE_BG[  文件描述符 ]BLUE_BG ，内置的文件描述符如下',0,'alvin',curdate());
insert into Content values(2920,34,'pre',75,'{"class": ["prettyprint", "lang-bash"]}','1 => stdout
2 => stderr
0 => stdin','1 => stdout
2 => stderr
0 => stdin',0,'alvin',curdate());
insert into Content values(2921,34,'p',76,'{}',' 换言之 BLUE_BG[  2>1 ]BLUE_BG 代表将 BLUE_BG[  stderr ]BLUE_BG 重定向到当前路径下文件名为 BLUE_BG[  1 ]BLUE_BG 的 BLUE_BG[  regular file ]BLUE_BG 中，而 BLUE_BG[  2>&amp;1 ]BLUE_BG 代表将 BLUE_BG[  stderr ]BLUE_BG 重定向到 BLUE_BG[  文件描述符 ]BLUE_BG 为 BLUE_BG[  1 ]BLUE_BG 的文件(即 BLUE_BG[  /dev/stdout ]BLUE_BG )中，这个文件就是 BLUE_BG[  stdout ]BLUE_BG 在 BLUE_BG[  file system ]BLUE_BG 中的映射',' 换言之 BLUE_BG[  2>1 ]BLUE_BG 代表将 BLUE_BG[  stderr ]BLUE_BG 重定向到当前路径下文件名为 BLUE_BG[  1 ]BLUE_BG 的 BLUE_BG[  regular file ]BLUE_BG 中，而 BLUE_BG[  2>&amp;1 ]BLUE_BG 代表将 BLUE_BG[  stderr ]BLUE_BG 重定向到 BLUE_BG[  文件描述符 ]BLUE_BG 为 BLUE_BG[  1 ]BLUE_BG 的文件(即 BLUE_BG[  /dev/stdout ]BLUE_BG )中，这个文件就是 BLUE_BG[  stdout ]BLUE_BG 在 BLUE_BG[  file system ]BLUE_BG 中的映射',0,'alvin',curdate());
insert into Content values(2922,34,'p',77,'{}',' 而 BLUE_BG[  &amp;>file ]BLUE_BG 是一种特殊的用法，也可以写成 BLUE_BG[  >&amp;file ]BLUE_BG ，二者的意思完全相同，都等价于',' 而 BLUE_BG[  &amp;>file ]BLUE_BG 是一种特殊的用法，也可以写成 BLUE_BG[  >&amp;file ]BLUE_BG ，二者的意思完全相同，都等价于',0,'alvin',curdate());
insert into Content values(2923,34,'pre',78,'{"class": ["prettyprint", "lang-bash"]}','>file 2>&1','>file 2>&1',0,'alvin',curdate());
insert into Content values(2924,34,'p',79,'{}',' 此处 BLUE_BG[  &amp;> ]BLUE_BG 或者 BLUE_BG[  >&amp; ]BLUE_BG 视作整体，分开没有单独的含义',' 此处 BLUE_BG[  &amp;> ]BLUE_BG 或者 BLUE_BG[  >&amp; ]BLUE_BG 视作整体，分开没有单独的含义',0,'alvin',curdate());
insert into Content values(2925,34,'line',80,'{}','','',0,'alvin',curdate());
insert into Content values(2926,34,'p',81,'{}','顺序问题：','顺序问题：',0,'alvin',curdate());
insert into Content values(2927,34,'pre',82,'{"class": ["prettyprint", "lang-bash"]}','find /etc -name .bashrc > list 2>&1
# 我想问为什么不能调下顺序,比如这样
find /etc -name .bashrc 2>&1 > list','find /etc -name .bashrc > list 2>&1
# 我想问为什么不能调下顺序,比如这样
find /etc -name .bashrc 2>&1 > list',0,'alvin',curdate());
insert into Content values(2928,34,'p',83,'{}','这个是从左到右有顺序的','这个是从左到右有顺序的',0,'alvin',curdate());
insert into Content values(2929,34,'p',84,'{}','第一种','第一种',0,'alvin',curdate());
insert into Content values(2930,34,'pre',85,'{"class": ["prettyprint", "lang-bash"]}','xxx > list 2>&1','xxx > list 2>&1',0,'alvin',curdate());
insert into Content values(2931,34,'p',86,'{}',' 先将要输出到 BLUE_BG[  stdout ]BLUE_BG 的内容重定向到文件，此时文件 BLUE_BG[  list ]BLUE_BG 就是这个程序的 BLUE_BG[  stdout ]BLUE_BG ，再将 BLUE_BG[  stderr ]BLUE_BG 重定向到 BLUE_BG[  stdout ]BLUE_BG ，也就是文件 BLUE_BG[  list ]BLUE_BG',' 先将要输出到 BLUE_BG[  stdout ]BLUE_BG 的内容重定向到文件，此时文件 BLUE_BG[  list ]BLUE_BG 就是这个程序的 BLUE_BG[  stdout ]BLUE_BG ，再将 BLUE_BG[  stderr ]BLUE_BG 重定向到 BLUE_BG[  stdout ]BLUE_BG ，也就是文件 BLUE_BG[  list ]BLUE_BG',0,'alvin',curdate());
insert into Content values(2932,34,'p',87,'{}','第二种','第二种',0,'alvin',curdate());
insert into Content values(2933,34,'pre',88,'{"class": ["prettyprint", "lang-bash"]}','xxx 2>&1 > list','xxx 2>&1 > list',0,'alvin',curdate());
insert into Content values(2934,34,'p',89,'{}',' 先将要输出到 BLUE_BG[  stderr ]BLUE_BG 的内容重定向到 BLUE_BG[  stdout ]BLUE_BG ，此时会产生一个 BLUE_BG[  stdout ]BLUE_BG 的拷贝，作为程序的 BLUE_BG[  stderr ]BLUE_BG ，而程序原本要输出到 BLUE_BG[  stdout ]BLUE_BG 的内容，依然是对接在 BLUE_BG[  stdout原身 ]BLUE_BG 上的，因此第二步重定向 BLUE_BG[  stdout ]BLUE_BG ，对 BLUE_BG[  stdout ]BLUE_BG 的拷贝不产生任何影响',' 先将要输出到 BLUE_BG[  stderr ]BLUE_BG 的内容重定向到 BLUE_BG[  stdout ]BLUE_BG ，此时会产生一个 BLUE_BG[  stdout ]BLUE_BG 的拷贝，作为程序的 BLUE_BG[  stderr ]BLUE_BG ，而程序原本要输出到 BLUE_BG[  stdout ]BLUE_BG 的内容，依然是对接在 BLUE_BG[  stdout原身 ]BLUE_BG 上的，因此第二步重定向 BLUE_BG[  stdout ]BLUE_BG ，对 BLUE_BG[  stdout ]BLUE_BG 的拷贝不产生任何影响',0,'alvin',curdate());
insert into Content values(2935,35,'h1',1,'{}','Shell 文件包含','Shell 文件包含',0,'alvin',curdate());
insert into Content values(2936,35,'p',2,'{}','和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。','和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。',0,'alvin',curdate());
insert into Content values(2937,35,'p',3,'{}','Shell 文件包含的语法格式如下：','Shell 文件包含的语法格式如下：',0,'alvin',curdate());
insert into Content values(2938,35,'pre',4,'{"class": ["prettyprint", "lang-bash"]}','. filename   # 注意点号(.)和文件名中间有一空格

或

source filename
','. filename   # 注意点号(.)和文件名中间有一空格

或

source filename
',0,'alvin',curdate());
insert into Content values(2939,35,'h3',5,'{}','实例','实例',0,'alvin',curdate());
insert into Content values(2940,35,'p',6,'{}','创建两个 shell 脚本文件。','创建两个 shell 脚本文件。',0,'alvin',curdate());
insert into Content values(2941,35,'p',7,'{}','test1.sh 代码如下：','test1.sh 代码如下：',0,'alvin',curdate());
insert into Content values(2942,35,'pre',8,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

url="http://www.runoob.com"
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

url="http://www.runoob.com"
',0,'alvin',curdate());
insert into Content values(2943,35,'p',9,'{}','test2.sh 代码如下：','test2.sh 代码如下：',0,'alvin',curdate());
insert into Content values(2944,35,'pre',10,'{"class": ["prettyprint", "lang-bash"]}','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

#使用 . 号来引用test1.sh 文件
. ./test1.sh

# 或者使用以下包含文件代码
# source ./test1.sh

echo "菜鸟教程官网地址：$url"
','#!/bin/bash
# author:菜鸟教程
# url:www.runoob.com

#使用 . 号来引用test1.sh 文件
. ./test1.sh

# 或者使用以下包含文件代码
# source ./test1.sh

echo "菜鸟教程官网地址：$url"
',0,'alvin',curdate());
insert into Content values(2945,35,'p',11,'{}','接下来，我们为 test2.sh 添加可执行权限并执行：','接下来，我们为 test2.sh 添加可执行权限并执行：',0,'alvin',curdate());
insert into Content values(2946,35,'pre',12,'{"class": ["prettyprint", "lang-bash"]}','$ chmod +x test2.sh 
$ ./test2.sh 
菜鸟教程官网地址：http://www.runoob.com
','$ chmod +x test2.sh 
$ ./test2.sh 
菜鸟教程官网地址：http://www.runoob.com
',0,'alvin',curdate());
insert into Content values(2947,35,'blockquote',13,'{}',' <p>  <b>   注：  </b>  被包含的文件 test1.sh 不需要可执行权限。 </p>',' <p>  <b>   注：  </b>  被包含的文件 test1.sh 不需要可执行权限。 </p>',0,'alvin',curdate());
insert into Content values(2948,36,'h1',1,'{}','Bash vi/vim ','Bash vi/vim ',0,'alvin',curdate());
insert into Content values(2949,36,'p',2,'{}','所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。但是目前我们使用比较多的是 vim 编辑器。vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。','所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。但是目前我们使用比较多的是 vim 编辑器。vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。',0,'alvin',curdate());
insert into Content values(2950,36,'line',3,'{}','','',0,'alvin',curdate());
insert into Content values(2951,36,'h2',4,'{}','什么是 vim？','什么是 vim？',0,'alvin',curdate());
insert into Content values(2952,36,'p',5,'{}','Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 ','Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。 ',0,'alvin',curdate());
insert into Content values(2953,36,'p',6,'{}','简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。 ','简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。 ',0,'alvin',curdate());
insert into Content values(2954,36,'p',7,'{}',' 连 vim 的官方网站 ( <a href="http://www.vim.org" rel="noopener noreferrer" target="_blank">  http://www.vim.org </a> ) 自己也说 vim 是一个程序开发工具而不是文字处理软件。',' 连 vim 的官方网站 ( <a href="http://www.vim.org" rel="noopener noreferrer" target="_blank">  http://www.vim.org </a> ) 自己也说 vim 是一个程序开发工具而不是文字处理软件。',0,'alvin',curdate());
insert into Content values(2955,36,'p',8,'{}','vim 键盘图：','vim 键盘图：',0,'alvin',curdate());
insert into Content values(2956,36,'image',9,'{"src": "/static/img/bash/vi-vim-cheat-sheet-sch.gif"}','/static/img/bash/vi-vim-cheat-sheet-sch.gif','/static/img/bash/vi-vim-cheat-sheet-sch.gif',0,'alvin',curdate());
insert into Content values(2957,36,'line',10,'{}','','',0,'alvin',curdate());
insert into Content values(2958,36,'h2',11,'{}','vi/vim 的使用','vi/vim 的使用',0,'alvin',curdate());
insert into Content values(2959,36,'p',12,'{}',' 基本上 vi/vim 共分为三种模式，分别是 BOLD[  命令模式（Command mode） ]BOLD ， BOLD[  输入模式（Insert mode） ]BOLD 和 BOLD[  底线命令模式（Last line mode） ]BOLD 。 这三种模式的作用分别是：',' 基本上 vi/vim 共分为三种模式，分别是 BOLD[  命令模式（Command mode） ]BOLD ， BOLD[  输入模式（Insert mode） ]BOLD 和 BOLD[  底线命令模式（Last line mode） ]BOLD 。 这三种模式的作用分别是：',0,'alvin',curdate());
insert into Content values(2960,36,'h3',13,'{}','命令模式：','命令模式：',0,'alvin',curdate());
insert into Content values(2961,36,'p',14,'{}','用户刚刚启动 vi/vim，便进入了命令模式。','用户刚刚启动 vi/vim，便进入了命令模式。',0,'alvin',curdate());
insert into Content values(2962,36,'p',15,'{}','此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。','此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。',0,'alvin',curdate());
insert into Content values(2963,36,'p',16,'{}','以下是常用的几个命令：','以下是常用的几个命令：',0,'alvin',curdate());
insert into Content values(2964,36,'ul',17,'{}',' BOLD[  i ]BOLD 切换到输入模式，以输入字符。
 BOLD[  x ]BOLD 删除当前光标所在处的字符。
 BOLD[  : ]BOLD',' BOLD[  i ]BOLD 切换到输入模式，以输入字符。
 BOLD[  x ]BOLD 删除当前光标所在处的字符。
 BOLD[  : ]BOLD',0,'alvin',curdate());
insert into Content values(2965,36,'p',18,'{}','若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。','若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。',0,'alvin',curdate());
insert into Content values(2966,36,'p',19,'{}','命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。','命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。',0,'alvin',curdate());
insert into Content values(2967,36,'h3',20,'{}','输入模式','输入模式',0,'alvin',curdate());
insert into Content values(2968,36,'p',21,'{}','在命令模式下按下i就进入了输入模式。','在命令模式下按下i就进入了输入模式。',0,'alvin',curdate());
insert into Content values(2969,36,'p',22,'{}','在输入模式中，可以使用以下按键：','在输入模式中，可以使用以下按键：',0,'alvin',curdate());
insert into Content values(2970,36,'ul',23,'{}',' <b>  字符按键以及Shift组合 </b> ，输入字符
 <b>  ENTER </b> ，回车键，换行
 <b>  BACK SPACE </b> ，退格键，删除光标前一个字符
 <b>  DEL </b> ，删除键，删除光标后一个字符
 <b>  方向键 </b> ，在文本中移动光标
 <b>  HOME </b> / <b>  END </b> ，移动光标到行首/行尾
 <b>  Page Up </b> / <b>  Page Down </b> ，上/下翻页
 <b>  Insert </b> ，切换光标为输入/替换模式，光标将变成竖线/下划线
 <b>  ESC </b> ，退出输入模式，切换到命令模式',' <b>  字符按键以及Shift组合 </b> ，输入字符
 <b>  ENTER </b> ，回车键，换行
 <b>  BACK SPACE </b> ，退格键，删除光标前一个字符
 <b>  DEL </b> ，删除键，删除光标后一个字符
 <b>  方向键 </b> ，在文本中移动光标
 <b>  HOME </b> / <b>  END </b> ，移动光标到行首/行尾
 <b>  Page Up </b> / <b>  Page Down </b> ，上/下翻页
 <b>  Insert </b> ，切换光标为输入/替换模式，光标将变成竖线/下划线
 <b>  ESC </b> ，退出输入模式，切换到命令模式',0,'alvin',curdate());
insert into Content values(2971,36,'h3',24,'{}','底线命令模式','底线命令模式',0,'alvin',curdate());
insert into Content values(2972,36,'p',25,'{}','在命令模式下按下:（英文冒号）就进入了底线命令模式。','在命令模式下按下:（英文冒号）就进入了底线命令模式。',0,'alvin',curdate());
insert into Content values(2973,36,'p',26,'{}','底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。','底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。',0,'alvin',curdate());
insert into Content values(2974,36,'p',27,'{}','在底线命令模式中，基本的命令有（已经省略了冒号）：','在底线命令模式中，基本的命令有（已经省略了冒号）：',0,'alvin',curdate());
insert into Content values(2975,36,'ul',28,'{}','q 退出程序
w 保存文件','q 退出程序
w 保存文件',0,'alvin',curdate());
insert into Content values(2976,36,'p',29,'{}','按ESC键可随时退出底线命令模式。','按ESC键可随时退出底线命令模式。',0,'alvin',curdate());
insert into Content values(2977,36,'p',30,'{}','简单的说，我们可以将这三个模式想成底下的图标来表示：','简单的说，我们可以将这三个模式想成底下的图标来表示：',0,'alvin',curdate());
insert into Content values(2978,36,'image',31,'{"class": ["img-responsive"], "height": "800", "src": "/static/img/bash/vim-vi-workmodel.png", "width": "800"}','/static/img/bash/vim-vi-workmodel.png','/static/img/bash/vim-vi-workmodel.png',0,'alvin',curdate());
insert into Content values(2979,36,'line',32,'{}','','',0,'alvin',curdate());
insert into Content values(2980,36,'h2',33,'{}','vi/vim 使用实例','vi/vim 使用实例',0,'alvin',curdate());
insert into Content values(2981,36,'h3',34,'{}','使用 vi/vim 进入一般模式','使用 vi/vim 进入一般模式',0,'alvin',curdate());
insert into Content values(2982,36,'p',35,'{}','如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：','如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：',0,'alvin',curdate());
insert into Content values(2983,36,'pre',36,'{"class": ["prettyprint", "lang-bash"]}','$ vim runoob.txt
','$ vim runoob.txt
',0,'alvin',curdate());
insert into Content values(2984,36,'p',37,'{}',' 直接输入 BOLD[  vi 文件名 ]BOLD 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！',' 直接输入 BOLD[  vi 文件名 ]BOLD 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！',0,'alvin',curdate());
insert into Content values(2985,36,'image',38,'{"class": ["img-responsive"], "height": "800", "src": "/static/img/bash/vim_vi_03.jpg", "width": "800"}','/static/img/bash/vim_vi_03.jpg','/static/img/bash/vim_vi_03.jpg',0,'alvin',curdate());
insert into Content values(2986,36,'h3',39,'{}','按下 i 进入输入模式(也称为编辑模式)，开始编辑文字','按下 i 进入输入模式(也称为编辑模式)，开始编辑文字',0,'alvin',curdate());
insert into Content values(2987,36,'p',40,'{}','在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！','在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！',0,'alvin',curdate());
insert into Content values(2988,36,'p',41,'{}','在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。','在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。',0,'alvin',curdate());
insert into Content values(2989,36,'p',42,'{}',' 这个时候，键盘上除了 BOLD[  Esc ]BOLD 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。',' 这个时候，键盘上除了 BOLD[  Esc ]BOLD 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。',0,'alvin',curdate());
insert into Content values(2990,36,'image',43,'{"class": ["img-responsive"], "height": "800", "src": "/static/img/bash/vim_vi_04.jpg", "width": "800"}','/static/img/bash/vim_vi_04.jpg','/static/img/bash/vim_vi_04.jpg',0,'alvin',curdate());
insert into Content values(2991,36,'h3',44,'{}','按下 ESC 按钮回到一般模式','按下 ESC 按钮回到一般模式',0,'alvin',curdate());
insert into Content values(2992,36,'p',45,'{}',' 好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 BOLD[  Esc ]BOLD 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！',' 好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 BOLD[  Esc ]BOLD 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！',0,'alvin',curdate());
insert into Content values(2993,36,'h3',46,'{}',' 在一般模式中按下 BOLD[  :wq ]BOLD 储存后离开 vi',' 在一般模式中按下 BOLD[  :wq ]BOLD 储存后离开 vi',0,'alvin',curdate());
insert into Content values(2994,36,'p',47,'{}',' OK，我们要存档了，存盘并离开的指令很简单，输入 BOLD[  :wq ]BOLD 即可保存离开！',' OK，我们要存档了，存盘并离开的指令很简单，输入 BOLD[  :wq ]BOLD 即可保存离开！',0,'alvin',curdate());
insert into Content values(2995,36,'image',48,'{"class": ["img-responsive"], "height": "800", "src": "/static/img/bash/vim_vi_05.jpg", "width": "800"}','/static/img/bash/vim_vi_05.jpg','/static/img/bash/vim_vi_05.jpg',0,'alvin',curdate());
insert into Content values(2996,36,'p',49,'{}','OK! 这样我们就成功创建了一个 runoob.txt 的文件。','OK! 这样我们就成功创建了一个 runoob.txt 的文件。',0,'alvin',curdate());
insert into Content values(2997,36,'line',50,'{}','','',0,'alvin',curdate());
insert into Content values(2998,36,'h2',51,'{}','vi/vim 按键说明','vi/vim 按键说明',0,'alvin',curdate());
insert into Content values(2999,36,'p',52,'{}','除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。','除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。',0,'alvin',curdate());
insert into Content values(3000,36,'h3',53,'{}','第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等','第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等',0,'alvin',curdate());
insert into Content values(3001,36,'table',54,'{"class": ["table", "table-bordered", "table-striped"]}','移动光标的方法
h 或 向左箭头键(←)	光标向左移动一个字符
j 或 向下箭头键(↓)	光标向下移动一个字符
k 或 向上箭头键(↑)	光标向上移动一个字符
l 或 向右箭头键(→)	光标向右移动一个字符
        如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。        如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 或 "30↓" 的组合按键，        亦即加上想要进行的次数(数字)后，按下动作即可！
[Ctrl] + [f]	屏幕『向下』移动一页，相当于 [Page Down]按键        (常用)
[Ctrl] + [b]	屏幕『向上』移动一页，相当于 [Page Up] 按键        (常用)
[Ctrl] + [d]	屏幕『向下』移动半页
[Ctrl] + [u]	屏幕『向上』移动半页
+	光标移动到非空格符的下一行
-	光标移动到非空格符的上一行
n<space>	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n        个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
0 或功能键[Home]	这是数字『 0 』：移动到这一行的最前面字符处        (常用)
$ 或功能键[End]	移动到这一行的最后面字符处(常用)
H	光标移动到这个屏幕的最上方那一行的第一个字符
M	光标移动到这个屏幕的中央那一行的第一个字符
L	光标移动到这个屏幕的最下方那一行的第一个字符
G	移动到这个档案的最后一行(常用)
nG	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20         行(可配合 :set nu)
gg	移动到这个档案的第一行，相当于 1G 啊！        (常用)
n<Enter>	n 为数字。光标向下移动 n 行(常用)
搜索替换
/word	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird         这个字符串，就输入 /vbird 即可！        (常用)
?word	向光标之上寻找一个字符串名称为 word 的字符串。
n	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说，        如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird         的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
N	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。        例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
        使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！    
:n1,n2s/word1/word2/g	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为        word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：        『:100,200s/vbird/VBIRD/g』。(常用)
 BLUE_BG[  :1,$s/word1/word2/g ]BLUE_BG 或 BLUE_BG[  :%s/word1/word2/g ]BLUE_BG	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为        word2 ！(常用)
 BLUE_BG[  :1,$s/word1/word2/gc ]BLUE_BG 或 BLUE_BG[  :%s/word1/word2/gc ]BLUE_BG	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为        word2 ！且在取代前显示提示字符给用户确认 (confirm)        是否需要取代！(常用)
删除、复制与贴上
x, X	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)，         X 为向前删除一个字符(相当于 [backspace] 亦即是退格键)        (常用)
nx	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符，        『10x』。
dd	删除游标所在的那一整行(常用)
ndd	n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行        (常用)
d1G	删除光标所在到第一行的所有数据
dG	删除光标所在到最后一行的所有数据
d$	删除游标所在处，到该行的最后一个字符
d0	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy	复制游标所在的那一行(常用)
nyy	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20        行(常用)
y1G	复制游标所在行到第一行的所有数据
yG	复制游标所在行到最后一行的所有数据
y0	复制光标所在的那个字符到该行行首的所有数据
y$	复制光标所在的那个字符到该行行尾的所有数据
p, P	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！        举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后，        那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？        那么原本的第 20 行会被推到变成 30 行。        (常用)
J	将光标所在行与下一行的数据结合成同一行
c	重复删除多个数据，例如向下删除 10 行，[ 10cj ]
u	复原前一个动作。(常用)
[Ctrl]+r	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～        利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
.	不要怀疑！这就是小数点！意思是重复前一个动作的意思。        如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！        (常用)','移动光标的方法
h 或 向左箭头键(←)	光标向左移动一个字符
j 或 向下箭头键(↓)	光标向下移动一个字符
k 或 向上箭头键(↑)	光标向上移动一个字符
l 或 向右箭头键(→)	光标向右移动一个字符
        如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。        如果想要进行多次移动的话，例如向下移动 30 行，可以使用 "30j" 或 "30↓" 的组合按键，        亦即加上想要进行的次数(数字)后，按下动作即可！
[Ctrl] + [f]	屏幕『向下』移动一页，相当于 [Page Down]按键        (常用)
[Ctrl] + [b]	屏幕『向上』移动一页，相当于 [Page Up] 按键        (常用)
[Ctrl] + [d]	屏幕『向下』移动半页
[Ctrl] + [u]	屏幕『向上』移动半页
+	光标移动到非空格符的下一行
-	光标移动到非空格符的上一行
n<space>	那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n        个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。
0 或功能键[Home]	这是数字『 0 』：移动到这一行的最前面字符处        (常用)
$ 或功能键[End]	移动到这一行的最后面字符处(常用)
H	光标移动到这个屏幕的最上方那一行的第一个字符
M	光标移动到这个屏幕的中央那一行的第一个字符
L	光标移动到这个屏幕的最下方那一行的第一个字符
G	移动到这个档案的最后一行(常用)
nG	n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20         行(可配合 :set nu)
gg	移动到这个档案的第一行，相当于 1G 啊！        (常用)
n<Enter>	n 为数字。光标向下移动 n 行(常用)
搜索替换
/word	向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird         这个字符串，就输入 /vbird 即可！        (常用)
?word	向光标之上寻找一个字符串名称为 word 的字符串。
n	这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说，        如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird         的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！
N	这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。        例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。
        使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！    
:n1,n2s/word1/word2/g	n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为        word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：        『:100,200s/vbird/VBIRD/g』。(常用)
 BLUE_BG[  :1,$s/word1/word2/g ]BLUE_BG 或 BLUE_BG[  :%s/word1/word2/g ]BLUE_BG	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为        word2 ！(常用)
 BLUE_BG[  :1,$s/word1/word2/gc ]BLUE_BG 或 BLUE_BG[  :%s/word1/word2/gc ]BLUE_BG	从第一行到最后一行寻找 word1 字符串，并将该字符串取代为        word2 ！且在取代前显示提示字符给用户确认 (confirm)        是否需要取代！(常用)
删除、复制与贴上
x, X	在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)，         X 为向前删除一个字符(相当于 [backspace] 亦即是退格键)        (常用)
nx	n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符，        『10x』。
dd	删除游标所在的那一整行(常用)
ndd	n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行        (常用)
d1G	删除光标所在到第一行的所有数据
dG	删除光标所在到最后一行的所有数据
d$	删除游标所在处，到该行的最后一个字符
d0	那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符
yy	复制游标所在的那一行(常用)
nyy	n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20        行(常用)
y1G	复制游标所在行到第一行的所有数据
yG	复制游标所在行到最后一行的所有数据
y0	复制光标所在的那个字符到该行行首的所有数据
y$	复制光标所在的那个字符到该行行尾的所有数据
p, P	p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！        举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后，        那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？        那么原本的第 20 行会被推到变成 30 行。        (常用)
J	将光标所在行与下一行的数据结合成同一行
c	重复删除多个数据，例如向下删除 10 行，[ 10cj ]
u	复原前一个动作。(常用)
[Ctrl]+r	重做上一个动作。(常用)
这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～        利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！
.	不要怀疑！这就是小数点！意思是重复前一个动作的意思。        如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！        (常用)',0,'alvin',curdate());
insert into Content values(3002,36,'h3',55,'{}','第二部分：一般模式切换到编辑模式的可用的按钮说明','第二部分：一般模式切换到编辑模式的可用的按钮说明',0,'alvin',curdate());
insert into Content values(3003,36,'table',56,'{"class": ["table", "table-bordered", "table-striped"]}','进入输入或取代的编辑模式
i, I	进入输入模式(Insert mode)：	        i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。        (常用)
a, A	进入输入模式(Insert mode)：	        a 为『从目前光标所在的下一个字符处开始输入』， A        为『从光标所在行的最后一个字符处开始输入』。(常用)
o, O	进入输入模式(Insert mode)：	        这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；        O 为在目前光标所在处的上一行输入新的一行！(常用)
r, R	进入取代模式(Replace mode)：	        r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下        ESC 为止；(常用)
上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。        由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时，        一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！
[Esc]	退出编辑模式，回到一般模式中(常用)','进入输入或取代的编辑模式
i, I	进入输入模式(Insert mode)：	        i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。        (常用)
a, A	进入输入模式(Insert mode)：	        a 为『从目前光标所在的下一个字符处开始输入』， A        为『从光标所在行的最后一个字符处开始输入』。(常用)
o, O	进入输入模式(Insert mode)：	        这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』；        O 为在目前光标所在处的上一行输入新的一行！(常用)
r, R	进入取代模式(Replace mode)：	        r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下        ESC 为止；(常用)
上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。        由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时，        一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！
[Esc]	退出编辑模式，回到一般模式中(常用)',0,'alvin',curdate());
insert into Content values(3004,36,'h3',57,'{}','第三部分：一般模式切换到指令行模式的可用的按钮说明','第三部分：一般模式切换到指令行模式的可用的按钮说明',0,'alvin',curdate());
insert into Content values(3005,36,'table',58,'{"class": ["table", "table-bordered", "table-striped"]}','指令行的储存、离开等指令
:w	将编辑的数据写入硬盘档案中(常用)
:w!	若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入，        还是跟你对该档案的档案权限有关啊！
:q	离开 vi (常用)
:q!	若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～
:wq	储存后离开，若为 :wq! 则为强制储存后离开        (常用)
ZZ	这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！
:w [filename]	将编辑的数据储存成另一个档案（类似另存新档）
:r [filename]	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』        这个档案内容加到游标所在行后面
:n1,n2 w [filename]	将 n1 到 n2 的内容储存成 filename 这个档案。
:! command	暂时离开 vi 到指令行模式下执行 command 的显示结果！例如:        『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！
vim 环境的变更
:set nu	显示行号，设定之后，会在每一行的前缀显示该行的行号
:set nonu	与 set nu 相反，为取消行号！','指令行的储存、离开等指令
:w	将编辑的数据写入硬盘档案中(常用)
:w!	若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入，        还是跟你对该档案的档案权限有关啊！
:q	离开 vi (常用)
:q!	若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。
注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～
:wq	储存后离开，若为 :wq! 则为强制储存后离开        (常用)
ZZ	这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！
:w [filename]	将编辑的数据储存成另一个档案（类似另存新档）
:r [filename]	在编辑的数据中，读入另一个档案的数据。亦即将 『filename』        这个档案内容加到游标所在行后面
:n1,n2 w [filename]	将 n1 到 n2 的内容储存成 filename 这个档案。
:! command	暂时离开 vi 到指令行模式下执行 command 的显示结果！例如:        『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！
vim 环境的变更
:set nu	显示行号，设定之后，会在每一行的前缀显示该行的行号
:set nonu	与 set nu 相反，为取消行号！',0,'alvin',curdate());
insert into Content values(3006,36,'p',59,'{}','特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。','特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。',0,'alvin',curdate());
insert into Content values(3007,36,'p',60,'{}','举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。','举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。',0,'alvin',curdate());
insert into Content values(3008,36,'h3',61,'{}','vim 中批量添加注释','vim 中批量添加注释',0,'alvin',curdate());
insert into Content values(3009,36,'p',62,'{}','方法一 ：块选择模式','方法一 ：块选择模式',0,'alvin',curdate());
insert into Content values(3010,36,'p',63,'{}','批量注释：','批量注释：',0,'alvin',curdate());
insert into Content values(3011,36,'p',64,'{}',' <span class="label label-info">  Ctrl + v </span> 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 BOLD[  I ]BOLD 进入行首插入模式输入注释符号如 BOLD[  // ]BOLD 或 BOLD[  # ]BOLD ，输入完毕之后，按两下 BOLD[  ESC ]BOLD ， BOLD[  Vim ]BOLD 会自动将你选中的所有行首都加上注释，保存退出完成注释。',' <span class="label label-info">  Ctrl + v </span> 进入块选择模式，然后移动光标选中你要注释的行，再按大写的 BOLD[  I ]BOLD 进入行首插入模式输入注释符号如 BOLD[  // ]BOLD 或 BOLD[  # ]BOLD ，输入完毕之后，按两下 BOLD[  ESC ]BOLD ， BOLD[  Vim ]BOLD 会自动将你选中的所有行首都加上注释，保存退出完成注释。',0,'alvin',curdate());
insert into Content values(3012,36,'p',65,'{}','取消注释：','取消注释：',0,'alvin',curdate());
insert into Content values(3013,36,'p',66,'{}',' <span class="label label-info">  Ctrl + v </span> 进入块选择模式，选中你要删除的行首的注释符号，注意 BOLD[  // ]BOLD 要选中两个，选好之后按 BOLD[  d ]BOLD 即可删除注释， BOLD[  ESC ]BOLD 保存退出。',' <span class="label label-info">  Ctrl + v </span> 进入块选择模式，选中你要删除的行首的注释符号，注意 BOLD[  // ]BOLD 要选中两个，选好之后按 BOLD[  d ]BOLD 即可删除注释， BOLD[  ESC ]BOLD 保存退出。',0,'alvin',curdate());
insert into Content values(3014,36,'p',67,'{}','方法二: 替换命令','方法二: 替换命令',0,'alvin',curdate());
insert into Content values(3015,36,'p',68,'{}','批量注释。','批量注释。',0,'alvin',curdate());
insert into Content values(3016,36,'p',69,'{}','使用下面命令在指定的行首添加注释。','使用下面命令在指定的行首添加注释。',0,'alvin',curdate());
insert into Content values(3017,36,'p',70,'{}',' 使用名命令格式： BLUE_BG[  :起始行号,结束行号s/^/注释符/g ]BLUE_BG （注意冒号）。',' 使用名命令格式： BLUE_BG[  :起始行号,结束行号s/^/注释符/g ]BLUE_BG （注意冒号）。',0,'alvin',curdate());
insert into Content values(3018,36,'p',71,'{}','取消注释：','取消注释：',0,'alvin',curdate());
insert into Content values(3019,36,'p',72,'{}',' 使用名命令格式： BLUE_BG[  :起始行号,结束行号s/^注释符//g ]BLUE_BG （注意冒号）。',' 使用名命令格式： BLUE_BG[  :起始行号,结束行号s/^注释符//g ]BLUE_BG （注意冒号）。',0,'alvin',curdate());
insert into Content values(3020,36,'p',73,'{}','例子：','例子：',0,'alvin',curdate());
insert into Content values(3021,36,'p',74,'{}',' 1、在 10 - 20 行添加 BOLD[  // ]BOLD 注释',' 1、在 10 - 20 行添加 BOLD[  // ]BOLD 注释',0,'alvin',curdate());
insert into Content values(3022,36,'pre',75,'{"class": ["prettyprint", "lang-bash"]}',':10,20s#^#//#g
',':10,20s#^#//#g
',0,'alvin',curdate());
insert into Content values(3023,36,'p',76,'{}',' 2、在 10 - 20 行删除 BOLD[  // ]BOLD 注释',' 2、在 10 - 20 行删除 BOLD[  // ]BOLD 注释',0,'alvin',curdate());
insert into Content values(3024,36,'pre',77,'{"class": ["prettyprint", "lang-bash"]}',':10,20s#^//##g
',':10,20s#^//##g
',0,'alvin',curdate());
insert into Content values(3025,36,'p',78,'{}',' 3、在 10 - 20 行添加 BOLD[  # ]BOLD 注释',' 3、在 10 - 20 行添加 BOLD[  # ]BOLD 注释',0,'alvin',curdate());
insert into Content values(3026,36,'pre',79,'{"class": ["prettyprint", "lang-bash"]}',':10,20s/^/#/g
',':10,20s/^/#/g
',0,'alvin',curdate());
insert into Content values(3027,36,'p',80,'{}',' 4、在 BOLD[  10 - 20 ]BOLD 行删除 # 注释',' 4、在 BOLD[  10 - 20 ]BOLD 行删除 # 注释',0,'alvin',curdate());
insert into Content values(3028,36,'pre',81,'{"class": ["prettyprint", "lang-bash"]}',':10,20s/#//g
',':10,20s/#//g
',0,'alvin',curdate());
insert into Content values(3029,37,'h1',1,'{}','Shell 常用的命令','Shell 常用的命令',0,'alvin',curdate());
insert into Content values(3030,37,'table',2,'{"class": ["table", "table-bordered", "table-striped"]}','常用命令	说明	结果
reboot	# 重启系统 需root权限	系统重启
poweroff	# 关闭系统 需root权限	系统关闭
echo Linux 	# 输出字符到终端	Linux
echo $SHELL	# 提取变量并输出到终端	Bash
date	# 输出固定格式的日期	Mon Aug 24 16:11:23 CST 2017
date "+%Y-%m-%d %H:%M:%S"	# 输出固定格式时间	2017-08-04 16:29:12
date -s "20170901 8:30:00"	# 将系统时间设置为2017年9月1日	Fri Sep 1 08:30:00 CST 2017
date "+%j"	# 查看当年的第几天	244
wget http://www.linuxprobe.com/docs/LinuxProbe.pdf	# 下载网站上文件	saved
wget -r -p http://www.linuxprobe.com	# 递归下载网站内的所有页面数据及文件	....
ps -ef	# 查看进程状态	返回终端进程列表
top	# 动态查看系统运维状态	返回运维列表
pidof sshd	# 查询本机sshd 的pid	2156
kill 2156	# 关闭对应pid的进程	强制停止sshd服务
killall httpd	# 关闭所有httpd进程	    pidof httpd    killall httpd    pidof httpd    
ifconfig	# 获取网卡配置与网络状态等信息	    返回ip,ether参数等信息    
uname -a	# 用于查看系统内核与系统版本等信息	    Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 x86_64 x86_64 x86_64 GRU/Linux    
cat /etc/redhat-release	# 查看系统详细信息	    Red Hat Enterprise Linux Server release 7.0 (Maipo)    
uptime	# 查看系统负载信息	    22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18    
free -h	# 显示当前系统内存的使用量信息	    返回内存使用列表    
who	# 查看当前登入主机用户终端信息	    ....    
last	# 用于查看所有系统登录信息	    ....    
history	# 用于查看命令历史记录信息	    ....    
history -c	# 用于清空当前 用户命令历史记录信息	    ....    
sosreport	# 用于收集系统配置及架构信息并输出诊断档案	    ....    
pwd	# 显示用户当前所处的工作目录	    /etc    
cd /etc	# 用于切换工作路径	    /etc    
ls -al	# 用于显示目录中的文件信息	    ...    
ls -al	# 用于显示目录中的文件信息(包含隐藏文件)	    ...    
cat -n initial-setup-ks.cfg	# 用于查看纯文本文件，内容少的(包含行号)	    ...    
more initial-setup-ks.cfg	# 用于查看纯文本文件，内容多的	    ...    
head -n 20 initial-setup-ks.cfg	# 用于查看纯文本文件前N行	    ...    
tail -f /var/log/messages	# 用于查看查看纯文本文档的后N行或持续刷新内容	    ...    
cat anaconda-ks.cfg | tr [a-z] [A-Z]	# 用于替换文本文件中的字符	    ...    
wc -l /etc/passwd	# 用于统计指定文本的行数	    ...    
stat anaconda-ks.cfg	# 用于查看文件的具体存储信息和时间等信息	    ...    
cut -d: -f1 /etc/passwd	# 用于按“列”提取文本字符	    ...    
diff --brief diff_A.txt diff_B.txt	# 用于比较多个文本文件的差异(显示比较结果)	    ...    
diff -c diff_A.txt diff_B.txt	# 用于比较多个文本文件的差异(描述具体的不同)	    ...    
diff -c diff_A.txt diff_B.txt	# 用于比较多个文本文件的差异(描述具体的不同)	    ...    
touch -d "2017-05-04 15:44" anaconda-ks.cfg	# 用于创建空白文件或设置文件的时间(同时修改atime 与 mtime)	    ...    
mkdir linuxprobe	# 用于创建空白目录	    ...    
cp install.log x.log	# 用于复制文件或目录	    ...    
mv install.log x.log	# 用于剪切或重命名文件	    ...    
rm install.log	# 用于删除文件或目录	    ...    
dd if=/dev/zero of=560_file count=1 bs=560M	# 用于按照指定大小和个数的数据块来复制文件或转换文件	    ...    
file anaconda-ks.cfg	# 用于查看文件的类型	    ...    
tar -czvf etc.tar.gz /etc	# 用于对文件进行打包压缩或解压	    ...    
grep /sbin/nologin /etc/passwd	# 用于在文本中执行关键词搜索	    ...    
find /etc -name "host*" -print	# 用于按照指定条件来查找文件	    ...    ','常用命令	说明	结果
reboot	# 重启系统 需root权限	系统重启
poweroff	# 关闭系统 需root权限	系统关闭
echo Linux 	# 输出字符到终端	Linux
echo $SHELL	# 提取变量并输出到终端	Bash
date	# 输出固定格式的日期	Mon Aug 24 16:11:23 CST 2017
date "+%Y-%m-%d %H:%M:%S"	# 输出固定格式时间	2017-08-04 16:29:12
date -s "20170901 8:30:00"	# 将系统时间设置为2017年9月1日	Fri Sep 1 08:30:00 CST 2017
date "+%j"	# 查看当年的第几天	244
wget http://www.linuxprobe.com/docs/LinuxProbe.pdf	# 下载网站上文件	saved
wget -r -p http://www.linuxprobe.com	# 递归下载网站内的所有页面数据及文件	....
ps -ef	# 查看进程状态	返回终端进程列表
top	# 动态查看系统运维状态	返回运维列表
pidof sshd	# 查询本机sshd 的pid	2156
kill 2156	# 关闭对应pid的进程	强制停止sshd服务
killall httpd	# 关闭所有httpd进程	    pidof httpd    killall httpd    pidof httpd    
ifconfig	# 获取网卡配置与网络状态等信息	    返回ip,ether参数等信息    
uname -a	# 用于查看系统内核与系统版本等信息	    Linux linuxprobe.com 3.10.0-123.el7.x86_64 #1 SMP Mon May 5 11:16:57 EDT 2017 x86_64 x86_64 x86_64 GRU/Linux    
cat /etc/redhat-release	# 查看系统详细信息	    Red Hat Enterprise Linux Server release 7.0 (Maipo)    
uptime	# 查看系统负载信息	    22:49:55 up 10 min, 2 users, load average: 0.01, 0.19, 0.18    
free -h	# 显示当前系统内存的使用量信息	    返回内存使用列表    
who	# 查看当前登入主机用户终端信息	    ....    
last	# 用于查看所有系统登录信息	    ....    
history	# 用于查看命令历史记录信息	    ....    
history -c	# 用于清空当前 用户命令历史记录信息	    ....    
sosreport	# 用于收集系统配置及架构信息并输出诊断档案	    ....    
pwd	# 显示用户当前所处的工作目录	    /etc    
cd /etc	# 用于切换工作路径	    /etc    
ls -al	# 用于显示目录中的文件信息	    ...    
ls -al	# 用于显示目录中的文件信息(包含隐藏文件)	    ...    
cat -n initial-setup-ks.cfg	# 用于查看纯文本文件，内容少的(包含行号)	    ...    
more initial-setup-ks.cfg	# 用于查看纯文本文件，内容多的	    ...    
head -n 20 initial-setup-ks.cfg	# 用于查看纯文本文件前N行	    ...    
tail -f /var/log/messages	# 用于查看查看纯文本文档的后N行或持续刷新内容	    ...    
cat anaconda-ks.cfg | tr [a-z] [A-Z]	# 用于替换文本文件中的字符	    ...    
wc -l /etc/passwd	# 用于统计指定文本的行数	    ...    
stat anaconda-ks.cfg	# 用于查看文件的具体存储信息和时间等信息	    ...    
cut -d: -f1 /etc/passwd	# 用于按“列”提取文本字符	    ...    
diff --brief diff_A.txt diff_B.txt	# 用于比较多个文本文件的差异(显示比较结果)	    ...    
diff -c diff_A.txt diff_B.txt	# 用于比较多个文本文件的差异(描述具体的不同)	    ...    
diff -c diff_A.txt diff_B.txt	# 用于比较多个文本文件的差异(描述具体的不同)	    ...    
touch -d "2017-05-04 15:44" anaconda-ks.cfg	# 用于创建空白文件或设置文件的时间(同时修改atime 与 mtime)	    ...    
mkdir linuxprobe	# 用于创建空白目录	    ...    
cp install.log x.log	# 用于复制文件或目录	    ...    
mv install.log x.log	# 用于剪切或重命名文件	    ...    
rm install.log	# 用于删除文件或目录	    ...    
dd if=/dev/zero of=560_file count=1 bs=560M	# 用于按照指定大小和个数的数据块来复制文件或转换文件	    ...    
file anaconda-ks.cfg	# 用于查看文件的类型	    ...    
tar -czvf etc.tar.gz /etc	# 用于对文件进行打包压缩或解压	    ...    
grep /sbin/nologin /etc/passwd	# 用于在文本中执行关键词搜索	    ...    
find /etc -name "host*" -print	# 用于按照指定条件来查找文件	    ...    ',0,'alvin',curdate());
insert into Content values(3031,37,'a',3,'{"href": "/command/index"}','命令行源','命令行源',0,'alvin',curdate());